
/* auto-generated by gen_syscalls.py, don't edit */

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall_macros.h>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_NET_IF_IPV6_ADDR_LOOKUP_BY_INDEX, net_if_ipv6_addr_lookup_by_index, int, const struct in6_addr *, addr)

K_SYSCALL_DECLARE4(K_SYSCALL_NET_IF_IPV6_ADDR_ADD_BY_INDEX, net_if_ipv6_addr_add_by_index, bool, int, index, struct in6_addr *, addr, enum net_addr_type, addr_type, u32_t, vlifetime)

K_SYSCALL_DECLARE2(K_SYSCALL_NET_IF_IPV6_ADDR_RM_BY_INDEX, net_if_ipv6_addr_rm_by_index, bool, int, index, const struct in6_addr *, addr)

K_SYSCALL_DECLARE1(K_SYSCALL_NET_IF_IPV4_ADDR_LOOKUP_BY_INDEX, net_if_ipv4_addr_lookup_by_index, int, const struct in_addr *, addr)

K_SYSCALL_DECLARE4(K_SYSCALL_NET_IF_IPV4_ADDR_ADD_BY_INDEX, net_if_ipv4_addr_add_by_index, bool, int, index, struct in_addr *, addr, enum net_addr_type, addr_type, u32_t, vlifetime)

K_SYSCALL_DECLARE2(K_SYSCALL_NET_IF_IPV4_ADDR_RM_BY_INDEX, net_if_ipv4_addr_rm_by_index, bool, int, index, const struct in_addr *, addr)

K_SYSCALL_DECLARE2(K_SYSCALL_NET_IF_IPV4_SET_NETMASK_BY_INDEX, net_if_ipv4_set_netmask_by_index, bool, int, index, const struct in_addr *, netmask)

K_SYSCALL_DECLARE2(K_SYSCALL_NET_IF_IPV4_SET_GW_BY_INDEX, net_if_ipv4_set_gw_by_index, bool, int, index, const struct in_addr *, gw)

#ifdef __cplusplus
}
#endif

#endif
