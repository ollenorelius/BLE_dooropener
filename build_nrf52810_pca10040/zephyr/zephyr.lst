
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003bf0 	.word	0x20003bf0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, stack_data_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	00005331 	.word	0x00005331
   8:	000133e9 	.word	0x000133e9
		if (fdtable[fd].obj == NULL) {
   c:	00005111 	.word	0x00005111
  10:	00005111 	.word	0x00005111
  14:	00005111 	.word	0x00005111
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00005111 	.word	0x00005111

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00005111 	.word	0x00005111
	errno = ENFILE;
  20:	00005111 	.word	0x00005111
	return -1;
  24:	00005111 	.word	0x00005111

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00005111 	.word	0x00005111
  2c:	000050d5 	.word	0x000050d5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00005111 	.word	0x00005111
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00005111 	.word	0x00005111
  38:	0000507d 	.word	0x0000507d
  3c:	000133d7 	.word	0x000133d7

00000040 <_irq_vector_table>:
  40:	00005141 00016081 00005141 00005141     AQ...`..AQ..AQ..
  50:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  60:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  70:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  80:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  90:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  a0:	00005141 00005141 00005141 00005141     AQ..AQ..AQ..AQ..
  b0:	00005141 00005141                       AQ..AQ..

Disassembly of section _TEXT_SECTION_NAME_2:

000000b8 <__aeabi_frsub>:
      b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
      bc:	e002      	b.n	c4 <__addsf3>
      be:	bf00      	nop

000000c0 <__aeabi_fsub>:
      c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000000c4 <__addsf3>:
      c4:	0042      	lsls	r2, r0, #1
      c6:	bf1f      	itttt	ne
      c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
      cc:	ea92 0f03 	teqne	r2, r3
      d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
      d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
      d8:	d06a      	beq.n	1b0 <CONFIG_HEAP_MEM_POOL_SIZE+0xb0>
      da:	ea4f 6212 	mov.w	r2, r2, lsr #24
      de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
      e2:	bfc1      	itttt	gt
      e4:	18d2      	addgt	r2, r2, r3
      e6:	4041      	eorgt	r1, r0
      e8:	4048      	eorgt	r0, r1
      ea:	4041      	eorgt	r1, r0
      ec:	bfb8      	it	lt
      ee:	425b      	neglt	r3, r3
      f0:	2b19      	cmp	r3, #25
      f2:	bf88      	it	hi
      f4:	4770      	bxhi	lr
      f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
      fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
      fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     102:	bf18      	it	ne
     104:	4240      	negne	r0, r0
     106:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     10a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     10e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     112:	bf18      	it	ne
     114:	4249      	negne	r1, r1
     116:	ea92 0f03 	teq	r2, r3
     11a:	d03f      	beq.n	19c <CONFIG_HEAP_MEM_POOL_SIZE+0x9c>
     11c:	f1a2 0201 	sub.w	r2, r2, #1
     120:	fa41 fc03 	asr.w	ip, r1, r3
     124:	eb10 000c 	adds.w	r0, r0, ip
     128:	f1c3 0320 	rsb	r3, r3, #32
     12c:	fa01 f103 	lsl.w	r1, r1, r3
     130:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     134:	d502      	bpl.n	13c <CONFIG_HEAP_MEM_POOL_SIZE+0x3c>
     136:	4249      	negs	r1, r1
     138:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     13c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     140:	d313      	bcc.n	16a <CONFIG_HEAP_MEM_POOL_SIZE+0x6a>
     142:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     146:	d306      	bcc.n	156 <CONFIG_HEAP_MEM_POOL_SIZE+0x56>
     148:	0840      	lsrs	r0, r0, #1
     14a:	ea4f 0131 	mov.w	r1, r1, rrx
     14e:	f102 0201 	add.w	r2, r2, #1
     152:	2afe      	cmp	r2, #254	; 0xfe
     154:	d251      	bcs.n	1fa <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3a>
     156:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	ea40 0003 	orr.w	r0, r0, r3
     168:	4770      	bx	lr
     16a:	0049      	lsls	r1, r1, #1
     16c:	eb40 0000 	adc.w	r0, r0, r0
     170:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
     174:	f1a2 0201 	sub.w	r2, r2, #1
     178:	d1ed      	bne.n	156 <CONFIG_HEAP_MEM_POOL_SIZE+0x56>
     17a:	fab0 fc80 	clz	ip, r0
     17e:	f1ac 0c08 	sub.w	ip, ip, #8
     182:	ebb2 020c 	subs.w	r2, r2, ip
     186:	fa00 f00c 	lsl.w	r0, r0, ip
     18a:	bfaa      	itet	ge
     18c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     190:	4252      	neglt	r2, r2
     192:	4318      	orrge	r0, r3
     194:	bfbc      	itt	lt
     196:	40d0      	lsrlt	r0, r2
     198:	4318      	orrlt	r0, r3
     19a:	4770      	bx	lr
     19c:	f092 0f00 	teq	r2, #0
     1a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1a4:	bf06      	itte	eq
     1a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1aa:	3201      	addeq	r2, #1
     1ac:	3b01      	subne	r3, #1
     1ae:	e7b5      	b.n	11c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>
     1b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     1b8:	bf18      	it	ne
     1ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1be:	d021      	beq.n	204 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x4>
     1c0:	ea92 0f03 	teq	r2, r3
     1c4:	d004      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	bf08      	it	eq
     1cc:	4608      	moveq	r0, r1
     1ce:	4770      	bx	lr
     1d0:	ea90 0f01 	teq	r0, r1
     1d4:	bf1c      	itt	ne
     1d6:	2000      	movne	r0, #0
     1d8:	4770      	bxne	lr
     1da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     1de:	d104      	bne.n	1ea <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2a>
     1e0:	0040      	lsls	r0, r0, #1
     1e2:	bf28      	it	cs
     1e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     1e8:	4770      	bx	lr
     1ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     1ee:	bf3c      	itt	cc
     1f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     1f4:	4770      	bxcc	lr
     1f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     1fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     1fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     202:	4770      	bx	lr
     204:	ea7f 6222 	mvns.w	r2, r2, asr #24
     208:	bf16      	itet	ne
     20a:	4608      	movne	r0, r1
     20c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     210:	4601      	movne	r1, r0
     212:	0242      	lsls	r2, r0, #9
     214:	bf06      	itte	eq
     216:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     21a:	ea90 0f01 	teqeq	r0, r1
     21e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     222:	4770      	bx	lr

00000224 <__aeabi_ui2f>:
     224:	f04f 0300 	mov.w	r3, #0
     228:	e004      	b.n	234 <__aeabi_i2f+0x8>
     22a:	bf00      	nop

0000022c <__aeabi_i2f>:
     22c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     230:	bf48      	it	mi
     232:	4240      	negmi	r0, r0
     234:	ea5f 0c00 	movs.w	ip, r0
     238:	bf08      	it	eq
     23a:	4770      	bxeq	lr
     23c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     240:	4601      	mov	r1, r0
     242:	f04f 0000 	mov.w	r0, #0
     246:	e01c      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>

00000248 <__aeabi_ul2f>:
     248:	ea50 0201 	orrs.w	r2, r0, r1
     24c:	bf08      	it	eq
     24e:	4770      	bxeq	lr
     250:	f04f 0300 	mov.w	r3, #0
     254:	e00a      	b.n	26c <__aeabi_l2f+0x14>
     256:	bf00      	nop

00000258 <__aeabi_l2f>:
     258:	ea50 0201 	orrs.w	r2, r0, r1
     25c:	bf08      	it	eq
     25e:	4770      	bxeq	lr
     260:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     264:	d502      	bpl.n	26c <__aeabi_l2f+0x14>
     266:	4240      	negs	r0, r0
     268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     26c:	ea5f 0c01 	movs.w	ip, r1
     270:	bf02      	ittt	eq
     272:	4684      	moveq	ip, r0
     274:	4601      	moveq	r1, r0
     276:	2000      	moveq	r0, #0
     278:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     27c:	bf08      	it	eq
     27e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     282:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     286:	fabc f28c 	clz	r2, ip
     28a:	3a08      	subs	r2, #8
     28c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     290:	db10      	blt.n	2b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     292:	fa01 fc02 	lsl.w	ip, r1, r2
     296:	4463      	add	r3, ip
     298:	fa00 fc02 	lsl.w	ip, r0, r2
     29c:	f1c2 0220 	rsb	r2, r2, #32
     2a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2a4:	fa20 f202 	lsr.w	r2, r0, r2
     2a8:	eb43 0002 	adc.w	r0, r3, r2
     2ac:	bf08      	it	eq
     2ae:	f020 0001 	biceq.w	r0, r0, #1
     2b2:	4770      	bx	lr
     2b4:	f102 0220 	add.w	r2, r2, #32
     2b8:	fa01 fc02 	lsl.w	ip, r1, r2
     2bc:	f1c2 0220 	rsb	r2, r2, #32
     2c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     2c4:	fa21 f202 	lsr.w	r2, r1, r2
     2c8:	eb43 0002 	adc.w	r0, r3, r2
     2cc:	bf08      	it	eq
     2ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     2d2:	4770      	bx	lr

000002d4 <__aeabi_fmul>:
     2d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
     2d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     2dc:	bf1e      	ittt	ne
     2de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     2e2:	ea92 0f0c 	teqne	r2, ip
     2e6:	ea93 0f0c 	teqne	r3, ip
     2ea:	d06f      	beq.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     2ec:	441a      	add	r2, r3
     2ee:	ea80 0c01 	eor.w	ip, r0, r1
     2f2:	0240      	lsls	r0, r0, #9
     2f4:	bf18      	it	ne
     2f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     2fa:	d01e      	beq.n	33a <__aeabi_fmul+0x66>
     2fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     300:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     304:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     308:	fba0 3101 	umull	r3, r1, r0, r1
     30c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     310:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     314:	bf3e      	ittt	cc
     316:	0049      	lslcc	r1, r1, #1
     318:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     31c:	005b      	lslcc	r3, r3, #1
     31e:	ea40 0001 	orr.w	r0, r0, r1
     322:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     326:	2afd      	cmp	r2, #253	; 0xfd
     328:	d81d      	bhi.n	366 <CONFIG_BT_DEVICE_APPEARANCE+0x25>
     32a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     32e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     332:	bf08      	it	eq
     334:	f020 0001 	biceq.w	r0, r0, #1
     338:	4770      	bx	lr
     33a:	f090 0f00 	teq	r0, #0
     33e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     342:	bf08      	it	eq
     344:	0249      	lsleq	r1, r1, #9
     346:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     34a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     34e:	3a7f      	subs	r2, #127	; 0x7f
     350:	bfc2      	ittt	gt
     352:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     356:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     35a:	4770      	bxgt	lr
     35c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     360:	f04f 0300 	mov.w	r3, #0
     364:	3a01      	subs	r2, #1
     366:	dc5d      	bgt.n	424 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x24>
     368:	f112 0f19 	cmn.w	r2, #25
     36c:	bfdc      	itt	le
     36e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     372:	4770      	bxle	lr
     374:	f1c2 0200 	rsb	r2, r2, #0
     378:	0041      	lsls	r1, r0, #1
     37a:	fa21 f102 	lsr.w	r1, r1, r2
     37e:	f1c2 0220 	rsb	r2, r2, #32
     382:	fa00 fc02 	lsl.w	ip, r0, r2
     386:	ea5f 0031 	movs.w	r0, r1, rrx
     38a:	f140 0000 	adc.w	r0, r0, #0
     38e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     392:	bf08      	it	eq
     394:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     398:	4770      	bx	lr
     39a:	f092 0f00 	teq	r2, #0
     39e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3a2:	bf02      	ittt	eq
     3a4:	0040      	lsleq	r0, r0, #1
     3a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3aa:	3a01      	subeq	r2, #1
     3ac:	d0f9      	beq.n	3a2 <CONFIG_BT_DEVICE_APPEARANCE+0x61>
     3ae:	ea40 000c 	orr.w	r0, r0, ip
     3b2:	f093 0f00 	teq	r3, #0
     3b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     3ba:	bf02      	ittt	eq
     3bc:	0049      	lsleq	r1, r1, #1
     3be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     3c2:	3b01      	subeq	r3, #1
     3c4:	d0f9      	beq.n	3ba <CONFIG_BT_DEVICE_APPEARANCE+0x79>
     3c6:	ea41 010c 	orr.w	r1, r1, ip
     3ca:	e78f      	b.n	2ec <__aeabi_fmul+0x18>
     3cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     3d0:	ea92 0f0c 	teq	r2, ip
     3d4:	bf18      	it	ne
     3d6:	ea93 0f0c 	teqne	r3, ip
     3da:	d00a      	beq.n	3f2 <CONFIG_BT_DEVICE_APPEARANCE+0xb1>
     3dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     3e0:	bf18      	it	ne
     3e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     3e6:	d1d8      	bne.n	39a <CONFIG_BT_DEVICE_APPEARANCE+0x59>
     3e8:	ea80 0001 	eor.w	r0, r0, r1
     3ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     3f0:	4770      	bx	lr
     3f2:	f090 0f00 	teq	r0, #0
     3f6:	bf17      	itett	ne
     3f8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     3fc:	4608      	moveq	r0, r1
     3fe:	f091 0f00 	teqne	r1, #0
     402:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     406:	d014      	beq.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     408:	ea92 0f0c 	teq	r2, ip
     40c:	d101      	bne.n	412 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x12>
     40e:	0242      	lsls	r2, r0, #9
     410:	d10f      	bne.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     412:	ea93 0f0c 	teq	r3, ip
     416:	d103      	bne.n	420 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x20>
     418:	024b      	lsls	r3, r1, #9
     41a:	bf18      	it	ne
     41c:	4608      	movne	r0, r1
     41e:	d108      	bne.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     420:	ea80 0001 	eor.w	r0, r0, r1
     424:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     428:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     42c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     430:	4770      	bx	lr
     432:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     436:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     43a:	4770      	bx	lr

0000043c <__aeabi_fdiv>:
     43c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     440:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     444:	bf1e      	ittt	ne
     446:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     44a:	ea92 0f0c 	teqne	r2, ip
     44e:	ea93 0f0c 	teqne	r3, ip
     452:	d069      	beq.n	528 <__aeabi_fdiv+0xec>
     454:	eba2 0203 	sub.w	r2, r2, r3
     458:	ea80 0c01 	eor.w	ip, r0, r1
     45c:	0249      	lsls	r1, r1, #9
     45e:	ea4f 2040 	mov.w	r0, r0, lsl #9
     462:	d037      	beq.n	4d4 <__aeabi_fdiv+0x98>
     464:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     468:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     46c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     470:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     474:	428b      	cmp	r3, r1
     476:	bf38      	it	cc
     478:	005b      	lslcc	r3, r3, #1
     47a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     47e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     482:	428b      	cmp	r3, r1
     484:	bf24      	itt	cs
     486:	1a5b      	subcs	r3, r3, r1
     488:	ea40 000c 	orrcs.w	r0, r0, ip
     48c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     490:	bf24      	itt	cs
     492:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     496:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     49a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     49e:	bf24      	itt	cs
     4a0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4a8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4ac:	bf24      	itt	cs
     4ae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4b2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4b6:	011b      	lsls	r3, r3, #4
     4b8:	bf18      	it	ne
     4ba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     4be:	d1e0      	bne.n	482 <__aeabi_fdiv+0x46>
     4c0:	2afd      	cmp	r2, #253	; 0xfd
     4c2:	f63f af50 	bhi.w	366 <CONFIG_BT_DEVICE_APPEARANCE+0x25>
     4c6:	428b      	cmp	r3, r1
     4c8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     4cc:	bf08      	it	eq
     4ce:	f020 0001 	biceq.w	r0, r0, #1
     4d2:	4770      	bx	lr
     4d4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     4d8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     4dc:	327f      	adds	r2, #127	; 0x7f
     4de:	bfc2      	ittt	gt
     4e0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     4e4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     4e8:	4770      	bxgt	lr
     4ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4ee:	f04f 0300 	mov.w	r3, #0
     4f2:	3a01      	subs	r2, #1
     4f4:	e737      	b.n	366 <CONFIG_BT_DEVICE_APPEARANCE+0x25>
     4f6:	f092 0f00 	teq	r2, #0
     4fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     4fe:	bf02      	ittt	eq
     500:	0040      	lsleq	r0, r0, #1
     502:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     506:	3a01      	subeq	r2, #1
     508:	d0f9      	beq.n	4fe <__aeabi_fdiv+0xc2>
     50a:	ea40 000c 	orr.w	r0, r0, ip
     50e:	f093 0f00 	teq	r3, #0
     512:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     516:	bf02      	ittt	eq
     518:	0049      	lsleq	r1, r1, #1
     51a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     51e:	3b01      	subeq	r3, #1
     520:	d0f9      	beq.n	516 <__aeabi_fdiv+0xda>
     522:	ea41 010c 	orr.w	r1, r1, ip
     526:	e795      	b.n	454 <__aeabi_fdiv+0x18>
     528:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     52c:	ea92 0f0c 	teq	r2, ip
     530:	d108      	bne.n	544 <__aeabi_fdiv+0x108>
     532:	0242      	lsls	r2, r0, #9
     534:	f47f af7d 	bne.w	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     538:	ea93 0f0c 	teq	r3, ip
     53c:	f47f af70 	bne.w	420 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x20>
     540:	4608      	mov	r0, r1
     542:	e776      	b.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     544:	ea93 0f0c 	teq	r3, ip
     548:	d104      	bne.n	554 <__aeabi_fdiv+0x118>
     54a:	024b      	lsls	r3, r1, #9
     54c:	f43f af4c 	beq.w	3e8 <CONFIG_BT_DEVICE_APPEARANCE+0xa7>
     550:	4608      	mov	r0, r1
     552:	e76e      	b.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     554:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     558:	bf18      	it	ne
     55a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     55e:	d1ca      	bne.n	4f6 <__aeabi_fdiv+0xba>
     560:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     564:	f47f af5c 	bne.w	420 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x20>
     568:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     56c:	f47f af3c 	bne.w	3e8 <CONFIG_BT_DEVICE_APPEARANCE+0xa7>
     570:	e75f      	b.n	432 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x32>
     572:	bf00      	nop

00000574 <__aeabi_f2iz>:
     574:	ea4f 0240 	mov.w	r2, r0, lsl #1
     578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     57c:	d30f      	bcc.n	59e <__aeabi_f2iz+0x2a>
     57e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     586:	d90d      	bls.n	5a4 <__aeabi_f2iz+0x30>
     588:	ea4f 2300 	mov.w	r3, r0, lsl #8
     58c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     590:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     594:	fa23 f002 	lsr.w	r0, r3, r2
     598:	bf18      	it	ne
     59a:	4240      	negne	r0, r0
     59c:	4770      	bx	lr
     59e:	f04f 0000 	mov.w	r0, #0
     5a2:	4770      	bx	lr
     5a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5a8:	d101      	bne.n	5ae <__aeabi_f2iz+0x3a>
     5aa:	0242      	lsls	r2, r0, #9
     5ac:	d105      	bne.n	5ba <__aeabi_f2iz+0x46>
     5ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     5b2:	bf08      	it	eq
     5b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     5b8:	4770      	bx	lr
     5ba:	f04f 0000 	mov.w	r0, #0
     5be:	4770      	bx	lr

000005c0 <__aeabi_f2uiz>:
     5c0:	0042      	lsls	r2, r0, #1
     5c2:	d20e      	bcs.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     5c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     5c8:	d30b      	bcc.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     5ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
     5ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     5d2:	d409      	bmi.n	5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>
     5d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
     5d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     5dc:	fa23 f002 	lsr.w	r0, r3, r2
     5e0:	4770      	bx	lr
     5e2:	f04f 0000 	mov.w	r0, #0
     5e6:	4770      	bx	lr
     5e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5ec:	d101      	bne.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>
     5ee:	0242      	lsls	r2, r0, #9
     5f0:	d102      	bne.n	5f8 <CONFIG_BT_CTLR_COMPANY_ID+0x7>
     5f2:	f04f 30ff 	mov.w	r0, #4294967295
     5f6:	4770      	bx	lr
     5f8:	f04f 0000 	mov.w	r0, #0
     5fc:	4770      	bx	lr
     5fe:	bf00      	nop

00000600 <__aeabi_ldivmod>:
     600:	b97b      	cbnz	r3, 622 <__aeabi_ldivmod+0x22>
     602:	b972      	cbnz	r2, 622 <__aeabi_ldivmod+0x22>
     604:	2900      	cmp	r1, #0
     606:	bfbe      	ittt	lt
     608:	2000      	movlt	r0, #0
     60a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     60e:	e006      	blt.n	61e <__aeabi_ldivmod+0x1e>
     610:	bf08      	it	eq
     612:	2800      	cmpeq	r0, #0
     614:	bf1c      	itt	ne
     616:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     61a:	f04f 30ff 	movne.w	r0, #4294967295
     61e:	f000 b9bd 	b.w	99c <__aeabi_idiv0>
     622:	f1ad 0c08 	sub.w	ip, sp, #8
     626:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     62a:	2900      	cmp	r1, #0
     62c:	db09      	blt.n	642 <__aeabi_ldivmod+0x42>
     62e:	2b00      	cmp	r3, #0
     630:	db1a      	blt.n	668 <__aeabi_ldivmod+0x68>
     632:	f000 f84d 	bl	6d0 <__udivmoddi4>
     636:	f8dd e004 	ldr.w	lr, [sp, #4]
     63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     63e:	b004      	add	sp, #16
     640:	4770      	bx	lr
     642:	4240      	negs	r0, r0
     644:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     648:	2b00      	cmp	r3, #0
     64a:	db1b      	blt.n	684 <__aeabi_ldivmod+0x84>
     64c:	f000 f840 	bl	6d0 <__udivmoddi4>
     650:	f8dd e004 	ldr.w	lr, [sp, #4]
     654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     658:	b004      	add	sp, #16
     65a:	4240      	negs	r0, r0
     65c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     660:	4252      	negs	r2, r2
     662:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     666:	4770      	bx	lr
     668:	4252      	negs	r2, r2
     66a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     66e:	f000 f82f 	bl	6d0 <__udivmoddi4>
     672:	f8dd e004 	ldr.w	lr, [sp, #4]
     676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     67a:	b004      	add	sp, #16
     67c:	4240      	negs	r0, r0
     67e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     682:	4770      	bx	lr
     684:	4252      	negs	r2, r2
     686:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     68a:	f000 f821 	bl	6d0 <__udivmoddi4>
     68e:	f8dd e004 	ldr.w	lr, [sp, #4]
     692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     696:	b004      	add	sp, #16
     698:	4252      	negs	r2, r2
     69a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     69e:	4770      	bx	lr

000006a0 <__aeabi_uldivmod>:
     6a0:	b953      	cbnz	r3, 6b8 <__aeabi_uldivmod+0x18>
     6a2:	b94a      	cbnz	r2, 6b8 <__aeabi_uldivmod+0x18>
     6a4:	2900      	cmp	r1, #0
     6a6:	bf08      	it	eq
     6a8:	2800      	cmpeq	r0, #0
     6aa:	bf1c      	itt	ne
     6ac:	f04f 31ff 	movne.w	r1, #4294967295
     6b0:	f04f 30ff 	movne.w	r0, #4294967295
     6b4:	f000 b972 	b.w	99c <__aeabi_idiv0>
     6b8:	f1ad 0c08 	sub.w	ip, sp, #8
     6bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     6c0:	f000 f806 	bl	6d0 <__udivmoddi4>
     6c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6cc:	b004      	add	sp, #16
     6ce:	4770      	bx	lr

000006d0 <__udivmoddi4>:
     6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6d4:	9e08      	ldr	r6, [sp, #32]
     6d6:	4604      	mov	r4, r0
     6d8:	4688      	mov	r8, r1
     6da:	2b00      	cmp	r3, #0
     6dc:	d14b      	bne.n	776 <__udivmoddi4+0xa6>
     6de:	428a      	cmp	r2, r1
     6e0:	4615      	mov	r5, r2
     6e2:	d967      	bls.n	7b4 <__udivmoddi4+0xe4>
     6e4:	fab2 f282 	clz	r2, r2
     6e8:	b14a      	cbz	r2, 6fe <__udivmoddi4+0x2e>
     6ea:	f1c2 0720 	rsb	r7, r2, #32
     6ee:	fa01 f302 	lsl.w	r3, r1, r2
     6f2:	fa20 f707 	lsr.w	r7, r0, r7
     6f6:	4095      	lsls	r5, r2
     6f8:	ea47 0803 	orr.w	r8, r7, r3
     6fc:	4094      	lsls	r4, r2
     6fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     702:	0c23      	lsrs	r3, r4, #16
     704:	fbb8 f7fe 	udiv	r7, r8, lr
     708:	fa1f fc85 	uxth.w	ip, r5
     70c:	fb0e 8817 	mls	r8, lr, r7, r8
     710:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     714:	fb07 f10c 	mul.w	r1, r7, ip
     718:	4299      	cmp	r1, r3
     71a:	d909      	bls.n	730 <__udivmoddi4+0x60>
     71c:	18eb      	adds	r3, r5, r3
     71e:	f107 30ff 	add.w	r0, r7, #4294967295
     722:	f080 811b 	bcs.w	95c <CONFIG_ISR_STACK_SIZE+0x15c>
     726:	4299      	cmp	r1, r3
     728:	f240 8118 	bls.w	95c <CONFIG_ISR_STACK_SIZE+0x15c>
     72c:	3f02      	subs	r7, #2
     72e:	442b      	add	r3, r5
     730:	1a5b      	subs	r3, r3, r1
     732:	b2a4      	uxth	r4, r4
     734:	fbb3 f0fe 	udiv	r0, r3, lr
     738:	fb0e 3310 	mls	r3, lr, r0, r3
     73c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     740:	fb00 fc0c 	mul.w	ip, r0, ip
     744:	45a4      	cmp	ip, r4
     746:	d909      	bls.n	75c <__udivmoddi4+0x8c>
     748:	192c      	adds	r4, r5, r4
     74a:	f100 33ff 	add.w	r3, r0, #4294967295
     74e:	f080 8107 	bcs.w	960 <CONFIG_ISR_STACK_SIZE+0x160>
     752:	45a4      	cmp	ip, r4
     754:	f240 8104 	bls.w	960 <CONFIG_ISR_STACK_SIZE+0x160>
     758:	3802      	subs	r0, #2
     75a:	442c      	add	r4, r5
     75c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     760:	eba4 040c 	sub.w	r4, r4, ip
     764:	2700      	movs	r7, #0
     766:	b11e      	cbz	r6, 770 <__udivmoddi4+0xa0>
     768:	40d4      	lsrs	r4, r2
     76a:	2300      	movs	r3, #0
     76c:	e9c6 4300 	strd	r4, r3, [r6]
     770:	4639      	mov	r1, r7
     772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     776:	428b      	cmp	r3, r1
     778:	d909      	bls.n	78e <__udivmoddi4+0xbe>
     77a:	2e00      	cmp	r6, #0
     77c:	f000 80eb 	beq.w	956 <CONFIG_ISR_STACK_SIZE+0x156>
     780:	2700      	movs	r7, #0
     782:	e9c6 0100 	strd	r0, r1, [r6]
     786:	4638      	mov	r0, r7
     788:	4639      	mov	r1, r7
     78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     78e:	fab3 f783 	clz	r7, r3
     792:	2f00      	cmp	r7, #0
     794:	d147      	bne.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     796:	428b      	cmp	r3, r1
     798:	d302      	bcc.n	7a0 <__udivmoddi4+0xd0>
     79a:	4282      	cmp	r2, r0
     79c:	f200 80fa 	bhi.w	994 <CONFIG_ISR_STACK_SIZE+0x194>
     7a0:	1a84      	subs	r4, r0, r2
     7a2:	eb61 0303 	sbc.w	r3, r1, r3
     7a6:	2001      	movs	r0, #1
     7a8:	4698      	mov	r8, r3
     7aa:	2e00      	cmp	r6, #0
     7ac:	d0e0      	beq.n	770 <__udivmoddi4+0xa0>
     7ae:	e9c6 4800 	strd	r4, r8, [r6]
     7b2:	e7dd      	b.n	770 <__udivmoddi4+0xa0>
     7b4:	b902      	cbnz	r2, 7b8 <__udivmoddi4+0xe8>
     7b6:	deff      	udf	#255	; 0xff
     7b8:	fab2 f282 	clz	r2, r2
     7bc:	2a00      	cmp	r2, #0
     7be:	f040 808f 	bne.w	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
     7c2:	1b49      	subs	r1, r1, r5
     7c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     7c8:	fa1f f885 	uxth.w	r8, r5
     7cc:	2701      	movs	r7, #1
     7ce:	fbb1 fcfe 	udiv	ip, r1, lr
     7d2:	0c23      	lsrs	r3, r4, #16
     7d4:	fb0e 111c 	mls	r1, lr, ip, r1
     7d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     7dc:	fb08 f10c 	mul.w	r1, r8, ip
     7e0:	4299      	cmp	r1, r3
     7e2:	d907      	bls.n	7f4 <__udivmoddi4+0x124>
     7e4:	18eb      	adds	r3, r5, r3
     7e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     7ea:	d202      	bcs.n	7f2 <__udivmoddi4+0x122>
     7ec:	4299      	cmp	r1, r3
     7ee:	f200 80cd 	bhi.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     7f2:	4684      	mov	ip, r0
     7f4:	1a59      	subs	r1, r3, r1
     7f6:	b2a3      	uxth	r3, r4
     7f8:	fbb1 f0fe 	udiv	r0, r1, lr
     7fc:	fb0e 1410 	mls	r4, lr, r0, r1
     800:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     804:	fb08 f800 	mul.w	r8, r8, r0
     808:	45a0      	cmp	r8, r4
     80a:	d907      	bls.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     80c:	192c      	adds	r4, r5, r4
     80e:	f100 33ff 	add.w	r3, r0, #4294967295
     812:	d202      	bcs.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     814:	45a0      	cmp	r8, r4
     816:	f200 80b6 	bhi.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     81a:	4618      	mov	r0, r3
     81c:	eba4 0408 	sub.w	r4, r4, r8
     820:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     824:	e79f      	b.n	766 <__udivmoddi4+0x96>
     826:	f1c7 0c20 	rsb	ip, r7, #32
     82a:	40bb      	lsls	r3, r7
     82c:	fa22 fe0c 	lsr.w	lr, r2, ip
     830:	ea4e 0e03 	orr.w	lr, lr, r3
     834:	fa01 f407 	lsl.w	r4, r1, r7
     838:	fa20 f50c 	lsr.w	r5, r0, ip
     83c:	fa21 f30c 	lsr.w	r3, r1, ip
     840:	ea4f 481e 	mov.w	r8, lr, lsr #16
     844:	4325      	orrs	r5, r4
     846:	fbb3 f9f8 	udiv	r9, r3, r8
     84a:	0c2c      	lsrs	r4, r5, #16
     84c:	fb08 3319 	mls	r3, r8, r9, r3
     850:	fa1f fa8e 	uxth.w	sl, lr
     854:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     858:	fb09 f40a 	mul.w	r4, r9, sl
     85c:	429c      	cmp	r4, r3
     85e:	fa02 f207 	lsl.w	r2, r2, r7
     862:	fa00 f107 	lsl.w	r1, r0, r7
     866:	d90b      	bls.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     868:	eb1e 0303 	adds.w	r3, lr, r3
     86c:	f109 30ff 	add.w	r0, r9, #4294967295
     870:	f080 8087 	bcs.w	982 <CONFIG_ISR_STACK_SIZE+0x182>
     874:	429c      	cmp	r4, r3
     876:	f240 8084 	bls.w	982 <CONFIG_ISR_STACK_SIZE+0x182>
     87a:	f1a9 0902 	sub.w	r9, r9, #2
     87e:	4473      	add	r3, lr
     880:	1b1b      	subs	r3, r3, r4
     882:	b2ad      	uxth	r5, r5
     884:	fbb3 f0f8 	udiv	r0, r3, r8
     888:	fb08 3310 	mls	r3, r8, r0, r3
     88c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     890:	fb00 fa0a 	mul.w	sl, r0, sl
     894:	45a2      	cmp	sl, r4
     896:	d908      	bls.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     898:	eb1e 0404 	adds.w	r4, lr, r4
     89c:	f100 33ff 	add.w	r3, r0, #4294967295
     8a0:	d26b      	bcs.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
     8a2:	45a2      	cmp	sl, r4
     8a4:	d969      	bls.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
     8a6:	3802      	subs	r0, #2
     8a8:	4474      	add	r4, lr
     8aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     8ae:	fba0 8902 	umull	r8, r9, r0, r2
     8b2:	eba4 040a 	sub.w	r4, r4, sl
     8b6:	454c      	cmp	r4, r9
     8b8:	46c2      	mov	sl, r8
     8ba:	464b      	mov	r3, r9
     8bc:	d354      	bcc.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
     8be:	d051      	beq.n	964 <CONFIG_ISR_STACK_SIZE+0x164>
     8c0:	2e00      	cmp	r6, #0
     8c2:	d069      	beq.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     8c4:	ebb1 050a 	subs.w	r5, r1, sl
     8c8:	eb64 0403 	sbc.w	r4, r4, r3
     8cc:	fa04 fc0c 	lsl.w	ip, r4, ip
     8d0:	40fd      	lsrs	r5, r7
     8d2:	40fc      	lsrs	r4, r7
     8d4:	ea4c 0505 	orr.w	r5, ip, r5
     8d8:	e9c6 5400 	strd	r5, r4, [r6]
     8dc:	2700      	movs	r7, #0
     8de:	e747      	b.n	770 <__udivmoddi4+0xa0>
     8e0:	f1c2 0320 	rsb	r3, r2, #32
     8e4:	fa20 f703 	lsr.w	r7, r0, r3
     8e8:	4095      	lsls	r5, r2
     8ea:	fa01 f002 	lsl.w	r0, r1, r2
     8ee:	fa21 f303 	lsr.w	r3, r1, r3
     8f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     8f6:	4338      	orrs	r0, r7
     8f8:	0c01      	lsrs	r1, r0, #16
     8fa:	fbb3 f7fe 	udiv	r7, r3, lr
     8fe:	fa1f f885 	uxth.w	r8, r5
     902:	fb0e 3317 	mls	r3, lr, r7, r3
     906:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     90a:	fb07 f308 	mul.w	r3, r7, r8
     90e:	428b      	cmp	r3, r1
     910:	fa04 f402 	lsl.w	r4, r4, r2
     914:	d907      	bls.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
     916:	1869      	adds	r1, r5, r1
     918:	f107 3cff 	add.w	ip, r7, #4294967295
     91c:	d22f      	bcs.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     91e:	428b      	cmp	r3, r1
     920:	d92d      	bls.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     922:	3f02      	subs	r7, #2
     924:	4429      	add	r1, r5
     926:	1acb      	subs	r3, r1, r3
     928:	b281      	uxth	r1, r0
     92a:	fbb3 f0fe 	udiv	r0, r3, lr
     92e:	fb0e 3310 	mls	r3, lr, r0, r3
     932:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     936:	fb00 f308 	mul.w	r3, r0, r8
     93a:	428b      	cmp	r3, r1
     93c:	d907      	bls.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
     93e:	1869      	adds	r1, r5, r1
     940:	f100 3cff 	add.w	ip, r0, #4294967295
     944:	d217      	bcs.n	976 <CONFIG_ISR_STACK_SIZE+0x176>
     946:	428b      	cmp	r3, r1
     948:	d915      	bls.n	976 <CONFIG_ISR_STACK_SIZE+0x176>
     94a:	3802      	subs	r0, #2
     94c:	4429      	add	r1, r5
     94e:	1ac9      	subs	r1, r1, r3
     950:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     954:	e73b      	b.n	7ce <__udivmoddi4+0xfe>
     956:	4637      	mov	r7, r6
     958:	4630      	mov	r0, r6
     95a:	e709      	b.n	770 <__udivmoddi4+0xa0>
     95c:	4607      	mov	r7, r0
     95e:	e6e7      	b.n	730 <__udivmoddi4+0x60>
     960:	4618      	mov	r0, r3
     962:	e6fb      	b.n	75c <__udivmoddi4+0x8c>
     964:	4541      	cmp	r1, r8
     966:	d2ab      	bcs.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     968:	ebb8 0a02 	subs.w	sl, r8, r2
     96c:	eb69 020e 	sbc.w	r2, r9, lr
     970:	3801      	subs	r0, #1
     972:	4613      	mov	r3, r2
     974:	e7a4      	b.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     976:	4660      	mov	r0, ip
     978:	e7e9      	b.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
     97a:	4618      	mov	r0, r3
     97c:	e795      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     97e:	4667      	mov	r7, ip
     980:	e7d1      	b.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
     982:	4681      	mov	r9, r0
     984:	e77c      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     986:	3802      	subs	r0, #2
     988:	442c      	add	r4, r5
     98a:	e747      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     98c:	f1ac 0c02 	sub.w	ip, ip, #2
     990:	442b      	add	r3, r5
     992:	e72f      	b.n	7f4 <__udivmoddi4+0x124>
     994:	4638      	mov	r0, r7
     996:	e708      	b.n	7aa <__udivmoddi4+0xda>
     998:	4637      	mov	r7, r6
     99a:	e6e9      	b.n	770 <__udivmoddi4+0xa0>

0000099c <__aeabi_idiv0>:
     99c:	4770      	bx	lr
     99e:	bf00      	nop

000009a0 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     9a4:	4d57      	ldr	r5, [pc, #348]	; (b04 <hci_init+0x164>)
     9a6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
     9aa:	6899      	ldr	r1, [r3, #8]
     9ac:	f011 0101 	ands.w	r1, r1, #1
{
     9b0:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     9b2:	d122      	bne.n	9fa <hci_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     9b4:	aa01      	add	r2, sp, #4
     9b6:	f640 4003 	movw	r0, #3075	; 0xc03
     9ba:	f005 fa39 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     9be:	4604      	mov	r4, r0
     9c0:	2800      	cmp	r0, #0
     9c2:	f040 809b 	bne.w	afc <hci_init+0x15c>
		hci_reset_complete(rsp);
     9c6:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     9c8:	689b      	ldr	r3, [r3, #8]
	if (status) {
     9ca:	781b      	ldrb	r3, [r3, #0]
     9cc:	b993      	cbnz	r3, 9f4 <hci_init+0x54>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     9ce:	f3bf 8f5b 	dmb	ish
     9d2:	462b      	mov	r3, r5
     9d4:	f853 2f70 	ldr.w	r2, [r3, #112]!
     9d8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     9dc:	f002 020d 	and.w	r2, r2, #13
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     9e0:	f3bf 8f5b 	dmb	ish
     9e4:	e853 1f00 	ldrex	r1, [r3]
     9e8:	e843 2000 	strex	r0, r2, [r3]
     9ec:	2800      	cmp	r0, #0
     9ee:	d1f9      	bne.n	9e4 <hci_init+0x44>
     9f0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     9f4:	9801      	ldr	r0, [sp, #4]
     9f6:	f00f fab7 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     9fa:	aa01      	add	r2, sp, #4
     9fc:	2100      	movs	r1, #0
     9fe:	f241 0003 	movw	r0, #4099	; 0x1003
     a02:	f005 fa15 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     a06:	4604      	mov	r4, r0
     a08:	2800      	cmp	r0, #0
     a0a:	d177      	bne.n	afc <hci_init+0x15c>
	read_local_features_complete(rsp);
     a0c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     a0e:	483e      	ldr	r0, [pc, #248]	; (b08 <hci_init+0x168>)
     a10:	6899      	ldr	r1, [r3, #8]
     a12:	2208      	movs	r2, #8
     a14:	3101      	adds	r1, #1
     a16:	f012 fd25 	bl	13464 <memcpy>
	net_buf_unref(rsp);
     a1a:	9801      	ldr	r0, [sp, #4]
     a1c:	f00f faa4 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     a20:	4621      	mov	r1, r4
     a22:	aa01      	add	r2, sp, #4
     a24:	f241 0001 	movw	r0, #4097	; 0x1001
     a28:	f005 fa02 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     a2c:	4604      	mov	r4, r0
     a2e:	2800      	cmp	r0, #0
     a30:	d164      	bne.n	afc <hci_init+0x15c>
	read_local_ver_complete(rsp);
     a32:	9801      	ldr	r0, [sp, #4]
     a34:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     a36:	785a      	ldrb	r2, [r3, #1]
     a38:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     a3a:	78d9      	ldrb	r1, [r3, #3]
     a3c:	789a      	ldrb	r2, [r3, #2]
     a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     a42:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
     a44:	791a      	ldrb	r2, [r3, #4]
     a46:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     a48:	7a19      	ldrb	r1, [r3, #8]
     a4a:	79da      	ldrb	r2, [r3, #7]
     a4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     a50:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     a52:	795a      	ldrb	r2, [r3, #5]
     a54:	799b      	ldrb	r3, [r3, #6]
     a56:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     a5a:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
     a5c:	f00f fa84 	bl	ff68 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
     a60:	2103      	movs	r1, #3
     a62:	482a      	ldr	r0, [pc, #168]	; (b0c <hci_init+0x16c>)
     a64:	f012 ff13 	bl	1388e <atomic_test_bit>
     a68:	4601      	mov	r1, r0
     a6a:	bb50      	cbnz	r0, ac2 <hci_init+0x122>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
     a6c:	aa01      	add	r2, sp, #4
     a6e:	f241 0009 	movw	r0, #4105	; 0x1009
     a72:	f005 f9dd 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     a76:	4604      	mov	r4, r0
     a78:	2800      	cmp	r0, #0
     a7a:	d13f      	bne.n	afc <hci_init+0x15c>
		read_bdaddr_complete(rsp);
     a7c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
     a7e:	9002      	str	r0, [sp, #8]
     a80:	689e      	ldr	r6, [r3, #8]
     a82:	f8ad 000c 	strh.w	r0, [sp, #12]
     a86:	3601      	adds	r6, #1
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
     a88:	2206      	movs	r2, #6
     a8a:	a902      	add	r1, sp, #8
     a8c:	4630      	mov	r0, r6
     a8e:	f012 fcd9 	bl	13444 <memcmp>
     a92:	b198      	cbz	r0, abc <hci_init+0x11c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
     a94:	4b1e      	ldr	r3, [pc, #120]	; (b10 <hci_init+0x170>)
     a96:	6818      	ldr	r0, [r3, #0]
     a98:	9004      	str	r0, [sp, #16]
     a9a:	889b      	ldrh	r3, [r3, #4]
     a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
     aa0:	2206      	movs	r2, #6
     aa2:	a904      	add	r1, sp, #16
     aa4:	4630      	mov	r0, r6
     aa6:	f012 fccd 	bl	13444 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
     aaa:	b138      	cbz	r0, abc <hci_init+0x11c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
     aac:	2206      	movs	r2, #6
     aae:	4631      	mov	r1, r6
     ab0:	4818      	ldr	r0, [pc, #96]	; (b14 <hci_init+0x174>)
     ab2:	f012 fcd7 	bl	13464 <memcpy>
	bt_dev.id_count = 1U;
     ab6:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
     ab8:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
     aba:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
     abc:	9801      	ldr	r0, [sp, #4]
     abe:	f00f fa53 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     ac2:	aa01      	add	r2, sp, #4
     ac4:	2100      	movs	r1, #0
     ac6:	f241 0002 	movw	r0, #4098	; 0x1002
     aca:	f005 f9b1 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     ace:	4604      	mov	r4, r0
     ad0:	b9a0      	cbnz	r0, afc <hci_init+0x15c>
	read_supported_commands_complete(rsp);
     ad2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     ad4:	4810      	ldr	r0, [pc, #64]	; (b18 <hci_init+0x178>)
     ad6:	6899      	ldr	r1, [r3, #8]
     ad8:	2240      	movs	r2, #64	; 0x40
     ada:	3101      	adds	r1, #1
     adc:	f012 fcc2 	bl	13464 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     ae0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     ae4:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
     ae6:	f043 0306 	orr.w	r3, r3, #6
     aea:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     aee:	f00f fa3b 	bl	ff68 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     af2:	7f2b      	ldrb	r3, [r5, #28]
     af4:	0658      	lsls	r0, r3, #25
     af6:	d411      	bmi.n	b1c <hci_init+0x17c>
		return -ENODEV;
     af8:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     afc:	4620      	mov	r0, r4
     afe:	b006      	add	sp, #24
     b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b04:	20004e98 	.word	0x20004e98
     b08:	20004eb0 	.word	0x20004eb0
     b0c:	20004f08 	.word	0x20004f08
     b10:	00017408 	.word	0x00017408
     b14:	20004e99 	.word	0x20004e99
     b18:	20004eb8 	.word	0x20004eb8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     b1c:	4621      	mov	r1, r4
     b1e:	aa01      	add	r2, sp, #4
     b20:	f242 0003 	movw	r0, #8195	; 0x2003
     b24:	f005 f984 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     b28:	4604      	mov	r4, r0
     b2a:	2800      	cmp	r0, #0
     b2c:	d1e6      	bne.n	afc <hci_init+0x15c>
	read_le_features_complete(rsp);
     b2e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     b30:	48b3      	ldr	r0, [pc, #716]	; (e00 <hci_init+0x460>)
     b32:	6899      	ldr	r1, [r3, #8]
     b34:	2208      	movs	r2, #8
     b36:	3101      	adds	r1, #1
     b38:	f012 fc94 	bl	13464 <memcpy>
	net_buf_unref(rsp);
     b3c:	9801      	ldr	r0, [sp, #4]
     b3e:	f00f fa13 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     b42:	4621      	mov	r1, r4
     b44:	aa01      	add	r2, sp, #4
     b46:	f242 0002 	movw	r0, #8194	; 0x2002
     b4a:	f005 f971 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     b4e:	4604      	mov	r4, r0
     b50:	2800      	cmp	r0, #0
     b52:	d1d3      	bne.n	afc <hci_init+0x15c>
	le_read_buffer_size_complete(rsp);
     b54:	9b01      	ldr	r3, [sp, #4]
     b56:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     b58:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     b5c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
     b60:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     b62:	b139      	cbz	r1, b74 <hci_init+0x1d4>
	le_max_num = MIN(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
     b64:	78da      	ldrb	r2, [r3, #3]

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
     b66:	48a7      	ldr	r0, [pc, #668]	; (e04 <hci_init+0x464>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
     b68:	2a03      	cmp	r2, #3
     b6a:	bf28      	it	cs
     b6c:	2203      	movcs	r2, #3
     b6e:	4611      	mov	r1, r2
     b70:	f016 f98b 	bl	16e8a <z_impl_k_sem_init>
	net_buf_unref(rsp);
     b74:	9801      	ldr	r0, [sp, #4]
     b76:	f00f f9f7 	bl	ff68 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     b7a:	7f2c      	ldrb	r4, [r5, #28]
     b7c:	f014 0420 	ands.w	r4, r4, #32
     b80:	f000 80dc 	beq.w	d3c <hci_init+0x39c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     b84:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
     b88:	0719      	lsls	r1, r3, #28
     b8a:	d511      	bpl.n	bb0 <hci_init+0x210>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     b8c:	aa01      	add	r2, sp, #4
     b8e:	2100      	movs	r1, #0
     b90:	f242 001c 	movw	r0, #8220	; 0x201c
     b94:	f005 f94c 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     b98:	4604      	mov	r4, r0
     b9a:	2800      	cmp	r0, #0
     b9c:	d1ae      	bne.n	afc <hci_init+0x15c>
		le_read_supp_states_complete(rsp);
     b9e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     ba0:	6883      	ldr	r3, [r0, #8]
     ba2:	f853 2f01 	ldr.w	r2, [r3, #1]!
     ba6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     ba8:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
     bac:	f00f f9dc 	bl	ff68 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     bb0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     bb4:	069a      	lsls	r2, r3, #26
     bb6:	f100 80dd 	bmi.w	d74 <hci_init+0x3d4>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     bba:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     bbe:	065b      	lsls	r3, r3, #25
     bc0:	f100 8104 	bmi.w	dcc <hci_init+0x42c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     bc4:	2108      	movs	r1, #8
     bc6:	f242 0001 	movw	r0, #8193	; 0x2001
     bca:	f005 f8ef 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
     bce:	4604      	mov	r4, r0
     bd0:	2800      	cmp	r0, #0
     bd2:	f000 80ba 	beq.w	d4a <hci_init+0x3aa>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     bd6:	2108      	movs	r1, #8
     bd8:	4408      	add	r0, r1
     bda:	f015 fbcb 	bl	16374 <net_buf_simple_add>
		    BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     bde:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (IS_ENABLED(CONFIG_BT_SMP) &&
     be2:	065f      	lsls	r7, r3, #25
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     be4:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     be6:	bf54      	ite	pl
     be8:	2003      	movpl	r0, #3
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
     bea:	f240 2002 	movwmi	r0, #514	; 0x202
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     bee:	079e      	lsls	r6, r3, #30
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     bf0:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     bf4:	bf4c      	ite	mi
     bf6:	f040 072c 	orrmi.w	r7, r0, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     bfa:	f040 070c 	orrpl.w	r7, r0, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     bfe:	0698      	lsls	r0, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     c00:	bf48      	it	mi
     c02:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
     c06:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     c08:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     c0c:	bf18      	it	ne
     c0e:	f447 6700 	orrne.w	r7, r7, #2048	; 0x800
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     c12:	4688      	mov	r8, r1
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     c14:	07d9      	lsls	r1, r3, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     c16:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
     c1a:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     c1e:	bf48      	it	mi
     c20:	f047 0710 	orrmi.w	r7, r7, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     c24:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     c26:	bf08      	it	eq
     c28:	f447 77c0 	orreq.w	r7, r7, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     c2c:	4638      	mov	r0, r7
     c2e:	4641      	mov	r1, r8
     c30:	f012 fe36 	bl	138a0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     c34:	4621      	mov	r1, r4
     c36:	2200      	movs	r2, #0
     c38:	f242 0001 	movw	r0, #8193	; 0x2001
     c3c:	f005 f8f8 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     c40:	4604      	mov	r4, r0
     c42:	2800      	cmp	r0, #0
     c44:	f47f af5a 	bne.w	afc <hci_init+0x15c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     c48:	7f2b      	ldrb	r3, [r5, #28]
     c4a:	069a      	lsls	r2, r3, #26
     c4c:	d421      	bmi.n	c92 <hci_init+0x2f2>
	if (bt_dev.le.mtu) {
     c4e:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
     c52:	b9f1      	cbnz	r1, c92 <hci_init+0x2f2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     c54:	aa01      	add	r2, sp, #4
     c56:	f241 0005 	movw	r0, #4101	; 0x1005
     c5a:	f005 f8e9 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     c5e:	4604      	mov	r4, r0
     c60:	2800      	cmp	r0, #0
     c62:	f47f af4b 	bne.w	afc <hci_init+0x15c>
	if (bt_dev.le.mtu) {
     c66:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
     c6a:	b97b      	cbnz	r3, c8c <hci_init+0x2ec>
	read_buffer_size_complete(rsp);
     c6c:	9b01      	ldr	r3, [sp, #4]
     c6e:	4865      	ldr	r0, [pc, #404]	; (e04 <hci_init+0x464>)
     c70:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     c72:	7899      	ldrb	r1, [r3, #2]
     c74:	785a      	ldrb	r2, [r3, #1]
     c76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     c7a:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
     c7e:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     c80:	2a03      	cmp	r2, #3
     c82:	bf28      	it	cs
     c84:	2203      	movcs	r2, #3
     c86:	4611      	mov	r1, r2
     c88:	f016 f8ff 	bl	16e8a <z_impl_k_sem_init>
	net_buf_unref(rsp);
     c8c:	9801      	ldr	r0, [sp, #4]
     c8e:	f00f f96b 	bl	ff68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     c92:	2108      	movs	r1, #8
     c94:	f640 4001 	movw	r0, #3073	; 0xc01
     c98:	f005 f888 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
     c9c:	4604      	mov	r4, r0
     c9e:	2800      	cmp	r0, #0
     ca0:	d053      	beq.n	d4a <hci_init+0x3aa>
	ev = net_buf_add(buf, sizeof(*ev));
     ca2:	2108      	movs	r1, #8
     ca4:	4408      	add	r0, r1
     ca6:	f015 fb65 	bl	16374 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     caa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     cae:	07db      	lsls	r3, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     cb0:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     cb2:	f140 809d 	bpl.w	df0 <hci_init+0x450>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     cb6:	a150      	add	r1, pc, #320	; (adr r1, df8 <hci_init+0x458>)
     cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     cbc:	f012 fdf0 	bl	138a0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     cc0:	4621      	mov	r1, r4
     cc2:	2200      	movs	r2, #0
     cc4:	f640 4001 	movw	r0, #3073	; 0xc01
     cc8:	f005 f8b2 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     ccc:	4604      	mov	r4, r0
     cce:	2800      	cmp	r0, #0
     cd0:	f47f af14 	bne.w	afc <hci_init+0x15c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     cd4:	4601      	mov	r1, r0
     cd6:	aa01      	add	r2, sp, #4
     cd8:	f64f 4001 	movw	r0, #64513	; 0xfc01
     cdc:	f005 f8a8 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     ce0:	bb20      	cbnz	r0, d2c <hci_init+0x38c>
	net_buf_unref(rsp);
     ce2:	9801      	ldr	r0, [sp, #4]
     ce4:	f00f f940 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     ce8:	aa01      	add	r2, sp, #4
     cea:	4621      	mov	r1, r4
     cec:	f64f 4002 	movw	r0, #64514	; 0xfc02
     cf0:	f005 f89e 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     cf4:	b9d0      	cbnz	r0, d2c <hci_init+0x38c>
	rp.cmds = (void *)rsp->data;
     cf6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     cf8:	4843      	ldr	r0, [pc, #268]	; (e08 <hci_init+0x468>)
     cfa:	6899      	ldr	r1, [r3, #8]
     cfc:	2202      	movs	r2, #2
     cfe:	3101      	adds	r1, #1
     d00:	f012 fbb0 	bl	13464 <memcpy>
	net_buf_unref(rsp);
     d04:	9801      	ldr	r0, [sp, #4]
     d06:	f00f f92f 	bl	ff68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     d0a:	aa01      	add	r2, sp, #4
     d0c:	4621      	mov	r1, r4
     d0e:	f64f 4003 	movw	r0, #64515	; 0xfc03
     d12:	f005 f88d 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
     d16:	b948      	cbnz	r0, d2c <hci_init+0x38c>
	rp.feat = (void *)rsp->data;
     d18:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
     d1a:	483c      	ldr	r0, [pc, #240]	; (e0c <hci_init+0x46c>)
     d1c:	6899      	ldr	r1, [r3, #8]
     d1e:	2201      	movs	r2, #1
     d20:	4411      	add	r1, r2
     d22:	f012 fb9f 	bl	13464 <memcpy>
	net_buf_unref(rsp);
     d26:	9801      	ldr	r0, [sp, #4]
     d28:	f00f f91e 	bl	ff68 <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     d2c:	79eb      	ldrb	r3, [r5, #7]
     d2e:	2b00      	cmp	r3, #0
     d30:	f47f aee4 	bne.w	afc <hci_init+0x15c>
		err = bt_setup_id_addr();
     d34:	f005 fd24 	bl	6780 <bt_setup_id_addr>
     d38:	4604      	mov	r4, r0
     d3a:	e6df      	b.n	afc <hci_init+0x15c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     d3c:	2102      	movs	r1, #2
     d3e:	f640 406d 	movw	r0, #3181	; 0xc6d
     d42:	f005 f833 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
     d46:	4606      	mov	r6, r0
     d48:	b910      	cbnz	r0, d50 <hci_init+0x3b0>
		return -ENOBUFS;
     d4a:	f06f 0436 	mvn.w	r4, #54	; 0x36
     d4e:	e6d5      	b.n	afc <hci_init+0x15c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     d50:	2102      	movs	r1, #2
     d52:	3008      	adds	r0, #8
     d54:	f015 fb0e 	bl	16374 <net_buf_simple_add>
		cp_le->le = 0x01;
     d58:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
     d5a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
     d5c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     d5e:	4622      	mov	r2, r4
     d60:	4631      	mov	r1, r6
     d62:	f640 406d 	movw	r0, #3181	; 0xc6d
     d66:	f005 f863 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     d6a:	4604      	mov	r4, r0
     d6c:	2800      	cmp	r0, #0
     d6e:	f43f af09 	beq.w	b84 <hci_init+0x1e4>
     d72:	e6c3      	b.n	afc <hci_init+0x15c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
     d74:	aa01      	add	r2, sp, #4
     d76:	2100      	movs	r1, #0
     d78:	f242 002f 	movw	r0, #8239	; 0x202f
     d7c:	f005 f858 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     d80:	4604      	mov	r4, r0
     d82:	2800      	cmp	r0, #0
     d84:	f47f aeba 	bne.w	afc <hci_init+0x15c>
		rp = (void *)rsp->data;
     d88:	9801      	ldr	r0, [sp, #4]
     d8a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
     d8c:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
     d90:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
     d94:	f00f f8e8 	bl	ff68 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     d98:	2104      	movs	r1, #4
     d9a:	f242 0024 	movw	r0, #8228	; 0x2024
     d9e:	f005 f805 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
     da2:	4606      	mov	r6, r0
     da4:	2800      	cmp	r0, #0
     da6:	d0d0      	beq.n	d4a <hci_init+0x3aa>
		cp = net_buf_add(buf, sizeof(*cp));
     da8:	2104      	movs	r1, #4
     daa:	3008      	adds	r0, #8
     dac:	f015 fae2 	bl	16374 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     db0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     db2:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     db6:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     db8:	4631      	mov	r1, r6
     dba:	f242 0024 	movw	r0, #8228	; 0x2024
     dbe:	f005 f837 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     dc2:	4604      	mov	r4, r0
     dc4:	2800      	cmp	r0, #0
     dc6:	f43f aef8 	beq.w	bba <hci_init+0x21a>
     dca:	e697      	b.n	afc <hci_init+0x15c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     dcc:	aa01      	add	r2, sp, #4
     dce:	2100      	movs	r1, #0
     dd0:	f242 002a 	movw	r0, #8234	; 0x202a
     dd4:	f005 f82c 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
     dd8:	4604      	mov	r4, r0
     dda:	2800      	cmp	r0, #0
     ddc:	f47f ae8e 	bne.w	afc <hci_init+0x15c>
		rp = (void *)rsp->data;
     de0:	9801      	ldr	r0, [sp, #4]
		bt_dev.le.rl_size = rp->rl_size;
     de2:	6883      	ldr	r3, [r0, #8]
     de4:	785b      	ldrb	r3, [r3, #1]
     de6:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
		net_buf_unref(rsp);
     dea:	f00f f8bd 	bl	ff68 <net_buf_unref>
     dee:	e6e9      	b.n	bc4 <hci_init+0x224>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     df0:	4807      	ldr	r0, [pc, #28]	; (e10 <hci_init+0x470>)
     df2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     df6:	e761      	b.n	cbc <hci_init+0x31c>
     df8:	02008890 	.word	0x02008890
     dfc:	20008000 	.word	0x20008000
     e00:	20004f10 	.word	0x20004f10
     e04:	20004f24 	.word	0x20004f24
     e08:	20004ef9 	.word	0x20004ef9
     e0c:	20004ef8 	.word	0x20004ef8
     e10:	02008810 	.word	0x02008810
     e14:	00000000 	.word	0x00000000

00000e18 <event_slave_prepare>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void event_slave_prepare(u32_t ticks_at_expire, u32_t remainder,
				u16_t lazy, void *context)
{
     e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
     e1c:	4dce      	ldr	r5, [pc, #824]	; (1158 <event_slave_prepare+0x340>)
{
     e1e:	b091      	sub	sp, #68	; 0x44
     e20:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
     e22:	7c2b      	ldrb	r3, [r5, #16]
{
     e24:	910b      	str	r1, [sp, #44]	; 0x2c
     e26:	4682      	mov	sl, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
     e28:	b12b      	cbz	r3, e36 <event_slave_prepare+0x1e>
			LL_ASSERT(0);
     e2a:	4040      	eors	r0, r0
     e2c:	f380 8811 	msr	BASEPRI, r0
     e30:	f04f 0003 	mov.w	r0, #3
     e34:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
     e36:	f894 3020 	ldrb.w	r3, [r4, #32]
     e3a:	3307      	adds	r3, #7
     e3c:	b2db      	uxtb	r3, r3
     e3e:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
     e40:	f994 301d 	ldrsb.w	r3, [r4, #29]
     e44:	2b00      	cmp	r3, #0
     e46:	da09      	bge.n	e5c <event_slave_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
     e4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     e4c:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
     e50:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
     e52:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
     e54:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
     e56:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
     e58:	bf88      	it	hi
     e5a:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
     e5c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     e5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
     e62:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
     e64:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
     e66:	b292      	uxth	r2, r2
     e68:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
     e6a:	4432      	add	r2, r6
     e6c:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     e6e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
     e72:	429a      	cmp	r2, r3
     e74:	f040 8086 	bne.w	f84 <event_slave_prepare+0x16c>
     e78:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
     e7c:	075a      	lsls	r2, r3, #29
     e7e:	f100 8525 	bmi.w	18cc <event_slave_prepare+0xab4>
		} else if (conn->llcp_conn_param.ack !=
     e82:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
     e86:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     e8a:	429a      	cmp	r2, r3
     e8c:	f000 8148 	beq.w	1120 <event_slave_prepare+0x308>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
     e90:	2005      	movs	r0, #5
     e92:	f00b fa47 	bl	c324 <event_stop.constprop.41>
	conn_upd = _radio.conn_upd;
     e96:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
     e9a:	b10b      	cbz	r3, ea0 <event_slave_prepare+0x88>
     e9c:	429c      	cmp	r4, r3
     e9e:	d16a      	bne.n	f76 <event_slave_prepare+0x15e>
	switch (conn->llcp_conn_param.state) {
     ea0:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
     ea4:	f003 0307 	and.w	r3, r3, #7
     ea8:	2b05      	cmp	r3, #5
     eaa:	d8be      	bhi.n	e2a <event_slave_prepare+0x12>
     eac:	e8df f013 	tbh	[pc, r3, lsl #1]
     eb0:	00430006 	.word	0x00430006
     eb4:	0063010c 	.word	0x0063010c
     eb8:	00630063 	.word	0x00630063
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     ebc:	48a7      	ldr	r0, [pc, #668]	; (115c <event_slave_prepare+0x344>)
     ebe:	f014 fc17 	bl	156f0 <mem_acquire>
	if (!node_tx) {
     ec2:	4601      	mov	r1, r0
     ec4:	2800      	cmp	r0, #0
     ec6:	d056      	beq.n	f76 <event_slave_prepare+0x15e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     ec8:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
     ecc:	2204      	movs	r2, #4
     ece:	f362 0302 	bfi	r3, r2, #0, #3
     ed2:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     ed6:	7903      	ldrb	r3, [r0, #4]
     ed8:	f043 0303 	orr.w	r3, r3, #3
     edc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     ede:	2318      	movs	r3, #24
     ee0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     ee2:	230f      	movs	r3, #15
     ee4:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
     ee6:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
     eea:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
     eec:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
     ef0:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
     ef2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
     ef6:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
     ef8:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
     efc:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     efe:	2300      	movs	r3, #0
     f00:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
     f02:	74c3      	strb	r3, [r0, #19]
     f04:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
     f06:	f04f 33ff 	mov.w	r3, #4294967295
	p->reference_conn_event_count = event_counter;
     f0a:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = 0xffff;
     f0e:	7543      	strb	r3, [r0, #21]
     f10:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
     f12:	75c3      	strb	r3, [r0, #23]
     f14:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
     f16:	7643      	strb	r3, [r0, #25]
     f18:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
     f1a:	76c3      	strb	r3, [r0, #27]
     f1c:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
     f1e:	7743      	strb	r3, [r0, #29]
     f20:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
     f22:	4620      	mov	r0, r4
     f24:	f014 fe91 	bl	15c4a <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
     f28:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		conn->procedure_expire = conn->procedure_reload;
     f2c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
     f30:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
     f34:	e01f      	b.n	f76 <event_slave_prepare+0x15e>
	if (conn->llcp_conn_param.status) {
     f36:	f894 70cf 	ldrb.w	r7, [r4, #207]	; 0xcf
     f3a:	2f00      	cmp	r7, #0
     f3c:	d03e      	beq.n	fbc <event_slave_prepare+0x1a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     f3e:	4887      	ldr	r0, [pc, #540]	; (115c <event_slave_prepare+0x344>)
     f40:	f014 fbd6 	bl	156f0 <mem_acquire>
		if (!node_tx) {
     f44:	4601      	mov	r1, r0
     f46:	b1b0      	cbz	r0, f76 <event_slave_prepare+0x15e>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     f48:	7903      	ldrb	r3, [r0, #4]
     f4a:	f043 0303 	orr.w	r3, r3, #3
     f4e:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     f50:	2311      	movs	r3, #17
     f52:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     f54:	2303      	movs	r3, #3
     f56:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     f58:	230f      	movs	r3, #15
     f5a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     f5c:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
     f60:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
     f62:	4620      	mov	r0, r4
     f64:	f014 fe71 	bl	15c4a <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     f68:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     f6c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		_radio.conn_upd = NULL;
     f70:	2300      	movs	r3, #0
     f72:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
	if (conn->llcp_ack != conn->llcp_req) {
     f76:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
     f7a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
     f7e:	429a      	cmp	r2, r3
     f80:	f000 84a4 	beq.w	18cc <event_slave_prepare+0xab4>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
     f84:	2005      	movs	r0, #5
     f86:	f00b f9cd 	bl	c324 <event_stop.constprop.41>
		switch (conn->llcp_type) {
     f8a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
     f8e:	3b01      	subs	r3, #1
     f90:	2b07      	cmp	r3, #7
     f92:	f63f af4a 	bhi.w	e2a <event_slave_prepare+0x12>
     f96:	a201      	add	r2, pc, #4	; (adr r2, f9c <event_slave_prepare+0x184>)
     f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f9c:	000014a1 	.word	0x000014a1
     fa0:	0000184f 	.word	0x0000184f
     fa4:	00001971 	.word	0x00001971
     fa8:	00001b85 	.word	0x00001b85
     fac:	00001c39 	.word	0x00001c39
     fb0:	00000e2b 	.word	0x00000e2b
     fb4:	00001cd5 	.word	0x00001cd5
     fb8:	00001d05 	.word	0x00001d05
	if (!conn->role) {
     fbc:	f994 301d 	ldrsb.w	r3, [r4, #29]
     fc0:	2b00      	cmp	r3, #0
     fc2:	db3e      	blt.n	1042 <event_slave_prepare+0x22a>
		if (conn->llcp_req != conn->llcp_ack) {
     fc4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
     fc8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
     fcc:	428b      	cmp	r3, r1
     fce:	d1d9      	bne.n	f84 <event_slave_prepare+0x16c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     fd0:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
		conn->llcp.conn_upd.win_offset_us = 0U;
     fd4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     fd8:	2205      	movs	r2, #5
     fda:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     fde:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     fe2:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
		conn->llcp.conn_upd.win_size = 1U;
     fe6:	2301      	movs	r3, #1
     fe8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
		if (conn->llcp_conn_param.preferred_periodicity) {
     fec:	b332      	cbz	r2, 103c <event_slave_prepare+0x224>
				((conn->llcp_conn_param.interval_min /
     fee:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
     ff2:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
     ff6:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
     ff8:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
     ffc:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    1000:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    1004:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    1008:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    100c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    1010:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    1014:	2202      	movs	r2, #2
    1016:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    101a:	f894 20ce 	ldrb.w	r2, [r4, #206]	; 0xce
    101e:	f082 0208 	eor.w	r2, r2, #8
    1022:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    1026:	f362 0382 	bfi	r3, r2, #2, #1
    102a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    102e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    1030:	2301      	movs	r3, #1
    1032:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    1036:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    103a:	e79c      	b.n	f76 <event_slave_prepare+0x15e>
			conn->llcp.conn_upd.interval =
    103c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    1040:	e7dc      	b.n	ffc <event_slave_prepare+0x1e4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1042:	4846      	ldr	r0, [pc, #280]	; (115c <event_slave_prepare+0x344>)
    1044:	f014 fb54 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    1048:	4601      	mov	r1, r0
    104a:	2800      	cmp	r0, #0
    104c:	d093      	beq.n	f76 <event_slave_prepare+0x15e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    104e:	7903      	ldrb	r3, [r0, #4]
    1050:	f043 0303 	orr.w	r3, r3, #3
    1054:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    1056:	2318      	movs	r3, #24
    1058:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    105a:	2310      	movs	r3, #16
    105c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
    105e:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    1062:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
    1064:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    1068:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    106a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    106e:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    1070:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    1074:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    1076:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    107a:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    107c:	f8b4 30da 	ldrh.w	r3, [r4, #218]	; 0xda
    1080:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    1084:	f8b4 30dc 	ldrh.w	r3, [r4, #220]	; 0xdc
    1088:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    108c:	f8b4 30de 	ldrh.w	r3, [r4, #222]	; 0xde
    1090:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    1094:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
    1098:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    109c:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
    10a0:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    10a4:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
    10a8:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    10ac:	f8b4 30e6 	ldrh.w	r3, [r4, #230]	; 0xe6
    10b0:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    10b4:	4620      	mov	r0, r4
    10b6:	f014 fdc8 	bl	15c4a <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    10ba:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    10be:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	_radio.conn_upd = NULL;
    10c2:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    10c6:	e756      	b.n	f76 <event_slave_prepare+0x15e>
	if (conn->pause_tx) {
    10c8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    10cc:	071b      	lsls	r3, r3, #28
    10ce:	f53f af52 	bmi.w	f76 <event_slave_prepare+0x15e>
	node_rx = packet_rx_reserve_get(2);
    10d2:	2002      	movs	r0, #2
    10d4:	f00a fb18 	bl	b708 <packet_rx_reserve_get>
	if (!node_rx) {
    10d8:	2800      	cmp	r0, #0
    10da:	f43f af4c 	beq.w	f76 <event_slave_prepare+0x15e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    10de:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    10e2:	2203      	movs	r2, #3
    10e4:	f362 0302 	bfi	r3, r2, #0, #3
    10e8:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	node_rx->hdr.handle = conn->handle;
    10ec:	8c23      	ldrh	r3, [r4, #32]
    10ee:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    10f0:	2302      	movs	r3, #2
    10f2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    10f4:	7a03      	ldrb	r3, [r0, #8]
    10f6:	4313      	orrs	r3, r2
    10f8:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    10fa:	2318      	movs	r3, #24
    10fc:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    10fe:	230f      	movs	r3, #15
    1100:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
    1102:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    1106:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
    1108:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    110c:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    110e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    1112:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    1114:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
		lr->max_tx_time = conn->llcp_length.tx_time;
    1118:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    111a:	f00b f87f 	bl	c21c <packet_rx_enqueue>
    111e:	e72a      	b.n	f76 <event_slave_prepare+0x15e>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    1120:	f894 2101 	ldrb.w	r2, [r4, #257]	; 0x101
    1124:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    1128:	429a      	cmp	r2, r3
    112a:	f000 80b0 	beq.w	128e <event_slave_prepare+0x476>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    112e:	2005      	movs	r0, #5
    1130:	f00b f8f8 	bl	c324 <event_stop.constprop.41>
	switch (conn->llcp_phy.state) {
    1134:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    1138:	f003 0203 	and.w	r2, r3, #3
    113c:	2a03      	cmp	r2, #3
    113e:	f63f ae74 	bhi.w	e2a <event_slave_prepare+0x12>
    1142:	a101      	add	r1, pc, #4	; (adr r1, 1148 <event_slave_prepare+0x330>)
    1144:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    1148:	00001161 	.word	0x00001161
    114c:	00000f77 	.word	0x00000f77
    1150:	00000f77 	.word	0x00000f77
    1154:	000011c7 	.word	0x000011c7
    1158:	20000d78 	.word	0x20000d78
    115c:	20000ed4 	.word	0x20000ed4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1160:	48cc      	ldr	r0, [pc, #816]	; (1494 <event_slave_prepare+0x67c>)
    1162:	f014 fac5 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    1166:	4601      	mov	r1, r0
    1168:	2800      	cmp	r0, #0
    116a:	f43f af04 	beq.w	f76 <event_slave_prepare+0x15e>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    116e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1172:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1176:	2201      	movs	r2, #1
    1178:	f362 0301 	bfi	r3, r2, #0, #2
    117c:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1180:	b2db      	uxtb	r3, r3
    1182:	f3c3 0782 	ubfx	r7, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1186:	f3c3 1342 	ubfx	r3, r3, #5, #3
    118a:	f363 00c5 	bfi	r0, r3, #3, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    118e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1192:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    1196:	f894 0103 	ldrb.w	r0, [r4, #259]	; 0x103
		conn->phy_pref_tx = conn->llcp_phy.tx;
    119a:	f367 0202 	bfi	r2, r7, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    119e:	f3c0 0000 	ubfx	r0, r0, #0, #1
    11a2:	f360 1286 	bfi	r2, r0, #6, #1
    11a6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11aa:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    11ac:	720f      	strb	r7, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11ae:	f042 0203 	orr.w	r2, r2, #3
    11b2:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    11b4:	2203      	movs	r2, #3
    11b6:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    11b8:	2216      	movs	r2, #22
    11ba:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
    11bc:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
    11be:	4620      	mov	r0, r4
    11c0:	f014 fd43 	bl	15c4a <ctrl_tx_enqueue>
    11c4:	e6b2      	b.n	f2c <event_slave_prepare+0x114>
		if (conn->llcp_ack != conn->llcp_req) {
    11c6:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    11ca:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    11ce:	4291      	cmp	r1, r2
    11d0:	f47f aed8 	bne.w	f84 <event_slave_prepare+0x16c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    11d4:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
    11d8:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
		if (conn->llcp_phy.tx & BIT(1)) {
    11dc:	f3c3 0182 	ubfx	r1, r3, #2, #3
    11e0:	078f      	lsls	r7, r1, #30
    11e2:	d542      	bpl.n	126a <event_slave_prepare+0x452>
			conn->llcp_phy.tx = BIT(1);
    11e4:	2102      	movs	r1, #2
			conn->llcp_phy.tx = 0U;
    11e6:	f361 0384 	bfi	r3, r1, #2, #3
    11ea:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
		if (conn->llcp_phy.rx & BIT(1)) {
    11ee:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    11f2:	0959      	lsrs	r1, r3, #5
    11f4:	078f      	lsls	r7, r1, #30
    11f6:	d541      	bpl.n	127c <event_slave_prepare+0x464>
			conn->llcp_phy.rx = BIT(1);
    11f8:	2102      	movs	r1, #2
			conn->llcp_phy.rx = 0U;
    11fa:	f361 1347 	bfi	r3, r1, #5, #3
    11fe:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
		if (conn->llcp_phy.tx != conn->phy_tx) {
    1202:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
    1206:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    120a:	f3c1 0082 	ubfx	r0, r1, #2, #3
    120e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1212:	4283      	cmp	r3, r0
    1214:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    1218:	bf14      	ite	ne
    121a:	f360 0384 	bfine	r3, r0, #2, #3
			conn->llcp.phy_upd_ind.tx = 0U;
    121e:	f36f 0384 	bfceq	r3, #2, #3
    1222:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    1226:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    122a:	0949      	lsrs	r1, r1, #5
    122c:	f003 0307 	and.w	r3, r3, #7
    1230:	428b      	cmp	r3, r1
    1232:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    1236:	bf14      	ite	ne
    1238:	f361 1347 	bfine	r3, r1, #5, #3
			conn->llcp.phy_upd_ind.rx = 0U;
    123c:	f36f 1347 	bfceq	r3, #5, #3
    1240:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1U;
    1244:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    1248:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
    124c:	f043 0301 	orr.w	r3, r3, #1
    1250:	f3c1 0140 	ubfx	r1, r1, #1, #1
    1254:	f361 0341 	bfi	r3, r1, #1, #1
    1258:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    125c:	3a01      	subs	r2, #1
		conn->llcp_type = LLCP_PHY_UPD;
    125e:	2308      	movs	r3, #8
    1260:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    1264:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
    1268:	e685      	b.n	f76 <event_slave_prepare+0x15e>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    126a:	07c8      	lsls	r0, r1, #31
    126c:	d501      	bpl.n	1272 <event_slave_prepare+0x45a>
			conn->llcp_phy.tx = BIT(0);
    126e:	2101      	movs	r1, #1
    1270:	e7b9      	b.n	11e6 <event_slave_prepare+0x3ce>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    1272:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.tx = BIT(2);
    1276:	bf18      	it	ne
    1278:	2104      	movne	r1, #4
    127a:	e7b4      	b.n	11e6 <event_slave_prepare+0x3ce>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    127c:	07c8      	lsls	r0, r1, #31
    127e:	d501      	bpl.n	1284 <event_slave_prepare+0x46c>
			conn->llcp_phy.rx = BIT(0);
    1280:	2101      	movs	r1, #1
    1282:	e7ba      	b.n	11fa <event_slave_prepare+0x3e2>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    1284:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    1288:	bf18      	it	ne
    128a:	2104      	movne	r1, #4
    128c:	e7b5      	b.n	11fa <event_slave_prepare+0x3e2>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    128e:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    1292:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    1296:	429a      	cmp	r2, r3
    1298:	f000 8318 	beq.w	18cc <event_slave_prepare+0xab4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    129c:	2005      	movs	r0, #5
    129e:	f00b f841 	bl	c324 <event_stop.constprop.41>
	switch (conn->llcp_length.state) {
    12a2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    12a6:	f003 0307 	and.w	r3, r3, #7
    12aa:	2b07      	cmp	r3, #7
    12ac:	f43f adbd 	beq.w	e2a <event_slave_prepare+0x12>
    12b0:	2201      	movs	r2, #1
    12b2:	409a      	lsls	r2, r3
    12b4:	f012 0f4e 	tst.w	r2, #78	; 0x4e
    12b8:	f47f ae5d 	bne.w	f76 <event_slave_prepare+0x15e>
    12bc:	f012 0f30 	tst.w	r2, #48	; 0x30
    12c0:	d139      	bne.n	1336 <event_slave_prepare+0x51e>
    12c2:	2b00      	cmp	r3, #0
    12c4:	f47f adb1 	bne.w	e2a <event_slave_prepare+0x12>
		free_count_rx = packet_rx_acquired_count_get() +
    12c8:	f00a fa08 	bl	b6dc <packet_rx_acquired_count_get>
    12cc:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    12ce:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    12d2:	f014 fa3b 	bl	1574c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    12d6:	4438      	add	r0, r7
    12d8:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    12da:	28ff      	cmp	r0, #255	; 0xff
    12dc:	f63f ada5 	bhi.w	e2a <event_slave_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    12e0:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    12e4:	4283      	cmp	r3, r0
    12e6:	f47f ae46 	bne.w	f76 <event_slave_prepare+0x15e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    12ea:	486a      	ldr	r0, [pc, #424]	; (1494 <event_slave_prepare+0x67c>)
    12ec:	f014 fa00 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    12f0:	4601      	mov	r1, r0
    12f2:	2800      	cmp	r0, #0
    12f4:	f43f ae3f 	beq.w	f76 <event_slave_prepare+0x15e>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    12f8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    12fc:	f8b4 70fa 	ldrh.w	r7, [r4, #250]	; 0xfa
		conn->default_tx_time = conn->llcp_length.tx_time;
    1300:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1304:	85a7      	strh	r7, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1306:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1308:	8662      	strh	r2, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    130a:	f360 0302 	bfi	r3, r0, #0, #3
    130e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1312:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_octets = conn->default_tx_octets;
    1314:	818f      	strh	r7, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1316:	f043 0303 	orr.w	r3, r3, #3
    131a:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    131c:	2309      	movs	r3, #9
    131e:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1320:	2314      	movs	r3, #20
    1322:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    1324:	231b      	movs	r3, #27
    1326:	720b      	strb	r3, [r1, #8]
    1328:	2300      	movs	r3, #0
    132a:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(LL_LENGTH_OCTETS_RX_MAX,
    132c:	2348      	movs	r3, #72	; 0x48
    132e:	728b      	strb	r3, [r1, #10]
    1330:	72c8      	strb	r0, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
    1332:	81ca      	strh	r2, [r1, #14]
    1334:	e743      	b.n	11be <event_slave_prepare+0x3a6>
		free_count_rx = packet_rx_acquired_count_get() +
    1336:	f00a f9d1 	bl	b6dc <packet_rx_acquired_count_get>
    133a:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    133c:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    1340:	f014 fa04 	bl	1574c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    1344:	4438      	add	r0, r7
    1346:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    1348:	28ff      	cmp	r0, #255	; 0xff
    134a:	f63f ad6e 	bhi.w	e2a <event_slave_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    134e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    1352:	4283      	cmp	r3, r0
    1354:	f040 8098 	bne.w	1488 <event_slave_prepare+0x670>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1358:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    135c:	f003 0207 	and.w	r2, r3, #7
    1360:	2a04      	cmp	r2, #4
			conn->llcp_length.ack = conn->llcp_length.req;
    1362:	bf05      	ittet	eq
    1364:	f894 30f4 	ldrbeq.w	r3, [r4, #244]	; 0xf4
    1368:	f884 30f5 	strbeq.w	r3, [r4, #245]	; 0xf5
			conn->llcp_length.state =
    136c:	2206      	movne	r2, #6
			conn->procedure_expire = 0U;
    136e:	2300      	moveq	r3, #0
			conn->llcp_length.state =
    1370:	bf16      	itet	ne
    1372:	f362 0302 	bfine	r3, r2, #0, #3
			conn->procedure_expire = 0U;
    1376:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
			conn->llcp_length.state =
    137a:	f884 30f6 	strbne.w	r3, [r4, #246]	; 0xf6
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    137e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    1382:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    1384:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    1388:	86e3      	strh	r3, [r4, #54]	; 0x36
		conn->evt_len_adv = 0U;
    138a:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    138e:	f36f 0382 	bfc	r3, #2, #1
    1392:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
		free_count_conn = mem_free_count_get(_radio.conn_free);
    1396:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    139a:	f014 f9d7 	bl	1574c <mem_free_count_get>
		if (_radio.advertiser.conn) {
    139e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    13a2:	b10b      	cbz	r3, 13a8 <event_slave_prepare+0x590>
			free_count_conn++;
    13a4:	3001      	adds	r0, #1
    13a6:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    13a8:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    13ac:	b10b      	cbz	r3, 13b2 <event_slave_prepare+0x59a>
			free_count_conn++;
    13ae:	3001      	adds	r0, #1
    13b0:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    13b2:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    13b4:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    13b8:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    13ba:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    13bc:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    13c0:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    13c2:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    13c4:	d05d      	beq.n	1482 <event_slave_prepare+0x66a>
    13c6:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    13ca:	42bb      	cmp	r3, r7
    13cc:	d359      	bcc.n	1482 <event_slave_prepare+0x66a>
		node_rx = packet_rx_reserve_get(2);
    13ce:	2002      	movs	r0, #2
    13d0:	f00a f99a 	bl	b708 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    13d4:	2800      	cmp	r0, #0
    13d6:	f43f ad28 	beq.w	e2a <event_slave_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    13da:	8c23      	ldrh	r3, [r4, #32]
    13dc:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    13de:	2302      	movs	r3, #2
    13e0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    13e2:	7a03      	ldrb	r3, [r0, #8]
    13e4:	f043 0303 	orr.w	r3, r3, #3
    13e8:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    13ea:	2309      	movs	r3, #9
    13ec:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    13ee:	2315      	movs	r3, #21
    13f0:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    13f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13f4:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->llcp_length.tx_octets;
    13f6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    13fa:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    13fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    13fe:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->llcp_length.tx_time;
    1400:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    1404:	e688      	b.n	1118 <event_slave_prepare+0x300>
				if (_radio.packet_rx_acquire == 0) {
    1406:	b90b      	cbnz	r3, 140c <event_slave_prepare+0x5f4>
						_radio.packet_rx_count - 1;
    1408:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    140c:	3b01      	subs	r3, #1
    140e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    1412:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    1416:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.link,
    141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    141e:	4641      	mov	r1, r8
    1420:	6818      	ldr	r0, [r3, #0]
    1422:	f014 f97e 	bl	15722 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    1426:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    142a:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    142e:	3a01      	subs	r2, #1
    1430:	4293      	cmp	r3, r2
    1432:	f6bf acfa 	bge.w	e2a <event_slave_prepare+0x12>
				_radio.link_rx_data_quota++;
    1436:	3301      	adds	r3, #1
    1438:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    143c:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    1440:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    1444:	4293      	cmp	r3, r2
    1446:	d1de      	bne.n	1406 <event_slave_prepare+0x5ee>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    1448:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    144a:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    144e:	2b28      	cmp	r3, #40	; 0x28
				_radio.packet_rx_data_size =
    1450:	bf9a      	itte	ls
    1452:	2334      	movls	r3, #52	; 0x34
    1454:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    1458:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    145c:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    1460:	fbb2 f2f1 	udiv	r2, r2, r1
    1464:	b2d2      	uxtb	r2, r2
    1466:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    146a:	2a00      	cmp	r2, #0
    146c:	f43f acdd 	beq.w	e2a <event_slave_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
    1470:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    1474:	4b08      	ldr	r3, [pc, #32]	; (1498 <event_slave_prepare+0x680>)
    1476:	f014 f917 	bl	156a8 <mem_init>
			packet_rx_allocate(4);
    147a:	2004      	movs	r0, #4
    147c:	f00a f956 	bl	b72c <packet_rx_allocate>
    1480:	e7a5      	b.n	13ce <event_slave_prepare+0x5b6>
				mem_release(node_rx->hdr.link,
    1482:	f8df 8018 	ldr.w	r8, [pc, #24]	; 149c <event_slave_prepare+0x684>
    1486:	e7d9      	b.n	143c <event_slave_prepare+0x624>
				_radio.ticker_id_prepare = 0U;
    1488:	2300      	movs	r3, #0
    148a:	742b      	strb	r3, [r5, #16]
	conn->event_counter = event_counter + 1;
    148c:	3601      	adds	r6, #1
    148e:	8466      	strh	r6, [r4, #34]	; 0x22
	DEBUG_RADIO_PREPARE_S(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);

	DEBUG_RADIO_PREPARE_S(0);
}
    1490:	e1ba      	b.n	1808 <event_slave_prepare+0x9f0>
    1492:	bf00      	nop
    1494:	20000ed4 	.word	0x20000ed4
    1498:	20000ea8 	.word	0x20000ea8
    149c:	20000ec0 	.word	0x20000ec0
	if (!conn_upd) {
    14a0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    14a4:	b90b      	cbnz	r3, 14aa <event_slave_prepare+0x692>
		_radio.conn_upd = conn;
    14a6:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    14aa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    14ae:	f013 0303 	ands.w	r3, r3, #3
    14b2:	d039      	beq.n	1528 <event_slave_prepare+0x710>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    14b4:	481b      	ldr	r0, [pc, #108]	; (1524 <event_slave_prepare+0x70c>)
    14b6:	f014 f91b 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    14ba:	4601      	mov	r1, r0
    14bc:	2800      	cmp	r0, #0
    14be:	f000 8205 	beq.w	18cc <event_slave_prepare+0xab4>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    14c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14c6:	7902      	ldrb	r2, [r0, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    14c8:	f36f 0301 	bfc	r3, #0, #2
    14cc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    14d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    14d2:	3306      	adds	r3, #6
    14d4:	4433      	add	r3, r6
    14d6:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14d8:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
    14dc:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14e0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    14e2:	220c      	movs	r2, #12
    14e4:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    14e6:	2200      	movs	r2, #0
    14e8:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    14ea:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    14ee:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    14f0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    14f4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    14f8:	fbb2 f2f0 	udiv	r2, r2, r0
    14fc:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1500:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
    1504:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1508:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    150c:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1510:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    1514:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1518:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
    151c:	4620      	mov	r0, r4
    151e:	f014 fb94 	bl	15c4a <ctrl_tx_enqueue>
    1522:	e1d3      	b.n	18cc <event_slave_prepare+0xab4>
    1524:	20000ed4 	.word	0x20000ed4
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1528:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    152c:	1bf7      	subs	r7, r6, r7
    152e:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    1530:	043a      	lsls	r2, r7, #16
    1532:	f100 81cb 	bmi.w	18cc <event_slave_prepare+0xab4>
		conn->llcp_ack = conn->llcp_req;
    1536:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    153a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    153e:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
    1542:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
    1546:	428a      	cmp	r2, r1
    1548:	d009      	beq.n	155e <event_slave_prepare+0x746>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    154a:	f894 20ce 	ldrb.w	r2, [r4, #206]	; 0xce
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    154e:	f002 0207 	and.w	r2, r2, #7
    1552:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1554:	bf04      	itt	eq
    1556:	f884 10cd 	strbeq.w	r1, [r4, #205]	; 0xcd
			conn->procedure_expire = 0U;
    155a:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    155e:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
		if ((conn->llcp.conn_upd.interval !=
    1562:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
		if (_radio.conn_upd == conn) {
    1564:	429c      	cmp	r4, r3
			_radio.conn_upd = NULL;
    1566:	bf04      	itt	eq
    1568:	2300      	moveq	r3, #0
    156a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		if ((conn->llcp.conn_upd.interval !=
    156e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    1572:	429a      	cmp	r2, r3
    1574:	d114      	bne.n	15a0 <event_slave_prepare+0x788>
		     conn->conn_interval) ||
    1576:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    157a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    157c:	4299      	cmp	r1, r3
    157e:	d10f      	bne.n	15a0 <event_slave_prepare+0x788>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    1580:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1584:	435a      	muls	r2, r3
    1586:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    158a:	f242 7110 	movw	r1, #10000	; 0x2710
    158e:	fb01 2303 	mla	r3, r1, r3, r2
    1592:	3b01      	subs	r3, #1
    1594:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    1598:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    159a:	b29b      	uxth	r3, r3
    159c:	429a      	cmp	r2, r3
    159e:	d016      	beq.n	15ce <event_slave_prepare+0x7b6>
			node_rx = packet_rx_reserve_get(2);
    15a0:	2002      	movs	r0, #2
    15a2:	f00a f8b1 	bl	b708 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    15a6:	2800      	cmp	r0, #0
    15a8:	f43f ac3f 	beq.w	e2a <event_slave_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    15ac:	8c23      	ldrh	r3, [r4, #32]
    15ae:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    15b0:	230a      	movs	r3, #10
    15b2:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
    15b4:	2300      	movs	r3, #0
    15b6:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
    15b8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    15bc:	8143      	strh	r3, [r0, #10]
			radio_le_conn_update_cmplt->latency =
    15be:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    15c2:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->timeout =
    15c4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    15c8:	81c3      	strh	r3, [r0, #14]
				packet_rx_enqueue();
    15ca:	f00a fe27 	bl	c21c <packet_rx_enqueue>
    15ce:	e9d4 0600 	ldrd	r0, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    15d2:	2800      	cmp	r0, #0
    15d4:	da09      	bge.n	15ea <event_slave_prepare+0x7d2>
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    15d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
			u32_t ticks_prepare_to_start =
    15da:	68a3      	ldr	r3, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    15dc:	6020      	str	r0, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    15de:	ebaa 0a00 	sub.w	sl, sl, r0
    15e2:	429e      	cmp	r6, r3
    15e4:	bf2c      	ite	cs
    15e6:	44b2      	addcs	sl, r6
    15e8:	449a      	addcc	sl, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    15ea:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    15ec:	f8b4 b07a 	ldrh.w	fp, [r4, #122]	; 0x7a
		conn_interval_old = instant_latency * conn->conn_interval;
    15f0:	fb13 f307 	smulbb	r3, r3, r7
    15f4:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    15f6:	fbb3 f2fb 	udiv	r2, r3, fp
    15fa:	b291      	uxth	r1, r2
		conn_interval_new = latency *
    15fc:	fb1b f001 	smulbb	r0, fp, r1
    1600:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    1602:	4283      	cmp	r3, r0
		latency = conn_interval_old /
    1604:	910b      	str	r1, [sp, #44]	; 0x2c
    1606:	49ce      	ldr	r1, [pc, #824]	; (1940 <event_slave_prepare+0xb28>)
		if (conn_interval_new > conn_interval_old) {
    1608:	f080 8101 	bcs.w	180e <event_slave_prepare+0x9f6>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    160c:	1ac0      	subs	r0, r0, r3
    160e:	f240 1223 	movw	r2, #291	; 0x123
    1612:	4342      	muls	r2, r0
    1614:	ea4f 79e0 	mov.w	r9, r0, asr #31
    1618:	fb01 2309 	mla	r3, r1, r9, r2
    161c:	fba0 0101 	umull	r0, r1, r0, r1
    1620:	4419      	add	r1, r3
    1622:	a3c5      	add	r3, pc, #788	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    1624:	e9d3 2300 	ldrd	r2, r3, [r3]
    1628:	f7ff f83a 	bl	6a0 <__aeabi_uldivmod>
    162c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1630:	4482      	add	sl, r0
		conn->latency_prepare -= (instant_latency - latency);
    1632:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1636:	f8df 9334 	ldr.w	r9, [pc, #820]	; 196c <event_slave_prepare+0xb54>
    163a:	1bdb      	subs	r3, r3, r7
    163c:	4413      	add	r3, r2
    163e:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    1640:	6823      	ldr	r3, [r4, #0]
    1642:	429e      	cmp	r6, r3
    1644:	bf38      	it	cc
    1646:	461e      	movcc	r6, r3
    1648:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    164c:	930c      	str	r3, [sp, #48]	; 0x30
		if (conn->role) {
    164e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    1652:	960e      	str	r6, [sp, #56]	; 0x38
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    1654:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    1658:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    165a:	fb08 f60b 	mul.w	r6, r8, fp
		if (conn->role) {
    165e:	f280 80e8 	bge.w	1832 <event_slave_prepare+0xa1a>
			conn->slave.window_widening_prepare_us -=
    1662:	6de2      	ldr	r2, [r4, #92]	; 0x5c
				conn->slave.window_widening_periodic_us *
    1664:	6d63      	ldr	r3, [r4, #84]	; 0x54
				(((gc_lookup_ppm[_radio.sca] +
    1666:	49b7      	ldr	r1, [pc, #732]	; (1944 <event_slave_prepare+0xb2c>)
				conn->slave.window_widening_periodic_us *
    1668:	980b      	ldr	r0, [sp, #44]	; 0x2c
			conn->slave.window_widening_prepare_us -=
    166a:	fb03 2317 	mls	r3, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    166e:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
    1672:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    1676:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
    167a:	f3c2 0282 	ubfx	r2, r2, #2, #3
    167e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    1682:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    1686:	4417      	add	r7, r2
				   gc_lookup_ppm[conn->slave.sca]) *
    1688:	4377      	muls	r7, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    168a:	f507 2774 	add.w	r7, r7, #999424	; 0xf4000
    168e:	4aae      	ldr	r2, [pc, #696]	; (1948 <event_slave_prepare+0xb30>)
				conn->llcp.conn_upd.win_size * 1250;
    1690:	fb08 f101 	mul.w	r1, r8, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    1694:	f207 273f 	addw	r7, r7, #575	; 0x23f
    1698:	fbb7 f7f2 	udiv	r7, r7, r2
				(conn_interval_us >> 1) - RADIO_TIFS;
    169c:	0872      	lsrs	r2, r6, #1
				conn->slave.window_widening_periodic_us *
    169e:	4378      	muls	r0, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
    16a0:	3a96      	subs	r2, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    16a2:	4403      	add	r3, r0
			conn->slave.window_size_prepare_us =
    16a4:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0U;
    16a6:	2100      	movs	r1, #0
			conn->slave.window_widening_periodic_us =
    16a8:	6567      	str	r7, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    16aa:	65a2      	str	r2, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0U;
    16ac:	6721      	str	r1, [r4, #112]	; 0x70
			conn->slave.window_widening_prepare_us +=
    16ae:	4293      	cmp	r3, r2
    16b0:	bf94      	ite	ls
    16b2:	65e3      	strls	r3, [r4, #92]	; 0x5c
    16b4:	65e2      	strhi	r2, [r4, #92]	; 0x5c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    16b6:	fba0 0109 	umull	r0, r1, r0, r9
    16ba:	a39f      	add	r3, pc, #636	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    16bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    16c0:	f7fe ffee 	bl	6a0 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    16c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    16c6:	ebaa 0a00 	sub.w	sl, sl, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    16ca:	fbb3 f0f8 	udiv	r0, r3, r8
    16ce:	fb08 f000 	mul.w	r0, r8, r0
    16d2:	a399      	add	r3, pc, #612	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    16d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    16d8:	fba0 0109 	umull	r0, r1, r0, r9
    16dc:	f7fe ffe0 	bl	6a0 <__aeabi_uldivmod>
    16e0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    16e4:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= conn->slave.window_widening_periodic_us;
    16e6:	1bf7      	subs	r7, r6, r7
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    16e8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    16ec:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
		conn->conn_interval = conn->llcp.conn_upd.interval;
    16f0:	f8a4 b024 	strh.w	fp, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    16f4:	f242 7110 	movw	r1, #10000	; 0x2710
    16f8:	fb01 6303 	mla	r3, r1, r3, r6
    16fc:	3b01      	subs	r3, #1
    16fe:	fbb3 f3f6 	udiv	r3, r3, r6
    1702:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1704:	4b91      	ldr	r3, [pc, #580]	; (194c <event_slave_prepare+0xb34>)
		conn->latency = conn->llcp.conn_upd.latency;
    1706:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1708:	4433      	add	r3, r6
    170a:	fbb3 f3f6 	udiv	r3, r3, r6
    170e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1712:	4b8f      	ldr	r3, [pc, #572]	; (1950 <event_slave_prepare+0xb38>)
    1714:	4433      	add	r3, r6
    1716:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    171a:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    171c:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    171e:	4299      	cmp	r1, r3
    1720:	bfc4      	itt	gt
    1722:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    1726:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1728:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    172c:	bfc8      	it	gt
    172e:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    1730:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    1734:	bfc8      	it	gt
    1736:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    1738:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0U;
    173c:	bf08      	it	eq
    173e:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    1742:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    1746:	2000      	movs	r0, #0
    1748:	2101      	movs	r1, #1
    174a:	f014 fdbb 	bl	162c4 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    174e:	2200      	movs	r2, #0
		mayfly_was_enabled =
    1750:	900f      	str	r0, [sp, #60]	; 0x3c
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    1752:	2101      	movs	r1, #1
    1754:	4610      	mov	r0, r2
    1756:	f007 ff55 	bl	9604 <mayfly_enable>
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
    175a:	f894 6020 	ldrb.w	r6, [r4, #32]
		ticker_status =
    175e:	4b7d      	ldr	r3, [pc, #500]	; (1954 <event_slave_prepare+0xb3c>)
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
    1760:	3607      	adds	r6, #7
    1762:	b2f6      	uxtb	r6, r6
		ticker_status =
    1764:	2100      	movs	r1, #0
				    (void *)(u32_t)ticker_id);
    1766:	9600      	str	r6, [sp, #0]
		ticker_status =
    1768:	4632      	mov	r2, r6
    176a:	4608      	mov	r0, r1
    176c:	f008 fd08 	bl	a180 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1770:	f030 0b02 	bics.w	fp, r0, #2
    1774:	f47f ab59 	bne.w	e2a <event_slave_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1778:	fba7 2309 	umull	r2, r3, r7, r9
    177c:	4617      	mov	r7, r2
    177e:	4698      	mov	r8, r3
    1780:	4638      	mov	r0, r7
    1782:	a36d      	add	r3, pc, #436	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    1784:	e9d3 2300 	ldrd	r2, r3, [r3]
    1788:	4641      	mov	r1, r8
    178a:	f7fe ff89 	bl	6a0 <__aeabi_uldivmod>
		ticker_status =
    178e:	f641 5335 	movw	r3, #7477	; 0x1d35
    1792:	9308      	str	r3, [sp, #32]
    1794:	4b70      	ldr	r3, [pc, #448]	; (1958 <event_slave_prepare+0xb40>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		ticker_status =
    1798:	e9cd 4306 	strd	r4, r3, [sp, #24]
    179c:	4b6f      	ldr	r3, [pc, #444]	; (195c <event_slave_prepare+0xb44>)
    179e:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    17a0:	68e3      	ldr	r3, [r4, #12]
    17a2:	441a      	add	r2, r3
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    17a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		ticker_status =
    17a8:	e9cd b203 	strd	fp, r2, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    17ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17b0:	4a6b      	ldr	r2, [pc, #428]	; (1960 <event_slave_prepare+0xb48>)
    17b2:	2307      	movs	r3, #7
    17b4:	2100      	movs	r1, #0
    17b6:	4343      	muls	r3, r0
    17b8:	fb02 3301 	mla	r3, r2, r1, r3
    17bc:	fba0 0102 	umull	r0, r1, r0, r2
    17c0:	1a3f      	subs	r7, r7, r0
    17c2:	4419      	add	r1, r3
    17c4:	eb68 0801 	sbc.w	r8, r8, r1
    17c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    17cc:	2300      	movs	r3, #0
    17ce:	4638      	mov	r0, r7
    17d0:	4641      	mov	r1, r8
    17d2:	f7fe ff65 	bl	6a0 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    17d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    17d8:	9002      	str	r0, [sp, #8]
    17da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticker_status =
    17de:	9301      	str	r3, [sp, #4]
    17e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17e2:	9300      	str	r3, [sp, #0]
    17e4:	4632      	mov	r2, r6
    17e6:	4653      	mov	r3, sl
    17e8:	4659      	mov	r1, fp
    17ea:	4658      	mov	r0, fp
    17ec:	f008 fc36 	bl	a05c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    17f0:	f030 0002 	bics.w	r0, r0, #2
    17f4:	f47f ab19 	bne.w	e2a <event_slave_prepare+0x12>
		if (mayfly_was_enabled) {
    17f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17fa:	b11b      	cbz	r3, 1804 <event_slave_prepare+0x9ec>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    17fc:	2201      	movs	r2, #1
    17fe:	4611      	mov	r1, r2
    1800:	f007 ff00 	bl	9604 <mayfly_enable>
				_radio.ticker_id_prepare = 0U;
    1804:	2300      	movs	r3, #0
    1806:	742b      	strb	r3, [r5, #16]
}
    1808:	b011      	add	sp, #68	; 0x44
    180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    180e:	fb0b 3212 	mls	r2, fp, r2, r3
    1812:	fa1f f882 	uxth.w	r8, r2
    1816:	fba8 0101 	umull	r0, r1, r8, r1
    181a:	f240 1323 	movw	r3, #291	; 0x123
    181e:	fb03 1108 	mla	r1, r3, r8, r1
    1822:	a345      	add	r3, pc, #276	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    1824:	e9d3 2300 	ldrd	r2, r3, [r3]
    1828:	f7fe ff3a 	bl	6a0 <__aeabi_uldivmod>
    182c:	ebaa 0a00 	sub.w	sl, sl, r0
    1830:	e6ff      	b.n	1632 <event_slave_prepare+0x81a>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1832:	990c      	ldr	r1, [sp, #48]	; 0x30
    1834:	a340      	add	r3, pc, #256	; (adr r3, 1938 <event_slave_prepare+0xb20>)
    1836:	e9d3 2300 	ldrd	r2, r3, [r3]
    183a:	fba1 0109 	umull	r0, r1, r1, r9
    183e:	f7fe ff2f 	bl	6a0 <__aeabi_uldivmod>
    1842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    1846:	1c43      	adds	r3, r0, #1
    1848:	930b      	str	r3, [sp, #44]	; 0x2c
		periodic_us = conn_interval_us;
    184a:	4637      	mov	r7, r6
    184c:	e74c      	b.n	16e8 <event_slave_prepare+0x8d0>
	if (conn->llcp.chan_map.initiate) {
    184e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    1852:	b303      	cbz	r3, 1896 <event_slave_prepare+0xa7e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1854:	4843      	ldr	r0, [pc, #268]	; (1964 <event_slave_prepare+0xb4c>)
    1856:	f013 ff4b 	bl	156f0 <mem_acquire>
		if (node_tx) {
    185a:	4605      	mov	r5, r0
    185c:	b3b0      	cbz	r0, 18cc <event_slave_prepare+0xab4>
			conn->llcp.chan_map.initiate = 0U;
    185e:	2300      	movs	r3, #0
    1860:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    1864:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1866:	3306      	adds	r3, #6
    1868:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    186a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    186e:	7903      	ldrb	r3, [r0, #4]
    1870:	f043 0303 	orr.w	r3, r3, #3
    1874:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1876:	2308      	movs	r3, #8
    1878:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    187a:	2301      	movs	r3, #1
    187c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    187e:	2205      	movs	r2, #5
    1880:	f104 0179 	add.w	r1, r4, #121	; 0x79
    1884:	3008      	adds	r0, #8
    1886:	f011 fded 	bl	13464 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    188a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    188e:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    1892:	4629      	mov	r1, r5
    1894:	e642      	b.n	151c <event_slave_prepare+0x704>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1896:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    189a:	1af3      	subs	r3, r6, r3
    189c:	041d      	lsls	r5, r3, #16
    189e:	d415      	bmi.n	18cc <event_slave_prepare+0xab4>
		conn->llcp_ack = conn->llcp_req;
    18a0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    18a4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    18a8:	f104 0517 	add.w	r5, r4, #23
    18ac:	2205      	movs	r2, #5
    18ae:	f104 0179 	add.w	r1, r4, #121	; 0x79
    18b2:	4628      	mov	r0, r5
    18b4:	f011 fdd6 	bl	13464 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    18b8:	2105      	movs	r1, #5
    18ba:	4628      	mov	r0, r5
    18bc:	f013 ff8d 	bl	157da <util_ones_count_get>
		conn->data_chan_count =
    18c0:	7f63      	ldrb	r3, [r4, #29]
    18c2:	f360 0305 	bfi	r3, r0, #0, #6
    18c6:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1U;
    18c8:	2301      	movs	r3, #1
    18ca:	7723      	strb	r3, [r4, #28]
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    18cc:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
    18d0:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    18d4:	429a      	cmp	r2, r3
    18d6:	d01e      	beq.n	1916 <event_slave_prepare+0xafe>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    18d8:	2005      	movs	r0, #5
    18da:	f00a fd23 	bl	c324 <event_stop.constprop.41>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    18de:	4821      	ldr	r0, [pc, #132]	; (1964 <event_slave_prepare+0xb4c>)
    18e0:	f013 ff06 	bl	156f0 <mem_acquire>
		if (node_tx) {
    18e4:	4601      	mov	r1, r0
    18e6:	b1b0      	cbz	r0, 1916 <event_slave_prepare+0xafe>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    18e8:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    18ec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18f0:	7903      	ldrb	r3, [r0, #4]
    18f2:	f043 0303 	orr.w	r3, r3, #3
    18f6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    18f8:	2302      	movs	r3, #2
    18fa:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    18fc:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    18fe:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    1902:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    1904:	4620      	mov	r0, r4
    1906:	f014 f9a0 	bl	15c4a <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    190a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    190c:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    190e:	bf98      	it	ls
    1910:	3301      	addls	r3, #1
    1912:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    1916:	4b14      	ldr	r3, [pc, #80]	; (1968 <event_slave_prepare+0xb50>)
    1918:	9302      	str	r3, [sp, #8]
    191a:	f894 3020 	ldrb.w	r3, [r4, #32]
    191e:	9403      	str	r4, [sp, #12]
    1920:	3307      	adds	r3, #7
    1922:	b2db      	uxtb	r3, r3
    1924:	9301      	str	r3, [sp, #4]
    1926:	68a3      	ldr	r3, [r4, #8]
    1928:	9300      	str	r3, [sp, #0]
    192a:	4622      	mov	r2, r4
    192c:	1d23      	adds	r3, r4, #4
    192e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1930:	4650      	mov	r0, sl
    1932:	f00a fd05 	bl	c340 <event_common_prepare>
    1936:	e5a9      	b.n	148c <event_slave_prepare+0x674>
    1938:	1afd498d 	.word	0x1afd498d
    193c:	00000007 	.word	0x00000007
    1940:	09ce5400 	.word	0x09ce5400
    1944:	00017a2c 	.word	0x00017a2c
    1948:	000f4240 	.word	0x000f4240
    194c:	026259ff 	.word	0x026259ff
    1950:	01c9c37f 	.word	0x01c9c37f
    1954:	0000bc15 	.word	0x0000bc15
    1958:	0000bc01 	.word	0x0000bc01
    195c:	00000e19 	.word	0x00000e19
    1960:	1afd498d 	.word	0x1afd498d
    1964:	20000ed4 	.word	0x20000ed4
    1968:	0000c669 	.word	0x0000c669
    196c:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
    1970:	f894 8078 	ldrb.w	r8, [r4, #120]	; 0x78
    1974:	f1b8 0f00 	cmp.w	r8, #0
    1978:	d1a8      	bne.n	18cc <event_slave_prepare+0xab4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    197a:	48e0      	ldr	r0, [pc, #896]	; (1cfc <event_slave_prepare+0xee4>)
    197c:	f013 feb8 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    1980:	4607      	mov	r7, r0
    1982:	2800      	cmp	r0, #0
    1984:	d0a2      	beq.n	18cc <event_slave_prepare+0xab4>
	if (!conn->role) {
    1986:	f994 301d 	ldrsb.w	r3, [r4, #29]
    198a:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    198c:	f100 0904 	add.w	r9, r0, #4
	if (!conn->role) {
    1990:	db49      	blt.n	1a26 <event_slave_prepare+0xc0e>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1992:	f504 7582 	add.w	r5, r4, #260	; 0x104
    1996:	462b      	mov	r3, r5
    1998:	4642      	mov	r2, r8
    199a:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    199e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    19a2:	f014 fc30 	bl	16206 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    19a6:	2210      	movs	r2, #16
    19a8:	4629      	mov	r1, r5
    19aa:	f204 1025 	addw	r0, r4, #293	; 0x125
    19ae:	f011 fd59 	bl	13464 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    19b2:	f204 111d 	addw	r1, r4, #285	; 0x11d
    19b6:	2208      	movs	r2, #8
    19b8:	f504 709f 	add.w	r0, r4, #318	; 0x13e
    19bc:	f011 fd52 	bl	13464 <memcpy>
		conn->ccm_rx.direction = 0;
    19c0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
		conn->ccm_rx.counter = 0;
    19c4:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
		conn->ccm_rx.direction = 0;
    19c8:	f368 0300 	bfi	r3, r8, #0, #1
    19cc:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		conn->ccm_tx.direction = 1;
    19d0:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
		conn->ccm_rx.counter = 0;
    19d4:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
		conn->ccm_tx.direction = 1;
    19d8:	f043 0301 	orr.w	r3, r3, #1
    19dc:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
		conn->enc_rx = 1;
    19e0:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->ccm_tx.counter = 0;
    19e4:	f884 8135 	strb.w	r8, [r4, #309]	; 0x135
		conn->enc_rx = 1;
    19e8:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_tx.counter = 0;
    19ec:	f884 8136 	strb.w	r8, [r4, #310]	; 0x136
    19f0:	f884 8137 	strb.w	r8, [r4, #311]	; 0x137
    19f4:	f884 8138 	strb.w	r8, [r4, #312]	; 0x138
    19f8:	f884 8139 	strb.w	r8, [r4, #313]	; 0x139
    19fc:	f884 813a 	strb.w	r8, [r4, #314]	; 0x13a
    1a00:	f884 813b 	strb.w	r8, [r4, #315]	; 0x13b
    1a04:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
		conn->enc_rx = 1;
    1a08:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1a0c:	4649      	mov	r1, r9
    1a0e:	4620      	mov	r0, r4
    1a10:	f014 f962 	bl	15cd8 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    1a14:	4639      	mov	r1, r7
    1a16:	4620      	mov	r0, r4
    1a18:	f014 f917 	bl	15c4a <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    1a1c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1a20:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    1a24:	e752      	b.n	18cc <event_slave_prepare+0xab4>
	else if (!conn->pause_tx || conn->refresh) {
    1a26:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    1a2a:	f003 0348 	and.w	r3, r3, #72	; 0x48
    1a2e:	2b08      	cmp	r3, #8
    1a30:	f000 809b 	beq.w	1b6a <event_slave_prepare+0xd52>
		if (conn->llcp.encryption.error_code) {
    1a34:	f894 8079 	ldrb.w	r8, [r4, #121]	; 0x79
    1a38:	f1b8 0f00 	cmp.w	r8, #0
    1a3c:	d020      	beq.n	1a80 <event_slave_prepare+0xc68>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a3e:	7903      	ldrb	r3, [r0, #4]
    1a40:	f043 0303 	orr.w	r3, r3, #3
    1a44:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1a46:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    1a4a:	0698      	lsls	r0, r3, #26
    1a4c:	d512      	bpl.n	1a74 <event_slave_prepare+0xc5c>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    1a4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	if (conn->common.fex_valid &&
    1a52:	0759      	lsls	r1, r3, #29
    1a54:	d50e      	bpl.n	1a74 <event_slave_prepare+0xc5c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1a56:	2311      	movs	r3, #17
    1a58:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a5a:	2303      	movs	r3, #3
    1a5c:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    1a5e:	f887 8009 	strb.w	r8, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    1a62:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1a64:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1a66:	797b      	ldrb	r3, [r7, #5]
    1a68:	3301      	adds	r3, #1
    1a6a:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0U;
    1a6c:	2300      	movs	r3, #0
    1a6e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    1a72:	e7cf      	b.n	1a14 <event_slave_prepare+0xbfc>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1a74:	230d      	movs	r3, #13
    1a76:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1a78:	f887 8008 	strb.w	r8, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1a7c:	2301      	movs	r3, #1
    1a7e:	e7f1      	b.n	1a64 <event_slave_prepare+0xc4c>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1a80:	489e      	ldr	r0, [pc, #632]	; (1cfc <event_slave_prepare+0xee4>)
    1a82:	f013 fe35 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    1a86:	4681      	mov	r9, r0
    1a88:	2800      	cmp	r0, #0
    1a8a:	d069      	beq.n	1b60 <event_slave_prepare+0xd48>
		return 1;
	}

	pdu_ctrl_tx = (void *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a8c:	7903      	ldrb	r3, [r0, #4]
    1a8e:	f043 0303 	orr.w	r3, r3, #3
    1a92:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1a94:	230d      	movs	r3, #13
    1a96:	7143      	strb	r3, [r0, #5]
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1a98:	f04f 0b04 	mov.w	fp, #4
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	entropy_get_entropy_isr(_radio.entropy,
				pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1a9c:	f100 0308 	add.w	r3, r0, #8
	entropy_get_entropy_isr(_radio.entropy,
    1aa0:	4619      	mov	r1, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1aa2:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy,
    1aa6:	220c      	movs	r2, #12
    1aa8:	6868      	ldr	r0, [r5, #4]
    1aaa:	930c      	str	r3, [sp, #48]	; 0x30
    1aac:	f014 f8c1 	bl	15c32 <entropy_get_entropy_isr.constprop.43>
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs), 0);

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ab2:	2208      	movs	r2, #8
    1ab4:	4619      	mov	r1, r3
    1ab6:	f104 0082 	add.w	r0, r4, #130	; 0x82
    1aba:	f011 fcd3 	bl	13464 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    1abe:	465a      	mov	r2, fp
    1ac0:	f109 0110 	add.w	r1, r9, #16
    1ac4:	f204 1021 	addw	r0, r4, #289	; 0x121
    1ac8:	f011 fccc 	bl	13464 <memcpy>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1acc:	f504 7582 	add.w	r5, r4, #260	; 0x104
	       &pdu_ctrl_tx->llctrl.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    1ad0:	4649      	mov	r1, r9
    1ad2:	4620      	mov	r0, r4
    1ad4:	f014 f8b9 	bl	15c4a <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1ad8:	462b      	mov	r3, r5
    1ada:	4642      	mov	r2, r8
    1adc:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    1ae0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    1ae4:	f014 fb8f 	bl	16206 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    1ae8:	2210      	movs	r2, #16
    1aea:	4629      	mov	r1, r5
    1aec:	f204 1025 	addw	r0, r4, #293	; 0x125
    1af0:	f011 fcb8 	bl	13464 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    1af4:	2208      	movs	r2, #8
    1af6:	f204 111d 	addw	r1, r4, #285	; 0x11d
    1afa:	f504 709f 	add.w	r0, r4, #318	; 0x13e
    1afe:	f011 fcb1 	bl	13464 <memcpy>
			conn->ccm_rx.direction = 1;
    1b02:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
			conn->ccm_rx.counter = 0;
    1b06:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
			conn->ccm_rx.direction = 1;
    1b0a:	f043 0301 	orr.w	r3, r3, #1
    1b0e:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
			conn->ccm_tx.direction = 0;
    1b12:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
			conn->ccm_rx.counter = 0;
    1b16:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
			conn->ccm_tx.direction = 0;
    1b1a:	f368 0300 	bfi	r3, r8, #0, #1
    1b1e:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
			conn->enc_rx = 1;
    1b22:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
			conn->ccm_tx.counter = 0;
    1b26:	f884 8135 	strb.w	r8, [r4, #309]	; 0x135
			conn->enc_rx = 1;
    1b2a:	f043 0310 	orr.w	r3, r3, #16
    1b2e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b32:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_tx.counter = 0;
    1b34:	f884 8136 	strb.w	r8, [r4, #310]	; 0x136
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b38:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_tx.counter = 0;
    1b3c:	f884 8137 	strb.w	r8, [r4, #311]	; 0x137
    1b40:	f884 8138 	strb.w	r8, [r4, #312]	; 0x138
    1b44:	f884 8139 	strb.w	r8, [r4, #313]	; 0x139
    1b48:	f884 813a 	strb.w	r8, [r4, #314]	; 0x13a
    1b4c:	f884 813b 	strb.w	r8, [r4, #315]	; 0x13b
    1b50:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b54:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1b56:	2301      	movs	r3, #1
    1b58:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1b5a:	2305      	movs	r3, #5
    1b5c:	71fb      	strb	r3, [r7, #7]
    1b5e:	e759      	b.n	1a14 <event_slave_prepare+0xbfc>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    1b60:	4966      	ldr	r1, [pc, #408]	; (1cfc <event_slave_prepare+0xee4>)
    1b62:	4638      	mov	r0, r7
    1b64:	f013 fddd 	bl	15722 <mem_release>
    1b68:	e6b0      	b.n	18cc <event_slave_prepare+0xab4>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1b6a:	4649      	mov	r1, r9
    1b6c:	4620      	mov	r0, r4
    1b6e:	f014 f8b3 	bl	15cd8 <start_enc_rsp_send>
		conn->pause_rx = 0;
    1b72:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    1b76:	f368 0382 	bfi	r3, r8, #2, #1
		conn->pause_tx = 0;
    1b7a:	f368 03c3 	bfi	r3, r8, #3, #1
    1b7e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    1b82:	e747      	b.n	1a14 <event_slave_prepare+0xbfc>
	if (conn->common.fex_valid) {
    1b84:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    1b88:	f011 0720 	ands.w	r7, r1, #32
    1b8c:	d024      	beq.n	1bd8 <event_slave_prepare+0xdc0>
		conn->llcp_ack = conn->llcp_req;
    1b8e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1b92:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    1b96:	2002      	movs	r0, #2
    1b98:	f009 fdb6 	bl	b708 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1b9c:	4605      	mov	r5, r0
    1b9e:	2800      	cmp	r0, #0
    1ba0:	f43f a943 	beq.w	e2a <event_slave_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    1ba4:	8c23      	ldrh	r3, [r4, #32]
    1ba6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ba8:	2302      	movs	r3, #2
    1baa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1bac:	7a03      	ldrb	r3, [r0, #8]
    1bae:	f043 0303 	orr.w	r3, r3, #3
    1bb2:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    1bb4:	2309      	movs	r3, #9
    1bb6:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1bb8:	72c3      	strb	r3, [r0, #11]
		(void)memset(&pdu_ctrl_rx->llctrl.feature_rsp.features[0], 0x00,
    1bba:	2208      	movs	r2, #8
    1bbc:	2100      	movs	r1, #0
    1bbe:	300c      	adds	r0, #12
    1bc0:	f011 fc7d 	bl	134be <memset>
			conn->llcp_features & 0xFF;
    1bc4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		pdu_ctrl_rx->llctrl.feature_req.features[0] =
    1bc8:	732b      	strb	r3, [r5, #12]
			(conn->llcp_features >> 8) & 0xFF;
    1bca:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    1bcc:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_rx->llctrl.feature_req.features[1] =
    1bce:	736a      	strb	r2, [r5, #13]
		pdu_ctrl_rx->llctrl.feature_req.features[2] =
    1bd0:	73ab      	strb	r3, [r5, #14]
		packet_rx_enqueue();
    1bd2:	f00a fb23 	bl	c21c <packet_rx_enqueue>
    1bd6:	e679      	b.n	18cc <event_slave_prepare+0xab4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1bd8:	4848      	ldr	r0, [pc, #288]	; (1cfc <event_slave_prepare+0xee4>)
    1bda:	f013 fd89 	bl	156f0 <mem_acquire>
	if (node_tx) {
    1bde:	4605      	mov	r5, r0
    1be0:	2800      	cmp	r0, #0
    1be2:	f43f ae73 	beq.w	18cc <event_slave_prepare+0xab4>
		conn->llcp_ack = conn->llcp_req;
    1be6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1bea:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = LL_FEAT;
    1bee:	4b44      	ldr	r3, [pc, #272]	; (1d00 <event_slave_prepare+0xee8>)
    1bf0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1bf4:	7903      	ldrb	r3, [r0, #4]
    1bf6:	f043 0303 	orr.w	r3, r3, #3
    1bfa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    1bfc:	2309      	movs	r3, #9
    1bfe:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    1c00:	f994 301d 	ldrsb.w	r3, [r4, #29]
    1c04:	2b00      	cmp	r3, #0
    1c06:	bfb4      	ite	lt
    1c08:	230e      	movlt	r3, #14
    1c0a:	2308      	movge	r3, #8
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
    1c0c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    1c0e:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
    1c10:	4639      	mov	r1, r7
    1c12:	4410      	add	r0, r2
    1c14:	f011 fc53 	bl	134be <memset>
			conn->llcp_features & 0xFF;
    1c18:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    1c1c:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    1c1e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    1c20:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    1c22:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    1c24:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    1c26:	4629      	mov	r1, r5
		ctrl_tx_enqueue(conn, node_tx);
    1c28:	4620      	mov	r0, r4
    1c2a:	f014 f80e 	bl	15c4a <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    1c2e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    1c32:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    1c36:	e649      	b.n	18cc <event_slave_prepare+0xab4>
	if (conn->llcp_version.tx == 0) {
    1c38:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    1c3c:	07da      	lsls	r2, r3, #31
    1c3e:	d424      	bmi.n	1c8a <event_slave_prepare+0xe72>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1c40:	482e      	ldr	r0, [pc, #184]	; (1cfc <event_slave_prepare+0xee4>)
    1c42:	f013 fd55 	bl	156f0 <mem_acquire>
		if (node_tx) {
    1c46:	4601      	mov	r1, r0
    1c48:	2800      	cmp	r0, #0
    1c4a:	f43f ae3f 	beq.w	18cc <event_slave_prepare+0xab4>
			conn->llcp_ack = conn->llcp_req;
    1c4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1c52:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1U;
    1c56:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    1c5a:	f043 0301 	orr.w	r3, r3, #1
    1c5e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c62:	7903      	ldrb	r3, [r0, #4]
    1c64:	f043 0303 	orr.w	r3, r3, #3
    1c68:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    1c6a:	2306      	movs	r3, #6
    1c6c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1c6e:	230c      	movs	r3, #12
    1c70:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    1c72:	230a      	movs	r3, #10
    1c74:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    1c76:	f06f 030e 	mvn.w	r3, #14
    1c7a:	7243      	strb	r3, [r0, #9]
    1c7c:	2305      	movs	r3, #5
    1c7e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    1c80:	f04f 33ff 	mov.w	r3, #4294967295
    1c84:	72c3      	strb	r3, [r0, #11]
    1c86:	7303      	strb	r3, [r0, #12]
    1c88:	e7ce      	b.n	1c28 <event_slave_prepare+0xe10>
	} else if (conn->llcp_version.rx != 0) {
    1c8a:	079f      	lsls	r7, r3, #30
    1c8c:	f57f a8cd 	bpl.w	e2a <event_slave_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    1c90:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1c94:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    1c98:	2002      	movs	r0, #2
    1c9a:	f009 fd35 	bl	b708 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1c9e:	2800      	cmp	r0, #0
    1ca0:	f43f a8c3 	beq.w	e2a <event_slave_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    1ca4:	8c23      	ldrh	r3, [r4, #32]
    1ca6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ca8:	2302      	movs	r3, #2
    1caa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1cac:	7a03      	ldrb	r3, [r0, #8]
    1cae:	f043 0303 	orr.w	r3, r3, #3
    1cb2:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    1cb4:	2306      	movs	r3, #6
    1cb6:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    1cb8:	230c      	movs	r3, #12
    1cba:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    1cbc:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
    1cc0:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    1cc2:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
    1cc6:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    1cca:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
    1cce:	f8a0 300f 	strh.w	r3, [r0, #15]
    1cd2:	e77e      	b.n	1bd2 <event_slave_prepare+0xdba>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1cd4:	4809      	ldr	r0, [pc, #36]	; (1cfc <event_slave_prepare+0xee4>)
    1cd6:	f013 fd0b 	bl	156f0 <mem_acquire>
	if (node_tx) {
    1cda:	4601      	mov	r1, r0
    1cdc:	2800      	cmp	r0, #0
    1cde:	f43f adf5 	beq.w	18cc <event_slave_prepare+0xab4>
		conn->llcp_ack = conn->llcp_req;
    1ce2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1ce6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cea:	7903      	ldrb	r3, [r0, #4]
    1cec:	f043 0303 	orr.w	r3, r3, #3
    1cf0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1cf2:	2301      	movs	r3, #1
    1cf4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1cf6:	2312      	movs	r3, #18
    1cf8:	71c3      	strb	r3, [r0, #7]
    1cfa:	e795      	b.n	1c28 <event_slave_prepare+0xe10>
    1cfc:	20000ed4 	.word	0x20000ed4
    1d00:	0001417f 	.word	0x0001417f
	if (conn->llcp.phy_upd_ind.initiate) {
    1d04:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    1d08:	07d5      	lsls	r5, r2, #31
    1d0a:	d54d      	bpl.n	1da8 <event_slave_prepare+0xf90>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1d0c:	4872      	ldr	r0, [pc, #456]	; (1ed8 <event_slave_prepare+0x10c0>)
    1d0e:	f013 fcef 	bl	156f0 <mem_acquire>
		if (node_tx) {
    1d12:	4605      	mov	r5, r0
    1d14:	2800      	cmp	r0, #0
    1d16:	f43f add9 	beq.w	18cc <event_slave_prepare+0xab4>
			conn->llcp.phy_upd_ind.initiate = 0U;
    1d1a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    1d1e:	f36f 0300 	bfc	r3, #0, #1
    1d22:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    1d26:	b2db      	uxtb	r3, r3
    1d28:	f3c3 0782 	ubfx	r7, r3, #2, #3
    1d2c:	ea57 1753 	orrs.w	r7, r7, r3, lsr #5
    1d30:	d134      	bne.n	1d9c <event_slave_prepare+0xf84>
				conn->llcp_ack = conn->llcp_req;
    1d32:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    1d36:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    1d3a:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0U;
    1d3c:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    1d40:	d516      	bpl.n	1d70 <event_slave_prepare+0xf58>
					node_rx = packet_rx_reserve_get(2);
    1d42:	2002      	movs	r0, #2
    1d44:	f009 fce0 	bl	b708 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    1d48:	2800      	cmp	r0, #0
    1d4a:	f43f a86e 	beq.w	e2a <event_slave_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
    1d4e:	8c23      	ldrh	r3, [r4, #32]
    1d50:	80c3      	strh	r3, [r0, #6]
					upd->status = 0U;
    1d52:	7207      	strb	r7, [r0, #8]
					node_rx->hdr.type =
    1d54:	230e      	movs	r3, #14
    1d56:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    1d58:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    1d5c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1d60:	7243      	strb	r3, [r0, #9]
					upd->rx = conn->phy_rx;
    1d62:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    1d66:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d6a:	7283      	strb	r3, [r0, #10]
					packet_rx_enqueue();
    1d6c:	f00a fa56 	bl	c21c <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d70:	792b      	ldrb	r3, [r5, #4]
    1d72:	f043 0303 	orr.w	r3, r3, #3
    1d76:	712b      	strb	r3, [r5, #4]
			pdu_ctrl_tx->len =
    1d78:	2305      	movs	r3, #5
    1d7a:	716b      	strb	r3, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1d7c:	2318      	movs	r3, #24
    1d7e:	71eb      	strb	r3, [r5, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1d80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    1d84:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1d88:	722b      	strb	r3, [r5, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1d8a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    1d8e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    1d92:	726b      	strb	r3, [r5, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    1d94:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    1d98:	816b      	strh	r3, [r5, #10]
    1d9a:	e57a      	b.n	1892 <event_slave_prepare+0xa7a>
								 conn->latency +
    1d9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1d9e:	3306      	adds	r3, #6
    1da0:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    1da2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    1da6:	e7e3      	b.n	1d70 <event_slave_prepare+0xf58>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    1da8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    1dac:	1af3      	subs	r3, r6, r3
    1dae:	0419      	lsls	r1, r3, #16
    1db0:	f53f ad8c 	bmi.w	18cc <event_slave_prepare+0xab4>
		conn->llcp_ack = conn->llcp_req;
    1db4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    1db8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_rx = conn->phy_rx;
    1dbc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
		old_tx = conn->phy_tx;
    1dc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		u16_t eff_rx_time = conn->max_rx_time;
    1dc4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
		if (conn->llcp.phy_upd_ind.tx) {
    1dc6:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    1dca:	f3c3 07c2 	ubfx	r7, r3, #3, #3
		old_rx = conn->phy_rx;
    1dce:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
    1dd2:	d168      	bne.n	1ea6 <event_slave_prepare+0x108e>
		u16_t eff_tx_time = conn->max_tx_time;
    1dd4:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
		if (conn->llcp.phy_upd_ind.rx) {
    1dd8:	f012 0fe0 	tst.w	r2, #224	; 0xe0
    1ddc:	d008      	beq.n	1df0 <event_slave_prepare+0xfd8>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    1dde:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    1de2:	0951      	lsrs	r1, r2, #5
    1de4:	f361 0302 	bfi	r3, r1, #0, #3
    1de8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
				eff_rx_time =
    1dec:	f44f 75a4 	mov.w	r5, #328	; 0x148
		conn->phy_flags = conn->phy_pref_flags;
    1df0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    1df4:	f3c3 1180 	ubfx	r1, r3, #6, #1
    1df8:	f361 13c7 	bfi	r3, r1, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    1dfc:	0792      	lsls	r2, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    1dfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    1e02:	d40b      	bmi.n	1e1c <event_slave_prepare+0x1004>
    1e04:	b2db      	uxtb	r3, r3
    1e06:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1e0a:	42bb      	cmp	r3, r7
    1e0c:	d106      	bne.n	1e1c <event_slave_prepare+0x1004>
		    (conn->phy_rx == old_rx)) {
    1e0e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    1e12:	f003 0307 	and.w	r3, r3, #7
    1e16:	4283      	cmp	r3, r0
    1e18:	f43f ad58 	beq.w	18cc <event_slave_prepare+0xab4>
		node_rx = packet_rx_reserve_get(2);
    1e1c:	2002      	movs	r0, #2
    1e1e:	f009 fc73 	bl	b708 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1e22:	2800      	cmp	r0, #0
    1e24:	f43f a801 	beq.w	e2a <event_slave_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    1e28:	8c23      	ldrh	r3, [r4, #32]
    1e2a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1e2c:	230e      	movs	r3, #14
    1e2e:	7103      	strb	r3, [r0, #4]
		upd->status = 0U;
    1e30:	2300      	movs	r3, #0
    1e32:	7203      	strb	r3, [r0, #8]
		upd->tx = conn->phy_tx;
    1e34:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    1e38:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1e3c:	7243      	strb	r3, [r0, #9]
		upd->rx = conn->phy_rx;
    1e3e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    1e42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1e46:	7283      	strb	r3, [r0, #10]
			packet_rx_enqueue();
    1e48:	f00a f9e8 	bl	c21c <packet_rx_enqueue>
		if ((eff_tx_time == conn->max_tx_time) &&
    1e4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1e4e:	4543      	cmp	r3, r8
    1e50:	d103      	bne.n	1e5a <event_slave_prepare+0x1042>
    1e52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1e54:	42ab      	cmp	r3, r5
    1e56:	f43f ad39 	beq.w	18cc <event_slave_prepare+0xab4>
		conn->max_tx_time = eff_tx_time;
    1e5a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
		conn->max_rx_time = eff_rx_time;
    1e5e:	86e5      	strh	r5, [r4, #54]	; 0x36
		node_rx = packet_rx_reserve_get(2);
    1e60:	2002      	movs	r0, #2
    1e62:	f009 fc51 	bl	b708 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1e66:	2800      	cmp	r0, #0
    1e68:	f43e afdf 	beq.w	e2a <event_slave_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    1e6c:	8c23      	ldrh	r3, [r4, #32]
    1e6e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e70:	2302      	movs	r3, #2
    1e72:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1e74:	7a03      	ldrb	r3, [r0, #8]
    1e76:	f043 0303 	orr.w	r3, r3, #3
    1e7a:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    1e7c:	2309      	movs	r3, #9
    1e7e:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1e80:	2315      	movs	r3, #21
    1e82:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    1e84:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1e86:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    1e88:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1e8a:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    1e8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1e8e:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    1e90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1e92:	8243      	strh	r3, [r0, #18]
			packet_rx_enqueue();
    1e94:	f00a f9c2 	bl	c21c <packet_rx_enqueue>
		conn->evt_len_upd = 1U;
    1e98:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    1e9c:	f043 0302 	orr.w	r3, r3, #2
    1ea0:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
    1ea4:	e512      	b.n	18cc <event_slave_prepare+0xab4>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    1ea6:	f3c2 0182 	ubfx	r1, r2, #2, #3
    1eaa:	f361 03c5 	bfi	r3, r1, #3, #3
    1eae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			u16_t tx_time = RADIO_PKT_TIME(conn->max_tx_octets,
    1eb2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1eb4:	330e      	adds	r3, #14
    1eb6:	00db      	lsls	r3, r3, #3
    1eb8:	f3c1 0140 	ubfx	r1, r1, #1, #1
    1ebc:	40cb      	lsrs	r3, r1
    1ebe:	b29b      	uxth	r3, r3
			if (tx_time >=
    1ec0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1ec4:	d305      	bcc.n	1ed2 <event_slave_prepare+0x10ba>
				eff_tx_time = MIN(tx_time,
    1ec6:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
    1eca:	4598      	cmp	r8, r3
    1ecc:	bf28      	it	cs
    1ece:	4698      	movcs	r8, r3
    1ed0:	e782      	b.n	1dd8 <event_slave_prepare+0xfc0>
				eff_tx_time =
    1ed2:	f44f 78a4 	mov.w	r8, #328	; 0x148
    1ed6:	e77f      	b.n	1dd8 <event_slave_prepare+0xfc0>
    1ed8:	20000ed4 	.word	0x20000ed4
    1edc:	00000000 	.word	0x00000000

00001ee0 <isr>:
{
    1ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ee4:	b091      	sub	sp, #68	; 0x44
	trx_done = radio_is_done();
    1ee6:	f00d fcc3 	bl	f870 <radio_is_done>
    1eea:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    1eec:	b35e      	cbz	r6, 1f46 <isr+0x66>
		crc_ok = radio_crc_is_valid();
    1eee:	f00d fcdf 	bl	f8b0 <radio_crc_is_valid>
    1ef2:	fa5f f980 	uxtb.w	r9, r0
		devmatch_ok = radio_filter_has_match();
    1ef6:	f00d fd5f 	bl	f9b8 <radio_filter_has_match>
    1efa:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
    1efc:	f00d fd66 	bl	f9cc <radio_filter_match_get>
    1f00:	b2c7      	uxtb	r7, r0
		irkmatch_ok = radio_ar_has_match();
    1f02:	f00d ff21 	bl	fd48 <radio_ar_has_match>
    1f06:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    1f0a:	f00d ff0b 	bl	fd24 <radio_ar_match_get>
    1f0e:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    1f12:	f00d fd1b 	bl	f94c <radio_rssi_is_ready>
    1f16:	fa5f f880 	uxtb.w	r8, r0
	switch (_radio.state) {
    1f1a:	4caf      	ldr	r4, [pc, #700]	; (21d8 <isr+0x2f8>)
	radio_status_reset();
    1f1c:	f00d fc92 	bl	f844 <radio_status_reset>
	radio_tmr_status_reset();
    1f20:	f00d fd66 	bl	f9f0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    1f24:	f00d fd40 	bl	f9a8 <radio_filter_status_reset>
	radio_ar_status_reset();
    1f28:	f00d ff02 	bl	fd30 <radio_ar_status_reset>
	radio_rssi_status_reset();
    1f2c:	f00d fd06 	bl	f93c <radio_rssi_status_reset>
	switch (_radio.state) {
    1f30:	7d63      	ldrb	r3, [r4, #21]
    1f32:	2b05      	cmp	r3, #5
    1f34:	d82c      	bhi.n	1f90 <isr+0xb0>
    1f36:	e8df f013 	tbh	[pc, r3, lsl #1]
    1f3a:	0079      	.short	0x0079
    1f3c:	000e00c2 	.word	0x000e00c2
    1f40:	08b008b0 	.word	0x08b008b0
    1f44:	08b0      	.short	0x08b0
		devmatch_id = irkmatch_id = 0xFF;
    1f46:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    1f4a:	46b0      	mov	r8, r6
    1f4c:	46b2      	mov	sl, r6
    1f4e:	4635      	mov	r5, r6
    1f50:	46b1      	mov	r9, r6
		devmatch_id = irkmatch_id = 0xFF;
    1f52:	465f      	mov	r7, fp
    1f54:	e7e1      	b.n	1f1a <isr+0x3a>
	_radio.state = STATE_RX;
    1f56:	2301      	movs	r3, #1
    1f58:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get() + RADIO_TIFS + 4 +
    1f5a:	f00d fe2f 	bl	fbbc <radio_tmr_tifs_base_get>
    1f5e:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    1f60:	2096      	movs	r0, #150	; 0x96
    1f62:	f00d fd55 	bl	fa10 <radio_tmr_tifs_set>
	switch (_radio.role) {
    1f66:	7d23      	ldrb	r3, [r4, #20]
    1f68:	3b01      	subs	r3, #1
    1f6a:	2b03      	cmp	r3, #3
    1f6c:	d810      	bhi.n	1f90 <isr+0xb0>
    1f6e:	e8df f003 	tbb	[pc, r3]
    1f72:	3002      	.short	0x3002
    1f74:	6060      	.short	0x6060
		radio_switch_complete_and_tx(0, 0, 0, 0);
    1f76:	2300      	movs	r3, #0
    1f78:	461a      	mov	r2, r3
    1f7a:	4619      	mov	r1, r3
    1f7c:	4618      	mov	r0, r3
    1f7e:	f00d fcb5 	bl	f8ec <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    1f82:	f00d fca3 	bl	f8cc <radio_pkt_scratch_get>
    1f86:	f00d fc33 	bl	f7f0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    1f8a:	f00d fc67 	bl	f85c <radio_is_ready>
    1f8e:	b128      	cbz	r0, 1f9c <isr+0xbc>
		LL_ASSERT(0);
    1f90:	4040      	eors	r0, r0
    1f92:	f380 8811 	msr	BASEPRI, r0
    1f96:	f04f 0003 	mov.w	r0, #3
    1f9a:	df02      	svc	2
		if (ctrl_rl_enabled()) {
    1f9c:	f00c fec2 	bl	ed24 <ctrl_rl_enabled>
    1fa0:	b138      	cbz	r0, 1fb2 <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
    1fa2:	a80e      	add	r0, sp, #56	; 0x38
    1fa4:	f00c fc96 	bl	e8d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    1fa8:	4601      	mov	r1, r0
    1faa:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    1fae:	f00d fe8d 	bl	fccc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    1fb2:	2100      	movs	r1, #0
    1fb4:	4608      	mov	r0, r1
    1fb6:	f014 f972 	bl	1629e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    1fba:	35cb      	adds	r5, #203	; 0xcb
		hcto -= radio_tx_chain_delay_get(0, 0);
    1fbc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    1fbe:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    1fc0:	4608      	mov	r0, r1
    1fc2:	f014 f968 	bl	16296 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    1fc6:	1a28      	subs	r0, r5, r0
    1fc8:	f00d fdb2 	bl	fb30 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    1fcc:	f00d fde8 	bl	fba0 <radio_tmr_end_capture>
    1fd0:	e02c      	b.n	202c <isr+0x14c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    1fd2:	2300      	movs	r3, #0
    1fd4:	461a      	mov	r2, r3
    1fd6:	4619      	mov	r1, r3
    1fd8:	4618      	mov	r0, r3
    1fda:	f00d fc87 	bl	f8ec <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    1fde:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    1fe2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    1fe6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1fea:	3008      	adds	r0, #8
    1fec:	f00d fc00 	bl	f7f0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    1ff0:	f00d fc34 	bl	f85c <radio_is_ready>
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d1cb      	bne.n	1f90 <isr+0xb0>
		if (ctrl_rl_enabled()) {
    1ff8:	f00c fe94 	bl	ed24 <ctrl_rl_enabled>
    1ffc:	b138      	cbz	r0, 200e <isr+0x12e>
			u8_t count, *irks = ctrl_irks_get(&count);
    1ffe:	a80e      	add	r0, sp, #56	; 0x38
    2000:	f00c fc68 	bl	e8d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    2004:	4601      	mov	r1, r0
    2006:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    200a:	f00d fe5f 	bl	fccc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    200e:	2100      	movs	r1, #0
    2010:	4608      	mov	r0, r1
    2012:	f014 f944 	bl	1629e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    2016:	35cb      	adds	r5, #203	; 0xcb
		hcto -= radio_tx_chain_delay_get(0, 0);
    2018:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    201a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    201c:	4608      	mov	r0, r1
    201e:	f014 f93a 	bl	16296 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    2022:	1a28      	subs	r0, r5, r0
    2024:	f00d fd84 	bl	fb30 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    2028:	f00d fc78 	bl	f91c <radio_rssi_measure>
}
    202c:	b011      	add	sp, #68	; 0x44
    202e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    2032:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    2036:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    203a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    203e:	2100      	movs	r1, #0
    2040:	09d3      	lsrs	r3, r2, #7
    2042:	f000 0007 	and.w	r0, r0, #7
    2046:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    204a:	f00d fc4f 	bl	f8ec <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    204e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    2052:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    2056:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    205a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    205e:	3108      	adds	r1, #8
    2060:	f013 fd35 	bl	15ace <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    2064:	f00d fbfa 	bl	f85c <radio_is_ready>
    2068:	2800      	cmp	r0, #0
    206a:	d191      	bne.n	1f90 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    206c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2070:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    2074:	2101      	movs	r1, #1
    2076:	f000 0007 	and.w	r0, r0, #7
    207a:	f014 f910 	bl	1629e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    207e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    2082:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    2086:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get() + RADIO_TIFS + 4 +
    208a:	35a3      	adds	r5, #163	; 0xa3
	switch (phy) {
    208c:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    208e:	4405      	add	r5, r0
	switch (phy) {
    2090:	d013      	beq.n	20ba <isr+0x1da>
		return 40;
    2092:	2b04      	cmp	r3, #4
    2094:	bf0c      	ite	eq
    2096:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    209a:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    209c:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    209e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    20a2:	09c1      	lsrs	r1, r0, #7
    20a4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    20a8:	f014 f8f5 	bl	16296 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    20ac:	1a28      	subs	r0, r5, r0
    20ae:	f00d fd3f 	bl	fb30 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    20b2:	2001      	movs	r0, #1
    20b4:	f009 ff5c 	bl	bf70 <packet_tx_enqueue>
    20b8:	e7b8      	b.n	202c <isr+0x14c>
		return 24;
    20ba:	2018      	movs	r0, #24
    20bc:	e7ee      	b.n	209c <isr+0x1bc>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    20be:	b926      	cbnz	r6, 20ca <isr+0x1ea>
		_radio.state = STATE_CLOSE;
    20c0:	2303      	movs	r3, #3
    20c2:	7563      	strb	r3, [r4, #21]
		radio_disable();
    20c4:	f00d fbac 	bl	f820 <radio_disable>
    20c8:	e7b0      	b.n	202c <isr+0x14c>
	switch (_radio.role) {
    20ca:	7d23      	ldrb	r3, [r4, #20]
    20cc:	b2db      	uxtb	r3, r3
    20ce:	2b02      	cmp	r3, #2
    20d0:	f000 82a0 	beq.w	2614 <isr+0x734>
    20d4:	2b03      	cmp	r3, #3
    20d6:	f000 83b2 	beq.w	283e <isr+0x95e>
    20da:	2b01      	cmp	r3, #1
    20dc:	f47f af58 	bne.w	1f90 <isr+0xb0>
		if (crc_ok) {
    20e0:	f1b9 0f00 	cmp.w	r9, #0
    20e4:	d0ec      	beq.n	20c0 <isr+0x1e0>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    20e6:	f1ba 0f00 	cmp.w	sl, #0
    20ea:	d040      	beq.n	216e <isr+0x28e>
    20ec:	4658      	mov	r0, fp
    20ee:	f00c fc1b 	bl	e928 <ctrl_rl_irk_idx>
    20f2:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	pdu_adv = (void *)radio_pkt_scratch_get();
    20f6:	f00d fbe9 	bl	f8cc <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    20fa:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    20fe:	4606      	mov	r6, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    2100:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    2102:	232b      	movs	r3, #43	; 0x2b
    2104:	f04f 0927 	mov.w	r9, #39	; 0x27
    2108:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    210c:	f000 030f 	and.w	r3, r0, #15
    2110:	2b03      	cmp	r3, #3
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    2112:	eb04 0709 	add.w	r7, r4, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    2116:	d110      	bne.n	213a <isr+0x25a>
    2118:	7873      	ldrb	r3, [r6, #1]
    211a:	2b0c      	cmp	r3, #12
    211c:	d10d      	bne.n	213a <isr+0x25a>
	    (_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    211e:	f814 3009 	ldrb.w	r3, [r4, r9]
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    2122:	f003 030f 	and.w	r3, r3, #15
    2126:	2b01      	cmp	r3, #1
    2128:	d007      	beq.n	213a <isr+0x25a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    212a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    212e:	065a      	lsls	r2, r3, #25
    2130:	d51f      	bpl.n	2172 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    2132:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    2136:	065b      	lsls	r3, r3, #25
    2138:	d445      	bmi.n	21c6 <isr+0x2e6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    213a:	7830      	ldrb	r0, [r6, #0]
    213c:	f000 030f 	and.w	r3, r0, #15
    2140:	2b05      	cmp	r3, #5
    2142:	d1bd      	bne.n	20c0 <isr+0x1e0>
    2144:	7873      	ldrb	r3, [r6, #1]
    2146:	2b22      	cmp	r3, #34	; 0x22
    2148:	d1ba      	bne.n	20c0 <isr+0x1e0>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    214a:	f814 3009 	ldrb.w	r3, [r4, r9]
    214e:	f003 030f 	and.w	r3, r3, #15
    2152:	2b01      	cmp	r3, #1
    2154:	f040 821d 	bne.w	2592 <isr+0x6b2>
					    ci->connect_ind.init_addr,
    2158:	1cb5      	adds	r5, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    215a:	aa0e      	add	r2, sp, #56	; 0x38
    215c:	4629      	mov	r1, r5
    215e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2162:	f00c fd83 	bl	ec6c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    2166:	2800      	cmp	r0, #0
    2168:	d138      	bne.n	21dc <isr+0x2fc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    216a:	2000      	movs	r0, #0
    216c:	e046      	b.n	21fc <isr+0x31c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    216e:	20ff      	movs	r0, #255	; 0xff
    2170:	e7bf      	b.n	20f2 <isr+0x212>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    2172:	aa0e      	add	r2, sp, #56	; 0x38
    2174:	1cb1      	adds	r1, r6, #2
    2176:	f3c0 1080 	ubfx	r0, r0, #6, #1
    217a:	f00c fd77 	bl	ec6c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    217e:	2800      	cmp	r0, #0
    2180:	d0d7      	beq.n	2132 <isr+0x252>
	return (adv->tx_addr == sr->rx_addr) &&
    2182:	f814 3009 	ldrb.w	r3, [r4, r9]
    2186:	7832      	ldrb	r2, [r6, #0]
    2188:	f3c3 1380 	ubfx	r3, r3, #6, #1
    218c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    2190:	d1d3      	bne.n	213a <isr+0x25a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    2192:	2206      	movs	r2, #6
    2194:	f106 0108 	add.w	r1, r6, #8
    2198:	1cb8      	adds	r0, r7, #2
    219a:	f011 f953 	bl	13444 <memcmp>
	    (_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    219e:	2800      	cmp	r0, #0
    21a0:	d1cb      	bne.n	213a <isr+0x25a>
		_radio.state = STATE_CLOSE;
    21a2:	2303      	movs	r3, #3
    21a4:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    21a6:	f00d fbab 	bl	f900 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    21aa:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    21ae:	2327      	movs	r3, #39	; 0x27
    21b0:	fb03 4000 	mla	r0, r3, r0, r4
    21b4:	307b      	adds	r0, #123	; 0x7b
    21b6:	f00d fb21 	bl	f7fc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    21ba:	f00d fb4f 	bl	f85c <radio_is_ready>
    21be:	2800      	cmp	r0, #0
    21c0:	f43f af34 	beq.w	202c <isr+0x14c>
    21c4:	e6e4      	b.n	1f90 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    21c6:	2d00      	cmp	r5, #0
    21c8:	d1db      	bne.n	2182 <isr+0x2a2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    21ca:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    21ce:	f00c fbc7 	bl	e960 <ctrl_irk_whitelisted>
    21d2:	2800      	cmp	r0, #0
    21d4:	d1d5      	bne.n	2182 <isr+0x2a2>
    21d6:	e7b0      	b.n	213a <isr+0x25a>
    21d8:	20000d78 	.word	0x20000d78
		       isr_adv_ci_adva_check(adv, ci) &&
    21dc:	4631      	mov	r1, r6
    21de:	4638      	mov	r0, r7
    21e0:	f013 fc9d 	bl	15b1e <isr_adv_ci_adva_check>
					    rl_idx) &&
    21e4:	2800      	cmp	r0, #0
    21e6:	d0c0      	beq.n	216a <isr+0x28a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    21e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	if (rl_idx != FILTER_IDX_NONE) {
    21ec:	2bff      	cmp	r3, #255	; 0xff
    21ee:	f000 81bd 	beq.w	256c <isr+0x68c>
		return rl_idx == _radio.advertiser.rl_idx;
    21f2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    21f6:	1ac7      	subs	r7, r0, r3
    21f8:	4278      	negs	r0, r7
    21fa:	4178      	adcs	r0, r7
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    21fc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    2200:	2800      	cmp	r0, #0
    2202:	f43f af5d 	beq.w	20c0 <isr+0x1e0>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    2206:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    220a:	b133      	cbz	r3, 221a <isr+0x33a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    220c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    2210:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    2214:	429a      	cmp	r2, r3
    2216:	f47f af53 	bne.w	20c0 <isr+0x1e0>
    221a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    221e:	2b00      	cmp	r3, #0
    2220:	f43f af4e 	beq.w	20c0 <isr+0x1e0>
			node_rx = packet_rx_reserve_get(4);
    2224:	2004      	movs	r0, #4
    2226:	f009 fa6f 	bl	b708 <packet_rx_reserve_get>
		if (!node_rx) {
    222a:	4607      	mov	r7, r0
    222c:	2800      	cmp	r0, #0
    222e:	f43f af47 	beq.w	20c0 <isr+0x1e0>
		_radio.state = STATE_STOP;
    2232:	f04f 0b04 	mov.w	fp, #4
    2236:	f884 b015 	strb.w	fp, [r4, #21]
		radio_disable();
    223a:	f00d faf1 	bl	f820 <radio_disable>
		conn = _radio.advertiser.conn;
    223e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    2242:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    2246:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    2248:	f44f 72b0 	mov.w	r2, #352	; 0x160
    224c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    224e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    2252:	f013 fa84 	bl	1575e <mem_index_get>
		memcpy(&conn->crc_init[0],
    2256:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    2258:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    225a:	f106 0112 	add.w	r1, r6, #18
    225e:	f105 0014 	add.w	r0, r5, #20
    2262:	f011 f8ff 	bl	13464 <memcpy>
		memcpy(&conn->access_addr[0],
    2266:	f105 0310 	add.w	r3, r5, #16
    226a:	4618      	mov	r0, r3
    226c:	465a      	mov	r2, fp
		memcpy(&conn->data_chan_map[0],
    226e:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    2272:	f106 010e 	add.w	r1, r6, #14
    2276:	930a      	str	r3, [sp, #40]	; 0x28
    2278:	f011 f8f4 	bl	13464 <memcpy>
		memcpy(&conn->data_chan_map[0],
    227c:	2205      	movs	r2, #5
    227e:	f106 011e 	add.w	r1, r6, #30
    2282:	4640      	mov	r0, r8
    2284:	f011 f8ee 	bl	13464 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    2288:	2105      	movs	r1, #5
    228a:	4640      	mov	r0, r8
    228c:	f013 faa5 	bl	157da <util_ones_count_get>
		conn->data_chan_count =
    2290:	7f6a      	ldrb	r2, [r5, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    2292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    2294:	f360 0205 	bfi	r2, r0, #0, #6
    2298:	776a      	strb	r2, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    229a:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    229e:	f3c2 0204 	ubfx	r2, r2, #0, #5
    22a2:	77aa      	strb	r2, [r5, #30]
			pdu_adv->connect_ind.interval;
    22a4:	8b32      	ldrh	r2, [r6, #24]
		conn->conn_interval =
    22a6:	84aa      	strh	r2, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    22a8:	f240 48e2 	movw	r8, #1250	; 0x4e2
    22ac:	fb08 f802 	mul.w	r8, r8, r2
		conn->latency = pdu_adv->connect_ind.latency;
    22b0:	7ef1      	ldrb	r1, [r6, #27]
    22b2:	7eb2      	ldrb	r2, [r6, #26]
    22b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    22b8:	84ea      	strh	r2, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    22ba:	4619      	mov	r1, r3
    22bc:	465a      	mov	r2, fp
    22be:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    22c2:	f011 f8cf 	bl	13464 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    22c6:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    22c8:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    22ca:	f242 7210 	movw	r2, #10000	; 0x2710
    22ce:	fb02 8303 	mla	r3, r2, r3, r8
    22d2:	3b01      	subs	r3, #1
    22d4:	fbb3 f3f8 	udiv	r3, r3, r8
    22d8:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    22da:	4bc5      	ldr	r3, [pc, #788]	; (25f0 <isr+0x710>)
    22dc:	4443      	add	r3, r8
    22de:	fbb3 f3f8 	udiv	r3, r3, r8
    22e2:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    22e6:	4bc3      	ldr	r3, [pc, #780]	; (25f4 <isr+0x714>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    22e8:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    22ea:	4443      	add	r3, r8
    22ec:	fbb3 f3f8 	udiv	r3, r3, r8
    22f0:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    22f2:	4282      	cmp	r2, r0
    22f4:	4613      	mov	r3, r2
    22f6:	bfc4      	itt	gt
    22f8:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    22fc:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    22fe:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    2302:	bfc4      	itt	gt
    2304:	18d2      	addgt	r2, r2, r3
    2306:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    2308:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    230a:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		node_rx->hdr.handle = conn->handle;
    230e:	80fb      	strh	r3, [r7, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    2310:	2308      	movs	r3, #8
    2312:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    2314:	4631      	mov	r1, r6
		radio_le_conn_cmplt->status = 0x00;
    2316:	f44f 7380 	mov.w	r3, #256	; 0x100
    231a:	813b      	strh	r3, [r7, #8]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    231c:	f811 3b08 	ldrb.w	r3, [r1], #8
    2320:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2324:	75fb      	strb	r3, [r7, #23]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    2326:	2206      	movs	r2, #6
    2328:	f107 0018 	add.w	r0, r7, #24
    232c:	f011 f89a 	bl	13464 <memcpy>
    2330:	f107 030b 	add.w	r3, r7, #11
    2334:	930a      	str	r3, [sp, #40]	; 0x28
    2336:	f106 0b02 	add.w	fp, r6, #2
    233a:	f107 0311 	add.w	r3, r7, #17
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    233e:	f1ba 0f00 	cmp.w	sl, #0
    2342:	f000 8143 	beq.w	25cc <isr+0x6ec>
    2346:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    234a:	28ff      	cmp	r0, #255	; 0xff
    234c:	f000 813e 	beq.w	25cc <isr+0x6ec>
			ll_rl_id_addr_get(rl_idx,
    2350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2352:	930b      	str	r3, [sp, #44]	; 0x2c
    2354:	f107 010a 	add.w	r1, r7, #10
    2358:	f00c fc68 	bl	ec2c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    235c:	7aba      	ldrb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    235e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type += 2;
    2360:	3202      	adds	r2, #2
    2362:	72ba      	strb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    2364:	4659      	mov	r1, fp
    2366:	2206      	movs	r2, #6
    2368:	4618      	mov	r0, r3
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    236a:	f011 f87b 	bl	13464 <memcpy>
			pdu_adv->connect_ind.interval;
    236e:	7e72      	ldrb	r2, [r6, #25]
    2370:	7e33      	ldrb	r3, [r6, #24]
    2372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->interval =
    2376:	83fb      	strh	r3, [r7, #30]
			pdu_adv->connect_ind.latency;
    2378:	7ef2      	ldrb	r2, [r6, #27]
    237a:	7eb3      	ldrb	r3, [r6, #26]
    237c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->latency =
    2380:	843b      	strh	r3, [r7, #32]
			pdu_adv->connect_ind.timeout;
    2382:	7f72      	ldrb	r2, [r6, #29]
    2384:	7f33      	ldrb	r3, [r6, #28]
    2386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->timeout =
    238a:	847b      	strh	r3, [r7, #34]	; 0x22
			pdu_adv->connect_ind.sca;
    238c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    2390:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    2394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rx_fc_lock(conn->handle);
    2398:	8c28      	ldrh	r0, [r5, #32]
    239a:	f009 fc07 	bl	bbac <rx_fc_lock>
		packet_rx_enqueue();
    239e:	f009 ff3d 	bl	c21c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    23a2:	2003      	movs	r0, #3
    23a4:	f009 f9b0 	bl	b708 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    23a8:	2800      	cmp	r0, #0
    23aa:	f43f adf1 	beq.w	1f90 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    23ae:	8c2b      	ldrh	r3, [r5, #32]
    23b0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    23b2:	230d      	movs	r3, #13
    23b4:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    23b6:	7833      	ldrb	r3, [r6, #0]
    23b8:	f013 0320 	ands.w	r3, r3, #32
    23bc:	d00e      	beq.n	23dc <isr+0x4fc>
					((u16_t)conn->access_addr[1] << 8) |
    23be:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    23c0:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    23c2:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    23c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    23c8:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    23ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    23ce:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    23d0:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    23d2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    23d6:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    23d8:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    23da:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    23dc:	7203      	strb	r3, [r0, #8]
			packet_rx_enqueue();
    23de:	f009 ff1d 	bl	c21c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    23e2:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    23e6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    23ea:	4983      	ldr	r1, [pc, #524]	; (25f8 <isr+0x718>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    23ec:	0952      	lsrs	r2, r2, #5
    23ee:	f362 0384 	bfi	r3, r2, #2, #3
    23f2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    23f6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    23fa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    23fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2402:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    2404:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    2408:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    240c:	4a7b      	ldr	r2, [pc, #492]	; (25fc <isr+0x71c>)
    240e:	f203 233f 	addw	r3, r3, #575	; 0x23f
    2412:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    2416:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    2418:	ea4f 0358 	mov.w	r3, r8, lsr #1
    241c:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    241e:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    2420:	7d73      	ldrb	r3, [r6, #21]
    2422:	f240 4be2 	movw	fp, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    2426:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    2428:	fb0b f303 	mul.w	r3, fp, r3
		conn->slave.window_size_event_us =
    242c:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    242e:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    2430:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    2432:	4638      	mov	r0, r7
    2434:	f013 ff31 	bl	1629a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    2438:	4971      	ldr	r1, [pc, #452]	; (2600 <isr+0x720>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    243a:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    243c:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2440:	a369      	add	r3, pc, #420	; (adr r3, 25e8 <isr+0x708>)
    2442:	e9d3 2300 	ldrd	r2, r3, [r3]
    2446:	fba0 0101 	umull	r0, r1, r0, r1
    244a:	f7fe f929 	bl	6a0 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    244e:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    2452:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    2454:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    2456:	4293      	cmp	r3, r2
    2458:	bf38      	it	cc
    245a:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    245c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    2460:	469a      	mov	sl, r3
		conn_interval_us -=
    2462:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    2464:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    2466:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    2468:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    246a:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    246e:	f00d fb9f 	bl	fbb0 <radio_tmr_end_get>
    2472:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    2474:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    2476:	4639      	mov	r1, r7
		conn_offset_us +=
    2478:	fb0b bb00 	mla	fp, fp, r0, fp
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    247c:	4638      	mov	r0, r7
    247e:	f013 ff0a 	bl	16296 <radio_tx_chain_delay_get>
    2482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2484:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
    2488:	449b      	add	fp, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    248a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    248c:	ebab 0b00 	sub.w	fp, fp, r0
    2490:	ebab 0303 	sub.w	r3, fp, r3
    2494:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    2496:	f240 43b6 	movw	r3, #1206	; 0x4b6
    249a:	9300      	str	r3, [sp, #0]
    249c:	2205      	movs	r2, #5
    249e:	4b59      	ldr	r3, [pc, #356]	; (2604 <isr+0x724>)
    24a0:	f8df b15c 	ldr.w	fp, [pc, #348]	; 2600 <isr+0x720>
    24a4:	4639      	mov	r1, r7
    24a6:	4638      	mov	r0, r7
    24a8:	f007 fe6a 	bl	a180 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    24ac:	f240 41b7 	movw	r1, #1207	; 0x4b7
    24b0:	f009 fbba 	bl	bc28 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    24b4:	f814 3009 	ldrb.w	r3, [r4, r9]
    24b8:	f003 030f 	and.w	r3, r3, #15
    24bc:	2b01      	cmp	r3, #1
    24be:	d106      	bne.n	24ce <isr+0x5ee>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    24c0:	9700      	str	r7, [sp, #0]
    24c2:	463b      	mov	r3, r7
    24c4:	2203      	movs	r2, #3
    24c6:	4639      	mov	r1, r7
    24c8:	4638      	mov	r0, r7
    24ca:	f007 fe59 	bl	a180 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    24ce:	fba8 890b 	umull	r8, r9, r8, fp
    24d2:	a345      	add	r3, pc, #276	; (adr r3, 25e8 <isr+0x708>)
    24d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    24d8:	4640      	mov	r0, r8
    24da:	4649      	mov	r1, r9
    24dc:	f7fe f8e0 	bl	6a0 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    24e0:	f895 3020 	ldrb.w	r3, [r5, #32]
    24e4:	68a4      	ldr	r4, [r4, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    24e6:	4a48      	ldr	r2, [pc, #288]	; (2608 <isr+0x728>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    24e8:	3307      	adds	r3, #7
    24ea:	b2db      	uxtb	r3, r3
    24ec:	930b      	str	r3, [sp, #44]	; 0x2c
    24ee:	f240 43ce 	movw	r3, #1230	; 0x4ce
    24f2:	9308      	str	r3, [sp, #32]
    24f4:	4b45      	ldr	r3, [pc, #276]	; (260c <isr+0x72c>)
    24f6:	e9cd 5306 	strd	r5, r3, [sp, #24]
    24fa:	4b45      	ldr	r3, [pc, #276]	; (2610 <isr+0x730>)
    24fc:	9305      	str	r3, [sp, #20]
    24fe:	68eb      	ldr	r3, [r5, #12]
    2500:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2502:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2504:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    2506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    250a:	2307      	movs	r3, #7
    250c:	2100      	movs	r1, #0
    250e:	4343      	muls	r3, r0
    2510:	fb02 3301 	mla	r3, r2, r1, r3
    2514:	fba0 1202 	umull	r1, r2, r0, r2
    2518:	441a      	add	r2, r3
    251a:	4608      	mov	r0, r1
    251c:	ebb8 0000 	subs.w	r0, r8, r0
    2520:	4611      	mov	r1, r2
    2522:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2526:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    2528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    252c:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    252e:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    2530:	f7fe f8b6 	bl	6a0 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2534:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2536:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2538:	a32b      	add	r3, pc, #172	; (adr r3, 25e8 <isr+0x708>)
    253a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    253e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2542:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2546:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2548:	f7fe f8aa 	bl	6a0 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    254c:	eba4 040a 	sub.w	r4, r4, sl
    2550:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2554:	9000      	str	r0, [sp, #0]
    2556:	4623      	mov	r3, r4
    2558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    255a:	4629      	mov	r1, r5
    255c:	4628      	mov	r0, r5
    255e:	f007 fd7d 	bl	a05c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2562:	f030 0302 	bics.w	r3, r0, #2
    2566:	f47f ad13 	bne.w	1f90 <isr+0xb0>
    256a:	e55f      	b.n	202c <isr+0x14c>
	return (adv->rx_addr == ci->tx_addr) &&
    256c:	7833      	ldrb	r3, [r6, #0]
    256e:	f814 2009 	ldrb.w	r2, [r4, r9]
    2572:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2576:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    257a:	f47f adf6 	bne.w	216a <isr+0x28a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    257e:	2206      	movs	r2, #6
    2580:	4629      	mov	r1, r5
    2582:	f107 0008 	add.w	r0, r7, #8
    2586:	f010 ff5d 	bl	13444 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    258a:	fab0 f080 	clz	r0, r0
    258e:	0940      	lsrs	r0, r0, #5
    2590:	e634      	b.n	21fc <isr+0x31c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    2592:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    2596:	09db      	lsrs	r3, r3, #7
    2598:	d00b      	beq.n	25b2 <isr+0x6d2>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    259a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    259e:	09db      	lsrs	r3, r3, #7
    25a0:	f43f ade3 	beq.w	216a <isr+0x28a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    25a4:	b96d      	cbnz	r5, 25c2 <isr+0x6e2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    25a6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    25aa:	f00c f9d9 	bl	e960 <ctrl_irk_whitelisted>
    25ae:	b940      	cbnz	r0, 25c2 <isr+0x6e2>
    25b0:	e5db      	b.n	216a <isr+0x28a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    25b2:	aa0e      	add	r2, sp, #56	; 0x38
    25b4:	1cb1      	adds	r1, r6, #2
    25b6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    25ba:	f00c fb57 	bl	ec6c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    25be:	2800      	cmp	r0, #0
    25c0:	d0eb      	beq.n	259a <isr+0x6ba>
	       isr_adv_ci_adva_check(adv, ci);
    25c2:	4631      	mov	r1, r6
    25c4:	4638      	mov	r0, r7
    25c6:	f013 faaa 	bl	15b1e <isr_adv_ci_adva_check>
    25ca:	e617      	b.n	21fc <isr+0x31c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    25cc:	2206      	movs	r2, #6
    25ce:	2100      	movs	r1, #0
    25d0:	4618      	mov	r0, r3
    25d2:	f010 ff74 	bl	134be <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    25d6:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    25d8:	980a      	ldr	r0, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    25da:	f3c3 1380 	ubfx	r3, r3, #6, #1
    25de:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    25e0:	2206      	movs	r2, #6
    25e2:	4659      	mov	r1, fp
    25e4:	e6c1      	b.n	236a <isr+0x48a>
    25e6:	bf00      	nop
    25e8:	1afd498d 	.word	0x1afd498d
    25ec:	00000007 	.word	0x00000007
    25f0:	026259ff 	.word	0x026259ff
    25f4:	01c9c37f 	.word	0x01c9c37f
    25f8:	00017a2c 	.word	0x00017a2c
    25fc:	000f4240 	.word	0x000f4240
    2600:	3b9aca00 	.word	0x3b9aca00
    2604:	0000bc29 	.word	0x0000bc29
    2608:	1afd498d 	.word	0x1afd498d
    260c:	00015b73 	.word	0x00015b73
    2610:	00000e19 	.word	0x00000e19
		rl_idx = devmatch_ok ?
    2614:	b1ed      	cbz	r5, 2652 <isr+0x772>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    2616:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    261a:	4639      	mov	r1, r7
    261c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2620:	f00c f962 	bl	e8e8 <ctrl_rl_idx>
    2624:	4607      	mov	r7, r0
		if (crc_ok &&
    2626:	f1b9 0f00 	cmp.w	r9, #0
    262a:	d007      	beq.n	263c <isr+0x75c>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    262c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    2630:	06de      	lsls	r6, r3, #27
    2632:	d517      	bpl.n	2664 <isr+0x784>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    2634:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    2638:	06d8      	lsls	r0, r3, #27
    263a:	d47e      	bmi.n	273a <isr+0x85a>
			_radio.state = STATE_CLOSE;
    263c:	2303      	movs	r3, #3
    263e:	7563      	strb	r3, [r4, #21]
			radio_disable();
    2640:	f00d f8ee 	bl	f820 <radio_disable>
			_radio.scanner.state = 0U;
    2644:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    2648:	f36f 0341 	bfc	r3, #1, #1
    264c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    2650:	e4ec      	b.n	202c <isr+0x14c>
		rl_idx = devmatch_ok ?
    2652:	f1ba 0f00 	cmp.w	sl, #0
    2656:	d003      	beq.n	2660 <isr+0x780>
    2658:	4658      	mov	r0, fp
    265a:	f00c f965 	bl	e928 <ctrl_rl_irk_idx>
    265e:	e7e1      	b.n	2624 <isr+0x744>
    2660:	27ff      	movs	r7, #255	; 0xff
    2662:	e7e0      	b.n	2626 <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    2664:	2d00      	cmp	r5, #0
    2666:	d160      	bne.n	272a <isr+0x84a>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    2668:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    266c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    2670:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2674:	7a30      	ldrb	r0, [r6, #8]
    2676:	f010 030f 	ands.w	r3, r0, #15
    267a:	d002      	beq.n	2682 <isr+0x7a2>
    267c:	2b06      	cmp	r3, #6
    267e:	f040 8748 	bne.w	3512 <isr+0x1632>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2682:	7a72      	ldrb	r2, [r6, #9]
    2684:	2a25      	cmp	r2, #37	; 0x25
    2686:	d86a      	bhi.n	275e <isr+0x87e>
		 (_radio.scanner.type != 0) &&
    2688:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
		 (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    268c:	0712      	lsls	r2, r2, #28
    268e:	d566      	bpl.n	275e <isr+0x87e>
		 (_radio.scanner.type != 0) &&
    2690:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2694:	2a00      	cmp	r2, #0
    2696:	d162      	bne.n	275e <isr+0x87e>
		err = isr_rx_scan_report(rssi_ready,
    2698:	f1ba 0f00 	cmp.w	sl, #0
    269c:	bf14      	ite	ne
    269e:	4639      	movne	r1, r7
    26a0:	21ff      	moveq	r1, #255	; 0xff
    26a2:	4640      	mov	r0, r8
    26a4:	f009 fde2 	bl	c26c <isr_rx_scan_report.isra.34>
		if (err) {
    26a8:	2800      	cmp	r0, #0
    26aa:	d1c7      	bne.n	263c <isr+0x75c>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    26ac:	f00d f90e 	bl	f8cc <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    26b0:	7803      	ldrb	r3, [r0, #0]
    26b2:	2203      	movs	r2, #3
    26b4:	f362 0303 	bfi	r3, r2, #0, #4
    26b8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    26ba:	7a33      	ldrb	r3, [r6, #8]
    26bc:	7802      	ldrb	r2, [r0, #0]
    26be:	f3c3 1380 	ubfx	r3, r3, #6, #1
    26c2:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    26c6:	230c      	movs	r3, #12
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    26c8:	4605      	mov	r5, r0
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    26ca:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    26cc:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    26ce:	4638      	mov	r0, r7
    26d0:	f00c f8ec 	bl	e8ac <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    26d4:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
    26d8:	f013 0f01 	tst.w	r3, #1
		lrpa = ctrl_lrpa_get(rl_idx);
    26dc:	4601      	mov	r1, r0
    26de:	782b      	ldrb	r3, [r5, #0]
    26e0:	f105 0002 	add.w	r0, r5, #2
		if (_radio.scanner.rpa_gen && lrpa) {
    26e4:	d032      	beq.n	274c <isr+0x86c>
    26e6:	b389      	cbz	r1, 274c <isr+0x86c>
			pdu_adv_tx->tx_addr = 1;
    26e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26ec:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    26ee:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    26f0:	f010 feb8 	bl	13464 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    26f4:	2206      	movs	r2, #6
    26f6:	f106 010a 	add.w	r1, r6, #10
    26fa:	f105 0008 	add.w	r0, r5, #8
    26fe:	f010 feb1 	bl	13464 <memcpy>
		_radio.scanner.state = 1;
    2702:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    2706:	f043 0302 	orr.w	r3, r3, #2
    270a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    270e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    2710:	2302      	movs	r3, #2
    2712:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    2714:	f00d f97c 	bl	fa10 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2718:	2000      	movs	r0, #0
    271a:	f00d f8db 	bl	f8d4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    271e:	4628      	mov	r0, r5
    2720:	f00d f86c 	bl	f7fc <radio_pkt_tx_set>
		radio_tmr_end_capture();
    2724:	f00d fa3c 	bl	fba0 <radio_tmr_end_capture>
    2728:	e547      	b.n	21ba <isr+0x2da>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    272a:	4639      	mov	r1, r7
    272c:	4650      	mov	r0, sl
    272e:	f00c fa5f 	bl	ebf0 <ctrl_rl_idx_allowed>
    2732:	2800      	cmp	r0, #0
    2734:	f43f af7e 	beq.w	2634 <isr+0x754>
    2738:	e796      	b.n	2668 <isr+0x788>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    273a:	2d00      	cmp	r5, #0
    273c:	d194      	bne.n	2668 <isr+0x788>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    273e:	4638      	mov	r0, r7
    2740:	f00c f90e 	bl	e960 <ctrl_irk_whitelisted>
		if (crc_ok &&
    2744:	2800      	cmp	r0, #0
    2746:	f43f af79 	beq.w	263c <isr+0x75c>
    274a:	e78d      	b.n	2668 <isr+0x788>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    274c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    2750:	49c6      	ldr	r1, [pc, #792]	; (2a6c <isr+0xb8c>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    2752:	09d2      	lsrs	r2, r2, #7
    2754:	f362 1386 	bfi	r3, r2, #6, #1
    2758:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    275a:	2206      	movs	r2, #6
    275c:	e7c8      	b.n	26f0 <isr+0x810>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    275e:	f010 0f0d 	tst.w	r0, #13
    2762:	d001      	beq.n	2768 <isr+0x888>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    2764:	2b06      	cmp	r3, #6
    2766:	d114      	bne.n	2792 <isr+0x8b2>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2768:	7a72      	ldrb	r2, [r6, #9]
    276a:	2a25      	cmp	r2, #37	; 0x25
    276c:	d811      	bhi.n	2792 <isr+0x8b2>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    276e:	7a73      	ldrb	r3, [r6, #9]
    2770:	2b00      	cmp	r3, #0
    2772:	f43f af63 	beq.w	263c <isr+0x75c>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    2776:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    277a:	2b00      	cmp	r3, #0
    277c:	f47f af5e 	bne.w	263c <isr+0x75c>
		err = isr_rx_scan_report(rssi_ready,
    2780:	f1ba 0f00 	cmp.w	sl, #0
    2784:	bf14      	ite	ne
    2786:	4639      	movne	r1, r7
    2788:	21ff      	moveq	r1, #255	; 0xff
    278a:	4640      	mov	r0, r8
    278c:	f009 fd6e 	bl	c26c <isr_rx_scan_report.isra.34>
    2790:	e754      	b.n	263c <isr+0x75c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2792:	2b01      	cmp	r3, #1
    2794:	d009      	beq.n	27aa <isr+0x8ca>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    2796:	7a33      	ldrb	r3, [r6, #8]
    2798:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
    279c:	2b07      	cmp	r3, #7
    279e:	d12f      	bne.n	2800 <isr+0x920>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    27a0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    27a4:	0758      	lsls	r0, r3, #29
    27a6:	d1e2      	bne.n	276e <isr+0x88e>
    27a8:	e748      	b.n	263c <isr+0x75c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    27aa:	7a73      	ldrb	r3, [r6, #9]
    27ac:	2b0c      	cmp	r3, #12
    27ae:	d1f2      	bne.n	2796 <isr+0x8b6>
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    27b0:	f106 0510 	add.w	r5, r6, #16
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    27b4:	463a      	mov	r2, r7
    27b6:	4629      	mov	r1, r5
    27b8:	09c0      	lsrs	r0, r0, #7
    27ba:	f00c fa93 	bl	ece4 <ctrl_rl_addr_resolve>
    27be:	2800      	cmp	r0, #0
    27c0:	d1d5      	bne.n	276e <isr+0x88e>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    27c2:	7a33      	ldrb	r3, [r6, #8]
    27c4:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    27c8:	09db      	lsrs	r3, r3, #7
    27ca:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    27ce:	d00f      	beq.n	27f0 <isr+0x910>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    27d0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    27d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    27d8:	079d      	lsls	r5, r3, #30
    27da:	d5dc      	bpl.n	2796 <isr+0x8b6>
    27dc:	f996 3008 	ldrsb.w	r3, [r6, #8]
    27e0:	2b00      	cmp	r3, #0
    27e2:	dad8      	bge.n	2796 <isr+0x8b6>
	    (pdu->rx_addr != 0) &&
    27e4:	7d73      	ldrb	r3, [r6, #21]
    27e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    27ea:	2b40      	cmp	r3, #64	; 0x40
    27ec:	d1d3      	bne.n	2796 <isr+0x8b6>
    27ee:	e7be      	b.n	276e <isr+0x88e>
		(memcmp(&_radio.scanner.init_addr[0],
    27f0:	2206      	movs	r2, #6
    27f2:	4629      	mov	r1, r5
    27f4:	489d      	ldr	r0, [pc, #628]	; (2a6c <isr+0xb8c>)
    27f6:	f010 fe25 	bl	13444 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    27fa:	2800      	cmp	r0, #0
    27fc:	d0b7      	beq.n	276e <isr+0x88e>
    27fe:	e7e7      	b.n	27d0 <isr+0x8f0>
		   (_radio.scanner.phy)) ||
    2800:	2b04      	cmp	r3, #4
    2802:	f47f af1b 	bne.w	263c <isr+0x75c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    2806:	7a73      	ldrb	r3, [r6, #9]
    2808:	2b25      	cmp	r3, #37	; 0x25
    280a:	f63f af17 	bhi.w	263c <isr+0x75c>
		   (_radio.scanner.state != 0) &&
    280e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    2812:	0799      	lsls	r1, r3, #30
    2814:	f57f af12 	bpl.w	263c <isr+0x75c>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    2818:	f00d f858 	bl	f8cc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    281c:	7a33      	ldrb	r3, [r6, #8]
    281e:	7802      	ldrb	r2, [r0, #0]
    2820:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2824:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    2828:	f47f af08 	bne.w	263c <isr+0x75c>
		(memcmp(&sreq->scan_req.adv_addr[0],
    282c:	2206      	movs	r2, #6
    282e:	f106 010a 	add.w	r1, r6, #10
    2832:	3008      	adds	r0, #8
    2834:	f010 fe06 	bl	13444 <memcmp>
		   (_radio.scanner.state != 0) &&
    2838:	2800      	cmp	r0, #0
    283a:	d098      	beq.n	276e <isr+0x88e>
    283c:	e6fe      	b.n	263c <isr+0x75c>
	_radio.packet_counter++;
    283e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    2842:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    2846:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
	_radio.packet_counter++;
    284a:	3301      	adds	r3, #1
    284c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0U;
    2850:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    2852:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0U;
    2856:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    285a:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    285e:	2302      	movs	r3, #2
    2860:	f88a 3004 	strb.w	r3, [sl, #4]
	if (crc_ok) {
    2864:	f1b9 0f00 	cmp.w	r9, #0
    2868:	f000 82be 	beq.w	2de8 <isr+0xf08>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    286c:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
    2870:	f89a 1008 	ldrb.w	r1, [sl, #8]
    2874:	f003 0201 	and.w	r2, r3, #1
    2878:	f3c1 0180 	ubfx	r1, r1, #2, #1
    287c:	4291      	cmp	r1, r2
    287e:	f000 8188 	beq.w	2b92 <isr+0xcb2>
		_radio.conn_curr->sn++;
    2882:	f082 0201 	eor.w	r2, r2, #1
    2886:	f362 0300 	bfi	r3, r2, #0, #1
    288a:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
		if (_radio.role == ROLE_SLAVE) {
    288e:	7d23      	ldrb	r3, [r4, #20]
    2890:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1U;
    2892:	bf02      	ittt	eq
    2894:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    2898:	f043 0301 	orreq.w	r3, r3, #1
    289c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    28a0:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
    28a4:	061a      	lsls	r2, r3, #24
    28a6:	f100 816f 	bmi.w	2b88 <isr+0xca8>
			node_tx = _radio.conn_curr->pkt_tx_head;
    28aa:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
				_radio.conn_curr->packet_tx_head_offset);
    28ae:	f895 115d 	ldrb.w	r1, [r5, #349]	; 0x15d
			pdu_data_tx = (void *)(node_tx->pdu_data +
    28b2:	1d30      	adds	r0, r6, #4
    28b4:	1847      	adds	r7, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    28b6:	f897 8001 	ldrb.w	r8, [r7, #1]
			if (pdu_data_tx_len != 0) {
    28ba:	f1b8 0f00 	cmp.w	r8, #0
    28be:	f000 80a2 	beq.w	2a06 <isr+0xb26>
				if (_radio.conn_curr->enc_tx) {
    28c2:	069b      	lsls	r3, r3, #26
    28c4:	d50b      	bpl.n	28de <isr+0x9fe>
					_radio.conn_curr->ccm_tx.counter++;
    28c6:	f8d5 b135 	ldr.w	fp, [r5, #309]	; 0x135
    28ca:	f8d5 c139 	ldr.w	ip, [r5, #313]	; 0x139
    28ce:	f11b 0201 	adds.w	r2, fp, #1
    28d2:	f14c 0300 	adc.w	r3, ip, #0
    28d6:	f8c5 2135 	str.w	r2, [r5, #309]	; 0x135
    28da:	f8c5 3139 	str.w	r3, [r5, #313]	; 0x139
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    28de:	5c43      	ldrb	r3, [r0, r1]
    28e0:	f003 0303 	and.w	r3, r3, #3
    28e4:	2b03      	cmp	r3, #3
    28e6:	f040 808e 	bne.w	2a06 <isr+0xb26>
	switch (pdu_data_tx->llctrl.opcode) {
    28ea:	78fb      	ldrb	r3, [r7, #3]
    28ec:	3b02      	subs	r3, #2
    28ee:	2b16      	cmp	r3, #22
    28f0:	f200 8089 	bhi.w	2a06 <isr+0xb26>
    28f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    28f8:	00670017 	.word	0x00670017
    28fc:	008700b3 	.word	0x008700b3
    2900:	00870087 	.word	0x00870087
    2904:	00870087 	.word	0x00870087
    2908:	00940089 	.word	0x00940089
    290c:	00c10087 	.word	0x00c10087
    2910:	00870087 	.word	0x00870087
    2914:	00be0087 	.word	0x00be0087
    2918:	00870087 	.word	0x00870087
    291c:	00d500cd 	.word	0x00d500cd
    2920:	00fd00f6 	.word	0x00fd00f6
    2924:	0119      	.short	0x0119
		_radio.state = STATE_CLOSE;
    2926:	2303      	movs	r3, #3
    2928:	7563      	strb	r3, [r4, #21]
		radio_disable();
    292a:	f00c ff79 	bl	f820 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    292e:	f00c ff95 	bl	f85c <radio_is_ready>
    2932:	2800      	cmp	r0, #0
    2934:	f47f ab2c 	bne.w	1f90 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
    2938:	7939      	ldrb	r1, [r7, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    293a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    293e:	2913      	cmp	r1, #19
    2940:	bf08      	it	eq
    2942:	2116      	moveq	r1, #22
    2944:	f013 f95f 	bl	15c06 <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
    2948:	2701      	movs	r7, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    294a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    294e:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
    2952:	4498      	add	r8, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    2954:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    2958:	fa5f f888 	uxtb.w	r8, r8
			if (_radio.conn_curr->packet_tx_head_offset ==
    295c:	4543      	cmp	r3, r8
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    295e:	f880 815d 	strb.w	r8, [r0, #349]	; 0x15d
			if (_radio.conn_curr->packet_tx_head_offset ==
    2962:	f000 80e9 	beq.w	2b38 <isr+0xc58>
	return NULL;
    2966:	2600      	movs	r6, #0
	if (ret == ERR_TERMINATE) {
    2968:	2f01      	cmp	r7, #1
    296a:	f040 8112 	bne.w	2b92 <isr+0xcb2>
		connection_release(_radio.conn_curr);
    296e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2972:	f009 fb4d 	bl	c010 <connection_release>
		_radio.conn_curr = NULL;
    2976:	2300      	movs	r3, #0
    2978:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    297c:	f00d f904 	bl	fb88 <radio_tmr_aa_restore>
    2980:	b918      	cbnz	r0, 298a <isr+0xaaa>
		radio_tmr_aa_save(radio_tmr_aa_get());
    2982:	f00d f8f5 	bl	fb70 <radio_tmr_aa_get>
    2986:	f00d f8f9 	bl	fb7c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    298a:	4b39      	ldr	r3, [pc, #228]	; (2a70 <isr+0xb90>)
    298c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2990:	2b00      	cmp	r3, #0
    2992:	f43f ab4b 	beq.w	202c <isr+0x14c>
	if (tx_release) {
    2996:	b11e      	cbz	r6, 29a0 <isr+0xac0>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    2998:	4631      	mov	r1, r6
    299a:	8c18      	ldrh	r0, [r3, #32]
    299c:	f009 fac4 	bl	bf28 <pdu_node_tx_release>
	if (rx_enqueue) {
    29a0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    29a4:	2b00      	cmp	r3, #0
    29a6:	f43f ab41 	beq.w	202c <isr+0x14c>
		rx_fc_lock(_radio.conn_curr->handle);
    29aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    29ae:	8c18      	ldrh	r0, [r3, #32]
    29b0:	f009 f8fc 	bl	bbac <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    29b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    29b8:	8c1b      	ldrh	r3, [r3, #32]
    29ba:	f8aa 3006 	strh.w	r3, [sl, #6]
		packet_rx_enqueue();
    29be:	f009 fc2d 	bl	c21c <packet_rx_enqueue>
    29c2:	f7ff bb33 	b.w	202c <isr+0x14c>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    29c6:	2208      	movs	r2, #8
    29c8:	f107 010e 	add.w	r1, r7, #14
    29cc:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    29d0:	f010 fd48 	bl	13464 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    29d4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    29d8:	2204      	movs	r2, #4
    29da:	f107 0116 	add.w	r1, r7, #22
    29de:	f200 101d 	addw	r0, r0, #285	; 0x11d
    29e2:	f010 fd3f 	bl	13464 <memcpy>
		_radio.conn_curr->pause_tx = 1U;
    29e6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    29ea:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
    29ee:	f042 0208 	orr.w	r2, r2, #8
    29f2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		_radio.conn_curr->procedure_expire =
    29f6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    29fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		_radio.conn_curr->llcp_enc.ack = _radio.conn_curr->llcp_enc.req;
    29fe:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
    2a02:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	u32_t ret = 0U;
    2a06:	2700      	movs	r7, #0
    2a08:	e79f      	b.n	294a <isr+0xa6a>
		_radio.conn_curr->pause_tx = 1U;
    2a0a:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		_radio.conn_curr->refresh = 1U;
    2a0e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    2a12:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
		_radio.conn_curr->procedure_expire =
    2a16:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    2a1a:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    2a1e:	e7f2      	b.n	2a06 <isr+0xb26>
		if (_radio.role == ROLE_MASTER) {
    2a20:	7d23      	ldrb	r3, [r4, #20]
    2a22:	2b04      	cmp	r3, #4
    2a24:	d11b      	bne.n	2a5e <isr+0xb7e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2a26:	7933      	ldrb	r3, [r6, #4]
    2a28:	f043 0303 	orr.w	r3, r3, #3
    2a2c:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    2a2e:	2317      	movs	r3, #23
    2a30:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2a32:	2303      	movs	r3, #3
    2a34:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    2a36:	2208      	movs	r2, #8
    2a38:	f105 01b4 	add.w	r1, r5, #180	; 0xb4
    2a3c:	3004      	adds	r0, #4
    2a3e:	f010 fd11 	bl	13464 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    2a42:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
    2a46:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    2a48:	f895 30b3 	ldrb.w	r3, [r5, #179]	; 0xb3
    2a4c:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy,
    2a4e:	f106 0112 	add.w	r1, r6, #18
    2a52:	220c      	movs	r2, #12
    2a54:	6860      	ldr	r0, [r4, #4]
    2a56:	f013 f8ec 	bl	15c32 <entropy_get_entropy_isr.constprop.43>
			*node_tx = NULL;
    2a5a:	2600      	movs	r6, #0
    2a5c:	e7d3      	b.n	2a06 <isr+0xb26>
			_radio.conn_curr->pause_tx = 1U;
    2a5e:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
    2a62:	f043 0308 	orr.w	r3, r3, #8
    2a66:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
    2a6a:	e7cc      	b.n	2a06 <isr+0xb26>
    2a6c:	20000e5c 	.word	0x20000e5c
    2a70:	20000d78 	.word	0x20000d78
		if (pdu_data_tx->llctrl.reject_ext_ind.reject_opcode !=
    2a74:	793b      	ldrb	r3, [r7, #4]
    2a76:	2b03      	cmp	r3, #3
    2a78:	d1c5      	bne.n	2a06 <isr+0xb26>
		_radio.conn_curr->pause_rx = 0U;
    2a7a:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		_radio.conn_curr->pause_tx = 0U;
    2a7e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2a82:	f36f 03c3 	bfc	r3, #3, #1
    2a86:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
				conn->procedure_expire = 0U;
    2a8a:	2700      	movs	r7, #0
    2a8c:	f8a5 7044 	strh.w	r7, [r5, #68]	; 0x44
    2a90:	e75b      	b.n	294a <isr+0xa6a>
		_radio.conn_curr->llcp_length.state =
    2a92:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    2a96:	2202      	movs	r2, #2
					conn->llcp_length.state =
    2a98:	f362 0302 	bfi	r3, r2, #0, #3
    2a9c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    2aa0:	e7b1      	b.n	2a06 <isr+0xb26>
		if (_radio.conn_curr->llcp_length.req !=
    2aa2:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
    2aa6:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
    2aaa:	4293      	cmp	r3, r2
    2aac:	d0ab      	beq.n	2a06 <isr+0xb26>
			switch (conn->llcp_length.state) {
    2aae:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    2ab2:	f003 0107 	and.w	r1, r3, #7
    2ab6:	2907      	cmp	r1, #7
    2ab8:	d0a5      	beq.n	2a06 <isr+0xb26>
    2aba:	2701      	movs	r7, #1
    2abc:	408f      	lsls	r7, r1
    2abe:	f017 0768 	ands.w	r7, r7, #104	; 0x68
    2ac2:	f43f af42 	beq.w	294a <isr+0xa6a>
				conn->max_tx_octets =
    2ac6:	f8b5 10fa 	ldrh.w	r1, [r5, #250]	; 0xfa
    2aca:	85e9      	strh	r1, [r5, #46]	; 0x2e
				conn->max_tx_time = conn->llcp_length.tx_time;
    2acc:	f8b5 10fe 	ldrh.w	r1, [r5, #254]	; 0xfe
    2ad0:	86a9      	strh	r1, [r5, #52]	; 0x34
				if (conn->llcp_length.state ==
    2ad2:	f003 0107 	and.w	r1, r3, #7
    2ad6:	2905      	cmp	r1, #5
    2ad8:	d101      	bne.n	2ade <isr+0xbfe>
					conn->llcp_length.state =
    2ada:	2204      	movs	r2, #4
    2adc:	e7dc      	b.n	2a98 <isr+0xbb8>
				conn->llcp_length.ack = conn->llcp_length.req;
    2ade:	f885 20f5 	strb.w	r2, [r5, #245]	; 0xf5
    2ae2:	e7d2      	b.n	2a8a <isr+0xbaa>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    2ae4:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
    2ae8:	2202      	movs	r2, #2
    2aea:	f362 0301 	bfi	r3, r2, #0, #2
    2aee:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
		if (_radio.role == ROLE_SLAVE) {
    2af2:	7d23      	ldrb	r3, [r4, #20]
    2af4:	2b03      	cmp	r3, #3
    2af6:	d186      	bne.n	2a06 <isr+0xb26>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    2af8:	4ab7      	ldr	r2, [pc, #732]	; (2dd8 <isr+0xef8>)
    2afa:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
    2afe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    2b02:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
    2b06:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    2b0a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2b0e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	conn->phy_tx_time = phy_tx_time[phys];
    2b12:	4313      	orrs	r3, r2
    2b14:	aa10      	add	r2, sp, #64	; 0x40
    2b16:	4413      	add	r3, r2
    2b18:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    2b1c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    2b20:	f363 0202 	bfi	r2, r3, #0, #3
    2b24:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    2b28:	e76d      	b.n	2a06 <isr+0xb26>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    2b2a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    2b2e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    2b32:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2b36:	e7f3      	b.n	2b20 <isr+0xc40>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    2b38:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    2b3c:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
	conn->packet_tx_head_len = 0U;
    2b40:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    2b42:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0U;
    2b44:	f8a0 215c 	strh.w	r2, [r0, #348]	; 0x15c
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    2b48:	d114      	bne.n	2b74 <isr+0xc94>
		if (node_tx) {
    2b4a:	2e00      	cmp	r6, #0
    2b4c:	f43f af0b 	beq.w	2966 <isr+0xa86>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    2b50:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    2b54:	681d      	ldr	r5, [r3, #0]
    2b56:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    2b5a:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    2b5c:	bf06      	itte	eq
    2b5e:	f8c0 214c 	streq.w	r2, [r0, #332]	; 0x14c
				conn->pkt_tx_ctrl_last = NULL;
    2b62:	f8c0 2150 	streq.w	r2, [r0, #336]	; 0x150
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    2b66:	f8c0 514c 	strne.w	r5, [r0, #332]	; 0x14c
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    2b6a:	499c      	ldr	r1, [pc, #624]	; (2ddc <isr+0xefc>)
    2b6c:	4630      	mov	r0, r6
    2b6e:	f012 fdd8 	bl	15722 <mem_release>
    2b72:	e6f8      	b.n	2966 <isr+0xa86>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    2b74:	f8d0 2154 	ldr.w	r2, [r0, #340]	; 0x154
    2b78:	6819      	ldr	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    2b7a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    2b7e:	4293      	cmp	r3, r2
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    2b80:	bf08      	it	eq
    2b82:	f8c0 1154 	streq.w	r1, [r0, #340]	; 0x154
    2b86:	e6ef      	b.n	2968 <isr+0xa88>
			_radio.conn_curr->empty = 0U;
    2b88:	f36f 13c7 	bfc	r3, #7, #1
    2b8c:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
	struct radio_pdu_node_tx *tx_release = NULL;
    2b90:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    2b92:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2b96:	f89a 2008 	ldrb.w	r2, [sl, #8]
    2b9a:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
    2b9e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    2ba2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    2ba6:	429a      	cmp	r2, r3
    2ba8:	f040 80ea 	bne.w	2d80 <isr+0xea0>
	    (packet_rx_reserve_get(3) != 0) &&
    2bac:	2003      	movs	r0, #3
    2bae:	f008 fdab 	bl	b708 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    2bb2:	2800      	cmp	r0, #0
    2bb4:	f000 80e4 	beq.w	2d80 <isr+0xea0>
	    (packet_rx_reserve_get(3) != 0) &&
    2bb8:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    2bbc:	b383      	cbz	r3, 2c20 <isr+0xd40>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    2bbe:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    2bc2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    2bc6:	4293      	cmp	r3, r2
    2bc8:	d105      	bne.n	2bd6 <isr+0xcf6>
	      (_radio.fc_req == _radio.fc_ack)) ||
    2bca:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    2bce:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    2bd2:	4291      	cmp	r1, r2
    2bd4:	d024      	beq.n	2c20 <isr+0xd40>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    2bd6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    2bda:	4293      	cmp	r3, r2
    2bdc:	f000 80d0 	beq.w	2d80 <isr+0xea0>
	      (_radio.fc_req != _radio.fc_ack) &&
    2be0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    2be4:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    2be8:	429a      	cmp	r2, r3
    2bea:	f000 80c9 	beq.w	2d80 <isr+0xea0>
		(((_radio.fc_req == 0) &&
    2bee:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    2bf2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    2bf6:	b923      	cbnz	r3, 2c02 <isr+0xd22>
		(((_radio.fc_req == 0) &&
    2bf8:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    2bfc:	8c13      	ldrh	r3, [r2, #32]
    2bfe:	4299      	cmp	r1, r3
    2c00:	d00e      	beq.n	2c20 <isr+0xd40>
		 ((_radio.fc_req != 0) &&
    2c02:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    2c06:	2b00      	cmp	r3, #0
    2c08:	f000 80ba 	beq.w	2d80 <isr+0xea0>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    2c0c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    2c10:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    2c14:	f8b3 1178 	ldrh.w	r1, [r3, #376]	; 0x178
    2c18:	8c13      	ldrh	r3, [r2, #32]
    2c1a:	4299      	cmp	r1, r3
    2c1c:	f040 80b0 	bne.w	2d80 <isr+0xea0>
    2c20:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		if (pdu_data_rx->len != 0) {
    2c24:	f89a 5009 	ldrb.w	r5, [sl, #9]
    2c28:	f892 315e 	ldrb.w	r3, [r2, #350]	; 0x15e
    2c2c:	2d00      	cmp	r5, #0
    2c2e:	f000 80b0 	beq.w	2d92 <isr+0xeb2>
			if (_radio.conn_curr->enc_rx) {
    2c32:	f013 0510 	ands.w	r5, r3, #16
    2c36:	d03d      	beq.n	2cb4 <isr+0xdd4>
				done = radio_ccm_is_done();
    2c38:	f00d f820 	bl	fc7c <radio_ccm_is_done>
				LL_ASSERT(done);
    2c3c:	2800      	cmp	r0, #0
    2c3e:	f43f a9a7 	beq.w	1f90 <isr+0xb0>
				mic_failure = !radio_ccm_mic_is_valid();
    2c42:	f00d f839 	bl	fcb8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
    2c46:	4605      	mov	r5, r0
    2c48:	2800      	cmp	r0, #0
    2c4a:	d16e      	bne.n	2d2a <isr+0xe4a>
    2c4c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2c50:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
    2c54:	075b      	lsls	r3, r3, #29
    2c56:	d415      	bmi.n	2c84 <isr+0xda4>
				_radio.state = STATE_CLOSE;
    2c58:	2303      	movs	r3, #3
    2c5a:	7563      	strb	r3, [r4, #21]
				radio_disable();
    2c5c:	f00c fde0 	bl	f820 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    2c60:	f00c fdfc 	bl	f85c <radio_is_ready>
    2c64:	4605      	mov	r5, r0
    2c66:	2800      	cmp	r0, #0
    2c68:	f47f a992 	bne.w	1f90 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    2c6c:	213d      	movs	r1, #61	; 0x3d
    2c6e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2c72:	f012 ffc8 	bl	15c06 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    2c76:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2c7a:	f009 f9c9 	bl	c010 <connection_release>
				_radio.conn_curr = NULL;
    2c7e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    2c82:	e67b      	b.n	297c <isr+0xa9c>
				    (pdu_data_rx->ll_id ==
    2c84:	f89a 3008 	ldrb.w	r3, [sl, #8]
				    _radio.conn_curr->pause_rx &&
    2c88:	f003 0303 	and.w	r3, r3, #3
    2c8c:	2b03      	cmp	r3, #3
    2c8e:	d1e3      	bne.n	2c58 <isr+0xd78>
					struct pdu_data *scratch_pkt =
    2c90:	f00c fe1c 	bl	f8cc <radio_pkt_scratch_get>
					if (pdu_len_cmp(
    2c94:	f890 8001 	ldrb.w	r8, [r0, #1]
					struct pdu_data *scratch_pkt =
    2c98:	4607      	mov	r7, r0
					if (pdu_len_cmp(
    2c9a:	4641      	mov	r1, r8
    2c9c:	78c0      	ldrb	r0, [r0, #3]
    2c9e:	f008 fcff 	bl	b6a0 <pdu_len_cmp>
    2ca2:	2800      	cmp	r0, #0
    2ca4:	d0d8      	beq.n	2c58 <isr+0xd78>
						memcpy(pdu_data_rx,
    2ca6:	f108 0203 	add.w	r2, r8, #3
    2caa:	4639      	mov	r1, r7
    2cac:	f10a 0008 	add.w	r0, sl, #8
    2cb0:	f010 fbd8 	bl	13464 <memcpy>
			    (_radio.conn_curr->pause_rx &&
    2cb4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2cb8:	f89a 3008 	ldrb.w	r3, [sl, #8]
    2cbc:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
			if (mic_failure ||
    2cc0:	f012 0f04 	tst.w	r2, #4
    2cc4:	d00e      	beq.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    2cc6:	f003 0103 	and.w	r1, r3, #3
    2cca:	2903      	cmp	r1, #3
    2ccc:	d1c4      	bne.n	2c58 <isr+0xd78>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    2cce:	f990 701d 	ldrsb.w	r7, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    2cd2:	f89a 100b 	ldrb.w	r1, [sl, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    2cd6:	2f00      	cmp	r7, #0
    2cd8:	f002 0240 	and.w	r2, r2, #64	; 0x40
    2cdc:	db3a      	blt.n	2d54 <isr+0xe74>
	       (!conn->role &&
    2cde:	bb32      	cbnz	r2, 2d2e <isr+0xe4e>
		((!conn->refresh &&
    2ce0:	2902      	cmp	r1, #2
    2ce2:	d134      	bne.n	2d4e <isr+0xe6e>
			_radio.conn_curr->appto_expire = 0U;
    2ce4:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    2ce6:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0U;
    2cea:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0U;
    2cee:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    2cf2:	d004      	beq.n	2cfe <isr+0xe1e>
    2cf4:	2b02      	cmp	r3, #2
    2cf6:	d83c      	bhi.n	2d72 <isr+0xe92>
				*rx_enqueue = 1U;
    2cf8:	2301      	movs	r3, #1
    2cfa:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
			_radio.conn_curr->nesn++;
    2cfe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2d02:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
    2d06:	f082 0202 	eor.w	r2, r2, #2
    2d0a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
			if (ccm_rx_increment) {
    2d0e:	2d00      	cmp	r5, #0
    2d10:	d036      	beq.n	2d80 <isr+0xea0>
				_radio.conn_curr->ccm_rx.counter++;
    2d12:	f8d3 7114 	ldr.w	r7, [r3, #276]	; 0x114
    2d16:	f8d3 8118 	ldr.w	r8, [r3, #280]	; 0x118
    2d1a:	1c78      	adds	r0, r7, #1
    2d1c:	f148 0100 	adc.w	r1, r8, #0
    2d20:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    2d24:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    2d28:	e02a      	b.n	2d80 <isr+0xea0>
					ccm_rx_increment = 1U;
    2d2a:	2501      	movs	r5, #1
    2d2c:	e7c2      	b.n	2cb4 <isr+0xdd4>
		 (conn->refresh &&
    2d2e:	1e8a      	subs	r2, r1, #2
    2d30:	b2d2      	uxtb	r2, r2
    2d32:	2a09      	cmp	r2, #9
    2d34:	d80b      	bhi.n	2d4e <isr+0xe6e>
    2d36:	f240 2705 	movw	r7, #517	; 0x205
    2d3a:	fa27 f202 	lsr.w	r2, r7, r2
    2d3e:	07d7      	lsls	r7, r2, #31
    2d40:	d4d0      	bmi.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2d42:	4a27      	ldr	r2, [pc, #156]	; (2de0 <isr+0xf00>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2d44:	fa22 f101 	lsr.w	r1, r2, r1
    2d48:	07c9      	lsls	r1, r1, #31
    2d4a:	d585      	bpl.n	2c58 <isr+0xd78>
    2d4c:	e7ca      	b.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2d4e:	2911      	cmp	r1, #17
    2d50:	d882      	bhi.n	2c58 <isr+0xd78>
    2d52:	e7f6      	b.n	2d42 <isr+0xe62>
	       (conn->role &&
    2d54:	b942      	cbnz	r2, 2d68 <isr+0xe88>
		((!conn->refresh &&
    2d56:	2907      	cmp	r1, #7
    2d58:	d0c4      	beq.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    2d5a:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    2d5c:	d0c2      	beq.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2d5e:	2911      	cmp	r1, #17
    2d60:	f63f af7a 	bhi.w	2c58 <isr+0xd78>
    2d64:	4a1f      	ldr	r2, [pc, #124]	; (2de4 <isr+0xf04>)
    2d66:	e7ed      	b.n	2d44 <isr+0xe64>
		 (conn->refresh &&
    2d68:	1e8a      	subs	r2, r1, #2
    2d6a:	2a01      	cmp	r2, #1
    2d6c:	d9ba      	bls.n	2ce4 <isr+0xe04>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    2d6e:	290b      	cmp	r1, #11
    2d70:	e7f4      	b.n	2d5c <isr+0xe7c>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    2d72:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    2d76:	4650      	mov	r0, sl
    2d78:	f009 fea4 	bl	cac4 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d0be      	beq.n	2cfe <isr+0xe1e>
		_radio.conn_curr->supervision_expire = 0U;
    2d80:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		_radio.crc_expire = 0U;
    2d84:	f04f 0800 	mov.w	r8, #0
    2d88:	f884 8119 	strb.w	r8, [r4, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0U;
    2d8c:	f8a3 8040 	strh.w	r8, [r3, #64]	; 0x40
    2d90:	e042      	b.n	2e18 <isr+0xf38>
		} else if ((_radio.conn_curr->enc_rx) ||
    2d92:	f013 0f14 	tst.w	r3, #20
    2d96:	d0b2      	beq.n	2cfe <isr+0xe1e>
					    (conn->latency + 6)) ?
    2d98:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    2d9a:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    2d9e:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    2da0:	4299      	cmp	r1, r3
    2da2:	bfc4      	itt	gt
    2da4:	1f8b      	subgt	r3, r1, #6
    2da6:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    2da8:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    2dac:	bfcc      	ite	gt
    2dae:	b29b      	uxthgt	r3, r3
    2db0:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    2db2:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    2db4:	bf1e      	ittt	ne
    2db6:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0U;
    2dba:	2300      	movne	r3, #0
    2dbc:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    2dc0:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d19a      	bne.n	2cfe <isr+0xe1e>
				conn->appto_expire = conn->appto_reload;
    2dc8:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    2dcc:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    2dd0:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    2dd4:	e793      	b.n	2cfe <isr+0xe1e>
    2dd6:	bf00      	nop
    2dd8:	01020101 	.word	0x01020101
    2ddc:	20000ed4 	.word	0x20000ed4
    2de0:	00022060 	.word	0x00022060
    2de4:	00022040 	.word	0x00022040
		if (_radio.crc_expire == 0) {
    2de8:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    2dec:	b90a      	cbnz	r2, 2df2 <isr+0xf12>
			_radio.crc_expire = 2U;
    2dee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    2df2:	f894 8119 	ldrb.w	r8, [r4, #281]	; 0x119
    2df6:	f108 38ff 	add.w	r8, r8, #4294967295
    2dfa:	fa5f f888 	uxtb.w	r8, r8
    2dfe:	f884 8119 	strb.w	r8, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    2e02:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    2e06:	fab8 f888 	clz	r8, r8
    2e0a:	ea4f 1858 	mov.w	r8, r8, lsr #5
		if (!_radio.conn_curr->supervision_expire) {
    2e0e:	2e00      	cmp	r6, #0
    2e10:	d16b      	bne.n	2eea <isr+0x100a>
			_radio.conn_curr->supervision_expire =
    2e12:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    2e14:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    2e18:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    2e1c:	f895 e15e 	ldrb.w	lr, [r5, #350]	; 0x15e
    2e20:	ea4f 13de 	mov.w	r3, lr, lsr #7
	if (/* empty packet */
    2e24:	f01e 0f80 	tst.w	lr, #128	; 0x80
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    2e28:	930a      	str	r3, [sp, #40]	; 0x28
	if (/* empty packet */
    2e2a:	f040 80a0 	bne.w	2f6e <isr+0x108e>
	    !conn->pkt_tx_head ||
    2e2e:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
	    conn->empty ||
    2e32:	2a00      	cmp	r2, #0
    2e34:	f000 809b 	beq.w	2f6e <isr+0x108e>
	      conn->pause_tx ||
    2e38:	f01e 0f08 	tst.w	lr, #8
    2e3c:	d057      	beq.n	2eee <isr+0x100e>
	    (pause_tx || (conn->pkt_tx_head != conn->pkt_tx_ctrl)))) {
    2e3e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    2e42:	429a      	cmp	r2, r3
    2e44:	f040 8093 	bne.w	2f6e <isr+0x108e>
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    2e48:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
					conn->packet_tx_head_offset);
    2e4c:	f895 215d 	ldrb.w	r2, [r5, #349]	; 0x15d
		if (!conn->packet_tx_head_len) {
    2e50:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    2e54:	1d01      	adds	r1, r0, #4
    2e56:	188f      	adds	r7, r1, r2
		if (!conn->packet_tx_head_len) {
    2e58:	b913      	cbnz	r3, 2e60 <isr+0xf80>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    2e5a:	787b      	ldrb	r3, [r7, #1]
    2e5c:	f885 315c 	strb.w	r3, [r5, #348]	; 0x15c
		if (conn->packet_tx_head_offset) {
    2e60:	b12a      	cbz	r2, 2e6e <isr+0xf8e>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2e62:	5c8b      	ldrb	r3, [r1, r2]
    2e64:	f04f 0c01 	mov.w	ip, #1
    2e68:	f36c 0301 	bfi	r3, ip, #0, #2
    2e6c:	548b      	strb	r3, [r1, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    2e6e:	f895 c15c 	ldrb.w	ip, [r5, #348]	; 0x15c
    2e72:	ebac 0c02 	sub.w	ip, ip, r2
    2e76:	fa5f fc8c 	uxtb.w	ip, ip
    2e7a:	f887 c001 	strb.w	ip, [r7, #1]
		_pdu_data_tx->md = 0U;
    2e7e:	5c8b      	ldrb	r3, [r1, r2]
		switch (conn->phy_tx_time) {
    2e80:	f895 b039 	ldrb.w	fp, [r5, #57]	; 0x39
		_pdu_data_tx->md = 0U;
    2e84:	f36f 1304 	bfc	r3, #4, #1
    2e88:	548b      	strb	r3, [r1, r2]
		switch (conn->phy_tx_time) {
    2e8a:	f00b 0b07 	and.w	fp, fp, #7
    2e8e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    2e90:	f1bb 0f02 	cmp.w	fp, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    2e94:	bf15      	itete	ne
    2e96:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    2e98:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    2e9a:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    2e9c:	3b0b      	subeq	r3, #11
    2e9e:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    2ea0:	f01e 0f20 	tst.w	lr, #32
			max_tx_octets -= 4;
    2ea4:	bf18      	it	ne
    2ea6:	3b04      	subne	r3, #4
    2ea8:	f8b5 e02e 	ldrh.w	lr, [r5, #46]	; 0x2e
    2eac:	bf18      	it	ne
    2eae:	b29b      	uxthne	r3, r3
    2eb0:	4573      	cmp	r3, lr
    2eb2:	bf28      	it	cs
    2eb4:	4673      	movcs	r3, lr
		if (_pdu_data_tx->len > max_tx_octets) {
    2eb6:	459c      	cmp	ip, r3
			_pdu_data_tx->len = max_tx_octets;
    2eb8:	bf81      	itttt	hi
    2eba:	707b      	strbhi	r3, [r7, #1]
			_pdu_data_tx->md = 1U;
    2ebc:	5c8b      	ldrbhi	r3, [r1, r2]
    2ebe:	f043 0310 	orrhi.w	r3, r3, #16
    2ec2:	548b      	strbhi	r3, [r1, r2]
		if (conn->pkt_tx_head->next) {
    2ec4:	6803      	ldr	r3, [r0, #0]
    2ec6:	b11b      	cbz	r3, 2ed0 <isr+0xff0>
			_pdu_data_tx->md = 1U;
    2ec8:	5c8b      	ldrb	r3, [r1, r2]
    2eca:	f043 0310 	orr.w	r3, r3, #16
    2ece:	548b      	strb	r3, [r1, r2]
		if (!conn->pkt_tx_ctrl &&
    2ed0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d162      	bne.n	2f9e <isr+0x10be>
    2ed8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    2edc:	4298      	cmp	r0, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    2ede:	bf1c      	itt	ne
    2ee0:	f8c5 0150 	strne.w	r0, [r5, #336]	; 0x150
    2ee4:	f8c5 014c 	strne.w	r0, [r5, #332]	; 0x14c
    2ee8:	e059      	b.n	2f9e <isr+0x10be>
	struct radio_pdu_node_tx *tx_release = NULL;
    2eea:	2600      	movs	r6, #0
    2eec:	e794      	b.n	2e18 <isr+0xf38>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    2eee:	7913      	ldrb	r3, [r2, #4]
    2ef0:	f003 0303 	and.w	r3, r3, #3
    2ef4:	2b03      	cmp	r3, #3
    2ef6:	d1a7      	bne.n	2e48 <isr+0xf68>
    2ef8:	79d1      	ldrb	r1, [r2, #7]
    2efa:	2903      	cmp	r1, #3
    2efc:	d1a4      	bne.n	2e48 <isr+0xf68>
		if ((conn->llcp_req != conn->llcp_ack) ||
    2efe:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    2f02:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    2f06:	4283      	cmp	r3, r0
    2f08:	d111      	bne.n	2f2e <isr+0x104e>
    2f0a:	f895 70cd 	ldrb.w	r7, [r5, #205]	; 0xcd
    2f0e:	f895 00cc 	ldrb.w	r0, [r5, #204]	; 0xcc
    2f12:	4287      	cmp	r7, r0
    2f14:	d10b      	bne.n	2f2e <isr+0x104e>
		    (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) ||
    2f16:	f895 70f5 	ldrb.w	r7, [r5, #245]	; 0xf5
    2f1a:	f895 00f4 	ldrb.w	r0, [r5, #244]	; 0xf4
    2f1e:	4287      	cmp	r7, r0
    2f20:	d105      	bne.n	2f2e <isr+0x104e>
		    (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    2f22:	f895 7101 	ldrb.w	r7, [r5, #257]	; 0x101
    2f26:	f895 0100 	ldrb.w	r0, [r5, #256]	; 0x100
    2f2a:	4287      	cmp	r7, r0
    2f2c:	d016      	beq.n	2f5c <isr+0x107c>
			if ((node_tx->next != NULL) &&
    2f2e:	6811      	ldr	r1, [r2, #0]
    2f30:	b1e9      	cbz	r1, 2f6e <isr+0x108e>
    2f32:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    2f36:	4299      	cmp	r1, r3
    2f38:	d119      	bne.n	2f6e <isr+0x108e>
				conn->pkt_tx_head = node_tx->next;
    2f3a:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
				node_tx->next = conn->pkt_tx_ctrl_last->next;
    2f3e:	f8d5 1150 	ldr.w	r1, [r5, #336]	; 0x150
    2f42:	680b      	ldr	r3, [r1, #0]
    2f44:	6013      	str	r3, [r2, #0]
				if (!conn->pkt_tx_last) {
    2f46:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
				conn->pkt_tx_ctrl_last->next = node_tx;
    2f4a:	600a      	str	r2, [r1, #0]
				conn->pkt_tx_data = node_tx;
    2f4c:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
				if (!conn->pkt_tx_last) {
    2f50:	2b00      	cmp	r3, #0
    2f52:	f47f af79 	bne.w	2e48 <isr+0xf68>
					conn->pkt_tx_last = node_tx;
    2f56:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    2f5a:	e775      	b.n	2e48 <isr+0xf68>
		conn->llcp.encryption.initiate = 1U;
    2f5c:	2201      	movs	r2, #1
		conn->llcp_ack--;
    2f5e:	3b01      	subs	r3, #1
		conn->llcp.encryption.initiate = 1U;
    2f60:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
    2f64:	f885 1076 	strb.w	r1, [r5, #118]	; 0x76
		conn->llcp_ack--;
    2f68:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    2f6c:	e76c      	b.n	2e48 <isr+0xf68>
	conn->empty = 1U;
    2f6e:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
    2f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2f76:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2f7a:	f00c fca3 	bl	f8c4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2f7e:	7803      	ldrb	r3, [r0, #0]
    2f80:	2201      	movs	r2, #1
    2f82:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0U;
    2f86:	2200      	movs	r2, #0
    2f88:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    2f8a:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2f8e:	7003      	strb	r3, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2f90:	4607      	mov	r7, r0
    2f92:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    2f94:	2a00      	cmp	r2, #0
    2f96:	d064      	beq.n	3062 <isr+0x1182>
		pdu_data_tx->md = 1U;
    2f98:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    2f9c:	703b      	strb	r3, [r7, #0]
	_pdu_data_tx->rfu = 0U;
    2f9e:	783b      	ldrb	r3, [r7, #0]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2fa0:	4d95      	ldr	r5, [pc, #596]	; (31f8 <isr+0x1318>)
	_pdu_data_tx->rfu = 0U;
    2fa2:	f36f 1347 	bfc	r3, #5, #3
    2fa6:	703b      	strb	r3, [r7, #0]
	_pdu_data_tx->resv = 0U;
    2fa8:	2300      	movs	r3, #0
    2faa:	70bb      	strb	r3, [r7, #2]
			STATE_CLOSE : STATE_TX;
    2fac:	7d6b      	ldrb	r3, [r5, #21]
    2fae:	2b03      	cmp	r3, #3
    2fb0:	d05c      	beq.n	306c <isr+0x118c>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2fb2:	f1b8 0f00 	cmp.w	r8, #0
    2fb6:	d157      	bne.n	3068 <isr+0x1188>
    2fb8:	f1b9 0f00 	cmp.w	r9, #0
    2fbc:	d006      	beq.n	2fcc <isr+0x10ec>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    2fbe:	f89a 3008 	ldrb.w	r3, [sl, #8]
    2fc2:	06da      	lsls	r2, r3, #27
    2fc4:	d402      	bmi.n	2fcc <isr+0x10ec>
    2fc6:	787b      	ldrb	r3, [r7, #1]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d04d      	beq.n	3068 <isr+0x1188>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    2fcc:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
			  (0))) ||
    2fd0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d147      	bne.n	3068 <isr+0x1188>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2fd8:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    2fda:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2fdc:	756b      	strb	r3, [r5, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    2fde:	f00c fd17 	bl	fa10 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    2fe2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    2fe6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    2fea:	f000 0007 	and.w	r0, r0, #7
    2fee:	f00c fc71 	bl	f8d4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    2ff2:	f00c fdd5 	bl	fba0 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    2ff6:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
    2ffa:	783b      	ldrb	r3, [r7, #0]
    2ffc:	f898 215e 	ldrb.w	r2, [r8, #350]	; 0x15e
	phy = conn->phy_tx;
    3000:	f898 1038 	ldrb.w	r1, [r8, #56]	; 0x38
	pdu_data_tx->sn = _radio.conn_curr->sn;
    3004:	f3c2 0200 	ubfx	r2, r2, #0, #1
    3008:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    300c:	f898 215e 	ldrb.w	r2, [r8, #350]	; 0x15e
    3010:	f3c2 0240 	ubfx	r2, r2, #1, #1
    3014:	f362 0382 	bfi	r3, r2, #2, #1
	phy = conn->phy_tx;
    3018:	f3c1 05c2 	ubfx	r5, r1, #3, #3
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    301c:	703b      	strb	r3, [r7, #0]
	radio_phy_set(phy, flags);
    301e:	09c9      	lsrs	r1, r1, #7
    3020:	4628      	mov	r0, r5
	max_tx_octets = conn->max_tx_octets;
    3022:	f8b8 902e 	ldrh.w	r9, [r8, #46]	; 0x2e
	radio_phy_set(phy, flags);
    3026:	f00c fb6f 	bl	f708 <radio_phy_set>
	if (conn->enc_tx) {
    302a:	f898 315e 	ldrb.w	r3, [r8, #350]	; 0x15e
    302e:	006a      	lsls	r2, r5, #1
    3030:	069b      	lsls	r3, r3, #26
    3032:	fa5f f189 	uxtb.w	r1, r9
    3036:	f042 0201 	orr.w	r2, r2, #1
    303a:	d529      	bpl.n	3090 <isr+0x11b0>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    303c:	3104      	adds	r1, #4
    303e:	b2c9      	uxtb	r1, r1
    3040:	2008      	movs	r0, #8
    3042:	f00c fba7 	bl	f794 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    3046:	4639      	mov	r1, r7
    3048:	f208 1025 	addw	r0, r8, #293	; 0x125
    304c:	f00c fdf0 	bl	fc30 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    3050:	f00c fbd4 	bl	f7fc <radio_pkt_tx_set>
	LL_ASSERT(!radio_is_ready());
    3054:	f00c fc02 	bl	f85c <radio_is_ready>
    3058:	2800      	cmp	r0, #0
    305a:	f43f ac8f 	beq.w	297c <isr+0xa9c>
    305e:	f7fe bf97 	b.w	1f90 <isr+0xb0>
		pdu_data_tx->md = 0U;
    3062:	f362 1304 	bfi	r3, r2, #4, #1
    3066:	e799      	b.n	2f9c <isr+0x10bc>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    3068:	2303      	movs	r3, #3
    306a:	756b      	strb	r3, [r5, #21]
		if ((_radio.role == ROLE_MASTER) ||
    306c:	7d2b      	ldrb	r3, [r5, #20]
    306e:	2b04      	cmp	r3, #4
    3070:	d10b      	bne.n	308a <isr+0x11aa>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    3072:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    3076:	990a      	ldr	r1, [sp, #40]	; 0x28
    3078:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
    307c:	f361 12c7 	bfi	r2, r1, #7, #1
    3080:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
			radio_disable();
    3084:	f00c fbcc 	bl	f820 <radio_disable>
    3088:	e478      	b.n	297c <isr+0xa9c>
			radio_switch_complete_and_disable();
    308a:	f00c fc39 	bl	f900 <radio_switch_complete_and_disable>
    308e:	e7b2      	b.n	2ff6 <isr+0x1116>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    3090:	2008      	movs	r0, #8
    3092:	f00c fb7f 	bl	f794 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    3096:	4638      	mov	r0, r7
    3098:	e7da      	b.n	3050 <isr+0x1170>
	switch (_radio.role) {
    309a:	7d22      	ldrb	r2, [r4, #20]
    309c:	2a03      	cmp	r2, #3
    309e:	f63e af77 	bhi.w	1f90 <isr+0xb0>
    30a2:	e8df f012 	tbh	[pc, r2, lsl #1]
    30a6:	022e      	.short	0x022e
    30a8:	00420004 	.word	0x00420004
    30ac:	0091      	.short	0x0091
	if ((_radio.state == STATE_CLOSE) &&
    30ae:	2b03      	cmp	r3, #3
    30b0:	d109      	bne.n	30c6 <isr+0x11e6>
	    (_radio.advertiser.chan_map_current != 0)) {
    30b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    30b6:	075e      	lsls	r6, r3, #29
    30b8:	d005      	beq.n	30c6 <isr+0x11e6>
		adv_setup();
    30ba:	f009 f833 	bl	c124 <adv_setup>
		radio_tx_enable();
    30be:	f00c fba9 	bl	f814 <radio_tx_enable>
    30c2:	f7fe bf83 	b.w	1fcc <isr+0xec>
		radio_filter_disable();
    30c6:	f00c fc65 	bl	f994 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    30ca:	7d63      	ldrb	r3, [r4, #21]
    30cc:	2b03      	cmp	r3, #3
    30ce:	d15f      	bne.n	3190 <isr+0x12b0>
		    (!_radio.advertiser.is_hdcd)) {
    30d0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    30d4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    30d8:	d15a      	bne.n	3190 <isr+0x12b0>
			entropy_get_entropy_isr(_radio.entropy,
    30da:	2202      	movs	r2, #2
    30dc:	a90e      	add	r1, sp, #56	; 0x38
    30de:	6860      	ldr	r0, [r4, #4]
    30e0:	f012 fda7 	bl	15c32 <entropy_get_entropy_isr.constprop.43>
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    30e4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    30e8:	f240 1247 	movw	r2, #327	; 0x147
    30ec:	fbb1 f3f2 	udiv	r3, r1, r2
    30f0:	fb02 1313 	mls	r3, r2, r3, r1
			ticker_status =
    30f4:	f241 02d9 	movw	r2, #4313	; 0x10d9
    30f8:	9206      	str	r2, [sp, #24]
    30fa:	4a40      	ldr	r2, [pc, #256]	; (31fc <isr+0x131c>)
			random_delay += 1;
    30fc:	3301      	adds	r3, #1
    30fe:	b29b      	uxth	r3, r3
			ticker_status =
    3100:	e9cd 5204 	strd	r5, r2, [sp, #16]
    3104:	e9cd 5502 	strd	r5, r5, [sp, #8]
    3108:	e9cd 5500 	strd	r5, r5, [sp]
    310c:	2205      	movs	r2, #5
    310e:	4629      	mov	r1, r5
    3110:	4628      	mov	r0, r5
			random_delay += 1;
    3112:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
			ticker_status =
    3116:	f006 ffeb 	bl	a0f0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    311a:	f030 0302 	bics.w	r3, r0, #2
    311e:	d037      	beq.n	3190 <isr+0x12b0>
    3120:	7ca3      	ldrb	r3, [r4, #18]
    3122:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3124:	d034      	beq.n	3190 <isr+0x12b0>
    3126:	f7fe bf33 	b.w	1f90 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
    312a:	2b03      	cmp	r3, #3
    312c:	d124      	bne.n	3178 <isr+0x1298>
		radio_tmr_tifs_set(RADIO_TIFS);
    312e:	2096      	movs	r0, #150	; 0x96
    3130:	f00c fc6e 	bl	fa10 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    3134:	2300      	movs	r3, #0
    3136:	4619      	mov	r1, r3
    3138:	461a      	mov	r2, r3
    313a:	4618      	mov	r0, r3
    313c:	f00c fbd6 	bl	f8ec <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    3140:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    3144:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    3148:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    314c:	3008      	adds	r0, #8
    314e:	f00c fb4f 	bl	f7f0 <radio_pkt_rx_set>
		radio_rssi_measure();
    3152:	f00c fbe3 	bl	f91c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    3156:	f00b fde5 	bl	ed24 <ctrl_rl_enabled>
    315a:	b138      	cbz	r0, 316c <isr+0x128c>
			u8_t count, *irks = ctrl_irks_get(&count);
    315c:	a80e      	add	r0, sp, #56	; 0x38
    315e:	f00b fbb9 	bl	e8d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    3162:	4601      	mov	r1, r0
    3164:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3168:	f00c fdb0 	bl	fccc <radio_ar_configure>
		_radio.state = STATE_RX;
    316c:	2301      	movs	r3, #1
    316e:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    3170:	f00c fb4a 	bl	f808 <radio_rx_enable>
    3174:	f7fe bf2a 	b.w	1fcc <isr+0xec>
		radio_filter_disable();
    3178:	f00c fc0c 	bl	f994 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    317c:	7d63      	ldrb	r3, [r4, #21]
    317e:	2b05      	cmp	r3, #5
    3180:	d106      	bne.n	3190 <isr+0x12b0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3182:	2300      	movs	r3, #0
    3184:	9300      	str	r3, [sp, #0]
    3186:	2204      	movs	r2, #4
    3188:	4619      	mov	r1, r3
    318a:	4618      	mov	r0, r3
    318c:	f006 fff8 	bl	a180 <ticker_stop>
	_radio.role = ROLE_NONE;
    3190:	2500      	movs	r5, #0
    3192:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    3194:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    3196:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    3198:	f00c fcbe 	bl	fb18 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    319c:	462a      	mov	r2, r5
    319e:	4629      	mov	r1, r5
    31a0:	4628      	mov	r0, r5
    31a2:	4b17      	ldr	r3, [pc, #92]	; (3200 <isr+0x1320>)
    31a4:	f006 fa56 	bl	9654 <mayfly_enqueue>
	LL_ASSERT(!retval);
    31a8:	4605      	mov	r5, r0
    31aa:	2800      	cmp	r0, #0
    31ac:	f47e aef0 	bne.w	1f90 <isr+0xb0>
	err = clock_control_off(_radio.hf_clock, NULL);
    31b0:	6820      	ldr	r0, [r4, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    31b2:	6843      	ldr	r3, [r0, #4]
    31b4:	4629      	mov	r1, r5
    31b6:	685b      	ldr	r3, [r3, #4]
    31b8:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    31ba:	2201      	movs	r2, #1
    31bc:	4611      	mov	r1, r2
    31be:	4628      	mov	r0, r5
    31c0:	f006 fa20 	bl	9604 <mayfly_enable>
    31c4:	f7fe bf32 	b.w	202c <isr+0x14c>
	if (_radio.conn_curr == 0) {
    31c8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    31cc:	2800      	cmp	r0, #0
    31ce:	d0df      	beq.n	3190 <isr+0x12b0>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    31d0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    31d4:	b1b1      	cbz	r1, 3204 <isr+0x1324>
    31d6:	7d23      	ldrb	r3, [r4, #20]
    31d8:	2b03      	cmp	r3, #3
    31da:	d003      	beq.n	31e4 <isr+0x1304>
    31dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    31e0:	07dd      	lsls	r5, r3, #31
    31e2:	d50f      	bpl.n	3204 <isr+0x1324>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    31e4:	f012 fd0f 	bl	15c06 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    31e8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    31ec:	f008 ff10 	bl	c010 <connection_release>
			_radio.conn_curr = NULL;
    31f0:	2300      	movs	r3, #0
    31f2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    31f6:	e7cb      	b.n	3190 <isr+0x12b0>
    31f8:	20000d78 	.word	0x20000d78
    31fc:	0000bc59 	.word	0x0000bc59
    3200:	20005120 	.word	0x20005120
	latency_event = _radio.conn_curr->latency_event;
    3204:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    3208:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    320c:	f10b 0601 	add.w	r6, fp, #1
    3210:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    3212:	2f00      	cmp	r7, #0
    3214:	f000 8091 	beq.w	333a <isr+0x145a>
		if (_radio.role == ROLE_SLAVE) {
    3218:	7d23      	ldrb	r3, [r4, #20]
    321a:	2b03      	cmp	r3, #3
    321c:	f040 8081 	bne.w	3322 <isr+0x1442>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    3220:	f00c fcb2 	bl	fb88 <radio_tmr_aa_restore>
    3224:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    3226:	f00c fcb5 	bl	fb94 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    322a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    322e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    3232:	f003 0307 	and.w	r3, r3, #7
    3236:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    3238:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    323c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    323e:	d056      	beq.n	32ee <isr+0x140e>
		return 40;
    3240:	2b04      	cmp	r3, #4
    3242:	bf0c      	ite	eq
    3244:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    3248:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    324c:	f100 0330 	add.w	r3, r0, #48	; 0x30
    3250:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    3252:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    3254:	930a      	str	r3, [sp, #40]	; 0x28
    3256:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 3520 <isr+0x1640>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    325a:	a3af      	add	r3, pc, #700	; (adr r3, 3518 <isr+0x1638>)
    325c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    3260:	d848      	bhi.n	32f4 <isr+0x1414>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    3262:	fba0 010a 	umull	r0, r1, r0, sl
    3266:	f7fd fa1b 	bl	6a0 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    326a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    326c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    3270:	eba3 0009 	sub.w	r0, r3, r9
    3274:	fba0 010a 	umull	r0, r1, r0, sl
    3278:	a3a7      	add	r3, pc, #668	; (adr r3, 3518 <isr+0x1638>)
    327a:	e9d3 2300 	ldrd	r2, r3, [r3]
    327e:	f7fd fa0f 	bl	6a0 <__aeabi_uldivmod>
    3282:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
			_radio.conn_curr->slave.window_widening_event_us = 0U;
    3286:	2300      	movs	r3, #0
    3288:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0U;
    328a:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    328c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
    3290:	2b00      	cmp	r3, #0
    3292:	d040      	beq.n	3316 <isr+0x1436>
				if (pdu_data_tx->len ||
    3294:	795b      	ldrb	r3, [r3, #5]
    3296:	b913      	cbnz	r3, 329e <isr+0x13be>
    3298:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
    329c:	b10b      	cbz	r3, 32a2 <isr+0x13c2>
					_radio.conn_curr->latency_event = 0U;
    329e:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    32a0:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0U;
    32a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    32a6:	2200      	movs	r2, #0
    32a8:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    32aa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    32ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    32b2:	b1cb      	cbz	r3, 32e8 <isr+0x1408>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    32b4:	429e      	cmp	r6, r3
    32b6:	f080 80eb 	bcs.w	3490 <isr+0x15b0>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    32ba:	1b9b      	subs	r3, r3, r6
    32bc:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0U;
    32be:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    32c0:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    32c2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0U;
    32c6:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    32c8:	f240 80e4 	bls.w	3494 <isr+0x15b4>
			else if (_radio.role == ROLE_SLAVE) {
    32cc:	7d23      	ldrb	r3, [r4, #20]
    32ce:	2b03      	cmp	r3, #3
    32d0:	d10a      	bne.n	32e8 <isr+0x1408>
				if (latency_event != 0) {
    32d2:	f1bb 0f00 	cmp.w	fp, #0
    32d6:	f040 80dd 	bne.w	3494 <isr+0x15b4>
					force = _radio.conn_curr->slave.force & 0x01;
    32da:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
					if (force) {
    32dc:	f012 0801 	ands.w	r8, r2, #1
					_radio.conn_curr->slave.force >>= 1;
    32e0:	ea4f 0352 	mov.w	r3, r2, lsr #1
					if (force) {
    32e4:	d145      	bne.n	3372 <isr+0x1492>
					_radio.conn_curr->slave.force >>= 1;
    32e6:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0U;
    32e8:	f04f 0800 	mov.w	r8, #0
    32ec:	e044      	b.n	3378 <isr+0x1498>
		return 24;
    32ee:	f04f 0818 	mov.w	r8, #24
    32f2:	e7ab      	b.n	324c <isr+0x136c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    32f4:	fba9 010a 	umull	r0, r1, r9, sl
    32f8:	f7fd f9d2 	bl	6a0 <__aeabi_uldivmod>
    32fc:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    3300:	f108 0030 	add.w	r0, r8, #48	; 0x30
    3304:	a384      	add	r3, pc, #528	; (adr r3, 3518 <isr+0x1638>)
    3306:	e9d3 2300 	ldrd	r2, r3, [r3]
    330a:	fba0 010a 	umull	r0, r1, r0, sl
    330e:	f7fd f9c7 	bl	6a0 <__aeabi_uldivmod>
    3312:	4681      	mov	r9, r0
    3314:	e7b7      	b.n	3286 <isr+0x13a6>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    3316:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    331a:	07d9      	lsls	r1, r3, #31
    331c:	d5c1      	bpl.n	32a2 <isr+0x13c2>
				_radio.conn_curr->latency_event =
    331e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    3320:	e7be      	b.n	32a0 <isr+0x13c0>
		} else if (reason_peer) {
    3322:	b141      	cbz	r1, 3336 <isr+0x1456>
			_radio.conn_curr->master.terminate_ack = 1U;
    3324:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    3328:	f043 0301 	orr.w	r3, r3, #1
    332c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_plus = 0U;
    3330:	2500      	movs	r5, #0
	ticks_drift_minus = 0U;
    3332:	46a9      	mov	r9, r5
    3334:	e7b5      	b.n	32a2 <isr+0x13c2>
	ticks_drift_plus = 0U;
    3336:	460d      	mov	r5, r1
    3338:	e7fb      	b.n	3332 <isr+0x1452>
	else if (_radio.conn_curr->connect_expire) {
    333a:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    333c:	b185      	cbz	r5, 3360 <isr+0x1480>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    333e:	42ae      	cmp	r6, r5
    3340:	d204      	bcs.n	334c <isr+0x146c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    3342:	1bad      	subs	r5, r5, r6
    3344:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_plus = 0U;
    3346:	463d      	mov	r5, r7
	ticks_drift_minus = 0U;
    3348:	46a9      	mov	r9, r5
    334a:	e7ae      	b.n	32aa <isr+0x13ca>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    334c:	213e      	movs	r1, #62	; 0x3e
    334e:	f012 fc5a 	bl	15c06 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    3352:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    3356:	f008 fe5b 	bl	c010 <connection_release>
			_radio.conn_curr = NULL;
    335a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    335e:	e717      	b.n	3190 <isr+0x12b0>
		if (!_radio.conn_curr->supervision_expire) {
    3360:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    3364:	2900      	cmp	r1, #0
    3366:	d1ef      	bne.n	3348 <isr+0x1468>
			_radio.conn_curr->supervision_expire =
    3368:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    336a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0U;
    336e:	460d      	mov	r5, r1
    3370:	e7ea      	b.n	3348 <isr+0x1468>
						_radio.conn_curr->slave.force |=
    3372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3376:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    3378:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    337c:	b12b      	cbz	r3, 338a <isr+0x14aa>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    337e:	429e      	cmp	r6, r3
    3380:	f080 808b 	bcs.w	349a <isr+0x15ba>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    3384:	1b9b      	subs	r3, r3, r6
    3386:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    338a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    338e:	b12b      	cbz	r3, 339c <isr+0x14bc>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    3390:	429e      	cmp	r6, r3
    3392:	f080 8084 	bcs.w	349e <isr+0x15be>
			_radio.conn_curr->apto_expire -= elapsed_event;
    3396:	1b9b      	subs	r3, r3, r6
    3398:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    339c:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
    33a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    33a4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
    33a8:	b12b      	cbz	r3, 33b6 <isr+0x14d6>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    33aa:	429e      	cmp	r6, r3
    33ac:	f080 8089 	bcs.w	34c2 <isr+0x15e2>
			_radio.conn_curr->appto_expire -= elapsed_event;
    33b0:	1b9e      	subs	r6, r3, r6
    33b2:	f8a7 6048 	strh.w	r6, [r7, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    33b6:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
    33ba:	4293      	cmp	r3, r2
    33bc:	d006      	beq.n	33cc <isr+0x14ec>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    33be:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    33c2:	3b01      	subs	r3, #1
    33c4:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0U;
    33c6:	bf9c      	itt	ls
    33c8:	2300      	movls	r3, #0
    33ca:	857b      	strhls	r3, [r7, #42]	; 0x2a
    33cc:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    33ce:	f1b8 0f00 	cmp.w	r8, #0
    33d2:	d102      	bne.n	33da <isr+0x14fa>
    33d4:	45b3      	cmp	fp, r6
    33d6:	f000 8088 	beq.w	34ea <isr+0x160a>
		lazy = _radio.conn_curr->latency_event + 1;
    33da:	3601      	adds	r6, #1
    33dc:	b2b6      	uxth	r6, r6
	if (_radio.conn_curr->evt_len_upd) {
    33de:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
    33e2:	f012 0302 	ands.w	r3, r2, #2
    33e6:	f000 808a 	beq.w	34fe <isr+0x161e>
			      radio_rx_ready_delay_get(conn->phy_rx, 1) :
    33ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
		conn->evt_len_upd = 0U;
    33ee:	f36f 0241 	bfc	r2, #1, #1
			      radio_rx_ready_delay_get(conn->phy_rx, 1) :
    33f2:	2b00      	cmp	r3, #0
		conn->evt_len_upd = 0U;
    33f4:	f887 215f 	strb.w	r2, [r7, #351]	; 0x15f
			      radio_rx_ready_delay_get(conn->phy_rx, 1) :
    33f8:	da79      	bge.n	34ee <isr+0x160e>
    33fa:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
    33fe:	2101      	movs	r1, #1
    3400:	f000 0007 	and.w	r0, r0, #7
    3404:	f012 ff49 	bl	1629a <radio_rx_ready_delay_get>
		if (conn->evt_len_adv) {
    3408:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
		tx_time = conn->max_tx_time;
    340c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
		ticks_slot = HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    340e:	4944      	ldr	r1, [pc, #272]	; (3520 <isr+0x1640>)
		if (conn->evt_len_adv) {
    3410:	0752      	lsls	r2, r2, #29
			rx_time = conn->llcp_length.rx_time;
    3412:	bf4c      	ite	mi
    3414:	f8b7 20fc 	ldrhmi.w	r2, [r7, #252]	; 0xfc
			rx_time = conn->max_rx_time;
    3418:	8efa      	ldrhpl	r2, [r7, #54]	; 0x36
		ticks_slot = HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    341a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
    341e:	4418      	add	r0, r3
    3420:	4410      	add	r0, r2
    3422:	fba0 0101 	umull	r0, r1, r0, r1
    3426:	a33c      	add	r3, pc, #240	; (adr r3, 3518 <isr+0x1638>)
    3428:	e9d3 2300 	ldrd	r2, r3, [r3]
    342c:	f7fd f938 	bl	6a0 <__aeabi_uldivmod>
		if (ticks_slot > conn->hdr.ticks_slot) {
    3430:	68fb      	ldr	r3, [r7, #12]
		ticks_slot = HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    3432:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_slot > conn->hdr.ticks_slot) {
    3436:	4298      	cmp	r0, r3
			ticks_slot_plus = ticks_slot - conn->hdr.ticks_slot;
    3438:	bf8b      	itete	hi
    343a:	1ac1      	subhi	r1, r0, r3
			ticks_slot_minus = conn->hdr.ticks_slot - ticks_slot;
    343c:	1a1b      	subls	r3, r3, r0
	ticks_slot_minus = 0U;
    343e:	2300      	movhi	r3, #0
	ticks_slot_plus = 0U;
    3440:	2100      	movls	r1, #0
		conn->hdr.ticks_slot = ticks_slot;
    3442:	60f8      	str	r0, [r7, #12]
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    3444:	b94d      	cbnz	r5, 345a <isr+0x157a>
    3446:	f1b9 0f00 	cmp.w	r9, #0
    344a:	d106      	bne.n	345a <isr+0x157a>
    344c:	b929      	cbnz	r1, 345a <isr+0x157a>
	    (ticks_slot_plus != 0) || (ticks_slot_minus != 0) ||
    344e:	b923      	cbnz	r3, 345a <isr+0x157a>
    3450:	b91e      	cbnz	r6, 345a <isr+0x157a>
	    (lazy != 0) || (force != 0)) {
    3452:	f1b8 0f00 	cmp.w	r8, #0
    3456:	f43f ae9b 	beq.w	3190 <isr+0x12b0>
				    _radio.conn_curr->handle;
    345a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    345e:	f892 2020 	ldrb.w	r2, [r2, #32]
    3462:	3207      	adds	r2, #7
    3464:	b2d7      	uxtb	r7, r2
		ticker_status =
    3466:	4a2f      	ldr	r2, [pc, #188]	; (3524 <isr+0x1644>)
				      (void *)(u32_t)ticker_id);
    3468:	9706      	str	r7, [sp, #24]
		ticker_status =
    346a:	e9cd 9100 	strd	r9, r1, [sp]
    346e:	2100      	movs	r1, #0
    3470:	e9cd 8204 	strd	r8, r2, [sp, #16]
    3474:	e9cd 3602 	strd	r3, r6, [sp, #8]
    3478:	463a      	mov	r2, r7
    347a:	462b      	mov	r3, r5
    347c:	4608      	mov	r0, r1
    347e:	f006 fe37 	bl	a0f0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3482:	f030 0302 	bics.w	r3, r0, #2
    3486:	f43f ae83 	beq.w	3190 <isr+0x12b0>
    348a:	7ca3      	ldrb	r3, [r4, #18]
    348c:	429f      	cmp	r7, r3
    348e:	e649      	b.n	3124 <isr+0x1244>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    3490:	2108      	movs	r1, #8
    3492:	e6a7      	b.n	31e4 <isr+0x1304>
				force = 1U;
    3494:	f04f 0801 	mov.w	r8, #1
    3498:	e76e      	b.n	3378 <isr+0x1498>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    349a:	2122      	movs	r1, #34	; 0x22
    349c:	e6a2      	b.n	31e4 <isr+0x1304>
			_radio.conn_curr->apto_expire = 0U;
    349e:	2300      	movs	r3, #0
    34a0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    34a4:	2002      	movs	r0, #2
    34a6:	f008 f92f 	bl	b708 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    34aa:	2800      	cmp	r0, #0
    34ac:	f43e ad70 	beq.w	1f90 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    34b0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    34b4:	8c1b      	ldrh	r3, [r3, #32]
    34b6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    34b8:	230c      	movs	r3, #12
    34ba:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    34bc:	f008 feae 	bl	c21c <packet_rx_enqueue>
    34c0:	e76c      	b.n	339c <isr+0x14bc>
			_radio.conn_curr->appto_expire = 0U;
    34c2:	2100      	movs	r1, #0
    34c4:	f8a7 1048 	strh.w	r1, [r7, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    34c8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
    34cc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
    34d0:	2900      	cmp	r1, #0
    34d2:	f47f af70 	bne.w	33b6 <isr+0x14d6>
    34d6:	4293      	cmp	r3, r2
    34d8:	f47f af71 	bne.w	33be <isr+0x14de>
				_radio.conn_curr->llcp_type = LLCP_PING;
    34dc:	2307      	movs	r3, #7
    34de:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    34e2:	1e53      	subs	r3, r2, #1
    34e4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
    34e8:	e765      	b.n	33b6 <isr+0x14d6>
	lazy = 0U;
    34ea:	4646      	mov	r6, r8
    34ec:	e777      	b.n	33de <isr+0x14fe>
						       conn->phy_flags);
    34ee:	f897 0038 	ldrb.w	r0, [r7, #56]	; 0x38
			      radio_rx_ready_delay_get(conn->phy_rx, 1) :
    34f2:	09c1      	lsrs	r1, r0, #7
    34f4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    34f8:	f012 fec8 	bl	1628c <radio_tx_ready_delay_get>
    34fc:	e784      	b.n	3408 <isr+0x1528>
	ticks_slot_plus = 0U;
    34fe:	4619      	mov	r1, r3
    3500:	e7a0      	b.n	3444 <isr+0x1564>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    3502:	3b04      	subs	r3, #4
    3504:	2b01      	cmp	r3, #1
    3506:	f63e ad43 	bhi.w	1f90 <isr+0xb0>
		_radio.state = STATE_NONE;
    350a:	2300      	movs	r3, #0
    350c:	7563      	strb	r3, [r4, #21]
    350e:	f7fe bd8d 	b.w	202c <isr+0x14c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3512:	2b02      	cmp	r3, #2
    3514:	f7ff b927 	b.w	2766 <isr+0x886>
    3518:	1afd498d 	.word	0x1afd498d
    351c:	00000007 	.word	0x00000007
    3520:	3b9aca00 	.word	0x3b9aca00
    3524:	0000bc71 	.word	0x0000bc71

00003528 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    3528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_adv *pdu_adv;
	u32_t slot_us;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    352c:	4fc6      	ldr	r7, [pc, #792]	; (3848 <radio_adv_enable+0x320>)
{
    352e:	b08f      	sub	sp, #60	; 0x3c
    3530:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3532:	2302      	movs	r3, #2
    3534:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    3536:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    353a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    353e:	2b00      	cmp	r3, #0
{
    3540:	4683      	mov	fp, r0
    3542:	4688      	mov	r8, r1
    3544:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    3546:	da01      	bge.n	354c <radio_adv_enable+0x24>
			    &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
    3548:	200c      	movs	r0, #12
    354a:	e024      	b.n	3596 <radio_adv_enable+0x6e>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    354c:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
    3550:	232b      	movs	r3, #43	; 0x2b
    3552:	f04f 0927 	mov.w	r9, #39	; 0x27
    3556:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    355a:	f817 3009 	ldrb.w	r3, [r7, r9]
    355e:	f003 030f 	and.w	r3, r3, #15
    3562:	2b01      	cmp	r3, #1
    3564:	f200 8128 	bhi.w	37b8 <radio_adv_enable+0x290>
		if (_radio.advertiser.conn) {
    3568:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
    356c:	2d00      	cmp	r5, #0
    356e:	d1eb      	bne.n	3548 <radio_adv_enable+0x20>
		conn = mem_acquire(&_radio.conn_free);
    3570:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    3574:	f012 f8bc 	bl	156f0 <mem_acquire>
		if (!conn) {
    3578:	4604      	mov	r4, r0
    357a:	2800      	cmp	r0, #0
    357c:	f000 815e 	beq.w	383c <radio_adv_enable+0x314>
		link = mem_acquire(&_radio.link_rx_free);
    3580:	f507 70a4 	add.w	r0, r7, #328	; 0x148
    3584:	f012 f8b4 	bl	156f0 <mem_acquire>
		if (!link) {
    3588:	b940      	cbnz	r0, 359c <radio_adv_enable+0x74>
			mem_release(conn, &_radio.conn_free);
    358a:	4620      	mov	r0, r4
    358c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
    3590:	f012 f8c7 	bl	15722 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3594:	2007      	movs	r0, #7
}
    3596:	b00f      	add	sp, #60	; 0x3c
    3598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->handle = 0xFFFF;
    359c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    35a0:	8423      	strh	r3, [r4, #32]
		conn->llcp_features = LL_FEAT;
    35a2:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    35a6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		conn->data_chan_sel = 0U;
    35aa:	7f63      	ldrb	r3, [r4, #29]
		conn->latency_prepare = 0U;
    35ac:	62a5      	str	r5, [r4, #40]	; 0x28
		conn->data_chan_sel = 0U;
    35ae:	f365 1386 	bfi	r3, r5, #6, #1
    35b2:	7763      	strb	r3, [r4, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
    35b4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
    35b8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    35ba:	231b      	movs	r3, #27
    35bc:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    35be:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
    35c0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
    35c4:	8663      	strh	r3, [r4, #50]	; 0x32
		conn->max_tx_time =
    35c6:	4ba1      	ldr	r3, [pc, #644]	; (384c <radio_adv_enable+0x324>)
    35c8:	6363      	str	r3, [r4, #52]	; 0x34
		conn->phy_pref_tx = _radio.default_phy_tx;
    35ca:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
    35ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		conn->data_chan_use = 0U;
    35d2:	77e5      	strb	r5, [r4, #31]
		conn->phy_pref_tx = _radio.default_phy_tx;
    35d4:	f362 0302 	bfi	r3, r2, #0, #3
		conn->phy_tx = BIT(0);
    35d8:	2201      	movs	r2, #1
    35da:	f362 03c5 	bfi	r3, r2, #3, #3
		conn->phy_pref_flags = 0U;
    35de:	f365 1386 	bfi	r3, r5, #6, #1
		conn->phy_flags = 0U;
    35e2:	f365 13c7 	bfi	r3, r5, #7, #1
    35e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
    35ea:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->event_counter = 0U;
    35ee:	8465      	strh	r5, [r4, #34]	; 0x22
		conn->phy_tx_time = BIT(0);
    35f0:	f362 0302 	bfi	r3, r2, #0, #3
    35f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
    35f8:	f8b7 1128 	ldrh.w	r1, [r7, #296]	; 0x128
		conn->supervision_expire = 0U;
    35fc:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->phy_pref_rx = _radio.default_phy_rx;
    3600:	f361 03c5 	bfi	r3, r1, #3, #3
    3604:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
    3608:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->procedure_expire = 0U;
    360c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->phy_rx = BIT(0);
    3610:	f362 0302 	bfi	r3, r2, #0, #3
    3614:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1U;
    3618:	7f63      	ldrb	r3, [r4, #29]
    361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    361e:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6U;
    3620:	2306      	movs	r3, #6
    3622:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0U;
    3624:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    3628:	f365 1345 	bfi	r3, r5, #5, #1
		conn->slave.latency_enabled = 0U;
    362c:	f365 0300 	bfi	r3, r5, #0, #1
		conn->slave.latency_cancel = 0U;
    3630:	f365 0341 	bfi	r3, r5, #1, #1
    3634:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.window_widening_event_us = 0U;
    3638:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		conn->apto_expire = 0U;
    363c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->llcp_version.tx = 0U;
    3640:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
		conn->appto_expire = 0U;
    3644:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_version.tx = 0U;
    3648:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0U;
    364c:	f365 0341 	bfi	r3, r5, #1, #1
    3650:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		conn->llcp_conn_param.disabled = 0U;
    3654:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
		conn->slave.ticks_to_offset = 0U;
    3658:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_conn_param.disabled = 0U;
    365a:	f365 1304 	bfi	r3, r5, #4, #1
		conn->slave.ticks_to_offset = 0U;
    365e:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
		conn->llcp_terminate.req = 0U;
    3662:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
		conn->llcp_terminate.reason_peer = 0U;
    3666:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    366a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
		conn->llcp_enc.req = 0U;
    366e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
		conn->llcp_conn_param.req = 0U;
    3672:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
		conn->llcp_conn_param.disabled = 0U;
    3676:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
		conn->llcp_length.req = 0U;
    367a:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.req = 0U;
    367e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
		conn->pkt_tx_head = NULL;
    3682:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3686:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->pkt_tx_ctrl = NULL;
    368a:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
		conn->pkt_tx_ctrl_last = NULL;
    368e:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
		conn->pkt_tx_data = NULL;
    3692:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
		conn->pkt_tx_last = NULL;
    3696:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
		conn->packet_tx_head_offset = 0U;
    369a:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		k32src_wait();
    369e:	f008 ff3b 	bl	c518 <k32src_wait>
		_radio.advertiser.conn = conn;
    36a2:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    36a6:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    36a8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    36ac:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    36b0:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    36b4:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    36b8:	f36a 1387 	bfi	r3, sl, #6, #2
    36bc:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.rl_idx = rl_idx;
    36c0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    36c4:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    36c8:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    36cc:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    36ce:	2327      	movs	r3, #39	; 0x27
    36d0:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    36d2:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    36d4:	2300      	movs	r3, #0
    36d6:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    36d8:	f012 f87f 	bl	157da <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    36dc:	f817 3009 	ldrb.w	r3, [r7, r9]
    36e0:	f003 030f 	and.w	r3, r3, #15
    36e4:	2b01      	cmp	r3, #1
    36e6:	d169      	bne.n	37bc <radio_adv_enable+0x294>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    36e8:	f44f 7327 	mov.w	r3, #668	; 0x29c
    36ec:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    36ee:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    36f2:	4957      	ldr	r1, [pc, #348]	; (3850 <radio_adv_enable+0x328>)
    36f4:	a352      	add	r3, pc, #328	; (adr r3, 3840 <radio_adv_enable+0x318>)
    36f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    36fa:	fba0 0101 	umull	r0, r1, r0, r1
    36fe:	f7fc ffcf 	bl	6a0 <__aeabi_uldivmod>
	ticks_slot_offset =
    3702:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    3706:	429a      	cmp	r2, r3
    3708:	bf38      	it	cc
    370a:	461a      	movcc	r2, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    370c:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    370e:	4693      	mov	fp, r2
	ticks_anchor = ticker_ticks_now_get();
    3710:	f012 f91b 	bl	1594a <ticker_ticks_now_get>
    3714:	4682      	mov	sl, r0
	_radio.advertiser.is_hdcd = !interval &&
    3716:	f1b8 0f00 	cmp.w	r8, #0
    371a:	d157      	bne.n	37cc <radio_adv_enable+0x2a4>
				    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    371c:	f817 3009 	ldrb.w	r3, [r7, r9]
	_radio.advertiser.is_hdcd = !interval &&
    3720:	f003 030f 	and.w	r3, r3, #15
    3724:	1e5a      	subs	r2, r3, #1
    3726:	4253      	negs	r3, r2
    3728:	4153      	adcs	r3, r2
    372a:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
    372e:	4f49      	ldr	r7, [pc, #292]	; (3854 <radio_adv_enable+0x32c>)
    3730:	4a49      	ldr	r2, [pc, #292]	; (3858 <radio_adv_enable+0x330>)
    3732:	f363 1586 	bfi	r5, r3, #6, #1
    3736:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3738:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
    373c:	f10d 0934 	add.w	r9, sp, #52	; 0x34
	if (_radio.advertiser.is_hdcd) {
    3740:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    3744:	445b      	add	r3, fp
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3746:	e9cd 7907 	strd	r7, r9, [sp, #28]
	if (_radio.advertiser.is_hdcd) {
    374a:	d047      	beq.n	37dc <radio_adv_enable+0x2b4>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    374c:	2000      	movs	r0, #0
    374e:	e9cd 2005 	strd	r2, r0, [sp, #20]
    3752:	e9cd 0303 	strd	r0, r3, [sp, #12]
    3756:	e9cd 3001 	strd	r3, r0, [sp, #4]
    375a:	9000      	str	r0, [sp, #0]
    375c:	4653      	mov	r3, sl
    375e:	2205      	movs	r2, #5
    3760:	2103      	movs	r1, #3
    3762:	f006 fc7b 	bl	a05c <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    3766:	2802      	cmp	r0, #2
    3768:	d034      	beq.n	37d4 <radio_adv_enable+0x2ac>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    376a:	980d      	ldr	r0, [sp, #52]	; 0x34
    376c:	b9b8      	cbnz	r0, 379e <radio_adv_enable+0x276>
		ret_cb = TICKER_STATUS_BUSY;
    376e:	2302      	movs	r3, #2
    3770:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    3772:	4b3a      	ldr	r3, [pc, #232]	; (385c <radio_adv_enable+0x334>)
    3774:	9006      	str	r0, [sp, #24]
    3776:	e9cd 7907 	strd	r7, r9, [sp, #28]
    377a:	e9cd 0002 	strd	r0, r0, [sp, #8]
    377e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    3782:	2203      	movs	r2, #3
    3784:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    3788:	9300      	str	r3, [sp, #0]
    378a:	9001      	str	r0, [sp, #4]
    378c:	4653      	mov	r3, sl
    378e:	4611      	mov	r1, r2
		ret =
    3790:	f006 fc64 	bl	a05c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    3794:	2802      	cmp	r0, #2
    3796:	d03c      	beq.n	3812 <radio_adv_enable+0x2ea>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    3798:	980d      	ldr	r0, [sp, #52]	; 0x34
    379a:	2800      	cmp	r0, #0
    379c:	d03d      	beq.n	381a <radio_adv_enable+0x2f2>
	if (conn) {
    379e:	2c00      	cmp	r4, #0
    37a0:	f43f aed2 	beq.w	3548 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.link,
    37a4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    37a8:	492d      	ldr	r1, [pc, #180]	; (3860 <radio_adv_enable+0x338>)
    37aa:	f011 ffba 	bl	15722 <mem_release>
		mem_release(conn, &_radio.conn_free);
    37ae:	492d      	ldr	r1, [pc, #180]	; (3864 <radio_adv_enable+0x33c>)
    37b0:	4620      	mov	r0, r4
    37b2:	f011 ffb6 	bl	15722 <mem_release>
    37b6:	e6c7      	b.n	3548 <radio_adv_enable+0x20>
		conn = NULL;
    37b8:	2400      	movs	r4, #0
    37ba:	e774      	b.n	36a6 <radio_adv_enable+0x17e>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    37bc:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    37be:	bf0c      	ite	eq
    37c0:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    37c4:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    37c8:	4358      	muls	r0, r3
    37ca:	e792      	b.n	36f2 <radio_adv_enable+0x1ca>
	_radio.advertiser.is_hdcd = !interval &&
    37cc:	2300      	movs	r3, #0
    37ce:	e7ac      	b.n	372a <radio_adv_enable+0x202>
				cpu_sleep();
    37d0:	f012 f950 	bl	15a74 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    37d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    37d6:	2b02      	cmp	r3, #2
    37d8:	d0fa      	beq.n	37d0 <radio_adv_enable+0x2a8>
    37da:	e7c6      	b.n	376a <radio_adv_enable+0x242>
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    37dc:	4822      	ldr	r0, [pc, #136]	; (3868 <radio_adv_enable+0x340>)
		ret =
    37de:	9502      	str	r5, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    37e0:	fa1f f888 	uxth.w	r8, r8
		ret =
    37e4:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    37e8:	fba8 0100 	umull	r0, r1, r8, r0
    37ec:	2391      	movs	r3, #145	; 0x91
		ret =
    37ee:	e9cd 2505 	strd	r2, r5, [sp, #20]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    37f2:	fb03 1108 	mla	r1, r3, r8, r1
    37f6:	a312      	add	r3, pc, #72	; (adr r3, 3840 <radio_adv_enable+0x318>)
    37f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    37fc:	f7fc ff50 	bl	6a0 <__aeabi_uldivmod>
		ret =
    3800:	4653      	mov	r3, sl
    3802:	e9cd 5000 	strd	r5, r0, [sp]
    3806:	2205      	movs	r2, #5
    3808:	2103      	movs	r1, #3
    380a:	4628      	mov	r0, r5
    380c:	e7c0      	b.n	3790 <radio_adv_enable+0x268>
			cpu_sleep();
    380e:	f012 f931 	bl	15a74 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    3812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3814:	2b02      	cmp	r3, #2
    3816:	d0fa      	beq.n	380e <radio_adv_enable+0x2e6>
    3818:	e7be      	b.n	3798 <radio_adv_enable+0x270>
		_radio.advertiser.is_enabled = 1U;
    381a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    381e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3822:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    3826:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    382a:	f013 0401 	ands.w	r4, r3, #1
    382e:	f47f aeb2 	bne.w	3596 <radio_adv_enable+0x6e>
			ll_adv_scan_state_cb(BIT(0));
    3832:	2001      	movs	r0, #1
    3834:	f00b fbc0 	bl	efb8 <ll_adv_scan_state_cb>
		return 0;
    3838:	4620      	mov	r0, r4
    383a:	e6ac      	b.n	3596 <radio_adv_enable+0x6e>
			return BT_HCI_ERR_CONN_LIMIT_EXCEEDED;
    383c:	2009      	movs	r0, #9
    383e:	e6aa      	b.n	3596 <radio_adv_enable+0x6e>
    3840:	1afd498d 	.word	0x1afd498d
    3844:	00000007 	.word	0x00000007
    3848:	20000d78 	.word	0x20000d78
    384c:	01480148 	.word	0x01480148
    3850:	3b9aca00 	.word	0x3b9aca00
    3854:	00015a7d 	.word	0x00015a7d
    3858:	0000c4b5 	.word	0x0000c4b5
    385c:	0000c4ed 	.word	0x0000c4ed
    3860:	20000ec0 	.word	0x20000ec0
    3864:	20000e84 	.word	0x20000e84
    3868:	84e72a00 	.word	0x84e72a00

0000386c <security_changed>:
}

#ifdef CONFIG_BT_GATT_NUS_SECURITY_ENABLED
void security_changed(struct bt_conn *conn, bt_security_t level)
{
	printk("Security level was raised to %d\n", level);
    386c:	4801      	ldr	r0, [pc, #4]	; (3874 <security_changed+0x8>)
    386e:	f00e bc56 	b.w	1211e <printk>
    3872:	bf00      	nop
    3874:	00017d2c 	.word	0x00017d2c

00003878 <pairing_complete>:
}


void pairing_complete(struct bt_conn *conn, bool bonded)
{
	printk("Paired conn: %p, bonded: %d\n", conn, bonded);
    3878:	460a      	mov	r2, r1
    387a:	4601      	mov	r1, r0
    387c:	4801      	ldr	r0, [pc, #4]	; (3884 <pairing_complete+0xc>)
    387e:	f00e bc4e 	b.w	1211e <printk>
    3882:	bf00      	nop
    3884:	00017cb5 	.word	0x00017cb5

00003888 <pairing_failed>:
}


void pairing_failed(struct bt_conn *conn)
{
	printk("Pairing failed conn: %p\n", conn);
    3888:	4601      	mov	r1, r0
    388a:	4801      	ldr	r0, [pc, #4]	; (3890 <pairing_failed+0x8>)
    388c:	f00e bc47 	b.w	1211e <printk>
    3890:	00017cd2 	.word	0x00017cd2

00003894 <disconnected>:
{
    3894:	b510      	push	{r4, lr}
	if (auth_conn) {
    3896:	4c0b      	ldr	r4, [pc, #44]	; (38c4 <disconnected+0x30>)
	printk("Disconnected (reason %u)\n", reason);
    3898:	480b      	ldr	r0, [pc, #44]	; (38c8 <disconnected+0x34>)
    389a:	f00e fc40 	bl	1211e <printk>
	if (auth_conn) {
    389e:	6820      	ldr	r0, [r4, #0]
    38a0:	b118      	cbz	r0, 38aa <disconnected+0x16>
		bt_conn_unref(auth_conn);
    38a2:	f010 fb7b 	bl	13f9c <bt_conn_unref>
		auth_conn = NULL;
    38a6:	2300      	movs	r3, #0
    38a8:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    38aa:	4c08      	ldr	r4, [pc, #32]	; (38cc <disconnected+0x38>)
    38ac:	6820      	ldr	r0, [r4, #0]
    38ae:	b140      	cbz	r0, 38c2 <disconnected+0x2e>
		bt_conn_unref(current_conn);
    38b0:	f010 fb74 	bl	13f9c <bt_conn_unref>
		current_conn = NULL;
    38b4:	2100      	movs	r1, #0
    38b6:	6021      	str	r1, [r4, #0]
		set_led_state(CON_STATUS_LED, LED_OFF);
    38b8:	200b      	movs	r0, #11
}
    38ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		set_led_state(CON_STATUS_LED, LED_OFF);
    38be:	f000 bb5b 	b.w	3f78 <set_led_state>
}
    38c2:	bd10      	pop	{r4, pc}
    38c4:	2000015c 	.word	0x2000015c
    38c8:	00017c1f 	.word	0x00017c1f
    38cc:	20000160 	.word	0x20000160

000038d0 <auth_done>:
{
    38d0:	b510      	push	{r4, lr}
	printk("%s()\n", __func__);
    38d2:	4905      	ldr	r1, [pc, #20]	; (38e8 <auth_done+0x18>)
{
    38d4:	4604      	mov	r4, r0
	printk("%s()\n", __func__);
    38d6:	4805      	ldr	r0, [pc, #20]	; (38ec <auth_done+0x1c>)
    38d8:	f00e fc21 	bl	1211e <printk>
	bt_conn_auth_pairing_confirm(conn);
    38dc:	4620      	mov	r0, r4
}
    38de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_auth_pairing_confirm(conn);
    38e2:	f003 bec7 	b.w	7674 <bt_conn_auth_pairing_confirm>
    38e6:	bf00      	nop
    38e8:	00017a3c 	.word	0x00017a3c
    38ec:	00017a5d 	.word	0x00017a5d

000038f0 <connected>:
{
    38f0:	b510      	push	{r4, lr}
    38f2:	4604      	mov	r4, r0
	if (err) {
    38f4:	b121      	cbz	r1, 3900 <connected+0x10>
		printk("Connection failed (err %u)\n", err);
    38f6:	4809      	ldr	r0, [pc, #36]	; (391c <connected+0x2c>)
}
    38f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err %u)\n", err);
    38fc:	f00e bc0f 	b.w	1211e <printk>
	printk("Connected\n");
    3900:	4807      	ldr	r0, [pc, #28]	; (3920 <connected+0x30>)
    3902:	f00e fc0c 	bl	1211e <printk>
	current_conn = bt_conn_ref(conn);
    3906:	4620      	mov	r0, r4
    3908:	f010 fb41 	bl	13f8e <bt_conn_ref>
    390c:	4b05      	ldr	r3, [pc, #20]	; (3924 <connected+0x34>)
	set_led_state(CON_STATUS_LED, LED_ON);
    390e:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    3910:	6018      	str	r0, [r3, #0]
}
    3912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_led_state(CON_STATUS_LED, LED_ON);
    3916:	200b      	movs	r0, #11
    3918:	f000 bb2e 	b.w	3f78 <set_led_state>
    391c:	00017bf8 	.word	0x00017bf8
    3920:	00017c14 	.word	0x00017c14
    3924:	20000160 	.word	0x20000160

00003928 <bt_ready>:
struct bt_gatt_nus_cb nus_cb = {
	.received_cb = bt_receive_cb,
};

void bt_ready(int err)
{
    3928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (err) {
    392a:	4601      	mov	r1, r0
    392c:	b128      	cbz	r0, 393a <bt_ready+0x12>
		printk("BLE init failed with error code %d\n", err);
    392e:	4815      	ldr	r0, [pc, #84]	; (3984 <bt_ready+0x5c>)
		return;
	}

	err = bt_gatt_nus_init(&nus_cb);
	if (err) {
		printk("Failed to initialize UART service (err: %d)\n", err);
    3930:	f00e fbf5 	bl	1211e <printk>
	/* Give two semaphores to signal both the led_blink_thread, and
	 * and the ble_write_thread that ble initialized successfully
	 */
	k_sem_give(&ble_init_ok);
	k_sem_give(&ble_init_ok);
}
    3934:	b005      	add	sp, #20
    3936:	f85d fb04 	ldr.w	pc, [sp], #4
	err = bt_gatt_nus_init(&nus_cb);
    393a:	4813      	ldr	r0, [pc, #76]	; (3988 <bt_ready+0x60>)
    393c:	f001 fb4c 	bl	4fd8 <bt_gatt_nus_init>
	if (err) {
    3940:	4601      	mov	r1, r0
    3942:	b108      	cbz	r0, 3948 <bt_ready+0x20>
		printk("Failed to initialize UART service (err: %d)\n", err);
    3944:	4811      	ldr	r0, [pc, #68]	; (398c <bt_ready+0x64>)
    3946:	e7f3      	b.n	3930 <bt_ready+0x8>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    3948:	22a0      	movs	r2, #160	; 0xa0
    394a:	2301      	movs	r3, #1
    394c:	f8ad 200a 	strh.w	r2, [sp, #10]
    3950:	22f0      	movs	r2, #240	; 0xf0
    3952:	f8ad 0008 	strh.w	r0, [sp, #8]
    3956:	f8ad 200c 	strh.w	r2, [sp, #12]
    395a:	f88d 3009 	strb.w	r3, [sp, #9]
    395e:	9300      	str	r3, [sp, #0]
    3960:	490b      	ldr	r1, [pc, #44]	; (3990 <bt_ready+0x68>)
    3962:	4b0c      	ldr	r3, [pc, #48]	; (3994 <bt_ready+0x6c>)
    3964:	2202      	movs	r2, #2
    3966:	a802      	add	r0, sp, #8
    3968:	f010 fa37 	bl	13dda <bt_le_adv_start>
	if (err) {
    396c:	4601      	mov	r1, r0
    396e:	b110      	cbz	r0, 3976 <bt_ready+0x4e>
		printk("Advertising failed to start (err %d)\n", err);
    3970:	4809      	ldr	r0, [pc, #36]	; (3998 <bt_ready+0x70>)
    3972:	f00e fbd4 	bl	1211e <printk>

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3976:	4809      	ldr	r0, [pc, #36]	; (399c <bt_ready+0x74>)
    3978:	f00d fcb6 	bl	112e8 <z_impl_k_sem_give>
    397c:	4807      	ldr	r0, [pc, #28]	; (399c <bt_ready+0x74>)
    397e:	f00d fcb3 	bl	112e8 <z_impl_k_sem_give>
    3982:	e7d7      	b.n	3934 <bt_ready+0xc>
    3984:	00017b1e 	.word	0x00017b1e
    3988:	20004fc0 	.word	0x20004fc0
    398c:	00017b42 	.word	0x00017b42
    3990:	0001742c 	.word	0x0001742c
    3994:	0001744c 	.word	0x0001744c
    3998:	00017b6f 	.word	0x00017b6f
    399c:	20005494 	.word	0x20005494

000039a0 <bt_addr_le_to_str.constprop.3>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    39a0:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    39a2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    39a4:	b08a      	sub	sp, #40	; 0x28
    39a6:	4604      	mov	r4, r0
    39a8:	460e      	mov	r6, r1
    39aa:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    39ac:	2b03      	cmp	r3, #3
    39ae:	d820      	bhi.n	39f2 <bt_addr_le_to_str.constprop.3+0x52>
    39b0:	e8df f003 	tbb	[pc, r3]
    39b4:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    39b8:	4911      	ldr	r1, [pc, #68]	; (3a00 <bt_addr_le_to_str.constprop.3+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    39ba:	4628      	mov	r0, r5
    39bc:	f00f fd23 	bl	13406 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    39c0:	7862      	ldrb	r2, [r4, #1]
    39c2:	9204      	str	r2, [sp, #16]
    39c4:	78a2      	ldrb	r2, [r4, #2]
    39c6:	9203      	str	r2, [sp, #12]
    39c8:	78e2      	ldrb	r2, [r4, #3]
    39ca:	9202      	str	r2, [sp, #8]
    39cc:	7922      	ldrb	r2, [r4, #4]
    39ce:	9201      	str	r2, [sp, #4]
    39d0:	7962      	ldrb	r2, [r4, #5]
    39d2:	9200      	str	r2, [sp, #0]
    39d4:	79a3      	ldrb	r3, [r4, #6]
    39d6:	9505      	str	r5, [sp, #20]
    39d8:	4a0a      	ldr	r2, [pc, #40]	; (3a04 <bt_addr_le_to_str.constprop.3+0x64>)
    39da:	211e      	movs	r1, #30
    39dc:	4630      	mov	r0, r6
    39de:	f00e fbab 	bl	12138 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    39e2:	b00a      	add	sp, #40	; 0x28
    39e4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    39e6:	4908      	ldr	r1, [pc, #32]	; (3a08 <bt_addr_le_to_str.constprop.3+0x68>)
    39e8:	e7e7      	b.n	39ba <bt_addr_le_to_str.constprop.3+0x1a>
		strcpy(type, "public-id");
    39ea:	4908      	ldr	r1, [pc, #32]	; (3a0c <bt_addr_le_to_str.constprop.3+0x6c>)
    39ec:	e7e5      	b.n	39ba <bt_addr_le_to_str.constprop.3+0x1a>
		strcpy(type, "random-id");
    39ee:	4908      	ldr	r1, [pc, #32]	; (3a10 <bt_addr_le_to_str.constprop.3+0x70>)
    39f0:	e7e3      	b.n	39ba <bt_addr_le_to_str.constprop.3+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    39f2:	4a08      	ldr	r2, [pc, #32]	; (3a14 <bt_addr_le_to_str.constprop.3+0x74>)
    39f4:	210a      	movs	r1, #10
    39f6:	4628      	mov	r0, r5
    39f8:	f00e fb9e 	bl	12138 <snprintk>
    39fc:	e7e0      	b.n	39c0 <bt_addr_le_to_str.constprop.3+0x20>
    39fe:	bf00      	nop
    3a00:	00017ad2 	.word	0x00017ad2
    3a04:	00017afb 	.word	0x00017afb
    3a08:	00017ad9 	.word	0x00017ad9
    3a0c:	00017ae0 	.word	0x00017ae0
    3a10:	00017aea 	.word	0x00017aea
    3a14:	00017af4 	.word	0x00017af4

00003a18 <bt_receive_cb>:
{
    3a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a1c:	b089      	sub	sp, #36	; 0x24
    3a1e:	4604      	mov	r4, r0
    3a20:	460f      	mov	r7, r1
    3a22:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    3a24:	2100      	movs	r1, #0
    3a26:	221e      	movs	r2, #30
    3a28:	4668      	mov	r0, sp
    3a2a:	f00f fd48 	bl	134be <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    3a2e:	4620      	mov	r0, r4
    3a30:	f010 fab7 	bl	13fa2 <bt_conn_get_dst>
    3a34:	4669      	mov	r1, sp
    3a36:	f7ff ffb3 	bl	39a0 <bt_addr_le_to_str.constprop.3>
	printk("Received data from: %s\n", addr);
    3a3a:	4669      	mov	r1, sp
    3a3c:	482d      	ldr	r0, [pc, #180]	; (3af4 <bt_receive_cb+0xdc>)
                  led_blink_state = 0;
    3a3e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3b04 <bt_receive_cb+0xec>
                  pulse_width = CLOSED;
    3a42:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3b08 <bt_receive_cb+0xf0>
		k_fifo_put(&fifo_uart_tx_data, tx);
    3a46:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3b0c <bt_receive_cb+0xf4>
	printk("Received data from: %s\n", addr);
    3a4a:	f00e fb68 	bl	1211e <printk>
	for (u16_t pos = 0; pos != len;) {
    3a4e:	2400      	movs	r4, #0
    3a50:	42b4      	cmp	r4, r6
    3a52:	d106      	bne.n	3a62 <bt_receive_cb+0x4a>
	uart_irq_tx_enable(uart);
    3a54:	4b28      	ldr	r3, [pc, #160]	; (3af8 <bt_receive_cb+0xe0>)
    3a56:	6818      	ldr	r0, [r3, #0]
static inline void z_impl_uart_irq_tx_enable(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_tx_enable) {
    3a58:	6843      	ldr	r3, [r0, #4]
    3a5a:	69db      	ldr	r3, [r3, #28]
    3a5c:	b14b      	cbz	r3, 3a72 <bt_receive_cb+0x5a>
		api->irq_tx_enable(dev);
    3a5e:	4798      	blx	r3
    3a60:	e007      	b.n	3a72 <bt_receive_cb+0x5a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    3a62:	201c      	movs	r0, #28
    3a64:	f00d f99e 	bl	10da4 <k_malloc>
		if (!tx) {
    3a68:	4605      	mov	r5, r0
    3a6a:	b928      	cbnz	r0, 3a78 <bt_receive_cb+0x60>
			printk("Not able to allocate UART send data buffer\n");
    3a6c:	4823      	ldr	r0, [pc, #140]	; (3afc <bt_receive_cb+0xe4>)
    3a6e:	f00e fb56 	bl	1211e <printk>
}
    3a72:	b009      	add	sp, #36	; 0x24
    3a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (data[pos] == 'd')
    3a78:	5d3b      	ldrb	r3, [r7, r4]
    3a7a:	2b64      	cmp	r3, #100	; 0x64
    3a7c:	eb07 0b04 	add.w	fp, r7, r4
    3a80:	d12f      	bne.n	3ae2 <bt_receive_cb+0xca>
                  led_blink_state = 1;
    3a82:	2301      	movs	r3, #1
                  set_led_state(CON_STATUS_LED, 0);
    3a84:	2100      	movs	r1, #0
    3a86:	200b      	movs	r0, #11
                  led_blink_state = 1;
    3a88:	f8c8 3000 	str.w	r3, [r8]
                  set_led_state(CON_STATUS_LED, 0);
    3a8c:	f000 fa74 	bl	3f78 <set_led_state>
                  pulse_width = OPEN;
    3a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
                  pulse_width = CLOSED;
    3a94:	f8c9 3000 	str.w	r3, [r9]
		if ((len - pos) > tx_data_size) {
    3a98:	1b33      	subs	r3, r6, r4
    3a9a:	2b13      	cmp	r3, #19
			tx->len = tx_data_size;
    3a9c:	bf88      	it	hi
    3a9e:	2313      	movhi	r3, #19
			tx->len = (len - pos);
    3aa0:	832b      	strh	r3, [r5, #24]
		memcpy(tx->data, &data[pos], tx->len);
    3aa2:	8b2a      	ldrh	r2, [r5, #24]
    3aa4:	4659      	mov	r1, fp
    3aa6:	1d28      	adds	r0, r5, #4
    3aa8:	f00f fcdc 	bl	13464 <memcpy>
		pos += tx->len;
    3aac:	8b2b      	ldrh	r3, [r5, #24]
    3aae:	441c      	add	r4, r3
    3ab0:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    3ab2:	42a6      	cmp	r6, r4
    3ab4:	d109      	bne.n	3aca <bt_receive_cb+0xb2>
    3ab6:	19ba      	adds	r2, r7, r6
    3ab8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    3abc:	2a0d      	cmp	r2, #13
    3abe:	d104      	bne.n	3aca <bt_receive_cb+0xb2>
			tx->data[tx->len] = '\n';
    3ac0:	18ea      	adds	r2, r5, r3
    3ac2:	210a      	movs	r1, #10
			tx->len++;
    3ac4:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    3ac6:	7111      	strb	r1, [r2, #4]
			tx->len++;
    3ac8:	832b      	strh	r3, [r5, #24]
		k_fifo_put(&fifo_uart_tx_data, tx);
    3aca:	4629      	mov	r1, r5
    3acc:	4650      	mov	r0, sl
    3ace:	f013 f840 	bl	16b52 <k_queue_append>
                char* buf = k_malloc(5);
    3ad2:	2005      	movs	r0, #5
    3ad4:	f00d f966 	bl	10da4 <k_malloc>
                k_fifo_put(&fifo_ble_tx_data, buf);
    3ad8:	4601      	mov	r1, r0
    3ada:	4809      	ldr	r0, [pc, #36]	; (3b00 <bt_receive_cb+0xe8>)
    3adc:	f013 f839 	bl	16b52 <k_queue_append>
    3ae0:	e7b6      	b.n	3a50 <bt_receive_cb+0x38>
                else if (data[pos] == 'e')
    3ae2:	2b65      	cmp	r3, #101	; 0x65
    3ae4:	d1d8      	bne.n	3a98 <bt_receive_cb+0x80>
                  led_blink_state = 0;
    3ae6:	2300      	movs	r3, #0
    3ae8:	f8c8 3000 	str.w	r3, [r8]
                  pulse_width = CLOSED;
    3aec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    3af0:	e7d0      	b.n	3a94 <bt_receive_cb+0x7c>
    3af2:	bf00      	nop
    3af4:	00017b95 	.word	0x00017b95
    3af8:	20000168 	.word	0x20000168
    3afc:	00017bad 	.word	0x00017bad
    3b00:	20005508 	.word	0x20005508
    3b04:	20004fbc 	.word	0x20004fbc
    3b08:	20004fc8 	.word	0x20004fc8
    3b0c:	20005528 	.word	0x20005528

00003b10 <auth_cancel>:
{
    3b10:	b500      	push	{lr}
    3b12:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3b14:	f010 fa45 	bl	13fa2 <bt_conn_get_dst>
    3b18:	4669      	mov	r1, sp
    3b1a:	f7ff ff41 	bl	39a0 <bt_addr_le_to_str.constprop.3>
	printk("Pairing cancelled: %s\n", addr);
    3b1e:	4669      	mov	r1, sp
    3b20:	4802      	ldr	r0, [pc, #8]	; (3b2c <auth_cancel+0x1c>)
    3b22:	f00e fafc 	bl	1211e <printk>
}
    3b26:	b009      	add	sp, #36	; 0x24
    3b28:	f85d fb04 	ldr.w	pc, [sp], #4
    3b2c:	00017a46 	.word	0x00017a46

00003b30 <auth_passkey_confirm>:
{
    3b30:	b530      	push	{r4, r5, lr}
    3b32:	b089      	sub	sp, #36	; 0x24
    3b34:	460c      	mov	r4, r1
    3b36:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    3b38:	f010 fa29 	bl	13f8e <bt_conn_ref>
    3b3c:	4b08      	ldr	r3, [pc, #32]	; (3b60 <auth_passkey_confirm+0x30>)
    3b3e:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3b40:	4628      	mov	r0, r5
    3b42:	f010 fa2e 	bl	13fa2 <bt_conn_get_dst>
    3b46:	4669      	mov	r1, sp
    3b48:	f7ff ff2a 	bl	39a0 <bt_addr_le_to_str.constprop.3>
	printk("Passkey for %s: %06u\n", addr, passkey);
    3b4c:	4622      	mov	r2, r4
    3b4e:	4669      	mov	r1, sp
    3b50:	4804      	ldr	r0, [pc, #16]	; (3b64 <auth_passkey_confirm+0x34>)
    3b52:	f00e fae4 	bl	1211e <printk>
	printk("Press Button 1 to confirm, Button 2 to reject.\n");
    3b56:	4804      	ldr	r0, [pc, #16]	; (3b68 <auth_passkey_confirm+0x38>)
    3b58:	f00e fae1 	bl	1211e <printk>
}
    3b5c:	b009      	add	sp, #36	; 0x24
    3b5e:	bd30      	pop	{r4, r5, pc}
    3b60:	2000015c 	.word	0x2000015c
    3b64:	00017a63 	.word	0x00017a63
    3b68:	00017a79 	.word	0x00017a79

00003b6c <auth_passkey_display>:
{
    3b6c:	b510      	push	{r4, lr}
    3b6e:	b088      	sub	sp, #32
    3b70:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3b72:	f010 fa16 	bl	13fa2 <bt_conn_get_dst>
    3b76:	4669      	mov	r1, sp
    3b78:	f7ff ff12 	bl	39a0 <bt_addr_le_to_str.constprop.3>
	printk("Passkey for %s: %06u\n", addr, passkey);
    3b7c:	4622      	mov	r2, r4
    3b7e:	4669      	mov	r1, sp
    3b80:	4802      	ldr	r0, [pc, #8]	; (3b8c <auth_passkey_display+0x20>)
    3b82:	f00e facc 	bl	1211e <printk>
}
    3b86:	b008      	add	sp, #32
    3b88:	bd10      	pop	{r4, pc}
    3b8a:	bf00      	nop
    3b8c:	00017a63 	.word	0x00017a63

00003b90 <ble_write_thread>:
                k_sleep(RUN_LED_BLINK_INTERVAL*0.99);
	}
}

void ble_write_thread(void)
{
    3b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3b92:	f04f 31ff 	mov.w	r1, #4294967295
    3b96:	480e      	ldr	r0, [pc, #56]	; (3bd0 <ble_write_thread+0x40>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    3b98:	4d0e      	ldr	r5, [pc, #56]	; (3bd4 <ble_write_thread+0x44>)
		/* Wait indefinitely for data to be sent over bluetooth */
		char* buf = k_fifo_get(&fifo_ble_tx_data,
                                                     K_FOREVER);
                char test[16]; 
                //sprintf(test, "%d", vcc);
                memcpy(test, to_encrypt.ciphertext, 16);
    3b9a:	4e0f      	ldr	r6, [pc, #60]	; (3bd8 <ble_write_thread+0x48>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3b9c:	f00d fbd0 	bl	11340 <z_impl_k_sem_take>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    3ba0:	f04f 31ff 	mov.w	r1, #4294967295
    3ba4:	4628      	mov	r0, r5
    3ba6:	f012 fffd 	bl	16ba4 <z_impl_k_queue_get>
    3baa:	2210      	movs	r2, #16
    3bac:	4631      	mov	r1, r6
    3bae:	4604      	mov	r4, r0
    3bb0:	4668      	mov	r0, sp
    3bb2:	f00f fc57 	bl	13464 <memcpy>
		if (bt_gatt_nus_send(NULL, test, 16)) {
    3bb6:	2210      	movs	r2, #16
    3bb8:	4669      	mov	r1, sp
    3bba:	2000      	movs	r0, #0
    3bbc:	f001 fa16 	bl	4fec <bt_gatt_nus_send>
    3bc0:	b110      	cbz	r0, 3bc8 <ble_write_thread+0x38>
			printk("Failed to send data over BLE connection\n");
    3bc2:	4806      	ldr	r0, [pc, #24]	; (3bdc <ble_write_thread+0x4c>)
    3bc4:	f00e faab 	bl	1211e <printk>
		}

		k_free(buf);
    3bc8:	4620      	mov	r0, r4
    3bca:	f012 ff58 	bl	16a7e <k_free>
	for (;;) {
    3bce:	e7e7      	b.n	3ba0 <ble_write_thread+0x10>
    3bd0:	20005494 	.word	0x20005494
    3bd4:	20005508 	.word	0x20005508
    3bd8:	20002092 	.word	0x20002092
    3bdc:	00017aa9 	.word	0x00017aa9

00003be0 <uart_cb>:
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    3be0:	6843      	ldr	r3, [r0, #4]
    3be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
{
    3be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3be6:	4604      	mov	r4, r0
    3be8:	b103      	cbz	r3, 3bec <uart_cb+0xc>
		return api->irq_update(dev);
    3bea:	4798      	blx	r3
	if (api->irq_rx_ready) {
    3bec:	6863      	ldr	r3, [r4, #4]
    3bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d02b      	beq.n	3c4c <uart_cb+0x6c>
		return api->irq_rx_ready(dev);
    3bf4:	4620      	mov	r0, r4
    3bf6:	4798      	blx	r3
	if (uart_irq_rx_ready(uart)) {
    3bf8:	b340      	cbz	r0, 3c4c <uart_cb+0x6c>
		if (!rx) {
    3bfa:	4d35      	ldr	r5, [pc, #212]	; (3cd0 <uart_cb+0xf0>)
    3bfc:	682e      	ldr	r6, [r5, #0]
    3bfe:	b936      	cbnz	r6, 3c0e <uart_cb+0x2e>
			rx = k_malloc(sizeof(*rx));
    3c00:	201c      	movs	r0, #28
    3c02:	f00d f8cf 	bl	10da4 <k_malloc>
    3c06:	6028      	str	r0, [r5, #0]
			if (rx) {
    3c08:	2800      	cmp	r0, #0
    3c0a:	d030      	beq.n	3c6e <uart_cb+0x8e>
				rx->len = 0;
    3c0c:	8306      	strh	r6, [r0, #24]
		data_length = uart_fifo_read(uart, &rx->data[rx->len],
    3c0e:	6829      	ldr	r1, [r5, #0]
    3c10:	8b0a      	ldrh	r2, [r1, #24]
    3c12:	1d13      	adds	r3, r2, #4
    3c14:	4419      	add	r1, r3
	if (api->fifo_read) {
    3c16:	6863      	ldr	r3, [r4, #4]
    3c18:	699b      	ldr	r3, [r3, #24]
    3c1a:	f1c2 0214 	rsb	r2, r2, #20
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d032      	beq.n	3c88 <uart_cb+0xa8>
		return api->fifo_read(dev, rx_data, size);
    3c22:	4620      	mov	r0, r4
    3c24:	4798      	blx	r3
		rx->len += data_length;
    3c26:	6829      	ldr	r1, [r5, #0]
    3c28:	8b0b      	ldrh	r3, [r1, #24]
    3c2a:	4418      	add	r0, r3
    3c2c:	b280      	uxth	r0, r0
    3c2e:	8308      	strh	r0, [r1, #24]
		if (rx->len > 0) {
    3c30:	b160      	cbz	r0, 3c4c <uart_cb+0x6c>
			if ((rx->len == UART_BUF_SIZE) ||
    3c32:	2814      	cmp	r0, #20
    3c34:	d005      	beq.n	3c42 <uart_cb+0x62>
			   (rx->data[rx->len - 1] == '\n') ||
    3c36:	4408      	add	r0, r1
    3c38:	78c3      	ldrb	r3, [r0, #3]
			if ((rx->len == UART_BUF_SIZE) ||
    3c3a:	2b0a      	cmp	r3, #10
    3c3c:	d001      	beq.n	3c42 <uart_cb+0x62>
			   (rx->data[rx->len - 1] == '\n') ||
    3c3e:	2b0d      	cmp	r3, #13
    3c40:	d104      	bne.n	3c4c <uart_cb+0x6c>
				k_fifo_put(&fifo_uart_rx_data, rx);
    3c42:	4824      	ldr	r0, [pc, #144]	; (3cd4 <uart_cb+0xf4>)
    3c44:	f012 ff85 	bl	16b52 <k_queue_append>
				rx = NULL;
    3c48:	2300      	movs	r3, #0
    3c4a:	602b      	str	r3, [r5, #0]
	if (api->irq_tx_ready) {
    3c4c:	6863      	ldr	r3, [r4, #4]
    3c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3c50:	b1c3      	cbz	r3, 3c84 <uart_cb+0xa4>
		return api->irq_tx_ready(dev);
    3c52:	4620      	mov	r0, r4
    3c54:	4798      	blx	r3
	if (uart_irq_tx_ready(uart)) {
    3c56:	b1a8      	cbz	r0, 3c84 <uart_cb+0xa4>
    3c58:	2100      	movs	r1, #0
    3c5a:	481f      	ldr	r0, [pc, #124]	; (3cd8 <uart_cb+0xf8>)
    3c5c:	f012 ffa2 	bl	16ba4 <z_impl_k_queue_get>
		if (!buf) {
    3c60:	4606      	mov	r6, r0
    3c62:	2800      	cmp	r0, #0
    3c64:	d132      	bne.n	3ccc <uart_cb+0xec>

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
    3c66:	4620      	mov	r0, r4
    3c68:	f00d fe8e 	bl	11988 <z_impl_uart_irq_tx_disable>
    3c6c:	e00a      	b.n	3c84 <uart_cb+0xa4>
				printk("Not able to allocate UART receive buffer\n");
    3c6e:	481b      	ldr	r0, [pc, #108]	; (3cdc <uart_cb+0xfc>)
    3c70:	f00e fa55 	bl	1211e <printk>
	if (api->fifo_read) {
    3c74:	6863      	ldr	r3, [r4, #4]
    3c76:	699b      	ldr	r3, [r3, #24]
    3c78:	b123      	cbz	r3, 3c84 <uart_cb+0xa4>
		return api->fifo_read(dev, rx_data, size);
    3c7a:	2201      	movs	r2, #1
    3c7c:	f10d 0107 	add.w	r1, sp, #7
    3c80:	4620      	mov	r0, r4
    3c82:	4798      	blx	r3
}
    3c84:	b002      	add	sp, #8
    3c86:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3c88:	4618      	mov	r0, r3
    3c8a:	e7cc      	b.n	3c26 <uart_cb+0x46>
	if (api->fifo_fill) {
    3c8c:	695b      	ldr	r3, [r3, #20]
						  &buf->data[written],
    3c8e:	1d29      	adds	r1, r5, #4
    3c90:	4431      	add	r1, r6
			written += uart_fifo_fill(uart,
    3c92:	1b52      	subs	r2, r2, r5
    3c94:	b1c3      	cbz	r3, 3cc8 <uart_cb+0xe8>
		return api->fifo_fill(dev, tx_data, size);
    3c96:	4620      	mov	r0, r4
    3c98:	4798      	blx	r3
    3c9a:	4428      	add	r0, r5
    3c9c:	b285      	uxth	r5, r0
		while (buf->len > written) {
    3c9e:	8b32      	ldrh	r2, [r6, #24]
    3ca0:	6863      	ldr	r3, [r4, #4]
    3ca2:	42aa      	cmp	r2, r5
    3ca4:	d8f2      	bhi.n	3c8c <uart_cb+0xac>
	if (api->irq_tx_complete) {
    3ca6:	6863      	ldr	r3, [r4, #4]
    3ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3caa:	b11b      	cbz	r3, 3cb4 <uart_cb+0xd4>
		return api->irq_tx_complete(dev);
    3cac:	4620      	mov	r0, r4
    3cae:	4798      	blx	r3
		while (!uart_irq_tx_complete(uart)) {
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d0f8      	beq.n	3ca6 <uart_cb+0xc6>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    3cb4:	4b08      	ldr	r3, [pc, #32]	; (3cd8 <uart_cb+0xf8>)
		if (k_fifo_is_empty(&fifo_uart_tx_data)) {
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	b913      	cbnz	r3, 3cc0 <uart_cb+0xe0>
    3cba:	4620      	mov	r0, r4
    3cbc:	f00d fe64 	bl	11988 <z_impl_uart_irq_tx_disable>
		k_free(buf);
    3cc0:	4630      	mov	r0, r6
    3cc2:	f012 fedc 	bl	16a7e <k_free>
    3cc6:	e7dd      	b.n	3c84 <uart_cb+0xa4>
	return 0;
    3cc8:	4618      	mov	r0, r3
    3cca:	e7e6      	b.n	3c9a <uart_cb+0xba>
		u16_t written = 0;
    3ccc:	2500      	movs	r5, #0
    3cce:	e7e6      	b.n	3c9e <uart_cb+0xbe>
    3cd0:	20000164 	.word	0x20000164
    3cd4:	20005518 	.word	0x20005518
    3cd8:	20005528 	.word	0x20005528
    3cdc:	00017d9b 	.word	0x00017d9b

00003ce0 <error>:
{
    3ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    3ce4:	4813      	ldr	r0, [pc, #76]	; (3d34 <error+0x54>)
    3ce6:	f00c fe55 	bl	10994 <z_impl_device_get_binding>
	if (led_port) {
    3cea:	4605      	mov	r5, r0
    3cec:	b1e0      	cbz	r0, 3d28 <error+0x48>
			err = gpio_pin_configure(led_port, led_pins[i],
    3cee:	4e12      	ldr	r6, [pc, #72]	; (3d38 <error+0x58>)
		for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    3cf0:	2400      	movs	r4, #0
    3cf2:	4637      	mov	r7, r6
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    3cf4:	686b      	ldr	r3, [r5, #4]
    3cf6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    3cfa:	f8d3 8000 	ldr.w	r8, [r3]
    3cfe:	2100      	movs	r1, #0
    3d00:	2301      	movs	r3, #1
    3d02:	4628      	mov	r0, r5
    3d04:	47c0      	blx	r8
			if (err) {
    3d06:	b978      	cbnz	r0, 3d28 <error+0x48>
		for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    3d08:	3401      	adds	r4, #1
    3d0a:	2c04      	cmp	r4, #4
    3d0c:	d1f2      	bne.n	3cf4 <error+0x14>
		for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    3d0e:	4604      	mov	r4, r0
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    3d10:	686b      	ldr	r3, [r5, #4]
    3d12:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    3d16:	685e      	ldr	r6, [r3, #4]
    3d18:	2100      	movs	r1, #0
    3d1a:	2301      	movs	r3, #1
    3d1c:	4628      	mov	r0, r5
    3d1e:	47b0      	blx	r6
			if (err) {
    3d20:	b910      	cbnz	r0, 3d28 <error+0x48>
		for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    3d22:	3401      	adds	r4, #1
    3d24:	2c04      	cmp	r4, #4
    3d26:	d1f3      	bne.n	3d10 <error+0x30>
		k_sleep(1000);
    3d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3d2c:	f00d fe31 	bl	11992 <k_sleep>
    3d30:	e7fa      	b.n	3d28 <error+0x48>
    3d32:	bf00      	nop
    3d34:	00017c39 	.word	0x00017c39
    3d38:	0001743c 	.word	0x0001743c

00003d3c <configure_buttons>:
{
    3d3c:	b508      	push	{r3, lr}
	int err = dk_buttons_init(button_changed);
    3d3e:	4805      	ldr	r0, [pc, #20]	; (3d54 <configure_buttons+0x18>)
    3d40:	f00c fd82 	bl	10848 <dk_buttons_init>
	if (err) {
    3d44:	4601      	mov	r1, r0
    3d46:	b120      	cbz	r0, 3d52 <configure_buttons+0x16>
		printk("Cannot init buttons (err: %d)\n", err);
    3d48:	4803      	ldr	r0, [pc, #12]	; (3d58 <configure_buttons+0x1c>)
}
    3d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Cannot init buttons (err: %d)\n", err);
    3d4e:	f00e b9e6 	b.w	1211e <printk>
}
    3d52:	bd08      	pop	{r3, pc}
    3d54:	00011997 	.word	0x00011997
    3d58:	00017bd9 	.word	0x00017bd9

00003d5c <setup_pwm>:
uint16_t pwm_seq[4] = {30000, 30000, 15000, 15000};
void setup_pwm()
{


    NRF_PWM0->COUNTERTOP = 20000 << PWM_COUNTERTOP_COUNTERTOP_Pos;
    3d5c:	4b0e      	ldr	r3, [pc, #56]	; (3d98 <setup_pwm+0x3c>)
    3d5e:	f644 6220 	movw	r2, #20000	; 0x4e20
    3d62:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_PWM0->PSEL.OUT[0] = 23;
    3d66:	2217      	movs	r2, #23
    3d68:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    NRF_PWM0->ENABLE = 1;
    NRF_PWM0->PRESCALER   = (PWM_PRESCALER_PRESCALER_DIV_16 << PWM_PRESCALER_PRESCALER_Pos);
    3d6c:	2104      	movs	r1, #4
    NRF_PWM0->ENABLE = 1;
    3d6e:	2201      	movs	r2, #1
    NRF_PWM0->DECODER = (PWM_DECODER_LOAD_Individual << PWM_DECODER_LOAD_Pos) |
    3d70:	2002      	movs	r0, #2
    NRF_PWM0->ENABLE = 1;
    3d72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_PWM0->PRESCALER   = (PWM_PRESCALER_PRESCALER_DIV_16 << PWM_PRESCALER_PRESCALER_Pos);
    3d76:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    NRF_PWM0->DECODER = (PWM_DECODER_LOAD_Individual << PWM_DECODER_LOAD_Pos) |
    3d7a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
    NRF_PWM0->SEQ[0].PTR = (uint32_t)pwm_seq << PWM_SEQ_PTR_PTR_Pos;
    3d7e:	4807      	ldr	r0, [pc, #28]	; (3d9c <setup_pwm+0x40>)
    3d80:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    NRF_PWM0->SEQ[0].CNT = (sizeof(pwm_seq)/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
    3d84:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    NRF_PWM0->SEQ[0].REFRESH = 0;
    3d88:	2100      	movs	r1, #0
    3d8a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
    NRF_PWM0->SEQ[0].ENDDELAY = 0;
    3d8e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    NRF_PWM0->TASKS_SEQSTART[0] = 1;
    3d92:	609a      	str	r2, [r3, #8]

}
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	4001c000 	.word	0x4001c000
    3d9c:	20005298 	.word	0x20005298

00003da0 <random_char>:



char random_char()
{
  NRF_RNG->TASKS_START = 1;
    3da0:	4b06      	ldr	r3, [pc, #24]	; (3dbc <random_char+0x1c>)
    3da2:	2201      	movs	r2, #1
    3da4:	601a      	str	r2, [r3, #0]
  NRF_RNG->SHORTS = RNG_SHORTS_VALRDY_STOP_Enabled;
    3da6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  while (!NRF_RNG->EVENTS_VALRDY);
    3daa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    3dae:	2a00      	cmp	r2, #0
    3db0:	d0fb      	beq.n	3daa <random_char+0xa>
  return  (char)NRF_RNG->VALUE;
    3db2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}
    3db6:	b2c0      	uxtb	r0, r0
    3db8:	4770      	bx	lr
    3dba:	bf00      	nop
    3dbc:	4000d000 	.word	0x4000d000

00003dc0 <encrypt>:

void encrypt()
{
  
  msg.battery_level = vcc;
    3dc0:	4b17      	ldr	r3, [pc, #92]	; (3e20 <encrypt+0x60>)
    3dc2:	4918      	ldr	r1, [pc, #96]	; (3e24 <encrypt+0x64>)
    3dc4:	881b      	ldrh	r3, [r3, #0]
{
    3dc6:	b510      	push	{r4, lr}
  msg.battery_level = vcc;
    3dc8:	800b      	strh	r3, [r1, #0]
  msg.servo_pos = 1234;
    3dca:	f240 43d2 	movw	r3, #1234	; 0x4d2
    3dce:	804b      	strh	r3, [r1, #2]
  msg.nonce = random_char();
    3dd0:	f7ff ffe6 	bl	3da0 <random_char>
  msg.check = 0xDEAD;
    3dd4:	f64d 63ad 	movw	r3, #57005	; 0xdead
  msg.nonce = random_char();
    3dd8:	b240      	sxtb	r0, r0
    3dda:	7108      	strb	r0, [r1, #4]

  struct ecb_t* derp = (struct ecb_t*)&msg;
  for (int i = 0; i < 16; i++) 
  {
    to_encrypt.key[i] = 48;
    3ddc:	4c12      	ldr	r4, [pc, #72]	; (3e28 <encrypt+0x68>)
  msg.check = 0xDEAD;
    3dde:	80cb      	strh	r3, [r1, #6]
  for (int i = 0; i < 16; i++) 
    3de0:	2300      	movs	r3, #0
    to_encrypt.key[i] = 48;
    3de2:	2030      	movs	r0, #48	; 0x30
    to_encrypt.cleartext[i] = 0;
    3de4:	4619      	mov	r1, r3
    to_encrypt.key[i] = 48;
    3de6:	54e0      	strb	r0, [r4, r3]
    to_encrypt.cleartext[i] = 0;
    3de8:	18e2      	adds	r2, r4, r3
  for (int i = 0; i < 16; i++) 
    3dea:	3301      	adds	r3, #1
    3dec:	2b10      	cmp	r3, #16
    to_encrypt.cleartext[i] = 0;
    3dee:	7411      	strb	r1, [r2, #16]
    to_encrypt.ciphertext[i] = 0;
    3df0:	f882 1020 	strb.w	r1, [r2, #32]
  for (int i = 0; i < 16; i++) 
    3df4:	d1f7      	bne.n	3de6 <encrypt+0x26>
  }
  to_encrypt.key[1] = 120;
    3df6:	2378      	movs	r3, #120	; 0x78
  to_encrypt.key[2] = 120;

  memcpy(to_encrypt.cleartext, &msg, 8);
    3df8:	2208      	movs	r2, #8
    3dfa:	490a      	ldr	r1, [pc, #40]	; (3e24 <encrypt+0x64>)
    3dfc:	480b      	ldr	r0, [pc, #44]	; (3e2c <encrypt+0x6c>)
  to_encrypt.key[1] = 120;
    3dfe:	7063      	strb	r3, [r4, #1]
  to_encrypt.key[2] = 120;
    3e00:	70a3      	strb	r3, [r4, #2]
  memcpy(to_encrypt.cleartext, &msg, 8);
    3e02:	f00f fb2f 	bl	13464 <memcpy>
  NRF_ECB->ECBDATAPTR = (int)&to_encrypt;
    3e06:	4b0a      	ldr	r3, [pc, #40]	; (3e30 <encrypt+0x70>)
  NRF_ECB->TASKS_STARTECB = 1;
    3e08:	2201      	movs	r2, #1
  NRF_ECB->ECBDATAPTR = (int)&to_encrypt;
    3e0a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
  NRF_ECB->TASKS_STARTECB = 1;
    3e0e:	601a      	str	r2, [r3, #0]
  while (!NRF_ECB->EVENTS_ENDECB && !NRF_ECB->EVENTS_ERRORECB);
    3e10:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    3e14:	b91a      	cbnz	r2, 3e1e <encrypt+0x5e>
    3e16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3e1a:	2a00      	cmp	r2, #0
    3e1c:	d0f8      	beq.n	3e10 <encrypt+0x50>


}
    3e1e:	bd10      	pop	{r4, pc}
    3e20:	20001fc0 	.word	0x20001fc0
    3e24:	20001fb8 	.word	0x20001fb8
    3e28:	20002072 	.word	0x20002072
    3e2c:	20002082 	.word	0x20002082
    3e30:	4000e000 	.word	0x4000e000

00003e34 <led_blink_thread>:
{
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	4832      	ldr	r0, [pc, #200]	; (3f00 <led_blink_thread+0xcc>)
    3e38:	f00c fdac 	bl	10994 <z_impl_device_get_binding>
	if (!pwm_dev) {
    3e3c:	b928      	cbnz	r0, 3e4a <led_blink_thread+0x16>
		printk("Cannot find %s!\n", PWM_DRIVER);
    3e3e:	4930      	ldr	r1, [pc, #192]	; (3f00 <led_blink_thread+0xcc>)
    3e40:	4830      	ldr	r0, [pc, #192]	; (3f04 <led_blink_thread+0xd0>)
}
    3e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Cannot find %s!\n", PWM_DRIVER);
    3e46:	f00e b96a 	b.w	1211e <printk>
	printk("Starting Nordic UART service example\n");
    3e4a:	482f      	ldr	r0, [pc, #188]	; (3f08 <led_blink_thread+0xd4>)
	uart = device_get_binding("UART_0");
    3e4c:	4c2f      	ldr	r4, [pc, #188]	; (3f0c <led_blink_thread+0xd8>)
	printk("Starting Nordic UART service example\n");
    3e4e:	f00e f966 	bl	1211e <printk>
    3e52:	482f      	ldr	r0, [pc, #188]	; (3f10 <led_blink_thread+0xdc>)
    3e54:	f00c fd9e 	bl	10994 <z_impl_device_get_binding>
    3e58:	4602      	mov	r2, r0
	uart = device_get_binding("UART_0");
    3e5a:	6020      	str	r0, [r4, #0]
	if (!uart) {
    3e5c:	b918      	cbnz	r0, 3e66 <led_blink_thread+0x32>
	configure_buttons();
    3e5e:	f7ff ff6d 	bl	3d3c <configure_buttons>
		error();
    3e62:	f7ff ff3d 	bl	3ce0 <error>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    3e66:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3e68:	b11b      	cbz	r3, 3e72 <led_blink_thread+0x3e>
    3e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e6c:	b10b      	cbz	r3, 3e72 <led_blink_thread+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3e6e:	4929      	ldr	r1, [pc, #164]	; (3f14 <led_blink_thread+0xe0>)
    3e70:	4798      	blx	r3
	uart_irq_rx_enable(uart);
    3e72:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    3e74:	6843      	ldr	r3, [r0, #4]
    3e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e78:	b103      	cbz	r3, 3e7c <led_blink_thread+0x48>
		api->irq_rx_enable(dev);
    3e7a:	4798      	blx	r3
		err = bt_enable(bt_ready);
    3e7c:	4826      	ldr	r0, [pc, #152]	; (3f18 <led_blink_thread+0xe4>)
    3e7e:	f002 fccd 	bl	681c <bt_enable>
    3e82:	4604      	mov	r4, r0
	configure_buttons();
    3e84:	f7ff ff5a 	bl	3d3c <configure_buttons>
	if (!err) {
    3e88:	2c00      	cmp	r4, #0
    3e8a:	d1ea      	bne.n	3e62 <led_blink_thread+0x2e>
		bt_conn_cb_register(&conn_callbacks);
    3e8c:	4823      	ldr	r0, [pc, #140]	; (3f1c <led_blink_thread+0xe8>)
    3e8e:	f003 f807 	bl	6ea0 <bt_conn_cb_register>
			bt_conn_auth_cb_register(&conn_auth_callbacks);
    3e92:	4823      	ldr	r0, [pc, #140]	; (3f20 <led_blink_thread+0xec>)
    3e94:	f003 fbd2 	bl	763c <bt_conn_auth_cb_register>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3e98:	2164      	movs	r1, #100	; 0x64
    3e9a:	4822      	ldr	r0, [pc, #136]	; (3f24 <led_blink_thread+0xf0>)
    3e9c:	f00d fa50 	bl	11340 <z_impl_k_sem_take>
		if (!err) {
    3ea0:	4604      	mov	r4, r0
    3ea2:	bb40      	cbnz	r0, 3ef6 <led_blink_thread+0xc2>
			printk("Bluetooth initialized\n");
    3ea4:	4820      	ldr	r0, [pc, #128]	; (3f28 <led_blink_thread+0xf4>)
                  vcc = 5.0f/3.0f*sample_adc();
    3ea6:	4d21      	ldr	r5, [pc, #132]	; (3f2c <led_blink_thread+0xf8>)
    3ea8:	4e21      	ldr	r6, [pc, #132]	; (3f30 <led_blink_thread+0xfc>)
			printk("Bluetooth initialized\n");
    3eaa:	f00e f938 	bl	1211e <printk>
	init_gpio();
    3eae:	f000 f873 	bl	3f98 <init_gpio>
		set_led_state(RUN_STATUS_LED, (++blink_status) % 2);
    3eb2:	1c61      	adds	r1, r4, #1
    3eb4:	f001 0101 	and.w	r1, r1, #1
    3eb8:	2012      	movs	r0, #18
    3eba:	f000 f85d 	bl	3f78 <set_led_state>
                set_led_state(RUN_STATUS_LED, (++blink_status) % 2);
    3ebe:	3402      	adds	r4, #2
                encrypt();
    3ec0:	f7ff ff7e 	bl	3dc0 <encrypt>
		k_sleep(RUN_LED_BLINK_INTERVAL*0.01);
    3ec4:	2032      	movs	r0, #50	; 0x32
    3ec6:	f00d fd64 	bl	11992 <k_sleep>
                set_led_state(RUN_STATUS_LED, (++blink_status) % 2);
    3eca:	2012      	movs	r0, #18
    3ecc:	f004 0101 	and.w	r1, r4, #1
    3ed0:	f000 f852 	bl	3f78 <set_led_state>
                k_sleep(RUN_LED_BLINK_INTERVAL*0.99);
    3ed4:	f241 3056 	movw	r0, #4950	; 0x1356
    3ed8:	f00d fd5b 	bl	11992 <k_sleep>
                if (blink_status)
    3edc:	2c00      	cmp	r4, #0
    3ede:	d0e8      	beq.n	3eb2 <led_blink_thread+0x7e>
                  vcc = 5.0f/3.0f*sample_adc();
    3ee0:	f000 f8ac 	bl	403c <sample_adc>
    3ee4:	f7fc f9a2 	bl	22c <__aeabi_i2f>
    3ee8:	4631      	mov	r1, r6
    3eea:	f7fc f9f3 	bl	2d4 <__aeabi_fmul>
    3eee:	f7fc fb67 	bl	5c0 <__aeabi_f2uiz>
    3ef2:	8028      	strh	r0, [r5, #0]
    3ef4:	e7dd      	b.n	3eb2 <led_blink_thread+0x7e>
			printk("BLE initialization \
    3ef6:	480f      	ldr	r0, [pc, #60]	; (3f34 <led_blink_thread+0x100>)
    3ef8:	f00e f911 	bl	1211e <printk>
    3efc:	e7b1      	b.n	3e62 <led_blink_thread+0x2e>
    3efe:	bf00      	nop
    3f00:	00017d02 	.word	0x00017d02
    3f04:	00017d08 	.word	0x00017d08
    3f08:	00017c40 	.word	0x00017c40
    3f0c:	20000168 	.word	0x20000168
    3f10:	00017c66 	.word	0x00017c66
    3f14:	00003be1 	.word	0x00003be1
    3f18:	00003929 	.word	0x00003929
    3f1c:	20004fa0 	.word	0x20004fa0
    3f20:	20004f80 	.word	0x20004f80
    3f24:	20005494 	.word	0x20005494
    3f28:	00017c6d 	.word	0x00017c6d
    3f2c:	20001fc0 	.word	0x20001fc0
    3f30:	3fd55555 	.word	0x3fd55555
    3f34:	00017c84 	.word	0x00017c84

00003f38 <set_pwm_value>:

void set_pwm_value(uint16_t value)
{
    for(int i = 0; i < 4; i++)
    {
        pwm_seq[0] = NRF_PWM0->COUNTERTOP - value;
    3f38:	4b07      	ldr	r3, [pc, #28]	; (3f58 <set_pwm_value+0x20>)
    3f3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    3f3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    3f42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    3f46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    3f4a:	1a10      	subs	r0, r2, r0
    3f4c:	4a03      	ldr	r2, [pc, #12]	; (3f5c <set_pwm_value+0x24>)
    3f4e:	8010      	strh	r0, [r2, #0]
    }
    NRF_PWM0->TASKS_SEQSTART[0] = 1;
    3f50:	2201      	movs	r2, #1
    3f52:	609a      	str	r2, [r3, #8]
}
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	4001c000 	.word	0x4001c000
    3f5c:	20005298 	.word	0x20005298

00003f60 <manual_pwm_thread>:

void manual_pwm_thread()
{
    3f60:	b508      	push	{r3, lr}
  while(1)
  {
    set_pwm_value(pulse_width);
    3f62:	4c04      	ldr	r4, [pc, #16]	; (3f74 <manual_pwm_thread+0x14>)
    3f64:	8820      	ldrh	r0, [r4, #0]
    3f66:	f7ff ffe7 	bl	3f38 <set_pwm_value>
    k_sleep(500);
    3f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3f6e:	f00d fd10 	bl	11992 <k_sleep>
    3f72:	e7f7      	b.n	3f64 <manual_pwm_thread+0x4>
    3f74:	20004fc8 	.word	0x20004fc8

00003f78 <set_led_state>:

struct device  *led_port;


void set_led_state(int led, bool state)
{
    3f78:	460b      	mov	r3, r1
	if (led_port) {
    3f7a:	4906      	ldr	r1, [pc, #24]	; (3f94 <set_led_state+0x1c>)
{
    3f7c:	4602      	mov	r2, r0
	if (led_port) {
    3f7e:	6808      	ldr	r0, [r1, #0]
{
    3f80:	b410      	push	{r4}
	if (led_port) {
    3f82:	b128      	cbz	r0, 3f90 <set_led_state+0x18>
    3f84:	6841      	ldr	r1, [r0, #4]
    3f86:	684c      	ldr	r4, [r1, #4]
    3f88:	2100      	movs	r1, #0
    3f8a:	46a4      	mov	ip, r4
		gpio_pin_write(led_port, led, state);
	}
}
    3f8c:	bc10      	pop	{r4}
    3f8e:	4760      	bx	ip
    3f90:	bc10      	pop	{r4}
    3f92:	4770      	bx	lr
    3f94:	2000016c 	.word	0x2000016c

00003f98 <init_gpio>:

int init_gpio(void)
{
    3f98:	b538      	push	{r3, r4, r5, lr}
    3f9a:	4824      	ldr	r0, [pc, #144]	; (402c <init_gpio+0x94>)
	int err = 0;

	led_port = device_get_binding(LED_PORT);
    3f9c:	4d24      	ldr	r5, [pc, #144]	; (4030 <init_gpio+0x98>)
    3f9e:	f00c fcf9 	bl	10994 <z_impl_device_get_binding>
    3fa2:	6028      	str	r0, [r5, #0]

	if (!led_port) {
    3fa4:	b930      	cbnz	r0, 3fb4 <init_gpio+0x1c>
		printk("Could not bind to LED port\n");
    3fa6:	4823      	ldr	r0, [pc, #140]	; (4034 <init_gpio+0x9c>)
    3fa8:	f00e f8b9 	bl	1211e <printk>
		return -ENXIO;
    3fac:	f06f 0405 	mvn.w	r4, #5
			err);
		led_port = NULL;
	}

	return err;
    3fb0:	4620      	mov	r0, r4
    3fb2:	bd38      	pop	{r3, r4, r5, pc}
	err = gpio_pin_configure(led_port, RUN_STATUS_LED,
    3fb4:	2112      	movs	r1, #18
    3fb6:	f00d fd07 	bl	119c8 <gpio_pin_configure.constprop.0>
	if (!err) {
    3fba:	4604      	mov	r4, r0
    3fbc:	bb70      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_configure(led_port, CON_STATUS_LED,
    3fbe:	210b      	movs	r1, #11
    3fc0:	6828      	ldr	r0, [r5, #0]
    3fc2:	f00d fd01 	bl	119c8 <gpio_pin_configure.constprop.0>
        if (!err) {
    3fc6:	4604      	mov	r4, r0
    3fc8:	bb40      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_configure(led_port, FIVE_V_EN,
    3fca:	210a      	movs	r1, #10
    3fcc:	6828      	ldr	r0, [r5, #0]
    3fce:	f00d fcfb 	bl	119c8 <gpio_pin_configure.constprop.0>
        if (!err) {
    3fd2:	4604      	mov	r4, r0
    3fd4:	bb10      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_configure(led_port, SERVO_OUT,
    3fd6:	2117      	movs	r1, #23
    3fd8:	6828      	ldr	r0, [r5, #0]
    3fda:	f00d fcf5 	bl	119c8 <gpio_pin_configure.constprop.0>
	if (!err) {
    3fde:	4604      	mov	r4, r0
    3fe0:	b9e0      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_write(led_port, RUN_STATUS_LED, LED_OFF);
    3fe2:	4602      	mov	r2, r0
    3fe4:	2112      	movs	r1, #18
    3fe6:	6828      	ldr	r0, [r5, #0]
    3fe8:	f00d fcf7 	bl	119da <gpio_pin_write>
	if (!err) {
    3fec:	4604      	mov	r4, r0
    3fee:	b9a8      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_write(led_port, CON_STATUS_LED, LED_OFF);
    3ff0:	4602      	mov	r2, r0
    3ff2:	210b      	movs	r1, #11
    3ff4:	6828      	ldr	r0, [r5, #0]
    3ff6:	f00d fcf0 	bl	119da <gpio_pin_write>
        if (!err) {
    3ffa:	4604      	mov	r4, r0
    3ffc:	b970      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_write(led_port, FIVE_V_EN, LED_OFF);
    3ffe:	4602      	mov	r2, r0
    4000:	210a      	movs	r1, #10
    4002:	6828      	ldr	r0, [r5, #0]
    4004:	f00d fce9 	bl	119da <gpio_pin_write>
        if (!err) {
    4008:	4604      	mov	r4, r0
    400a:	b938      	cbnz	r0, 401c <init_gpio+0x84>
		err = gpio_pin_write(led_port, SERVO_OUT, LED_OFF);
    400c:	4602      	mov	r2, r0
    400e:	2117      	movs	r1, #23
    4010:	6828      	ldr	r0, [r5, #0]
    4012:	f00d fce2 	bl	119da <gpio_pin_write>
	if (err) {
    4016:	4604      	mov	r4, r0
    4018:	2800      	cmp	r0, #0
    401a:	d0c9      	beq.n	3fb0 <init_gpio+0x18>
		printk("Not able to correctly initialize LED pins (err:%d)",
    401c:	4621      	mov	r1, r4
    401e:	4806      	ldr	r0, [pc, #24]	; (4038 <init_gpio+0xa0>)
    4020:	f00e f87d 	bl	1211e <printk>
		led_port = NULL;
    4024:	2300      	movs	r3, #0
    4026:	602b      	str	r3, [r5, #0]
    4028:	e7c2      	b.n	3fb0 <init_gpio+0x18>
    402a:	bf00      	nop
    402c:	00017c39 	.word	0x00017c39
    4030:	2000016c 	.word	0x2000016c
    4034:	00017dc5 	.word	0x00017dc5
    4038:	00017de1 	.word	0x00017de1

0000403c <sample_adc>:
#include <zephyr.h>
#include <device.h>
#include <soc.h>

int sample_adc()
{
    403c:	b513      	push	{r0, r1, r4, lr}
  volatile int16_t result = 0;
    403e:	2300      	movs	r3, #0
    4040:	f8ad 3002 	strh.w	r3, [sp, #2]
  volatile float precise_result = 0;
    4044:	2300      	movs	r3, #0
    4046:	9301      	str	r3, [sp, #4]

  // Start HFCLK from crystal oscillator, this will give the SAADC higher accuracy
  NRF_CLOCK->TASKS_HFCLKSTART = 1;
    4048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    404c:	2201      	movs	r2, #1
    404e:	601a      	str	r2, [r3, #0]
  while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0);
    4050:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    4054:	2a00      	cmp	r2, #0
    4056:	d0fb      	beq.n	4050 <sample_adc+0x14>
  NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4058:	2100      	movs	r1, #0
    405a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100

  // Configure SAADC singled-ended channel, Internal reference (0.6V) and 1/6 gain.
  NRF_SAADC->CH[0].CONFIG = (SAADC_CH_CONFIG_GAIN_Gain1_6    << SAADC_CH_CONFIG_GAIN_Pos) |
    405e:	4b2a      	ldr	r3, [pc, #168]	; (4108 <sample_adc+0xcc>)
    4060:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4064:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                            (SAADC_CH_CONFIG_RESN_Bypass     << SAADC_CH_CONFIG_RESN_Pos) |
                            (SAADC_CH_CONFIG_RESP_Bypass     << SAADC_CH_CONFIG_RESP_Pos) |
                            (SAADC_CH_CONFIG_TACQ_40us        << SAADC_CH_CONFIG_TACQ_Pos);

  // Configure the SAADC channel with VDD as positive input, no negative input(single ended).
  NRF_SAADC->CH[0].PSELP = SAADC_CH_PSELP_PSELP_AnalogInput5 << SAADC_CH_PSELP_PSELP_Pos;
    4068:	2206      	movs	r2, #6
    406a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_SAADC->CH[0].PSELN = SAADC_CH_PSELN_PSELN_NC << SAADC_CH_PSELN_PSELN_Pos;

  // Configure the SAADC resolution.
  NRF_SAADC->RESOLUTION = SAADC_RESOLUTION_VAL_14bit << SAADC_RESOLUTION_VAL_Pos;
    406e:	2203      	movs	r2, #3
  NRF_SAADC->CH[0].PSELN = SAADC_CH_PSELN_PSELN_NC << SAADC_CH_PSELN_PSELN_Pos;
    4070:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

  // Configure result to be put in RAM at the location of "result" variable.
  NRF_SAADC->RESULT.MAXCNT = 1;
  NRF_SAADC->RESULT.PTR = (uint32_t)&result;
    4074:	f10d 0002 	add.w	r0, sp, #2
  NRF_SAADC->RESOLUTION = SAADC_RESOLUTION_VAL_14bit << SAADC_RESOLUTION_VAL_Pos;
    4078:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
  NRF_SAADC->RESULT.MAXCNT = 1;
    407c:	2201      	movs	r2, #1
    407e:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
  NRF_SAADC->RESULT.PTR = (uint32_t)&result;
    4082:	f8c3 062c 	str.w	r0, [r3, #1580]	; 0x62c

  // No automatic sampling, will trigger with TASKS_SAMPLE.
  NRF_SAADC->SAMPLERATE = SAADC_SAMPLERATE_MODE_Task << SAADC_SAMPLERATE_MODE_Pos;
    4086:	f8c3 15f8 	str.w	r1, [r3, #1528]	; 0x5f8

  // Enable SAADC (would capture analog pins if they were used in CH[0].PSELP)
  NRF_SAADC->ENABLE = SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos;
    408a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  // Calibrate the SAADC (only needs to be done once in a while)
  NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    408e:	60da      	str	r2, [r3, #12]
  while (NRF_SAADC->EVENTS_CALIBRATEDONE == 0);
    4090:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    4094:	2a00      	cmp	r2, #0
    4096:	d0fb      	beq.n	4090 <sample_adc+0x54>
  NRF_SAADC->EVENTS_CALIBRATEDONE = 0;
    4098:	2200      	movs	r2, #0
    409a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  while (NRF_SAADC->STATUS == (SAADC_STATUS_STATUS_Busy <<SAADC_STATUS_STATUS_Pos));
    409e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    40a2:	2a01      	cmp	r2, #1
    40a4:	d0fb      	beq.n	409e <sample_adc+0x62>

  // Start the SAADC and wait for the started event.
  NRF_SAADC->TASKS_START = 1;
    40a6:	2201      	movs	r2, #1
    40a8:	601a      	str	r2, [r3, #0]
  while (NRF_SAADC->EVENTS_STARTED == 0);
    40aa:	4b17      	ldr	r3, [pc, #92]	; (4108 <sample_adc+0xcc>)
    40ac:	461c      	mov	r4, r3
    40ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    40b2:	2a00      	cmp	r2, #0
    40b4:	d0fb      	beq.n	40ae <sample_adc+0x72>
  NRF_SAADC->EVENTS_STARTED = 0;
    40b6:	2200      	movs	r2, #0
    40b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  // Do a SAADC sample, will put the result in the configured RAM buffer.
  NRF_SAADC->TASKS_SAMPLE = 1;
    40bc:	2201      	movs	r2, #1
    40be:	605a      	str	r2, [r3, #4]
  while (NRF_SAADC->EVENTS_END == 0);
    40c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    40c4:	2b00      	cmp	r3, #0
    40c6:	d0fb      	beq.n	40c0 <sample_adc+0x84>
  NRF_SAADC->EVENTS_END = 0;
    40c8:	2300      	movs	r3, #0
    40ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104

  // Convert the result to voltage
  // Result = [V(p) - V(n)] * GAIN/REFERENCE * 2^(RESOLUTION)
  // Result = (VDD - 0) * ((1/6) / 0.6) * 2^14
  // VDD = Result / 4551.1
  precise_result = (float)result / 4551.1f;
    40ce:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    40d2:	b200      	sxth	r0, r0
    40d4:	f7fc f8aa 	bl	22c <__aeabi_i2f>
    40d8:	490c      	ldr	r1, [pc, #48]	; (410c <sample_adc+0xd0>)
    40da:	f7fc f9af 	bl	43c <__aeabi_fdiv>
    40de:	9001      	str	r0, [sp, #4]
  precise_result; // to get rid of set but not used warning
    40e0:	9b01      	ldr	r3, [sp, #4]

  // Stop the SAADC, since it's not used anymore.
  NRF_SAADC->TASKS_STOP = 1;
    40e2:	2301      	movs	r3, #1
    40e4:	60a3      	str	r3, [r4, #8]
  while (NRF_SAADC->EVENTS_STOPPED == 0);
    40e6:	4b08      	ldr	r3, [pc, #32]	; (4108 <sample_adc+0xcc>)
    40e8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    40ec:	2a00      	cmp	r2, #0
    40ee:	d0fb      	beq.n	40e8 <sample_adc+0xac>
  NRF_SAADC->EVENTS_STOPPED = 0;
    40f0:	2200      	movs	r2, #0
    40f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  return (int)(precise_result*1000);
    40f6:	4906      	ldr	r1, [pc, #24]	; (4110 <sample_adc+0xd4>)
    40f8:	9801      	ldr	r0, [sp, #4]
    40fa:	f7fc f8eb 	bl	2d4 <__aeabi_fmul>
    40fe:	f7fc fa39 	bl	574 <__aeabi_f2iz>
    4102:	b002      	add	sp, #8
    4104:	bd10      	pop	{r4, pc}
    4106:	bf00      	nop
    4108:	40007000 	.word	0x40007000
    410c:	458e38cd 	.word	0x458e38cd
    4110:	447a0000 	.word	0x447a0000

00004114 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4114:	680b      	ldr	r3, [r1, #0]
    4116:	3301      	adds	r3, #1
    4118:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    411a:	4b01      	ldr	r3, [pc, #4]	; (4120 <char_out+0xc>)
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	4718      	bx	r3
    4120:	20004fcc 	.word	0x20004fcc

00004124 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    4124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4128:	b085      	sub	sp, #20
    412a:	469b      	mov	fp, r3
    412c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    412e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 41b8 <_printk_dec_ulong+0x94>
    4132:	2c01      	cmp	r4, #1
    4134:	bfb8      	it	lt
    4136:	2401      	movlt	r4, #1
    4138:	2b01      	cmp	r3, #1
    413a:	bf0c      	ite	eq
    413c:	2330      	moveq	r3, #48	; 0x30
    413e:	2320      	movne	r3, #32
    4140:	4616      	mov	r6, r2
    4142:	4682      	mov	sl, r0
    4144:	4688      	mov	r8, r1
    4146:	9302      	str	r3, [sp, #8]
    4148:	2501      	movs	r5, #1
    414a:	270a      	movs	r7, #10
    414c:	2200      	movs	r2, #0
    414e:	fbb6 f3f9 	udiv	r3, r6, r9
    4152:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    4154:	b90a      	cbnz	r2, 415a <_printk_dec_ulong+0x36>
    4156:	45b1      	cmp	r9, r6
    4158:	d81d      	bhi.n	4196 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    415a:	9b01      	ldr	r3, [sp, #4]
    415c:	4641      	mov	r1, r8
    415e:	f103 0030 	add.w	r0, r3, #48	; 0x30
    4162:	47d0      	blx	sl
			digits++;
    4164:	3501      	adds	r5, #1
			found_largest_digit = 1;
    4166:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    4168:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    416a:	3f01      	subs	r7, #1
	while (pos >= 10) {
    416c:	2f01      	cmp	r7, #1
		remainder %= pos;
    416e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    4172:	f04f 030a 	mov.w	r3, #10
    4176:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    417a:	d1e8      	bne.n	414e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    417c:	4641      	mov	r1, r8
    417e:	f106 0030 	add.w	r0, r6, #48	; 0x30
    4182:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    4184:	f1bb 0f03 	cmp.w	fp, #3
    4188:	d102      	bne.n	4190 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
    418a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    418c:	2c00      	cmp	r4, #0
    418e:	dc0e      	bgt.n	41ae <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
    4190:	b005      	add	sp, #20
    4192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    4196:	42bc      	cmp	r4, r7
    4198:	dbe6      	blt.n	4168 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    419a:	f1bb 0f02 	cmp.w	fp, #2
    419e:	d8e3      	bhi.n	4168 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    41a0:	4641      	mov	r1, r8
    41a2:	9802      	ldr	r0, [sp, #8]
    41a4:	9203      	str	r2, [sp, #12]
			digits++;
    41a6:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    41a8:	47d0      	blx	sl
			digits++;
    41aa:	9a03      	ldr	r2, [sp, #12]
    41ac:	e7dc      	b.n	4168 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    41ae:	4641      	mov	r1, r8
    41b0:	2020      	movs	r0, #32
    41b2:	47d0      	blx	sl
    41b4:	3c01      	subs	r4, #1
    41b6:	e7e9      	b.n	418c <_printk_dec_ulong+0x68>
    41b8:	3b9aca00 	.word	0x3b9aca00

000041bc <__printk_hook_install>:
	_char_out = fn;
    41bc:	4b01      	ldr	r3, [pc, #4]	; (41c4 <__printk_hook_install+0x8>)
    41be:	6018      	str	r0, [r3, #0]
}
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop
    41c4:	20004fcc 	.word	0x20004fcc

000041c8 <vprintk>:
{
    41c8:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    41ca:	ac02      	add	r4, sp, #8
    41cc:	2300      	movs	r3, #0
    41ce:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    41d2:	4602      	mov	r2, r0
    41d4:	460b      	mov	r3, r1
    41d6:	4803      	ldr	r0, [pc, #12]	; (41e4 <vprintk+0x1c>)
    41d8:	4621      	mov	r1, r4
    41da:	f00d fe2a 	bl	11e32 <z_vprintk>
}
    41de:	b002      	add	sp, #8
    41e0:	bd10      	pop	{r4, pc}
    41e2:	bf00      	nop
    41e4:	00004115 	.word	0x00004115

000041e8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    41e8:	b530      	push	{r4, r5, lr}
    41ea:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    41ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    41f0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    41f2:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    41f4:	a901      	add	r1, sp, #4
    41f6:	4805      	ldr	r0, [pc, #20]	; (420c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    41f8:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    41fa:	f00d fe1a 	bl	11e32 <z_vprintk>

	if (ctx.count < ctx.max) {
    41fe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4202:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4204:	bfb8      	it	lt
    4206:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4208:	b005      	add	sp, #20
    420a:	bd30      	pop	{r4, r5, pc}
    420c:	00011e0d 	.word	0x00011e0d

00004210 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    4210:	4b01      	ldr	r3, [pc, #4]	; (4218 <uECC_get_rng+0x8>)
    4212:	6818      	ldr	r0, [r3, #0]
    4214:	4770      	bx	lr
    4216:	bf00      	nop
    4218:	20004fd0 	.word	0x20004fd0

0000421c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    421c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    421e:	2208      	movs	r2, #8
{
    4220:	b089      	sub	sp, #36	; 0x24
    4222:	460c      	mov	r4, r1
    4224:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    4226:	f00e f980 	bl	1252a <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    422a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    422c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    422e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    4230:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    4232:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    4234:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    4236:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    4238:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    423a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    423c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    423e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4240:	2308      	movs	r3, #8
    4242:	466a      	mov	r2, sp
    4244:	4669      	mov	r1, sp
    4246:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    4248:	e9cd 7701 	strd	r7, r7, [sp, #4]
    424c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    424e:	f00e f857 	bl	12300 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4252:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4254:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4256:	466a      	mov	r2, sp
    4258:	4631      	mov	r1, r6
    425a:	4630      	mov	r0, r6
    425c:	f00e f850 	bl	12300 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    4260:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4262:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    4264:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4266:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    4268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    426a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    426c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    426e:	4405      	add	r5, r0
	tmp[7] = 0;
    4270:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4274:	466a      	mov	r2, sp
    4276:	2308      	movs	r3, #8
    4278:	4669      	mov	r1, sp
    427a:	4668      	mov	r0, sp
    427c:	f00e f840 	bl	12300 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4280:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4282:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4284:	2308      	movs	r3, #8
    4286:	466a      	mov	r2, sp
    4288:	4630      	mov	r0, r6
    428a:	f00e f839 	bl	12300 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    428e:	6a23      	ldr	r3, [r4, #32]
    4290:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    4292:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4294:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    4296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4298:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    429a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    429c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    429e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    42a0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42a2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42a4:	2308      	movs	r3, #8
    42a6:	466a      	mov	r2, sp
    42a8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    42aa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    42ae:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42b0:	f00e f826 	bl	12300 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    42b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    42b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    42b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    42ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    42bc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    42be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    42c0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    42c2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    42c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    42c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    42c8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    42ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    42ce:	6a23      	ldr	r3, [r4, #32]
    42d0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42d2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42d4:	2308      	movs	r3, #8
    42d6:	466a      	mov	r2, sp
    42d8:	4630      	mov	r0, r6
    42da:	f00e f811 	bl	12300 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    42de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    42e0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    42e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    42e4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    42e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    42e8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    42ea:	6a23      	ldr	r3, [r4, #32]
    42ec:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    42ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42f0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    42f2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    42f4:	2308      	movs	r3, #8
    42f6:	466a      	mov	r2, sp
    42f8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    42fa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    42fe:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4300:	f00e f953 	bl	125aa <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    4304:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4306:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    4308:	6b63      	ldr	r3, [r4, #52]	; 0x34
    430a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    430c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    430e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    4310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4312:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    4314:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4316:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    4318:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    431a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    431c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    431e:	2308      	movs	r3, #8
    4320:	466a      	mov	r2, sp
    4322:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    4324:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4328:	f00e f93f 	bl	125aa <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    432c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    432e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    4330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4332:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    4334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4336:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    4338:	6a23      	ldr	r3, [r4, #32]
    433a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    433c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    433e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    4340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    4342:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    4346:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4348:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    434a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    434c:	2308      	movs	r3, #8
    434e:	466a      	mov	r2, sp
    4350:	4630      	mov	r0, r6
    4352:	f00e f92a 	bl	125aa <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    4356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4358:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    435a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    435c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    4360:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4362:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    4364:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4366:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    4368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    436a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    436e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4370:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4372:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4374:	2308      	movs	r3, #8
    4376:	466a      	mov	r2, sp
    4378:	4630      	mov	r0, r6
    437a:	f00e f916 	bl	125aa <uECC_vli_sub>

	if (carry < 0) {
    437e:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4380:	4c0d      	ldr	r4, [pc, #52]	; (43b8 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    4382:	d40f      	bmi.n	43a4 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    4384:	b935      	cbnz	r5, 4394 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    4386:	2208      	movs	r2, #8
    4388:	4631      	mov	r1, r6
    438a:	4620      	mov	r0, r4
    438c:	f00e f8d9 	bl	12542 <uECC_vli_cmp_unsafe>
		while (carry || 
    4390:	2801      	cmp	r0, #1
    4392:	d00f      	beq.n	43b4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4394:	2308      	movs	r3, #8
    4396:	4622      	mov	r2, r4
    4398:	4631      	mov	r1, r6
    439a:	4630      	mov	r0, r6
    439c:	f00e f905 	bl	125aa <uECC_vli_sub>
    43a0:	1a2d      	subs	r5, r5, r0
    43a2:	e7ef      	b.n	4384 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    43a4:	2308      	movs	r3, #8
    43a6:	4622      	mov	r2, r4
    43a8:	4631      	mov	r1, r6
    43aa:	4630      	mov	r0, r6
    43ac:	f00d ffa8 	bl	12300 <uECC_vli_add>
		while (carry < 0);
    43b0:	182d      	adds	r5, r5, r0
    43b2:	d4f7      	bmi.n	43a4 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    43b4:	b009      	add	sp, #36	; 0x24
    43b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43b8:	00017478 	.word	0x00017478

000043bc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    43bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    43be:	4e28      	ldr	r6, [pc, #160]	; (4460 <tc_aes128_set_encrypt_key+0xa4>)
{
    43c0:	4607      	mov	r7, r0
    43c2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    43c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    43c6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    43c8:	ad01      	add	r5, sp, #4
    43ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    43cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    43ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    43d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    43d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    43d8:	2f00      	cmp	r7, #0
    43da:	d03c      	beq.n	4456 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    43dc:	2c00      	cmp	r4, #0
    43de:	d03c      	beq.n	445a <tc_aes128_set_encrypt_key+0x9e>
    43e0:	1f38      	subs	r0, r7, #4
    43e2:	4621      	mov	r1, r4
    43e4:	4602      	mov	r2, r0
    43e6:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    43e8:	784b      	ldrb	r3, [r1, #1]
    43ea:	780d      	ldrb	r5, [r1, #0]
    43ec:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    43ee:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    43f2:	78cd      	ldrb	r5, [r1, #3]
    43f4:	432b      	orrs	r3, r5
    43f6:	788d      	ldrb	r5, [r1, #2]
    43f8:	3104      	adds	r1, #4
    43fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    43fe:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4400:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    4404:	d1f0      	bne.n	43e8 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4406:	4c17      	ldr	r4, [pc, #92]	; (4464 <tc_aes128_set_encrypt_key+0xa8>)
    4408:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    440a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    440c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    440e:	d118      	bne.n	4442 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    4410:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4414:	0e1a      	lsrs	r2, r3, #24
    4416:	5ca5      	ldrb	r5, [r4, r2]
    4418:	b2da      	uxtb	r2, r3
    441a:	5ca2      	ldrb	r2, [r4, r2]
    441c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    4420:	f3c3 4507 	ubfx	r5, r3, #16, #8
    4424:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4428:	5d65      	ldrb	r5, [r4, r5]
    442a:	5ce3      	ldrb	r3, [r4, r3]
    442c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    4430:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4434:	ad0c      	add	r5, sp, #48	; 0x30
    4436:	f021 0303 	bic.w	r3, r1, #3
    443a:	442b      	add	r3, r5
    443c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    4440:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    4442:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    4446:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    4448:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    444a:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    444c:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    444e:	d1dc      	bne.n	440a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    4450:	2001      	movs	r0, #1
}
    4452:	b00d      	add	sp, #52	; 0x34
    4454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4456:	4638      	mov	r0, r7
    4458:	e7fb      	b.n	4452 <tc_aes128_set_encrypt_key+0x96>
    445a:	4620      	mov	r0, r4
    445c:	e7f9      	b.n	4452 <tc_aes128_set_encrypt_key+0x96>
    445e:	bf00      	nop
    4460:	000173d4 	.word	0x000173d4
    4464:	00017e23 	.word	0x00017e23

00004468 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    446c:	4615      	mov	r5, r2
    446e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    4470:	4680      	mov	r8, r0
    4472:	2800      	cmp	r0, #0
    4474:	d05b      	beq.n	452e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    4476:	2900      	cmp	r1, #0
    4478:	d05a      	beq.n	4530 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    447a:	2a00      	cmp	r2, #0
    447c:	d05a      	beq.n	4534 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    447e:	2310      	movs	r3, #16
    4480:	460a      	mov	r2, r1
    4482:	4668      	mov	r0, sp
    4484:	4619      	mov	r1, r3
    4486:	f00d fe7a 	bl	1217e <_copy>
	add_round_key(state, s->words);
    448a:	4629      	mov	r1, r5
    448c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    448e:	4c2a      	ldr	r4, [pc, #168]	; (4538 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    4490:	f00e fda1 	bl	12fd6 <add_round_key>
    4494:	f105 0710 	add.w	r7, r5, #16
    4498:	46a1      	mov	r9, r4
    449a:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    449c:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    449e:	f81d 3006 	ldrb.w	r3, [sp, r6]
    44a2:	5ce3      	ldrb	r3, [r4, r3]
    44a4:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    44a8:	3601      	adds	r6, #1
    44aa:	2e10      	cmp	r6, #16
    44ac:	d1f7      	bne.n	449e <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    44ae:	4668      	mov	r0, sp
    44b0:	f00e fdd6 	bl	13060 <shift_rows>
	mult_row_column(t, s);
    44b4:	4669      	mov	r1, sp
    44b6:	a804      	add	r0, sp, #16
    44b8:	f00e fe0b 	bl	130d2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    44bc:	a901      	add	r1, sp, #4
    44be:	a805      	add	r0, sp, #20
    44c0:	f00e fe07 	bl	130d2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    44c4:	a902      	add	r1, sp, #8
    44c6:	a806      	add	r0, sp, #24
    44c8:	f00e fe03 	bl	130d2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    44cc:	a903      	add	r1, sp, #12
    44ce:	a807      	add	r0, sp, #28
    44d0:	f00e fdff 	bl	130d2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    44d4:	4633      	mov	r3, r6
    44d6:	aa04      	add	r2, sp, #16
    44d8:	4631      	mov	r1, r6
    44da:	4668      	mov	r0, sp
    44dc:	f00d fe4f 	bl	1217e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    44e0:	4639      	mov	r1, r7
    44e2:	4668      	mov	r0, sp
    44e4:	3710      	adds	r7, #16
    44e6:	f00e fd76 	bl	12fd6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    44ea:	42bd      	cmp	r5, r7
    44ec:	d1d6      	bne.n	449c <tc_aes_encrypt+0x34>
	for (i = 0; i < (Nb * Nk); ++i) {
    44ee:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    44f0:	f81d 3006 	ldrb.w	r3, [sp, r6]
    44f4:	f819 3003 	ldrb.w	r3, [r9, r3]
    44f8:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    44fc:	3601      	adds	r6, #1
    44fe:	2e10      	cmp	r6, #16
    4500:	d1f6      	bne.n	44f0 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    4502:	4668      	mov	r0, sp
    4504:	f00e fdac 	bl	13060 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    4508:	4629      	mov	r1, r5
    450a:	4668      	mov	r0, sp
    450c:	f00e fd63 	bl	12fd6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4510:	4633      	mov	r3, r6
    4512:	466a      	mov	r2, sp
    4514:	4631      	mov	r1, r6
    4516:	4640      	mov	r0, r8
    4518:	f00d fe31 	bl	1217e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    451c:	4668      	mov	r0, sp
    451e:	4632      	mov	r2, r6
    4520:	2100      	movs	r1, #0
    4522:	f00d fe39 	bl	12198 <_set>

	return TC_CRYPTO_SUCCESS;
    4526:	2001      	movs	r0, #1
}
    4528:	b009      	add	sp, #36	; 0x24
    452a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    452e:	e7fb      	b.n	4528 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    4530:	4608      	mov	r0, r1
    4532:	e7f9      	b.n	4528 <tc_aes_encrypt+0xc0>
    4534:	4610      	mov	r0, r2
    4536:	e7f7      	b.n	4528 <tc_aes_encrypt+0xc0>
    4538:	00017e23 	.word	0x00017e23

0000453c <errata_16>:
#endif

#if defined (DEVELOP_IN_NRF52832)
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    453c:	4b09      	ldr	r3, [pc, #36]	; (4564 <errata_16+0x28>)
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	2b06      	cmp	r3, #6
    4542:	d10c      	bne.n	455e <errata_16+0x22>
    4544:	4b08      	ldr	r3, [pc, #32]	; (4568 <errata_16+0x2c>)
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	071a      	lsls	r2, r3, #28
    454a:	d108      	bne.n	455e <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    454c:	4b07      	ldr	r3, [pc, #28]	; (456c <errata_16+0x30>)
    454e:	6818      	ldr	r0, [r3, #0]
    4550:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    4554:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4558:	4258      	negs	r0, r3
    455a:	4158      	adcs	r0, r3
    455c:	4770      	bx	lr
            return true;
        }
    }

    return false;
    455e:	2000      	movs	r0, #0
}
    4560:	4770      	bx	lr
    4562:	bf00      	nop
    4564:	f0000fe0 	.word	0xf0000fe0
    4568:	f0000fe4 	.word	0xf0000fe4
    456c:	f0000fe8 	.word	0xf0000fe8

00004570 <errata_136>:
#endif

static bool errata_31(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
    4570:	4b0f      	ldr	r3, [pc, #60]	; (45b0 <errata_136+0x40>)
    4572:	681b      	ldr	r3, [r3, #0]
    4574:	2b0a      	cmp	r3, #10
    4576:	d103      	bne.n	4580 <errata_136+0x10>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    4578:	4b0e      	ldr	r3, [pc, #56]	; (45b4 <errata_136+0x44>)
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	2b01      	cmp	r3, #1
    457e:	d914      	bls.n	45aa <errata_136+0x3a>
            return true;
        }
    }

    #if defined (DEVELOP_IN_NRF52832)
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    4580:	4b0d      	ldr	r3, [pc, #52]	; (45b8 <errata_136+0x48>)
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	2b06      	cmp	r3, #6
    4586:	d110      	bne.n	45aa <errata_136+0x3a>
    4588:	4b0c      	ldr	r3, [pc, #48]	; (45bc <errata_136+0x4c>)
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	071a      	lsls	r2, r3, #28
    458e:	d10c      	bne.n	45aa <errata_136+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    4590:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <errata_136+0x50>)
    4592:	6818      	ldr	r0, [r3, #0]
    4594:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    4598:	2b30      	cmp	r3, #48	; 0x30
    459a:	d006      	beq.n	45aa <errata_136+0x3a>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    459c:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    45a0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    45a4:	4258      	negs	r0, r3
    45a6:	4158      	adcs	r0, r3
    45a8:	4770      	bx	lr
            return true;
    45aa:	2001      	movs	r0, #1
    }
    #endif

    /* Apply by default for unknown devices until errata is confirmed fixed. */
    return true;
}
    45ac:	4770      	bx	lr
    45ae:	bf00      	nop
    45b0:	10000130 	.word	0x10000130
    45b4:	10000134 	.word	0x10000134
    45b8:	f0000fe0 	.word	0xf0000fe0
    45bc:	f0000fe4 	.word	0xf0000fe4
    45c0:	f0000fe8 	.word	0xf0000fe8

000045c4 <errata_108>:
    return false;
}

static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    45c4:	4b0c      	ldr	r3, [pc, #48]	; (45f8 <errata_108+0x34>)
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	2b06      	cmp	r3, #6
    45ca:	d110      	bne.n	45ee <errata_108+0x2a>
    45cc:	4b0b      	ldr	r3, [pc, #44]	; (45fc <errata_108+0x38>)
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	071a      	lsls	r2, r3, #28
    45d2:	d10c      	bne.n	45ee <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    45d4:	4b0a      	ldr	r3, [pc, #40]	; (4600 <errata_108+0x3c>)
    45d6:	6818      	ldr	r0, [r3, #0]
    45d8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    45dc:	2b30      	cmp	r3, #48	; 0x30
    45de:	d008      	beq.n	45f2 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    45e0:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    45e4:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    45e8:	4258      	negs	r0, r3
    45ea:	4158      	adcs	r0, r3
    45ec:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    45ee:	2000      	movs	r0, #0
    45f0:	4770      	bx	lr
            return true;
    45f2:	2001      	movs	r0, #1
}
    45f4:	4770      	bx	lr
    45f6:	bf00      	nop
    45f8:	f0000fe0 	.word	0xf0000fe0
    45fc:	f0000fe4 	.word	0xf0000fe4
    4600:	f0000fe8 	.word	0xf0000fe8

00004604 <SystemInit>:
{
    4604:	b508      	push	{r3, lr}
    if (errata_12()){
    4606:	f7ff ffdd 	bl	45c4 <errata_108>
    460a:	b128      	cbz	r0, 4618 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    460c:	4b81      	ldr	r3, [pc, #516]	; (4814 <SystemInit+0x210>)
    460e:	4a82      	ldr	r2, [pc, #520]	; (4818 <SystemInit+0x214>)
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4616:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    4618:	f7ff ff90 	bl	453c <errata_16>
    461c:	b110      	cbz	r0, 4624 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    461e:	4b7f      	ldr	r3, [pc, #508]	; (481c <SystemInit+0x218>)
    4620:	4a7f      	ldr	r2, [pc, #508]	; (4820 <SystemInit+0x21c>)
    4622:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    4624:	f7ff ffa4 	bl	4570 <errata_136>
    4628:	b128      	cbz	r0, 4636 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    462a:	4b7e      	ldr	r3, [pc, #504]	; (4824 <SystemInit+0x220>)
    462c:	4a7e      	ldr	r2, [pc, #504]	; (4828 <SystemInit+0x224>)
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	f3c3 3342 	ubfx	r3, r3, #13, #3
    4634:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    4636:	f7ff ff81 	bl	453c <errata_16>
    463a:	b120      	cbz	r0, 4646 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    463c:	4a7b      	ldr	r2, [pc, #492]	; (482c <SystemInit+0x228>)
    463e:	68d3      	ldr	r3, [r2, #12]
    4640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    4644:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    4646:	f7ff ff93 	bl	4570 <errata_136>
    464a:	b140      	cbz	r0, 465e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    464c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4650:	2200      	movs	r2, #0
    4652:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    4656:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    465a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    465e:	f7ff ff6d 	bl	453c <errata_16>
    4662:	b110      	cbz	r0, 466a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    4664:	4b72      	ldr	r3, [pc, #456]	; (4830 <SystemInit+0x22c>)
    4666:	2203      	movs	r2, #3
    4668:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    466a:	f7ff ff67 	bl	453c <errata_16>
    466e:	b140      	cbz	r0, 4682 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    4670:	4b70      	ldr	r3, [pc, #448]	; (4834 <SystemInit+0x230>)
    4672:	2205      	movs	r2, #5
    4674:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    4676:	2201      	movs	r2, #1
    4678:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    467a:	2200      	movs	r2, #0
    467c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    467e:	223f      	movs	r2, #63	; 0x3f
    4680:	605a      	str	r2, [r3, #4]
    if (*(uint32_t *)0x10000130ul == 0xAul){
    4682:	4b6d      	ldr	r3, [pc, #436]	; (4838 <SystemInit+0x234>)
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	2b0a      	cmp	r3, #10
    4688:	d103      	bne.n	4692 <SystemInit+0x8e>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    468a:	4b6c      	ldr	r3, [pc, #432]	; (483c <SystemInit+0x238>)
    468c:	681b      	ldr	r3, [r3, #0]
    468e:	2b01      	cmp	r3, #1
    4690:	d90d      	bls.n	46ae <SystemInit+0xaa>
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    4692:	4b6b      	ldr	r3, [pc, #428]	; (4840 <SystemInit+0x23c>)
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	2b06      	cmp	r3, #6
    4698:	d109      	bne.n	46ae <SystemInit+0xaa>
    469a:	4b6a      	ldr	r3, [pc, #424]	; (4844 <SystemInit+0x240>)
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	0719      	lsls	r1, r3, #28
    46a0:	d105      	bne.n	46ae <SystemInit+0xaa>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    46a2:	4b69      	ldr	r3, [pc, #420]	; (4848 <SystemInit+0x244>)
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    46aa:	2b50      	cmp	r3, #80	; 0x50
    46ac:	d146      	bne.n	473c <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    46ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46b2:	4b66      	ldr	r3, [pc, #408]	; (484c <SystemInit+0x248>)
    46b4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    46b8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    46bc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    46c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    46c4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    46c8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    46cc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    46d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    46d4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    46d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    46dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    46e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    46e4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    46e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    46ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    46f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    46f4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    46f8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    46fc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4700:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4704:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4708:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    470c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4710:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4714:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4718:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    471c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4720:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4724:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4728:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    472c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4730:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4734:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4738:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (*(uint32_t *)0x10000130ul == 0xAul){
    473c:	4b3e      	ldr	r3, [pc, #248]	; (4838 <SystemInit+0x234>)
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	2b0a      	cmp	r3, #10
    4742:	d106      	bne.n	4752 <SystemInit+0x14e>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    4744:	4b3d      	ldr	r3, [pc, #244]	; (483c <SystemInit+0x238>)
    4746:	681b      	ldr	r3, [r3, #0]
    4748:	b91b      	cbnz	r3, 4752 <SystemInit+0x14e>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    474a:	4b41      	ldr	r3, [pc, #260]	; (4850 <SystemInit+0x24c>)
    474c:	22fb      	movs	r2, #251	; 0xfb
    474e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_108()){
    4752:	f7ff ff37 	bl	45c4 <errata_108>
    4756:	b128      	cbz	r0, 4764 <SystemInit+0x160>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    4758:	4b3e      	ldr	r3, [pc, #248]	; (4854 <SystemInit+0x250>)
    475a:	4a3f      	ldr	r2, [pc, #252]	; (4858 <SystemInit+0x254>)
    475c:	681b      	ldr	r3, [r3, #0]
    475e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4762:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    4764:	f7ff ff04 	bl	4570 <errata_136>
    4768:	b148      	cbz	r0, 477e <SystemInit+0x17a>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    476a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    476e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4772:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4774:	bf44      	itt	mi
    4776:	f06f 0201 	mvnmi.w	r2, #1
    477a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}

#if defined (DEVELOP_IN_NRF52832)
static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    477e:	4b2e      	ldr	r3, [pc, #184]	; (4838 <SystemInit+0x234>)
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	2b06      	cmp	r3, #6
    4784:	d108      	bne.n	4798 <SystemInit+0x194>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    4786:	4b2d      	ldr	r3, [pc, #180]	; (483c <SystemInit+0x238>)
    4788:	681b      	ldr	r3, [r3, #0]
    478a:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    478c:	bf01      	itttt	eq
    478e:	4a33      	ldreq	r2, [pc, #204]	; (485c <SystemInit+0x258>)
    4790:	6813      	ldreq	r3, [r2, #0]
    4792:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    4796:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4798:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    479c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47a0:	2a00      	cmp	r2, #0
    47a2:	db03      	blt.n	47ac <SystemInit+0x1a8>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    47a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    47a8:	2b00      	cmp	r3, #0
    47aa:	da2f      	bge.n	480c <SystemInit+0x208>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    47ac:	4b2c      	ldr	r3, [pc, #176]	; (4860 <SystemInit+0x25c>)
    47ae:	2201      	movs	r2, #1
    47b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    47b8:	2a00      	cmp	r2, #0
    47ba:	d0fb      	beq.n	47b4 <SystemInit+0x1b0>
            NRF_UICR->PSELRESET[0] = 21;
    47bc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    47c0:	2115      	movs	r1, #21
    47c2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    47ca:	2a00      	cmp	r2, #0
    47cc:	d0fb      	beq.n	47c6 <SystemInit+0x1c2>
            NRF_UICR->PSELRESET[1] = 21;
    47ce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47d2:	2215      	movs	r2, #21
    47d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47d8:	4b21      	ldr	r3, [pc, #132]	; (4860 <SystemInit+0x25c>)
    47da:	461a      	mov	r2, r3
    47dc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    47e0:	2900      	cmp	r1, #0
    47e2:	d0fb      	beq.n	47dc <SystemInit+0x1d8>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    47e4:	2100      	movs	r1, #0
    47e6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    47ee:	2b00      	cmp	r3, #0
    47f0:	d0fb      	beq.n	47ea <SystemInit+0x1e6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    47f2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    47f6:	491b      	ldr	r1, [pc, #108]	; (4864 <SystemInit+0x260>)
    47f8:	4b1b      	ldr	r3, [pc, #108]	; (4868 <SystemInit+0x264>)
    47fa:	68ca      	ldr	r2, [r1, #12]
    47fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4800:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4802:	60cb      	str	r3, [r1, #12]
    4804:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4808:	bf00      	nop
    480a:	e7fd      	b.n	4808 <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    480c:	4b17      	ldr	r3, [pc, #92]	; (486c <SystemInit+0x268>)
    480e:	4a18      	ldr	r2, [pc, #96]	; (4870 <SystemInit+0x26c>)
    4810:	601a      	str	r2, [r3, #0]
}
    4812:	bd08      	pop	{r3, pc}
    4814:	10000324 	.word	0x10000324
    4818:	40013540 	.word	0x40013540
    481c:	4007c074 	.word	0x4007c074
    4820:	baadf00d 	.word	0xbaadf00d
    4824:	10000244 	.word	0x10000244
    4828:	4000053c 	.word	0x4000053c
    482c:	e000edf0 	.word	0xe000edf0
    4830:	400005a0 	.word	0x400005a0
    4834:	40005610 	.word	0x40005610
    4838:	10000130 	.word	0x10000130
    483c:	10000134 	.word	0x10000134
    4840:	f0000fe0 	.word	0xf0000fe0
    4844:	f0000fe4 	.word	0xf0000fe4
    4848:	f0000fe8 	.word	0xf0000fe8
    484c:	4000c000 	.word	0x4000c000
    4850:	4000f000 	.word	0x4000f000
    4854:	10000258 	.word	0x10000258
    4858:	40000ee4 	.word	0x40000ee4
    485c:	4000173c 	.word	0x4000173c
    4860:	4001e000 	.word	0x4001e000
    4864:	e000ed00 	.word	0xe000ed00
    4868:	05fa0004 	.word	0x05fa0004
    486c:	20004fd4 	.word	0x20004fd4
    4870:	03d09000 	.word	0x03d09000

00004874 <nrfx_pwm_init>:


nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const * const p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler)
{
    4874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4878:	7907      	ldrb	r7, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    487a:	4c3a      	ldr	r4, [pc, #232]	; (4964 <nrfx_pwm_init+0xf0>)
    487c:	00fe      	lsls	r6, r7, #3
    487e:	19a3      	adds	r3, r4, r6
{
    4880:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4882:	7918      	ldrb	r0, [r3, #4]
    4884:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    4888:	2800      	cmp	r0, #0
    488a:	d169      	bne.n	4960 <nrfx_pwm_init+0xec>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    488c:	f844 2037 	str.w	r2, [r4, r7, lsl #3]
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4890:	f04f 38ff 	mov.w	r8, #4294967295
    4894:	f04f 0901 	mov.w	r9, #1
    4898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    489c:	f04f 0a03 	mov.w	sl, #3
        uint8_t output_pin = p_config->output_pins[i];
    48a0:	f811 c003 	ldrb.w	ip, [r1, r3]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    48a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    48a8:	d057      	beq.n	495a <nrfx_pwm_init+0xe6>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    48aa:	f02c 0280 	bic.w	r2, ip, #128	; 0x80
    48ae:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    48b2:	fa09 fe02 	lsl.w	lr, r9, r2
    48b6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
            if (inverted)
    48ba:	f01c 0f80 	tst.w	ip, #128	; 0x80
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    48be:	bf14      	ite	ne
    48c0:	f8c0 e508 	strne.w	lr, [r0, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    48c4:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    48c8:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
    48cc:	3301      	adds	r3, #1
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    48ce:	2b04      	cmp	r3, #4
    48d0:	d1e6      	bne.n	48a0 <nrfx_pwm_init+0x2c>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    48d2:	6828      	ldr	r0, [r5, #0]
                                      uint32_t out_pins[NRF_PWM_CHANNEL_COUNT])
{
    uint8_t i;
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    {
        p_reg->PSEL.OUT[i] = out_pins[i];
    48d4:	9b00      	ldr	r3, [sp, #0]
    48d6:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    48da:	9b01      	ldr	r3, [sp, #4]
    48dc:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    48e0:	9b02      	ldr	r3, [sp, #8]
    48e2:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    48e6:	9b03      	ldr	r3, [sp, #12]
    48e8:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    48ec:	2301      	movs	r3, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    48ee:	798a      	ldrb	r2, [r1, #6]
                                       nrf_pwm_mode_t mode,
                                       uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    48f0:	f891 c005 	ldrb.w	ip, [r1, #5]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    48f4:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    48f8:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    48fa:	f8c0 c50c 	str.w	ip, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    48fe:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4902:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

__STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type * p_reg,
                                         nrf_pwm_dec_load_t dec_load,
                                         nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4906:	894b      	ldrh	r3, [r1, #10]
    4908:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    490c:	2300      	movs	r3, #0
    490e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    4912:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    4916:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    491a:	f00e fd10 	bl	1333e <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    491e:	f44f 7188 	mov.w	r1, #272	; 0x110
    4922:	6828      	ldr	r0, [r5, #0]
    4924:	f00e fd0b 	bl	1333e <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    4928:	f44f 718a 	mov.w	r1, #276	; 0x114
    492c:	6828      	ldr	r0, [r5, #0]
    492e:	f00e fd06 	bl	1333e <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    4932:	f44f 7182 	mov.w	r1, #260	; 0x104
    4936:	6828      	ldr	r0, [r5, #0]
    4938:	f00e fd01 	bl	1333e <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    493c:	f854 3037 	ldr.w	r3, [r4, r7, lsl #3]
    4940:	b123      	cbz	r3, 494c <nrfx_pwm_init+0xd8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4942:	6828      	ldr	r0, [r5, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4944:	f340 3007 	sbfx	r0, r0, #12, #8
    4948:	f000 fc34 	bl	51b4 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    494c:	4434      	add	r4, r6
    494e:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4950:	4805      	ldr	r0, [pc, #20]	; (4968 <nrfx_pwm_init+0xf4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4952:	7123      	strb	r3, [r4, #4]
}
    4954:	b004      	add	sp, #16
    4956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    495a:	f84d 8023 	str.w	r8, [sp, r3, lsl #2]
    495e:	e7b5      	b.n	48cc <nrfx_pwm_init+0x58>
        return err_code;
    4960:	4802      	ldr	r0, [pc, #8]	; (496c <nrfx_pwm_init+0xf8>)
    4962:	e7f7      	b.n	4954 <nrfx_pwm_init+0xe0>
    4964:	20000170 	.word	0x20000170
    4968:	0bad0000 	.word	0x0bad0000
    496c:	0bad0005 	.word	0x0bad0005

00004970 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const * const p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4970:	b4f0      	push	{r4, r5, r6, r7}
    4972:	460d      	mov	r5, r1
    4974:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4976:	491a      	ldr	r1, [pc, #104]	; (49e0 <nrfx_pwm_simple_playback+0x70>)
    4978:	7903      	ldrb	r3, [r0, #4]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    497a:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    497e:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    4980:	68ae      	ldr	r6, [r5, #8]
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    4982:	68ed      	ldr	r5, [r5, #12]
    4984:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    4988:	6803      	ldr	r3, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    498a:	f8c3 c520 	str.w	ip, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
    498e:	f8c3 7524 	str.w	r7, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4992:	f8c3 6528 	str.w	r6, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    4996:	f8c3 552c 	str.w	r5, [r3, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    499a:	f8c3 c540 	str.w	ip, [r3, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    499e:	f8c3 7544 	str.w	r7, [r3, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    49a2:	f8c3 6548 	str.w	r6, [r3, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    49a6:	f8c3 554c 	str.w	r5, [r3, #1356]	; 0x54c
    49aa:	f002 0501 	and.w	r5, r2, #1
}

__STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                      uint16_t loop_count)
{
    p_reg->LOOP = loop_count;
    49ae:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    49b2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    49b6:	07e2      	lsls	r2, r4, #31
    49b8:	d410      	bmi.n	49dc <nrfx_pwm_simple_playback+0x6c>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    49ba:	f014 0202 	ands.w	r2, r4, #2
    49be:	d003      	beq.n	49c8 <nrfx_pwm_simple_playback+0x58>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    49c0:	2d00      	cmp	r5, #0
    49c2:	bf14      	ite	ne
    49c4:	2208      	movne	r2, #8
    49c6:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    49c8:	2d00      	cmp	r5, #0
    p_reg->SHORTS = mask;
    49ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    49ce:	b2e2      	uxtb	r2, r4
    49d0:	bf14      	ite	ne
    49d2:	230c      	movne	r3, #12
    49d4:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    49d6:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    49d8:	f00e bcb9 	b.w	1334e <start_playback.isra.2>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    49dc:	2210      	movs	r2, #16
    49de:	e7f3      	b.n	49c8 <nrfx_pwm_simple_playback+0x58>
    49e0:	20000170 	.word	0x20000170

000049e4 <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * const p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    49e4:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    49e6:	4a08      	ldr	r2, [pc, #32]	; (4a08 <nrfx_pwm_is_stopped+0x24>)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    49e8:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    49ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    49ee:	7913      	ldrb	r3, [r2, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49f0:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    49f4:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    49f6:	b919      	cbnz	r1, 4a00 <nrfx_pwm_is_stopped+0x1c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    49f8:	1e98      	subs	r0, r3, #2
    49fa:	bf18      	it	ne
    49fc:	2001      	movne	r0, #1
    49fe:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4a00:	2001      	movs	r0, #1
    4a02:	7110      	strb	r0, [r2, #4]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4a04:	4770      	bx	lr
    4a06:	bf00      	nop
    4a08:	20000170 	.word	0x20000170

00004a0c <sys_rand32_get>:
#include <drivers/entropy.h>

static struct device *entropy_driver;

u32_t sys_rand32_get(void)
{
    4a0c:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
    4a0e:	4c0a      	ldr	r4, [pc, #40]	; (4a38 <sys_rand32_get+0x2c>)
    4a10:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    4a12:	b918      	cbnz	r0, 4a1c <sys_rand32_get+0x10>
    4a14:	4809      	ldr	r0, [pc, #36]	; (4a3c <sys_rand32_get+0x30>)
    4a16:	f00b ffbd 	bl	10994 <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    4a1a:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    4a1c:	6843      	ldr	r3, [r0, #4]
    4a1e:	2204      	movs	r2, #4
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	eb0d 0102 	add.w	r1, sp, r2
    4a26:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    4a28:	2800      	cmp	r0, #0
    4a2a:	da02      	bge.n	4a32 <sys_rand32_get+0x26>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    4a2c:	f000 fa66 	bl	4efc <z_timer_cycle_get_32>
    4a30:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    4a32:	9801      	ldr	r0, [sp, #4]
    4a34:	b002      	add	sp, #8
    4a36:	bd10      	pop	{r4, pc}
    4a38:	20000178 	.word	0x20000178
    4a3c:	00017f23 	.word	0x00017f23

00004a40 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4a40:	280a      	cmp	r0, #10
{
    4a42:	b538      	push	{r3, r4, r5, lr}
    4a44:	4604      	mov	r4, r0
    4a46:	4d07      	ldr	r5, [pc, #28]	; (4a64 <console_out+0x24>)
	if ('\n' == c) {
    4a48:	d104      	bne.n	4a54 <console_out+0x14>
    4a4a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    4a4c:	6843      	ldr	r3, [r0, #4]
    4a4e:	210d      	movs	r1, #13
    4a50:	685b      	ldr	r3, [r3, #4]
    4a52:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4a54:	6828      	ldr	r0, [r5, #0]
    4a56:	6843      	ldr	r3, [r0, #4]
    4a58:	b2e1      	uxtb	r1, r4
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	4798      	blx	r3

	return c;
}
    4a5e:	4620      	mov	r0, r4
    4a60:	bd38      	pop	{r3, r4, r5, pc}
    4a62:	bf00      	nop
    4a64:	2000017c 	.word	0x2000017c

00004a68 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    4a68:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4a6a:	4c04      	ldr	r4, [pc, #16]	; (4a7c <uart_console_hook_install+0x14>)
    4a6c:	4620      	mov	r0, r4
    4a6e:	f000 fec5 	bl	57fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    4a72:	4620      	mov	r0, r4
}
    4a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    4a78:	f7ff bba0 	b.w	41bc <__printk_hook_install>
    4a7c:	00004a41 	.word	0x00004a41

00004a80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    4a80:	b508      	push	{r3, lr}
    4a82:	4804      	ldr	r0, [pc, #16]	; (4a94 <uart_console_init+0x14>)
    4a84:	f00b ff86 	bl	10994 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4a88:	4b03      	ldr	r3, [pc, #12]	; (4a98 <uart_console_init+0x18>)
    4a8a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    4a8c:	f7ff ffec 	bl	4a68 <uart_console_hook_install>

	return 0;
}
    4a90:	2000      	movs	r0, #0
    4a92:	bd08      	pop	{r3, pc}
    4a94:	00017c66 	.word	0x00017c66
    4a98:	2000017c 	.word	0x2000017c

00004a9c <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    4a9c:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    4a9e:	f04f 0320 	mov.w	r3, #32
    4aa2:	f3ef 8211 	mrs	r2, BASEPRI
    4aa6:	f383 8811 	msr	BASEPRI, r3
    4aaa:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    4aae:	4c15      	ldr	r4, [pc, #84]	; (4b04 <m16src_stop+0x68>)
    4ab0:	7823      	ldrb	r3, [r4, #0]
    4ab2:	b933      	cbnz	r3, 4ac2 <m16src_stop+0x26>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4ab4:	f382 8811 	msr	BASEPRI, r2
    4ab8:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    4abc:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    4ac0:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    4ac2:	3b01      	subs	r3, #1
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	7023      	strb	r3, [r4, #0]
    4ac8:	b133      	cbz	r3, 4ad8 <m16src_stop+0x3c>
    4aca:	f382 8811 	msr	BASEPRI, r2
    4ace:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4ad2:	f06f 000f 	mvn.w	r0, #15
    4ad6:	e7f3      	b.n	4ac0 <m16src_stop+0x24>
	if (m16src_grd) {
    4ad8:	4b0b      	ldr	r3, [pc, #44]	; (4b08 <m16src_stop+0x6c>)
    4ada:	7818      	ldrb	r0, [r3, #0]
    4adc:	2101      	movs	r1, #1
    4ade:	b138      	cbz	r0, 4af0 <m16src_stop+0x54>
		m16src_ref++;
    4ae0:	7021      	strb	r1, [r4, #0]
    4ae2:	f382 8811 	msr	BASEPRI, r2
    4ae6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4aea:	f06f 000a 	mvn.w	r0, #10
    4aee:	e7e7      	b.n	4ac0 <m16src_stop+0x24>
	m16src_grd = 1U;
    4af0:	7019      	strb	r1, [r3, #0]
    4af2:	f382 8811 	msr	BASEPRI, r2
    4af6:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4afa:	4a04      	ldr	r2, [pc, #16]	; (4b0c <m16src_stop+0x70>)
    4afc:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    4afe:	7018      	strb	r0, [r3, #0]
	return 0;
    4b00:	e7de      	b.n	4ac0 <m16src_stop+0x24>
    4b02:	bf00      	nop
    4b04:	200020a4 	.word	0x200020a4
    4b08:	200020a3 	.word	0x200020a3
    4b0c:	40000004 	.word	0x40000004

00004b10 <m16src_start>:
{
    4b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4b12:	f04f 0220 	mov.w	r2, #32
    4b16:	f3ef 8311 	mrs	r3, BASEPRI
    4b1a:	f382 8811 	msr	BASEPRI, r2
    4b1e:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    4b22:	4a29      	ldr	r2, [pc, #164]	; (4bc8 <m16src_start+0xb8>)
    4b24:	7810      	ldrb	r0, [r2, #0]
    4b26:	1c44      	adds	r4, r0, #1
    4b28:	7014      	strb	r4, [r2, #0]
    4b2a:	b180      	cbz	r0, 4b4e <m16src_start+0x3e>
	__asm__ volatile(
    4b2c:	f383 8811 	msr	BASEPRI, r3
    4b30:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    4b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4b3c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    4b40:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4b44:	bf0c      	ite	eq
    4b46:	2000      	moveq	r0, #0
    4b48:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4b4c:	e009      	b.n	4b62 <m16src_start+0x52>
	if (m16src_grd) {
    4b4e:	4d1f      	ldr	r5, [pc, #124]	; (4bcc <m16src_start+0xbc>)
    4b50:	782f      	ldrb	r7, [r5, #0]
    4b52:	b13f      	cbz	r7, 4b64 <m16src_start+0x54>
		m16src_ref--;
    4b54:	7010      	strb	r0, [r2, #0]
    4b56:	f383 8811 	msr	BASEPRI, r3
    4b5a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4b5e:	f06f 000a 	mvn.w	r0, #10
}
    4b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    4b64:	2601      	movs	r6, #1
    4b66:	702e      	strb	r6, [r5, #0]
    4b68:	f383 8811 	msr	BASEPRI, r3
    4b6c:	f3bf 8f6f 	isb	sy
    4b70:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    4b74:	b319      	cbz	r1, 4bbe <m16src_start+0xae>
		irq_disable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4b76:	4638      	mov	r0, r7
    4b78:	f000 fb2c 	bl	51d4 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4b7c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    4b80:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    4b84:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4b88:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    4b8a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    4b8e:	b192      	cbz	r2, 4bb6 <m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4b90:	2200      	movs	r2, #0
    4b92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b96:	4a0e      	ldr	r2, [pc, #56]	; (4bd0 <m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    4b98:	f013 0f01 	tst.w	r3, #1
    4b9c:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    4ba0:	bf08      	it	eq
    4ba2:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4ba6:	2000      	movs	r0, #0
    4ba8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    4bac:	f000 fb02 	bl	51b4 <z_arch_irq_enable>
	m16src_grd = 0U;
    4bb0:	2300      	movs	r3, #0
    4bb2:	702b      	strb	r3, [r5, #0]
    4bb4:	e7be      	b.n	4b34 <m16src_start+0x24>
			__WFE();
    4bb6:	bf20      	wfe
			__SEV();
    4bb8:	bf40      	sev
			__WFE();
    4bba:	bf20      	wfe
    4bbc:	e7e5      	b.n	4b8a <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4bbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4bc2:	6026      	str	r6, [r4, #0]
    4bc4:	e7f4      	b.n	4bb0 <m16src_start+0xa0>
    4bc6:	bf00      	nop
    4bc8:	200020a4 	.word	0x200020a4
    4bcc:	200020a3 	.word	0x200020a3
    4bd0:	e000e100 	.word	0xe000e100

00004bd4 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    4bd4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    4bd6:	f04f 0220 	mov.w	r2, #32
    4bda:	f3ef 8311 	mrs	r3, BASEPRI
    4bde:	f382 8811 	msr	BASEPRI, r2
    4be2:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    4be6:	4d24      	ldr	r5, [pc, #144]	; (4c78 <k32src_start+0xa4>)
    4be8:	782a      	ldrb	r2, [r5, #0]
    4bea:	b19a      	cbz	r2, 4c14 <k32src_start+0x40>
	__asm__ volatile(
    4bec:	f383 8811 	msr	BASEPRI, r3
    4bf0:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4bf8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4bfc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4c00:	f003 0303 	and.w	r3, r3, #3
    4c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4c08:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    4c0a:	bf14      	ite	ne
    4c0c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4c10:	2000      	moveq	r0, #0
    4c12:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    4c14:	2401      	movs	r4, #1
    4c16:	702c      	strb	r4, [r5, #0]
    4c18:	f383 8811 	msr	BASEPRI, r3
    4c1c:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c24:	4e15      	ldr	r6, [pc, #84]	; (4c7c <k32src_start+0xa8>)
    4c26:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    4c2a:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    4c2c:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    4c30:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4c34:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4c38:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    4c3a:	f04f 0618 	mov.w	r6, #24
    4c3e:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    4c42:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    4c46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4c4a:	d1d3      	bne.n	4bf4 <k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    4c4c:	2210      	movs	r2, #16
    4c4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    4c52:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    4c56:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    4c5a:	03d2      	lsls	r2, r2, #15
    4c5c:	d402      	bmi.n	4c64 <k32src_start+0x90>
    4c5e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    4c62:	e7c7      	b.n	4bf4 <k32src_start+0x20>
    4c64:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    4c68:	f7ff ff52 	bl	4b10 <m16src_start>
		if (!err) {
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d1c1      	bne.n	4bf4 <k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c70:	4b03      	ldr	r3, [pc, #12]	; (4c80 <k32src_start+0xac>)
    4c72:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    4c76:	e7bd      	b.n	4bf4 <k32src_start+0x20>
    4c78:	200020a2 	.word	0x200020a2
    4c7c:	40000008 	.word	0x40000008
    4c80:	e000e100 	.word	0xe000e100

00004c84 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    4c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    4c8a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4c8c:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    4c90:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    4c94:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    4c98:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    4c9c:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    4ca0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4ca4:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    4ca8:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    4caa:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4cae:	bf18      	it	ne
    4cb0:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    4cb2:	f1bc 0f00 	cmp.w	ip, #0
    4cb6:	d003      	beq.n	4cc0 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    4cb8:	f04f 0c00 	mov.w	ip, #0
    4cbc:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    4cc0:	2f00      	cmp	r7, #0
    4cc2:	d041      	beq.n	4d48 <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cc8:	2700      	movs	r7, #0
    4cca:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4cce:	b152      	cbz	r2, 4ce6 <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4cd4:	4f22      	ldr	r7, [pc, #136]	; (4d60 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4cd6:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4cd8:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4cdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4ce0:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    4ce4:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    4ce6:	b9ee      	cbnz	r6, 4d24 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    4ce8:	b159      	cbz	r1, 4d02 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4cea:	4b1d      	ldr	r3, [pc, #116]	; (4d60 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    4cec:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4cf0:	2100      	movs	r1, #0
    4cf2:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
    4cf4:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    4cf6:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    4cfa:	f7ff fecf 	bl	4a9c <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    4cfe:	2301      	movs	r3, #1
    4d00:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    4d02:	b174      	cbz	r4, 4d22 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    4d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d08:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4d0a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    4d0c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = m16src_start(dev, false);
    4d10:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4d12:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    4d16:	f7ff fefb 	bl	4b10 <m16src_start>
		if (!err) {
    4d1a:	b910      	cbnz	r0, 4d22 <nrf_power_clock_isr+0x9e>
    4d1c:	4b11      	ldr	r3, [pc, #68]	; (4d64 <nrf_power_clock_isr+0xe0>)
    4d1e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    4d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d28:	2200      	movs	r2, #0
    4d2a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    4d2e:	0782      	lsls	r2, r0, #30
    4d30:	d5da      	bpl.n	4ce8 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    4d32:	2202      	movs	r2, #2
    4d34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    4d38:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d3c:	079b      	lsls	r3, r3, #30
    4d3e:	d1d3      	bne.n	4ce8 <nrf_power_clock_isr+0x64>
	if (done) {
    4d40:	2900      	cmp	r1, #0
    4d42:	d0df      	beq.n	4d04 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    4d44:	2401      	movs	r4, #1
    4d46:	e7d0      	b.n	4cea <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4d48:	2a00      	cmp	r2, #0
    4d4a:	d0cc      	beq.n	4ce6 <nrf_power_clock_isr+0x62>
    4d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d50:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4d54:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    4d58:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4d5c:	d1c3      	bne.n	4ce6 <nrf_power_clock_isr+0x62>
    4d5e:	e7b7      	b.n	4cd0 <nrf_power_clock_isr+0x4c>
    4d60:	40000c34 	.word	0x40000c34
    4d64:	e000e100 	.word	0xe000e100

00004d68 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    4d68:	4b0d      	ldr	r3, [pc, #52]	; (4da0 <rtc1_nrf_isr+0x38>)
    4d6a:	2200      	movs	r2, #0
    4d6c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    4d70:	f04f 0220 	mov.w	r2, #32
    4d74:	f3ef 8111 	mrs	r1, BASEPRI
    4d78:	f382 8811 	msr	BASEPRI, r2
    4d7c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4d80:	4a08      	ldr	r2, [pc, #32]	; (4da4 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    4d82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    4d86:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4d88:	1ac0      	subs	r0, r0, r3
    4d8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    4d8e:	4403      	add	r3, r0
    4d90:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4d92:	f381 8811 	msr	BASEPRI, r1
    4d96:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    4d9a:	f00c bcbd 	b.w	11718 <z_clock_announce>
    4d9e:	bf00      	nop
    4da0:	40011000 	.word	0x40011000
    4da4:	20000180 	.word	0x20000180

00004da8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    4da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4daa:	481c      	ldr	r0, [pc, #112]	; (4e1c <z_clock_driver_init+0x74>)
    4dac:	f00b fdf2 	bl	10994 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    4db0:	b380      	cbz	r0, 4e14 <z_clock_driver_init+0x6c>
	return api->on(dev, sys);
    4db2:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    4db4:	4d1a      	ldr	r5, [pc, #104]	; (4e20 <z_clock_driver_init+0x78>)
    4db6:	681b      	ldr	r3, [r3, #0]
    4db8:	2101      	movs	r1, #1
    4dba:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    4dbc:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    4dbe:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    4dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4dc4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    4dc8:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    4dcc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4dd4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4ddc:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4dde:	681b      	ldr	r3, [r3, #0]
    4de0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4de2:	9b01      	ldr	r3, [sp, #4]
    4de4:	4b0f      	ldr	r3, [pc, #60]	; (4e24 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    4de6:	4631      	mov	r1, r6
    4de8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4dec:	2011      	movs	r0, #17
    4dee:	4622      	mov	r2, r4
    4df0:	f000 fa12 	bl	5218 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    4df4:	2011      	movs	r0, #17
    4df6:	f000 f9dd 	bl	51b4 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4dfa:	4b0b      	ldr	r3, [pc, #44]	; (4e28 <z_clock_driver_init+0x80>)
    4dfc:	601e      	str	r6, [r3, #0]
    4dfe:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    4e00:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    4e04:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4e06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4e0a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    4e0e:	4620      	mov	r0, r4
}
    4e10:	b002      	add	sp, #8
    4e12:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    4e14:	f04f 30ff 	mov.w	r0, #4294967295
    4e18:	e7fa      	b.n	4e10 <z_clock_driver_init+0x68>
    4e1a:	bf00      	nop
    4e1c:	00017f2d 	.word	0x00017f2d
    4e20:	40011000 	.word	0x40011000
    4e24:	e000e100 	.word	0xe000e100
    4e28:	40011008 	.word	0x40011008

00004e2c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    4e2c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    4e2e:	4e21      	ldr	r6, [pc, #132]	; (4eb4 <z_clock_set_timeout+0x88>)
    4e30:	f1b0 3fff 	cmp.w	r0, #4294967295
    4e34:	bf08      	it	eq
    4e36:	4630      	moveq	r0, r6
	__asm__ volatile(
    4e38:	f04f 0320 	mov.w	r3, #32
    4e3c:	f3ef 8411 	mrs	r4, BASEPRI
    4e40:	f383 8811 	msr	BASEPRI, r3
    4e44:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    4e48:	491b      	ldr	r1, [pc, #108]	; (4eb8 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool flagged = false;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    4e4a:	4b1c      	ldr	r3, [pc, #112]	; (4ebc <z_clock_set_timeout+0x90>)
    4e4c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    4e50:	681d      	ldr	r5, [r3, #0]
	return (a - b) & COUNTER_MAX;
    4e52:	1b53      	subs	r3, r2, r5
    4e54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    4e58:	3501      	adds	r5, #1
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    4e5a:	3801      	subs	r0, #1
	cyc += last_count;
    4e5c:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    4e5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    4e62:	42b0      	cmp	r0, r6
    4e64:	bfd4      	ite	le
    4e66:	1818      	addle	r0, r3, r0
    4e68:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    4e6a:	1a82      	subs	r2, r0, r2
    4e6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4e70:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    4e74:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    4e76:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    4e7a:	d904      	bls.n	4e86 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    4e7c:	f384 8811 	msr	BASEPRI, r4
    4e80:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    4e84:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    4e86:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    4e8a:	4a0d      	ldr	r2, [pc, #52]	; (4ec0 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    4e8c:	1ac3      	subs	r3, r0, r3
    4e8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    4e92:	1e5d      	subs	r5, r3, #1
    4e94:	4295      	cmp	r5, r2
    4e96:	d905      	bls.n	4ea4 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e98:	4b0a      	ldr	r3, [pc, #40]	; (4ec4 <z_clock_set_timeout+0x98>)
    4e9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4e9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4ea2:	e7eb      	b.n	4e7c <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    4ea4:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    4ea6:	bf02      	ittt	eq
    4ea8:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4eaa:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4eae:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    4eb2:	e7e3      	b.n	4e7c <z_clock_set_timeout+0x50>
    4eb4:	00fffffe 	.word	0x00fffffe
    4eb8:	40011000 	.word	0x40011000
    4ebc:	20000180 	.word	0x20000180
    4ec0:	007ffffe 	.word	0x007ffffe
    4ec4:	e000e100 	.word	0xe000e100

00004ec8 <z_clock_elapsed>:
	__asm__ volatile(
    4ec8:	f04f 0220 	mov.w	r2, #32
    4ecc:	f3ef 8311 	mrs	r3, BASEPRI
    4ed0:	f382 8811 	msr	BASEPRI, r2
    4ed4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    4ed8:	4a06      	ldr	r2, [pc, #24]	; (4ef4 <z_clock_elapsed+0x2c>)
    4eda:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    4ede:	4a06      	ldr	r2, [pc, #24]	; (4ef8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    4ee0:	6812      	ldr	r2, [r2, #0]
    4ee2:	1a80      	subs	r0, r0, r2
    4ee4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4ee8:	f383 8811 	msr	BASEPRI, r3
    4eec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    4ef0:	4770      	bx	lr
    4ef2:	bf00      	nop
    4ef4:	40011000 	.word	0x40011000
    4ef8:	20000180 	.word	0x20000180

00004efc <z_timer_cycle_get_32>:
	__asm__ volatile(
    4efc:	f04f 0320 	mov.w	r3, #32
    4f00:	f3ef 8211 	mrs	r2, BASEPRI
    4f04:	f383 8811 	msr	BASEPRI, r3
    4f08:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    4f0c:	4906      	ldr	r1, [pc, #24]	; (4f28 <z_timer_cycle_get_32+0x2c>)
    4f0e:	4b07      	ldr	r3, [pc, #28]	; (4f2c <z_timer_cycle_get_32+0x30>)
    4f10:	6808      	ldr	r0, [r1, #0]
    4f12:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    4f16:	f382 8811 	msr	BASEPRI, r2
    4f1a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    4f1e:	1a1b      	subs	r3, r3, r0
    4f20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    4f24:	4418      	add	r0, r3
    4f26:	4770      	bx	lr
    4f28:	20000180 	.word	0x20000180
    4f2c:	40011000 	.word	0x40011000

00004f30 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  u16_t len,
			  u16_t offset,
			  u8_t flags)
{
    4f30:	b510      	push	{r4, lr}
    4f32:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, conn);

	if (nus_cb.received_cb) {
    4f34:	4b03      	ldr	r3, [pc, #12]	; (4f44 <on_receive+0x14>)
    4f36:	681b      	ldr	r3, [r3, #0]
{
    4f38:	4611      	mov	r1, r2
	if (nus_cb.received_cb) {
    4f3a:	b10b      	cbz	r3, 4f40 <on_receive+0x10>
		nus_cb.received_cb(conn, buf, len);
    4f3c:	4622      	mov	r2, r4
    4f3e:	4798      	blx	r3
}
	return len;
}
    4f40:	4620      	mov	r0, r4
    4f42:	bd10      	pop	{r4, pc}
    4f44:	20000184 	.word	0x20000184

00004f48 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", conn);

	if (nus_cb.sent_cb) {
    4f48:	4b02      	ldr	r3, [pc, #8]	; (4f54 <on_sent+0xc>)
    4f4a:	685b      	ldr	r3, [r3, #4]
    4f4c:	b103      	cbz	r3, 4f50 <on_sent+0x8>
		nus_cb.sent_cb(conn);
    4f4e:	4718      	bx	r3
	}
}
    4f50:	4770      	bx	lr
    4f52:	bf00      	nop
    4f54:	20000184 	.word	0x20000184

00004f58 <nuslc_ccc_cfg_changed>:
{
    4f58:	b530      	push	{r4, r5, lr}
    4f5a:	4604      	mov	r4, r0
    4f5c:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    4f5e:	221e      	movs	r2, #30
    4f60:	2100      	movs	r1, #0
    4f62:	a80a      	add	r0, sp, #40	; 0x28
    4f64:	f00e faab 	bl	134be <memset>
	struct bt_gatt_ccc_cfg *cfg =
    4f68:	68e4      	ldr	r4, [r4, #12]
	switch (addr->type) {
    4f6a:	7863      	ldrb	r3, [r4, #1]
    4f6c:	ad07      	add	r5, sp, #28
    4f6e:	2b03      	cmp	r3, #3
    4f70:	d820      	bhi.n	4fb4 <nuslc_ccc_cfg_changed+0x5c>
    4f72:	e8df f003 	tbb	[pc, r3]
    4f76:	1902      	.short	0x1902
    4f78:	1d1b      	.short	0x1d1b
		strcpy(type, "public");
    4f7a:	4911      	ldr	r1, [pc, #68]	; (4fc0 <nuslc_ccc_cfg_changed+0x68>)
		strcpy(type, "random");
    4f7c:	4628      	mov	r0, r5
    4f7e:	f00e fa42 	bl	13406 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4f82:	79e3      	ldrb	r3, [r4, #7]
    4f84:	9505      	str	r5, [sp, #20]
    4f86:	78a2      	ldrb	r2, [r4, #2]
    4f88:	9204      	str	r2, [sp, #16]
    4f8a:	78e2      	ldrb	r2, [r4, #3]
    4f8c:	9203      	str	r2, [sp, #12]
    4f8e:	7922      	ldrb	r2, [r4, #4]
    4f90:	9202      	str	r2, [sp, #8]
    4f92:	7962      	ldrb	r2, [r4, #5]
    4f94:	9201      	str	r2, [sp, #4]
    4f96:	79a2      	ldrb	r2, [r4, #6]
    4f98:	9200      	str	r2, [sp, #0]
    4f9a:	211e      	movs	r1, #30
    4f9c:	4a09      	ldr	r2, [pc, #36]	; (4fc4 <nuslc_ccc_cfg_changed+0x6c>)
    4f9e:	a80a      	add	r0, sp, #40	; 0x28
    4fa0:	f00d f8ca 	bl	12138 <snprintk>
}
    4fa4:	b013      	add	sp, #76	; 0x4c
    4fa6:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4fa8:	4907      	ldr	r1, [pc, #28]	; (4fc8 <nuslc_ccc_cfg_changed+0x70>)
    4faa:	e7e7      	b.n	4f7c <nuslc_ccc_cfg_changed+0x24>
		strcpy(type, "public-id");
    4fac:	4907      	ldr	r1, [pc, #28]	; (4fcc <nuslc_ccc_cfg_changed+0x74>)
    4fae:	e7e5      	b.n	4f7c <nuslc_ccc_cfg_changed+0x24>
		strcpy(type, "random-id");
    4fb0:	4907      	ldr	r1, [pc, #28]	; (4fd0 <nuslc_ccc_cfg_changed+0x78>)
    4fb2:	e7e3      	b.n	4f7c <nuslc_ccc_cfg_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4fb4:	4a07      	ldr	r2, [pc, #28]	; (4fd4 <nuslc_ccc_cfg_changed+0x7c>)
    4fb6:	210a      	movs	r1, #10
    4fb8:	4628      	mov	r0, r5
    4fba:	f00d f8bd 	bl	12138 <snprintk>
    4fbe:	e7e0      	b.n	4f82 <nuslc_ccc_cfg_changed+0x2a>
    4fc0:	00017ad2 	.word	0x00017ad2
    4fc4:	00017afb 	.word	0x00017afb
    4fc8:	00017ad9 	.word	0x00017ad9
    4fcc:	00017ae0 	.word	0x00017ae0
    4fd0:	00017aea 	.word	0x00017aea
    4fd4:	00017af4 	.word	0x00017af4

00004fd8 <bt_gatt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_gatt_nus_init(struct bt_gatt_nus_cb *callbacks)
{
	if (callbacks) {
    4fd8:	b120      	cbz	r0, 4fe4 <bt_gatt_nus_init+0xc>
		nus_cb.received_cb = callbacks->received_cb;
    4fda:	4b03      	ldr	r3, [pc, #12]	; (4fe8 <bt_gatt_nus_init+0x10>)
    4fdc:	6802      	ldr	r2, [r0, #0]
    4fde:	601a      	str	r2, [r3, #0]
		nus_cb.sent_cb     = callbacks->sent_cb;
    4fe0:	6842      	ldr	r2, [r0, #4]
    4fe2:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    4fe4:	2000      	movs	r0, #0
    4fe6:	4770      	bx	lr
    4fe8:	20000184 	.word	0x20000184

00004fec <bt_gatt_nus_send>:

int bt_gatt_nus_send(struct bt_conn *conn, const u8_t *data, uint16_t len)
{
    4fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ff0:	b086      	sub	sp, #24
    4ff2:	460e      	mov	r6, r1
    4ff4:	4614      	mov	r4, r2
    4ff6:	4605      	mov	r5, r0
	struct bt_gatt_notify_params params = {0};
    4ff8:	2218      	movs	r2, #24
    4ffa:	2100      	movs	r1, #0
    4ffc:	4668      	mov	r0, sp
    4ffe:	f00e fa5e 	bl	134be <memset>

	params.attr = &nus_svc.attrs[2];
    5002:	4b14      	ldr	r3, [pc, #80]	; (5054 <bt_gatt_nus_send+0x68>)
	params.data = data;
	params.len = len;
    5004:	f8ad 400c 	strh.w	r4, [sp, #12]
	params.data = data;
    5008:	e9cd 3601 	strd	r3, r6, [sp, #4]
	params.func = on_sent;
    500c:	4b12      	ldr	r3, [pc, #72]	; (5058 <bt_gatt_nus_send+0x6c>)
    500e:	9304      	str	r3, [sp, #16]

	if (!conn) {
    5010:	b925      	cbnz	r5, 501c <bt_gatt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return  bt_gatt_notify_cb(NULL, &params);
	} else if (is_notification_enabled(conn, nuslc_ccc_cfg)) {
		return bt_gatt_notify_cb(conn, &params);
    5012:	4669      	mov	r1, sp
    5014:	4628      	mov	r0, r5
    5016:	f003 fa5b 	bl	84d0 <bt_gatt_notify_cb>
    501a:	e017      	b.n	504c <bt_gatt_nus_send+0x60>
	const bt_addr_le_t *conn_addr = bt_conn_get_dst(conn);
    501c:	4628      	mov	r0, r5
    501e:	f00e ffc0 	bl	13fa2 <bt_conn_get_dst>
		if ((!memcmp(conn_addr, ccd_addr, sizeof(bt_addr_le_t))) &&
    5022:	4e0e      	ldr	r6, [pc, #56]	; (505c <bt_gatt_nus_send+0x70>)
	const bt_addr_le_t *conn_addr = bt_conn_get_dst(conn);
    5024:	4607      	mov	r7, r0
    5026:	2400      	movs	r4, #0
		if ((!memcmp(conn_addr, ccd_addr, sizeof(bt_addr_le_t))) &&
    5028:	f106 0801 	add.w	r8, r6, #1
    502c:	2207      	movs	r2, #7
    502e:	eb08 0104 	add.w	r1, r8, r4
    5032:	4638      	mov	r0, r7
    5034:	f00e fa06 	bl	13444 <memcmp>
    5038:	b918      	cbnz	r0, 5042 <bt_gatt_nus_send+0x56>
		    (ccd[i].value == BT_GATT_CCC_NOTIFY)) {
    503a:	1933      	adds	r3, r6, r4
		if ((!memcmp(conn_addr, ccd_addr, sizeof(bt_addr_le_t))) &&
    503c:	891b      	ldrh	r3, [r3, #8]
    503e:	2b01      	cmp	r3, #1
    5040:	d0e7      	beq.n	5012 <bt_gatt_nus_send+0x26>
    5042:	3410      	adds	r4, #16
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
    5044:	2c40      	cmp	r4, #64	; 0x40
    5046:	d1f1      	bne.n	502c <bt_gatt_nus_send+0x40>
	} else {
		return -EINVAL;
    5048:	f06f 0015 	mvn.w	r0, #21
	}
}
    504c:	b006      	add	sp, #24
    504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5052:	bf00      	nop
    5054:	00017574 	.word	0x00017574
    5058:	00004f49 	.word	0x00004f49
    505c:	2000018c 	.word	0x2000018c

00005060 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    5060:	4804      	ldr	r0, [pc, #16]	; (5074 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    5062:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    5064:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    5066:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    5068:	d003      	beq.n	5072 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    506a:	4903      	ldr	r1, [pc, #12]	; (5078 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    506c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    5070:	600a      	str	r2, [r1, #0]

00005072 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    5072:	4770      	bx	lr
    ldr r0, =_kernel
    5074:	20001efc 	.word	0x20001efc
    ldr r1, =_SCS_ICSR
    5078:	e000ed04 	.word	0xe000ed04

0000507c <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    507c:	4913      	ldr	r1, [pc, #76]	; (50cc <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    507e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5080:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    5084:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    5086:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    508a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    508e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5090:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5094:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    5098:	4f0d      	ldr	r7, [pc, #52]	; (50d0 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    509a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    509e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    50a0:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    50a2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    50a4:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    50a6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    50a8:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    50aa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    50ae:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    50b0:	4806      	ldr	r0, [pc, #24]	; (50cc <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    50b2:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    50b4:	f00e f99f 	bl	133f6 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    50b8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    50bc:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    50c0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    50c4:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    50c8:	4770      	bx	lr
    50ca:	0000      	.short	0x0000
    ldr r1, =_kernel
    50cc:	20001efc 	.word	0x20001efc
    ldr v4, =_SCS_ICSR
    50d0:	e000ed04 	.word	0xe000ed04

000050d4 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    50d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    50d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    50da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    50de:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    50e2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    50e4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    50e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    50ec:	2902      	cmp	r1, #2
    beq _oops
    50ee:	d0ff      	beq.n	50f0 <_oops>

000050f0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    50f0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    50f2:	f00e f975 	bl	133e0 <z_do_kernel_oops>
    pop {r0, pc}
    50f6:	bd01      	pop	{r0, pc}

000050f8 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    50f8:	4901      	ldr	r1, [pc, #4]	; (5100 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    50fa:	2210      	movs	r2, #16
	str r2, [r1]
    50fc:	600a      	str	r2, [r1, #0]
	bx lr
    50fe:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    5100:	e000ed10 	.word	0xe000ed10

00005104 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    5104:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5106:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    510a:	bf30      	wfi

	bx lr
    510c:	4770      	bx	lr
    510e:	bf00      	nop

00005110 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    5110:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5112:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    5116:	f8df c01c 	ldr.w	ip, [pc, #28]	; 5134 <__bus_fault+0x24>
	ldr ip, [ip]
    511a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    511e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    5122:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    5124:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    5128:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    512c:	b501      	push	{r0, lr}
	bl _Fault
    512e:	f000 f9e7 	bl	5500 <_Fault>

	pop {r0, pc}
    5132:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    5134:	e000ed04 	.word	0xe000ed04

00005138 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5138:	bf30      	wfi
    b z_SysNmiOnReset
    513a:	f7ff bffd 	b.w	5138 <z_SysNmiOnReset>
    513e:	bf00      	nop

00005140 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5140:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    5142:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5144:	4a0b      	ldr	r2, [pc, #44]	; (5174 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5146:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5148:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    514a:	bf1e      	ittt	ne
	movne	r1, #0
    514c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    514e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    5150:	f011 fc7f 	blne	16a52 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5154:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    5156:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    515a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    515e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    5162:	4905      	ldr	r1, [pc, #20]	; (5178 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5164:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5166:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    5168:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    516a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    516e:	4803      	ldr	r0, [pc, #12]	; (517c <_isr_wrapper+0x3c>)
	bx r0
    5170:	4700      	bx	r0
    5172:	0000      	.short	0x0000
	ldr r2, =_kernel
    5174:	20001efc 	.word	0x20001efc
	ldr r1, =_sw_isr_table
    5178:	00017218 	.word	0x00017218
	ldr r0, =_IntExit
    517c:	00005061 	.word	0x00005061

00005180 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    5180:	4a09      	ldr	r2, [pc, #36]	; (51a8 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5182:	490a      	ldr	r1, [pc, #40]	; (51ac <__swap+0x2c>)
	_current->arch.basepri = key;
    5184:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5186:	6809      	ldr	r1, [r1, #0]
    5188:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    518a:	4909      	ldr	r1, [pc, #36]	; (51b0 <__swap+0x30>)
	_current->arch.basepri = key;
    518c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    518e:	684b      	ldr	r3, [r1, #4]
    5190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5194:	604b      	str	r3, [r1, #4]
    5196:	2300      	movs	r3, #0
    5198:	f383 8811 	msr	BASEPRI, r3
    519c:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    51a0:	6893      	ldr	r3, [r2, #8]
}
    51a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    51a4:	4770      	bx	lr
    51a6:	bf00      	nop
    51a8:	20001efc 	.word	0x20001efc
    51ac:	00017a10 	.word	0x00017a10
    51b0:	e000ed00 	.word	0xe000ed00

000051b4 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    51b4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    51b6:	2b00      	cmp	r3, #0
    51b8:	db08      	blt.n	51cc <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51ba:	2201      	movs	r2, #1
    51bc:	f000 001f 	and.w	r0, r0, #31
    51c0:	fa02 f000 	lsl.w	r0, r2, r0
    51c4:	095b      	lsrs	r3, r3, #5
    51c6:	4a02      	ldr	r2, [pc, #8]	; (51d0 <z_arch_irq_enable+0x1c>)
    51c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    51cc:	4770      	bx	lr
    51ce:	bf00      	nop
    51d0:	e000e100 	.word	0xe000e100

000051d4 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    51d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    51d6:	2b00      	cmp	r3, #0
    51d8:	db0d      	blt.n	51f6 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51da:	2201      	movs	r2, #1
    51dc:	095b      	lsrs	r3, r3, #5
    51de:	f000 001f 	and.w	r0, r0, #31
    51e2:	fa02 f000 	lsl.w	r0, r2, r0
    51e6:	3320      	adds	r3, #32
    51e8:	4a03      	ldr	r2, [pc, #12]	; (51f8 <z_arch_irq_disable+0x24>)
    51ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    51ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51f2:	f3bf 8f6f 	isb	sy
}
    51f6:	4770      	bx	lr
    51f8:	e000e100 	.word	0xe000e100

000051fc <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    51fc:	0942      	lsrs	r2, r0, #5
    51fe:	4b05      	ldr	r3, [pc, #20]	; (5214 <z_arch_irq_is_enabled+0x18>)
    5200:	f000 001f 	and.w	r0, r0, #31
    5204:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5208:	2301      	movs	r3, #1
    520a:	fa03 f000 	lsl.w	r0, r3, r0
}
    520e:	4010      	ands	r0, r2
    5210:	4770      	bx	lr
    5212:	bf00      	nop
    5214:	e000e100 	.word	0xe000e100

00005218 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5218:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    521a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    521c:	bfa8      	it	ge
    521e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    5222:	f101 0101 	add.w	r1, r1, #1
    5226:	ea4f 1141 	mov.w	r1, r1, lsl #5
    522a:	bfae      	itee	ge
    522c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5230:	f000 000f 	andlt.w	r0, r0, #15
    5234:	4b03      	ldrlt	r3, [pc, #12]	; (5244 <z_irq_priority_set+0x2c>)
    5236:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5238:	bfac      	ite	ge
    523a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    523e:	5419      	strblt	r1, [r3, r0]
}
    5240:	4770      	bx	lr
    5242:	bf00      	nop
    5244:	e000ed14 	.word	0xe000ed14

00005248 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    5248:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    524a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    524c:	4b04      	ldr	r3, [pc, #16]	; (5260 <_arch_isr_direct_pm+0x18>)
    524e:	6a18      	ldr	r0, [r3, #32]
    5250:	b118      	cbz	r0, 525a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    5252:	2200      	movs	r2, #0
    5254:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    5256:	f011 fbfc 	bl	16a52 <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    525a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    525c:	bd08      	pop	{r3, pc}
    525e:	bf00      	nop
    5260:	20001efc 	.word	0x20001efc

00005264 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    5264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    5268:	188c      	adds	r4, r1, r2
{
    526a:	4688      	mov	r8, r1
    526c:	4617      	mov	r7, r2
    526e:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    5270:	2204      	movs	r2, #4
    5272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5274:	9909      	ldr	r1, [sp, #36]	; 0x24
    5276:	4605      	mov	r5, r0
    5278:	f011 fe3d 	bl	16ef6 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    527c:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    5280:	490c      	ldr	r1, [pc, #48]	; (52b4 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    5282:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    5286:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    5288:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    528c:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    5290:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    5294:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    5296:	9906      	ldr	r1, [sp, #24]
    5298:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    529a:	9907      	ldr	r1, [sp, #28]
    529c:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    529e:	9908      	ldr	r1, [sp, #32]
    52a0:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    52a2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    52a6:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    52a8:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    52aa:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    52ac:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    52ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52b2:	bf00      	nop
    52b4:	00011d9b 	.word	0x00011d9b

000052b8 <z_arm_fatal_error>:
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
		      esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    52b8:	b538      	push	{r3, r4, r5, lr}
    52ba:	4605      	mov	r5, r0

	if (esf != NULL) {
    52bc:	460c      	mov	r4, r1
    52be:	b199      	cbz	r1, 52e8 <z_arm_fatal_error+0x30>
	z_fatal_print("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    52c0:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    52c4:	480b      	ldr	r0, [pc, #44]	; (52f4 <z_arm_fatal_error+0x3c>)
    52c6:	6809      	ldr	r1, [r1, #0]
    52c8:	f00b fb8a 	bl	109e0 <z_fatal_print>
	z_fatal_print("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    52cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    52d0:	68e1      	ldr	r1, [r4, #12]
    52d2:	4809      	ldr	r0, [pc, #36]	; (52f8 <z_arm_fatal_error+0x40>)
    52d4:	f00b fb84 	bl	109e0 <z_fatal_print>
	z_fatal_print(" xpsr:  0x%08x", esf->basic.xpsr);
    52d8:	69e1      	ldr	r1, [r4, #28]
    52da:	4808      	ldr	r0, [pc, #32]	; (52fc <z_arm_fatal_error+0x44>)
    52dc:	f00b fb80 	bl	109e0 <z_fatal_print>
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
    52e0:	69a1      	ldr	r1, [r4, #24]
    52e2:	4807      	ldr	r0, [pc, #28]	; (5300 <z_arm_fatal_error+0x48>)
    52e4:	f00b fb7c 	bl	109e0 <z_fatal_print>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    52e8:	4621      	mov	r1, r4
    52ea:	4628      	mov	r0, r5
}
    52ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_fatal_error(reason, esf);
    52f0:	f00b bb9a 	b.w	10a28 <z_fatal_error>
    52f4:	00017f4b 	.word	0x00017f4b
    52f8:	00017f7a 	.word	0x00017f7a
    52fc:	00017fa9 	.word	0x00017fa9
    5300:	00017fb8 	.word	0x00017fb8

00005304 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    5304:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5306:	4b08      	ldr	r3, [pc, #32]	; (5328 <_PrepC+0x24>)
    5308:	4a08      	ldr	r2, [pc, #32]	; (532c <_PrepC+0x28>)
    530a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    530e:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5314:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    5318:	f00b fbd4 	bl	10ac4 <z_bss_zero>
	z_data_copy();
    531c:	f00b fbdc 	bl	10ad8 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    5320:	f000 f96a 	bl	55f8 <z_IntLibInit>
	z_cstart();
    5324:	f00b fc0a 	bl	10b3c <z_cstart>
    5328:	00000000 	.word	0x00000000
    532c:	e000ed00 	.word	0xe000ed00

00005330 <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5330:	f00c ff23 	bl	1217a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5334:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5336:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    533a:	4808      	ldr	r0, [pc, #32]	; (535c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    533c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5340:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5342:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5346:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    534a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    534c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    534e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5352:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    5356:	f7ff ffd5 	bl	5304 <_PrepC>
    535a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    535c:	20003cf0 	.word	0x20003cf0

00005360 <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    5360:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5362:	4c19      	ldr	r4, [pc, #100]	; (53c8 <MpuFault.isra.2+0x68>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    5364:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    5366:	4819      	ldr	r0, [pc, #100]	; (53cc <MpuFault.isra.2+0x6c>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    5368:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    536a:	f00b fb39 	bl	109e0 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    536e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5370:	06db      	lsls	r3, r3, #27
    5372:	d502      	bpl.n	537a <MpuFault.isra.2+0x1a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5374:	4816      	ldr	r0, [pc, #88]	; (53d0 <MpuFault.isra.2+0x70>)
    5376:	f00b fb33 	bl	109e0 <z_fatal_print>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    537a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    537c:	0718      	lsls	r0, r3, #28
    537e:	d502      	bpl.n	5386 <MpuFault.isra.2+0x26>
		PR_FAULT_INFO("  Unstacking error");
    5380:	4814      	ldr	r0, [pc, #80]	; (53d4 <MpuFault.isra.2+0x74>)
    5382:	f00b fb2d 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5388:	0799      	lsls	r1, r3, #30
    538a:	d50e      	bpl.n	53aa <MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation");
    538c:	4812      	ldr	r0, [pc, #72]	; (53d8 <MpuFault.isra.2+0x78>)
    538e:	f00b fb27 	bl	109e0 <z_fatal_print>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    5392:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5394:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5396:	061a      	lsls	r2, r3, #24
    5398:	d507      	bpl.n	53aa <MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    539a:	4810      	ldr	r0, [pc, #64]	; (53dc <MpuFault.isra.2+0x7c>)
    539c:	f00b fb20 	bl	109e0 <z_fatal_print>
			if (fromHardFault) {
    53a0:	b11e      	cbz	r6, 53aa <MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    53a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    53a8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    53aa:	4c07      	ldr	r4, [pc, #28]	; (53c8 <MpuFault.isra.2+0x68>)
    53ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53ae:	07db      	lsls	r3, r3, #31
    53b0:	d502      	bpl.n	53b8 <MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation");
    53b2:	480b      	ldr	r0, [pc, #44]	; (53e0 <MpuFault.isra.2+0x80>)
    53b4:	f00b fb14 	bl	109e0 <z_fatal_print>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    53b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    53ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    53bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    53be:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    53c2:	62a3      	str	r3, [r4, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    53c4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    53c6:	bd70      	pop	{r4, r5, r6, pc}
    53c8:	e000ed00 	.word	0xe000ed00
    53cc:	0001806e 	.word	0x0001806e
    53d0:	00018084 	.word	0x00018084
    53d4:	000180b7 	.word	0x000180b7
    53d8:	000180ca 	.word	0x000180ca
    53dc:	000180e2 	.word	0x000180e2
    53e0:	000180f8 	.word	0x000180f8

000053e4 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    53e4:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    53e6:	4c1c      	ldr	r4, [pc, #112]	; (5458 <BusFault.isra.3+0x74>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    53e8:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    53ea:	481c      	ldr	r0, [pc, #112]	; (545c <BusFault.isra.3+0x78>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    53ec:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    53ee:	f00b faf7 	bl	109e0 <z_fatal_print>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    53f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53f4:	04d9      	lsls	r1, r3, #19
    53f6:	d502      	bpl.n	53fe <BusFault.isra.3+0x1a>
		PR_FAULT_INFO("  Stacking error");
    53f8:	4819      	ldr	r0, [pc, #100]	; (5460 <BusFault.isra.3+0x7c>)
    53fa:	f00b faf1 	bl	109e0 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    53fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5400:	051a      	lsls	r2, r3, #20
    5402:	d502      	bpl.n	540a <BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error");
    5404:	4817      	ldr	r0, [pc, #92]	; (5464 <BusFault.isra.3+0x80>)
    5406:	f00b faeb 	bl	109e0 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    540a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    540c:	059b      	lsls	r3, r3, #22
    540e:	d50e      	bpl.n	542e <BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error");
    5410:	4815      	ldr	r0, [pc, #84]	; (5468 <BusFault.isra.3+0x84>)
    5412:	f00b fae5 	bl	109e0 <z_fatal_print>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5416:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    541a:	0418      	lsls	r0, r3, #16
    541c:	d507      	bpl.n	542e <BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    541e:	4813      	ldr	r0, [pc, #76]	; (546c <BusFault.isra.3+0x88>)
    5420:	f00b fade 	bl	109e0 <z_fatal_print>
			if (fromHardFault) {
    5424:	b11e      	cbz	r6, 542e <BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    542c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    542e:	4c0a      	ldr	r4, [pc, #40]	; (5458 <BusFault.isra.3+0x74>)
    5430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5432:	055a      	lsls	r2, r3, #21
    5434:	d502      	bpl.n	543c <BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error");
    5436:	480e      	ldr	r0, [pc, #56]	; (5470 <BusFault.isra.3+0x8c>)
    5438:	f00b fad2 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    543c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    543e:	05db      	lsls	r3, r3, #23
    5440:	d502      	bpl.n	5448 <BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Instruction bus error");
    5442:	480c      	ldr	r0, [pc, #48]	; (5474 <BusFault.isra.3+0x90>)
    5444:	f00b facc 	bl	109e0 <z_fatal_print>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5448:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    544a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    544c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5450:	62a3      	str	r3, [r4, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5452:	7028      	strb	r0, [r5, #0]

	return reason;
}
    5454:	bd70      	pop	{r4, r5, r6, pc}
    5456:	bf00      	nop
    5458:	e000ed00 	.word	0xe000ed00
    545c:	00017fe6 	.word	0x00017fe6
    5460:	00017ffc 	.word	0x00017ffc
    5464:	000180b7 	.word	0x000180b7
    5468:	0001800d 	.word	0x0001800d
    546c:	00018026 	.word	0x00018026
    5470:	0001803b 	.word	0x0001803b
    5474:	00018056 	.word	0x00018056

00005478 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const z_arch_esf_t *esf)
    5478:	b510      	push	{r4, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    547a:	4c19      	ldr	r4, [pc, #100]	; (54e0 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    547c:	4819      	ldr	r0, [pc, #100]	; (54e4 <UsageFault.isra.4+0x6c>)
    547e:	f00b faaf 	bl	109e0 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5484:	019a      	lsls	r2, r3, #6
    5486:	d502      	bpl.n	548e <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero");
    5488:	4817      	ldr	r0, [pc, #92]	; (54e8 <UsageFault.isra.4+0x70>)
    548a:	f00b faa9 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    548e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5490:	01db      	lsls	r3, r3, #7
    5492:	d502      	bpl.n	549a <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    5494:	4815      	ldr	r0, [pc, #84]	; (54ec <UsageFault.isra.4+0x74>)
    5496:	f00b faa3 	bl	109e0 <z_fatal_print>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    549a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    549c:	0318      	lsls	r0, r3, #12
    549e:	d502      	bpl.n	54a6 <UsageFault.isra.4+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions");
    54a0:	4813      	ldr	r0, [pc, #76]	; (54f0 <UsageFault.isra.4+0x78>)
    54a2:	f00b fa9d 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    54a6:	4c0e      	ldr	r4, [pc, #56]	; (54e0 <UsageFault.isra.4+0x68>)
    54a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54aa:	0359      	lsls	r1, r3, #13
    54ac:	d502      	bpl.n	54b4 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    54ae:	4811      	ldr	r0, [pc, #68]	; (54f4 <UsageFault.isra.4+0x7c>)
    54b0:	f00b fa96 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    54b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54b6:	039a      	lsls	r2, r3, #14
    54b8:	d502      	bpl.n	54c0 <UsageFault.isra.4+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    54ba:	480f      	ldr	r0, [pc, #60]	; (54f8 <UsageFault.isra.4+0x80>)
    54bc:	f00b fa90 	bl	109e0 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    54c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54c2:	03db      	lsls	r3, r3, #15
    54c4:	d502      	bpl.n	54cc <UsageFault.isra.4+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    54c6:	480d      	ldr	r0, [pc, #52]	; (54fc <UsageFault.isra.4+0x84>)
    54c8:	f00b fa8a 	bl	109e0 <z_fatal_print>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    54cc:	4a04      	ldr	r2, [pc, #16]	; (54e0 <UsageFault.isra.4+0x68>)
    54ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    54d0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    54d4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    54d8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    54da:	2000      	movs	r0, #0
    54dc:	bd10      	pop	{r4, pc}
    54de:	bf00      	nop
    54e0:	e000ed00 	.word	0xe000ed00
    54e4:	00018117 	.word	0x00018117
    54e8:	0001812f 	.word	0x0001812f
    54ec:	00018142 	.word	0x00018142
    54f0:	0001815c 	.word	0x0001815c
    54f4:	0001817a 	.word	0x0001817a
    54f8:	0001819f 	.word	0x0001819f
    54fc:	000181b9 	.word	0x000181b9

00005500 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(z_arch_esf_t *esf, u32_t exc_return)
{
    5500:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5502:	4d2e      	ldr	r5, [pc, #184]	; (55bc <_Fault+0xbc>)
    5504:	686b      	ldr	r3, [r5, #4]
    5506:	f3c3 0308 	ubfx	r3, r3, #0, #9
	*recoverable = false;
    550a:	2200      	movs	r2, #0
	switch (fault) {
    550c:	1ed9      	subs	r1, r3, #3
{
    550e:	4604      	mov	r4, r0
	*recoverable = false;
    5510:	f88d 2007 	strb.w	r2, [sp, #7]
    5514:	4616      	mov	r6, r2
	switch (fault) {
    5516:	2909      	cmp	r1, #9
    5518:	d845      	bhi.n	55a6 <_Fault+0xa6>
    551a:	e8df f001 	tbb	[pc, r1]
    551e:	3a05      	.short	0x3a05
    5520:	4444373e 	.word	0x4444373e
    5524:	42444444 	.word	0x42444444
	PR_FAULT_INFO("***** HARD FAULT *****");
    5528:	4825      	ldr	r0, [pc, #148]	; (55c0 <_Fault+0xc0>)
    552a:	f00b fa59 	bl	109e0 <z_fatal_print>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    552e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	*recoverable = false;
    5530:	f88d 6007 	strb.w	r6, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5534:	079b      	lsls	r3, r3, #30
    5536:	d504      	bpl.n	5542 <_Fault+0x42>
		PR_EXC("  Bus fault on vector table read");
    5538:	4822      	ldr	r0, [pc, #136]	; (55c4 <_Fault+0xc4>)
	PR_FAULT_INFO(
    553a:	f00b fa51 	bl	109e0 <z_fatal_print>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    553e:	2000      	movs	r0, #0
    5540:	e00e      	b.n	5560 <_Fault+0x60>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5542:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5544:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    5548:	d00d      	beq.n	5566 <_Fault+0x66>
		PR_EXC("  Fault escalation (see below)");
    554a:	481f      	ldr	r0, [pc, #124]	; (55c8 <_Fault+0xc8>)
    554c:	f00b fa48 	bl	109e0 <z_fatal_print>
		if (SCB_MMFSR != 0) {
    5550:	4b1e      	ldr	r3, [pc, #120]	; (55cc <_Fault+0xcc>)
    5552:	781b      	ldrb	r3, [r3, #0]
    5554:	b163      	cbz	r3, 5570 <_Fault+0x70>
			reason = MpuFault(esf, 1, recoverable);
    5556:	f10d 0107 	add.w	r1, sp, #7
    555a:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0, recoverable);
    555c:	f7ff ff00 	bl	5360 <MpuFault.isra.2>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault, &recoverable);
	if (recoverable) {
    5560:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5564:	b913      	cbnz	r3, 556c <_Fault+0x6c>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    5566:	4621      	mov	r1, r4
    5568:	f7ff fea6 	bl	52b8 <z_arm_fatal_error>
}
    556c:	b002      	add	sp, #8
    556e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    5570:	4b17      	ldr	r3, [pc, #92]	; (55d0 <_Fault+0xd0>)
    5572:	781b      	ldrb	r3, [r3, #0]
    5574:	b12b      	cbz	r3, 5582 <_Fault+0x82>
			reason = BusFault(esf, 1, recoverable);
    5576:	f10d 0107 	add.w	r1, sp, #7
    557a:	2001      	movs	r0, #1
		reason = BusFault(esf, 0, recoverable);
    557c:	f7ff ff32 	bl	53e4 <BusFault.isra.3>
    5580:	e7ee      	b.n	5560 <_Fault+0x60>
		} else if (SCB_UFSR != 0) {
    5582:	4b14      	ldr	r3, [pc, #80]	; (55d4 <_Fault+0xd4>)
    5584:	8818      	ldrh	r0, [r3, #0]
    5586:	b280      	uxth	r0, r0
    5588:	2800      	cmp	r0, #0
    558a:	d0e9      	beq.n	5560 <_Fault+0x60>
		reason = UsageFault(esf);
    558c:	f7ff ff74 	bl	5478 <UsageFault.isra.4>
    5590:	e7e6      	b.n	5560 <_Fault+0x60>
		reason = MpuFault(esf, 0, recoverable);
    5592:	f10d 0107 	add.w	r1, sp, #7
    5596:	2000      	movs	r0, #0
    5598:	e7e0      	b.n	555c <_Fault+0x5c>
		reason = BusFault(esf, 0, recoverable);
    559a:	f10d 0107 	add.w	r1, sp, #7
    559e:	2000      	movs	r0, #0
    55a0:	e7ec      	b.n	557c <_Fault+0x7c>
	PR_FAULT_INFO(
    55a2:	480d      	ldr	r0, [pc, #52]	; (55d8 <_Fault+0xd8>)
    55a4:	e7c9      	b.n	553a <_Fault+0x3a>
	PR_FAULT_INFO("***** %s %d) *****",
    55a6:	480d      	ldr	r0, [pc, #52]	; (55dc <_Fault+0xdc>)
    55a8:	490d      	ldr	r1, [pc, #52]	; (55e0 <_Fault+0xe0>)
    55aa:	f1a3 0210 	sub.w	r2, r3, #16
    55ae:	2b0f      	cmp	r3, #15
    55b0:	bfd8      	it	le
    55b2:	4601      	movle	r1, r0
    55b4:	480b      	ldr	r0, [pc, #44]	; (55e4 <_Fault+0xe4>)
    55b6:	f00b fa13 	bl	109e0 <z_fatal_print>
    55ba:	e7c0      	b.n	553e <_Fault+0x3e>
    55bc:	e000ed00 	.word	0xe000ed00
    55c0:	00018212 	.word	0x00018212
    55c4:	00018229 	.word	0x00018229
    55c8:	0001824a 	.word	0x0001824a
    55cc:	e000ed28 	.word	0xe000ed28
    55d0:	e000ed29 	.word	0xe000ed29
    55d4:	e000ed2a 	.word	0xe000ed2a
    55d8:	00018269 	.word	0x00018269
    55dc:	000181e4 	.word	0x000181e4
    55e0:	000181f9 	.word	0x000181f9
    55e4:	0001829f 	.word	0x0001829f

000055e8 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    55e8:	4a02      	ldr	r2, [pc, #8]	; (55f4 <z_FaultInit+0xc>)
    55ea:	6953      	ldr	r3, [r2, #20]
    55ec:	f043 0310 	orr.w	r3, r3, #16
    55f0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    55f2:	4770      	bx	lr
    55f4:	e000ed00 	.word	0xe000ed00

000055f8 <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    55f8:	4804      	ldr	r0, [pc, #16]	; (560c <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    55fa:	2300      	movs	r3, #0
    55fc:	2120      	movs	r1, #32
    55fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5600:	3301      	adds	r3, #1
    5602:	2b1e      	cmp	r3, #30
    5604:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5608:	d1f9      	bne.n	55fe <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    560a:	4770      	bx	lr
    560c:	e000e100 	.word	0xe000e100

00005610 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    5610:	b538      	push	{r3, r4, r5, lr}
    5612:	4605      	mov	r5, r0
	__asm__ volatile(
    5614:	f04f 0320 	mov.w	r3, #32
    5618:	f3ef 8411 	mrs	r4, BASEPRI
    561c:	f383 8811 	msr	BASEPRI, r3
    5620:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    5624:	f011 fc48 	bl	16eb8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    5628:	4b0a      	ldr	r3, [pc, #40]	; (5654 <z_impl_k_thread_abort+0x44>)
    562a:	689b      	ldr	r3, [r3, #8]
    562c:	42ab      	cmp	r3, r5
    562e:	d10b      	bne.n	5648 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    5630:	4b09      	ldr	r3, [pc, #36]	; (5658 <z_impl_k_thread_abort+0x48>)
    5632:	685a      	ldr	r2, [r3, #4]
    5634:	f3c2 0208 	ubfx	r2, r2, #0, #9
    5638:	b912      	cbnz	r2, 5640 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    563a:	4620      	mov	r0, r4
    563c:	f7ff fda0 	bl	5180 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5640:	685a      	ldr	r2, [r3, #4]
    5642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5646:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    5648:	4620      	mov	r0, r4
}
    564a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    564e:	f011 bb4b 	b.w	16ce8 <z_reschedule_irqlock>
    5652:	bf00      	nop
    5654:	20001efc 	.word	0x20001efc
    5658:	e000ed00 	.word	0xe000ed00

0000565c <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    565c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    565e:	4b09      	ldr	r3, [pc, #36]	; (5684 <z_arch_configure_static_mpu_regions+0x28>)
    5660:	9301      	str	r3, [sp, #4]
    5662:	4b09      	ldr	r3, [pc, #36]	; (5688 <z_arch_configure_static_mpu_regions+0x2c>)
    5664:	9302      	str	r3, [sp, #8]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    5666:	a804      	add	r0, sp, #16
		const struct k_mem_partition ramfunc_region =
    5668:	4b08      	ldr	r3, [pc, #32]	; (568c <z_arch_configure_static_mpu_regions+0x30>)
    566a:	9303      	str	r3, [sp, #12]
	const struct k_mem_partition *static_regions[] = {
    566c:	ab01      	add	r3, sp, #4
    566e:	f840 3d10 	str.w	r3, [r0, #-16]!
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5672:	4a07      	ldr	r2, [pc, #28]	; (5690 <z_arch_configure_static_mpu_regions+0x34>)
    5674:	4b07      	ldr	r3, [pc, #28]	; (5694 <z_arch_configure_static_mpu_regions+0x38>)
    5676:	2101      	movs	r1, #1
    5678:	f000 f876 	bl	5768 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    567c:	b005      	add	sp, #20
    567e:	f85d fb04 	ldr.w	pc, [sp], #4
    5682:	bf00      	nop
    5684:	20000000 	.word	0x20000000
    5688:	00000000 	.word	0x00000000
    568c:	060b0000 	.word	0x060b0000
    5690:	20000000 	.word	0x20000000
    5694:	20006000 	.word	0x20006000

00005698 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    5698:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    569a:	e9d1 4300 	ldrd	r4, r3, [r1]
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    569e:	2b20      	cmp	r3, #32
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    56a0:	6889      	ldr	r1, [r1, #8]
	if (size <= 32U) {
    56a2:	d917      	bls.n	56d4 <mpu_configure_region+0x3c>
	if (size > (1UL << 31)) {
    56a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    56a8:	d816      	bhi.n	56d8 <mpu_configure_region+0x40>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    56aa:	3b01      	subs	r3, #1
    56ac:	fab3 f383 	clz	r3, r3
    56b0:	f1c3 031f 	rsb	r3, r3, #31
    56b4:	005b      	lsls	r3, r3, #1
	if (index > (get_num_regions() - 1)) {
    56b6:	2807      	cmp	r0, #7
    56b8:	f041 0101 	orr.w	r1, r1, #1
    56bc:	d80e      	bhi.n	56dc <mpu_configure_region+0x44>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    56be:	f024 021f 	bic.w	r2, r4, #31
	MPU->RNR = index;
    56c2:	4d08      	ldr	r5, [pc, #32]	; (56e4 <mpu_configure_region+0x4c>)
				| MPU_RBAR_VALID_Msk | index;
    56c4:	4302      	orrs	r2, r0
    56c6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    56ca:	430b      	orrs	r3, r1
	MPU->RNR = index;
    56cc:	60a8      	str	r0, [r5, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    56ce:	60ea      	str	r2, [r5, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    56d0:	612b      	str	r3, [r5, #16]
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    56d2:	bd30      	pop	{r4, r5, pc}
		return REGION_32B;
    56d4:	2308      	movs	r3, #8
    56d6:	e7ee      	b.n	56b6 <mpu_configure_region+0x1e>
		return REGION_4G;
    56d8:	233e      	movs	r3, #62	; 0x3e
    56da:	e7ec      	b.n	56b6 <mpu_configure_region+0x1e>
		return -EINVAL;
    56dc:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    56e0:	e7f7      	b.n	56d2 <mpu_configure_region+0x3a>
    56e2:	bf00      	nop
    56e4:	e000ed90 	.word	0xe000ed90

000056e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    56e8:	4b03      	ldr	r3, [pc, #12]	; (56f8 <arm_core_mpu_enable+0x10>)
    56ea:	2205      	movs	r2, #5
    56ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    56ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56f2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    56f6:	4770      	bx	lr
    56f8:	e000ed90 	.word	0xe000ed90

000056fc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    56fc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5700:	4b01      	ldr	r3, [pc, #4]	; (5708 <arm_core_mpu_disable+0xc>)
    5702:	2200      	movs	r2, #0
    5704:	605a      	str	r2, [r3, #4]
}
    5706:	4770      	bx	lr
    5708:	e000ed90 	.word	0xe000ed90

0000570c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    570c:	4913      	ldr	r1, [pc, #76]	; (575c <arm_mpu_init+0x50>)
    570e:	6808      	ldr	r0, [r1, #0]
    5710:	2808      	cmp	r0, #8
{
    5712:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5714:	d81e      	bhi.n	5754 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5716:	f7ff fff1 	bl	56fc <arm_core_mpu_disable>
	MPU->RNR = index;
    571a:	4c11      	ldr	r4, [pc, #68]	; (5760 <arm_mpu_init+0x54>)
    571c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    571e:	2200      	movs	r2, #0
    5720:	4290      	cmp	r0, r2
    5722:	f101 010c 	add.w	r1, r1, #12
    5726:	d105      	bne.n	5734 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5728:	4b0e      	ldr	r3, [pc, #56]	; (5764 <arm_mpu_init+0x58>)
    572a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    572c:	f7ff ffdc 	bl	56e8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    5730:	2000      	movs	r0, #0
}
    5732:	bd10      	pop	{r4, pc}
    5734:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5736:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    573a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    573e:	f043 0310 	orr.w	r3, r3, #16
    5742:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5744:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5746:	f851 3c04 	ldr.w	r3, [r1, #-4]
    574a:	f043 0301 	orr.w	r3, r3, #1
    574e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5750:	3201      	adds	r2, #1
    5752:	e7e5      	b.n	5720 <arm_mpu_init+0x14>
		return -1;
    5754:	f04f 30ff 	mov.w	r0, #4294967295
    5758:	e7eb      	b.n	5732 <arm_mpu_init+0x26>
    575a:	bf00      	nop
    575c:	00017454 	.word	0x00017454
    5760:	e000ed90 	.word	0xe000ed90
    5764:	200020a5 	.word	0x200020a5

00005768 <arm_core_mpu_configure_static_mpu_regions>:
{
    5768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    576a:	4c10      	ldr	r4, [pc, #64]	; (57ac <arm_core_mpu_configure_static_mpu_regions+0x44>)
    576c:	4607      	mov	r7, r0
	int reg_index = start_reg_index;
    576e:	7820      	ldrb	r0, [r4, #0]
    5770:	460e      	mov	r6, r1
	for (i = 0; i < regions_num; i++) {
    5772:	2500      	movs	r5, #0
    5774:	42b5      	cmp	r5, r6
    5776:	da08      	bge.n	578a <arm_core_mpu_configure_static_mpu_regions+0x22>
		if (regions[i]->size == 0U) {
    5778:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
    577c:	684b      	ldr	r3, [r1, #4]
    577e:	b193      	cbz	r3, 57a6 <arm_core_mpu_configure_static_mpu_regions+0x3e>
		((part->size & (part->size - 1)) == 0U)
    5780:	1e5a      	subs	r2, r3, #1
		&&
    5782:	4213      	tst	r3, r2
    5784:	d003      	beq.n	578e <arm_core_mpu_configure_static_mpu_regions+0x26>
			return -EINVAL;
    5786:	f06f 0015 	mvn.w	r0, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    578a:	7020      	strb	r0, [r4, #0]
}
    578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    578e:	2b1f      	cmp	r3, #31
    5790:	d9f9      	bls.n	5786 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		((part->start & (part->size - 1)) == 0U);
    5792:	680b      	ldr	r3, [r1, #0]
		&&
    5794:	421a      	tst	r2, r3
    5796:	d1f6      	bne.n	5786 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    5798:	b2c0      	uxtb	r0, r0
    579a:	f7ff ff7d 	bl	5698 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    579e:	f110 0f16 	cmn.w	r0, #22
    57a2:	d0f0      	beq.n	5786 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index++;
    57a4:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    57a6:	3501      	adds	r5, #1
    57a8:	e7e4      	b.n	5774 <arm_core_mpu_configure_static_mpu_regions+0xc>
    57aa:	bf00      	nop
    57ac:	200020a5 	.word	0x200020a5

000057b0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    57b0:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    57b2:	4b10      	ldr	r3, [pc, #64]	; (57f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
    57b4:	4606      	mov	r6, r0
	int reg_index = start_reg_index;
    57b6:	7818      	ldrb	r0, [r3, #0]
    57b8:	460d      	mov	r5, r1
	for (i = 0; i < regions_num; i++) {
    57ba:	2400      	movs	r4, #0
    57bc:	42ac      	cmp	r4, r5
    57be:	db07      	blt.n	57d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    57c0:	f110 0f16 	cmn.w	r0, #22
    57c4:	d003      	beq.n	57ce <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    57c6:	4b0c      	ldr	r3, [pc, #48]	; (57f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
    57c8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    57ca:	2807      	cmp	r0, #7
    57cc:	dd0d      	ble.n	57ea <arm_core_mpu_configure_dynamic_mpu_regions+0x3a>
}
    57ce:	bd70      	pop	{r4, r5, r6, pc}
		if (regions[i]->size == 0U) {
    57d0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    57d4:	684b      	ldr	r3, [r1, #4]
    57d6:	b133      	cbz	r3, 57e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x36>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    57d8:	b2c0      	uxtb	r0, r0
    57da:	f7ff ff5d 	bl	5698 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    57de:	f110 0f16 	cmn.w	r0, #22
    57e2:	d0f4      	beq.n	57ce <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		reg_index++;
    57e4:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    57e6:	3401      	adds	r4, #1
    57e8:	e7e8      	b.n	57bc <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
  MPU->RNR = rnr;
    57ea:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    57ec:	611a      	str	r2, [r3, #16]
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    57ee:	3001      	adds	r0, #1
    57f0:	e7eb      	b.n	57ca <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
    57f2:	bf00      	nop
    57f4:	200020a5 	.word	0x200020a5
    57f8:	e000ed90 	.word	0xe000ed90

000057fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    57fc:	4b01      	ldr	r3, [pc, #4]	; (5804 <__stdout_hook_install+0x8>)
    57fe:	6018      	str	r0, [r3, #0]
}
    5800:	4770      	bx	lr
    5802:	bf00      	nop
    5804:	20005000 	.word	0x20005000

00005808 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5808:	b580      	push	{r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    580a:	4e54      	ldr	r6, [pc, #336]	; (595c <ecc_thread+0x154>)
    580c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 5974 <ecc_thread+0x16c>
    5810:	4635      	mov	r5, r6
    5812:	f04f 31ff 	mov.w	r1, #4294967295
    5816:	4640      	mov	r0, r8
    5818:	f00b fd92 	bl	11340 <z_impl_k_sem_take>
    581c:	f3bf 8f5b 	dmb	ish
    5820:	6834      	ldr	r4, [r6, #0]
    5822:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5826:	f014 0401 	ands.w	r4, r4, #1
    582a:	d04e      	beq.n	58ca <ecc_thread+0xc2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    582c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 5970 <ecc_thread+0x168>
    5830:	4c4b      	ldr	r4, [pc, #300]	; (5960 <ecc_thread+0x158>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5832:	4f4c      	ldr	r7, [pc, #304]	; (5964 <ecc_thread+0x15c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5834:	484c      	ldr	r0, [pc, #304]	; (5968 <ecc_thread+0x160>)
    5836:	464a      	mov	r2, r9
    5838:	4621      	mov	r1, r4
    583a:	f00c fcb8 	bl	121ae <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    583e:	b3c8      	cbz	r0, 58b4 <ecc_thread+0xac>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5840:	2220      	movs	r2, #32
    5842:	4639      	mov	r1, r7
    5844:	4620      	mov	r0, r4
    5846:	f00d fdfd 	bl	13444 <memcmp>
    584a:	2800      	cmp	r0, #0
    584c:	d0f2      	beq.n	5834 <ecc_thread+0x2c>
	return 0;
    584e:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5850:	f04f 31ff 	mov.w	r1, #4294967295
    5854:	2001      	movs	r0, #1
    5856:	f001 f99d 	bl	6b94 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    585a:	f100 0708 	add.w	r7, r0, #8
    585e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5860:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5862:	4638      	mov	r0, r7
    5864:	f010 fd86 	bl	16374 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5868:	233e      	movs	r3, #62	; 0x3e
    586a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    586c:	2342      	movs	r3, #66	; 0x42
    586e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5870:	2101      	movs	r1, #1
    5872:	4638      	mov	r0, r7
    5874:	f010 fd7e 	bl	16374 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5878:	2308      	movs	r3, #8
    587a:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    587c:	2141      	movs	r1, #65	; 0x41
    587e:	4638      	mov	r0, r7
    5880:	f010 fd78 	bl	16374 <net_buf_simple_add>
    5884:	4607      	mov	r7, r0
	evt->status = status;
    5886:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    588a:	b1ac      	cbz	r4, 58b8 <ecc_thread+0xb0>
		(void)memset(evt->key, 0, sizeof(evt->key));
    588c:	2240      	movs	r2, #64	; 0x40
    588e:	2100      	movs	r1, #0
    5890:	f00d fe15 	bl	134be <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5894:	f3bf 8f5b 	dmb	ish
    5898:	e855 3f00 	ldrex	r3, [r5]
    589c:	f023 0301 	bic.w	r3, r3, #1
    58a0:	e845 3200 	strex	r2, r3, [r5]
    58a4:	2a00      	cmp	r2, #0
    58a6:	d1f7      	bne.n	5898 <ecc_thread+0x90>
    58a8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    58ac:	4648      	mov	r0, r9
    58ae:	f000 fe91 	bl	65d4 <bt_recv>
    58b2:	e7ae      	b.n	5812 <ecc_thread+0xa>
			return BT_HCI_ERR_UNSPECIFIED;
    58b4:	241f      	movs	r4, #31
    58b6:	e7cb      	b.n	5850 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    58b8:	492b      	ldr	r1, [pc, #172]	; (5968 <ecc_thread+0x160>)
    58ba:	f00d fe8e 	bl	135da <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    58be:	492b      	ldr	r1, [pc, #172]	; (596c <ecc_thread+0x164>)
    58c0:	f107 0021 	add.w	r0, r7, #33	; 0x21
    58c4:	f00d fe89 	bl	135da <sys_memcpy_swap.constprop.2>
    58c8:	e7e4      	b.n	5894 <ecc_thread+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58ca:	f3bf 8f5b 	dmb	ish
    58ce:	6833      	ldr	r3, [r6, #0]
    58d0:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    58d4:	079b      	lsls	r3, r3, #30
    58d6:	d59c      	bpl.n	5812 <ecc_thread+0xa>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    58d8:	4925      	ldr	r1, [pc, #148]	; (5970 <ecc_thread+0x168>)
    58da:	4823      	ldr	r0, [pc, #140]	; (5968 <ecc_thread+0x160>)
    58dc:	f00d fb58 	bl	12f90 <uECC_valid_public_key>
	if (ret < 0) {
    58e0:	2800      	cmp	r0, #0
    58e2:	db07      	blt.n	58f4 <ecc_thread+0xec>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    58e4:	4a20      	ldr	r2, [pc, #128]	; (5968 <ecc_thread+0x160>)
    58e6:	4b22      	ldr	r3, [pc, #136]	; (5970 <ecc_thread+0x168>)
    58e8:	f1a2 0120 	sub.w	r1, r2, #32
    58ec:	4610      	mov	r0, r2
    58ee:	f00c fca9 	bl	12244 <uECC_shared_secret>
    58f2:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    58f4:	f04f 31ff 	mov.w	r1, #4294967295
    58f8:	2001      	movs	r0, #1
    58fa:	f001 f94b 	bl	6b94 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    58fe:	f100 0708 	add.w	r7, r0, #8
    5902:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5904:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5906:	4638      	mov	r0, r7
    5908:	f010 fd34 	bl	16374 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    590c:	233e      	movs	r3, #62	; 0x3e
    590e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5910:	2322      	movs	r3, #34	; 0x22
    5912:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5914:	2101      	movs	r1, #1
    5916:	4638      	mov	r0, r7
    5918:	f010 fd2c 	bl	16374 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    591c:	2309      	movs	r3, #9
    591e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5920:	2121      	movs	r1, #33	; 0x21
    5922:	4638      	mov	r0, r7
    5924:	f010 fd26 	bl	16374 <net_buf_simple_add>
    5928:	4603      	mov	r3, r0
    592a:	3001      	adds	r0, #1
	if (ret == TC_CRYPTO_FAIL) {
    592c:	b984      	cbnz	r4, 5950 <ecc_thread+0x148>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    592e:	221f      	movs	r2, #31
    5930:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    5932:	4621      	mov	r1, r4
    5934:	2220      	movs	r2, #32
    5936:	f00d fdc2 	bl	134be <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    593a:	f3bf 8f5b 	dmb	ish
    593e:	e855 3f00 	ldrex	r3, [r5]
    5942:	f023 0302 	bic.w	r3, r3, #2
    5946:	e845 3200 	strex	r2, r3, [r5]
    594a:	2a00      	cmp	r2, #0
    594c:	d0ac      	beq.n	58a8 <ecc_thread+0xa0>
    594e:	e7f6      	b.n	593e <ecc_thread+0x136>
		evt->status = 0U;
    5950:	2200      	movs	r2, #0
    5952:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5954:	4904      	ldr	r1, [pc, #16]	; (5968 <ecc_thread+0x160>)
    5956:	f00d fe40 	bl	135da <sys_memcpy_swap.constprop.2>
    595a:	e7ee      	b.n	593a <ecc_thread+0x132>
    595c:	20000238 	.word	0x20000238
    5960:	200020a6 	.word	0x200020a6
    5964:	00017674 	.word	0x00017674
    5968:	200020c6 	.word	0x200020c6
    596c:	200020e6 	.word	0x200020e6
    5970:	000175c4 	.word	0x000175c4
    5974:	200054ac 	.word	0x200054ac

00005978 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    5978:	b570      	push	{r4, r5, r6, lr}
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    597a:	7d03      	ldrb	r3, [r0, #20]
{
    597c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    597e:	b9ab      	cbnz	r3, 59ac <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    5980:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    5982:	881a      	ldrh	r2, [r3, #0]
    5984:	f242 0125 	movw	r1, #8229	; 0x2025
    5988:	428a      	cmp	r2, r1
    598a:	d017      	beq.n	59bc <bt_hci_ecc_send+0x44>
    598c:	f242 0126 	movw	r1, #8230	; 0x2026
    5990:	428a      	cmp	r2, r1
    5992:	d03d      	beq.n	5a10 <bt_hci_ecc_send+0x98>
    5994:	f242 0101 	movw	r1, #8193	; 0x2001
    5998:	428a      	cmp	r2, r1
    599a:	d107      	bne.n	59ac <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    599c:	78da      	ldrb	r2, [r3, #3]
    599e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    59a2:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    59a4:	791a      	ldrb	r2, [r3, #4]
    59a6:	f022 0201 	bic.w	r2, r2, #1
    59aa:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    59ac:	4b33      	ldr	r3, [pc, #204]	; (5a7c <bt_hci_ecc_send+0x104>)
    59ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    59b2:	4620      	mov	r0, r4
    59b4:	691b      	ldr	r3, [r3, #16]
}
    59b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    59ba:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    59bc:	2103      	movs	r1, #3
    59be:	3008      	adds	r0, #8
    59c0:	f010 fcf7 	bl	163b2 <net_buf_simple_pull>
	net_buf_unref(buf);
    59c4:	4620      	mov	r0, r4
    59c6:	f00a facf 	bl	ff68 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59ca:	f3bf 8f5b 	dmb	ish
    59ce:	4b2c      	ldr	r3, [pc, #176]	; (5a80 <bt_hci_ecc_send+0x108>)
    59d0:	681a      	ldr	r2, [r3, #0]
    59d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    59d6:	0791      	lsls	r1, r2, #30
    59d8:	d506      	bpl.n	59e8 <bt_hci_ecc_send+0x70>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    59da:	210c      	movs	r1, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    59dc:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    59e0:	f00d fdd8 	bl	13594 <send_cmd_status>
}
    59e4:	2000      	movs	r0, #0
    59e6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59e8:	f3bf 8f5b 	dmb	ish
    59ec:	e853 1f00 	ldrex	r1, [r3]
    59f0:	f041 0201 	orr.w	r2, r1, #1
    59f4:	e843 2000 	strex	r0, r2, [r3]
    59f8:	2800      	cmp	r0, #0
    59fa:	d1f7      	bne.n	59ec <bt_hci_ecc_send+0x74>
    59fc:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    5a00:	f011 0401 	ands.w	r4, r1, #1
    5a04:	d1e9      	bne.n	59da <bt_hci_ecc_send+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5a06:	481f      	ldr	r0, [pc, #124]	; (5a84 <bt_hci_ecc_send+0x10c>)
    5a08:	f00b fc6e 	bl	112e8 <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
    5a0c:	4621      	mov	r1, r4
    5a0e:	e7e5      	b.n	59dc <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    5a10:	2103      	movs	r1, #3
    5a12:	3008      	adds	r0, #8
    5a14:	f010 fccd 	bl	163b2 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a18:	f3bf 8f5b 	dmb	ish
    5a1c:	4b18      	ldr	r3, [pc, #96]	; (5a80 <bt_hci_ecc_send+0x108>)
    5a1e:	681a      	ldr	r2, [r3, #0]
    5a20:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5a24:	07d2      	lsls	r2, r2, #31
    5a26:	d507      	bpl.n	5a38 <bt_hci_ecc_send+0xc0>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5a28:	250c      	movs	r5, #12
	net_buf_unref(buf);
    5a2a:	4620      	mov	r0, r4
    5a2c:	f00a fa9c 	bl	ff68 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    5a30:	4629      	mov	r1, r5
    5a32:	f242 0026 	movw	r0, #8230	; 0x2026
    5a36:	e7d3      	b.n	59e0 <bt_hci_ecc_send+0x68>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    5a38:	89a2      	ldrh	r2, [r4, #12]
    5a3a:	2a3f      	cmp	r2, #63	; 0x3f
    5a3c:	d91c      	bls.n	5a78 <bt_hci_ecc_send+0x100>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a3e:	f3bf 8f5b 	dmb	ish
    5a42:	e853 5f00 	ldrex	r5, [r3]
    5a46:	f045 0202 	orr.w	r2, r5, #2
    5a4a:	e843 2100 	strex	r1, r2, [r3]
    5a4e:	2900      	cmp	r1, #0
    5a50:	d1f7      	bne.n	5a42 <bt_hci_ecc_send+0xca>
    5a52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    5a56:	f015 0502 	ands.w	r5, r5, #2
    5a5a:	d1e5      	bne.n	5a28 <bt_hci_ecc_send+0xb0>
	cmd = (void *)buf->data;
    5a5c:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    5a5e:	480a      	ldr	r0, [pc, #40]	; (5a88 <bt_hci_ecc_send+0x110>)
    5a60:	4631      	mov	r1, r6
    5a62:	f00d fdba 	bl	135da <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    5a66:	f106 0120 	add.w	r1, r6, #32
    5a6a:	4808      	ldr	r0, [pc, #32]	; (5a8c <bt_hci_ecc_send+0x114>)
    5a6c:	f00d fdb5 	bl	135da <sys_memcpy_swap.constprop.2>
    5a70:	4804      	ldr	r0, [pc, #16]	; (5a84 <bt_hci_ecc_send+0x10c>)
    5a72:	f00b fc39 	bl	112e8 <z_impl_k_sem_give>
    5a76:	e7d8      	b.n	5a2a <bt_hci_ecc_send+0xb2>
		status = BT_HCI_ERR_INVALID_PARAM;
    5a78:	2512      	movs	r5, #18
    5a7a:	e7d6      	b.n	5a2a <bt_hci_ecc_send+0xb2>
    5a7c:	20004e98 	.word	0x20004e98
    5a80:	20000238 	.word	0x20000238
    5a84:	200054ac 	.word	0x200054ac
    5a88:	200020c6 	.word	0x200020c6
    5a8c:	200020e6 	.word	0x200020e6

00005a90 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    5a90:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    5a92:	4c0c      	ldr	r4, [pc, #48]	; (5ac4 <bt_hci_ecc_init+0x34>)
    5a94:	490c      	ldr	r1, [pc, #48]	; (5ac8 <bt_hci_ecc_init+0x38>)
    5a96:	b086      	sub	sp, #24
    5a98:	2300      	movs	r3, #0
    5a9a:	220a      	movs	r2, #10
    5a9c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5aa0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    5aa4:	e9cd 3300 	strd	r3, r3, [sp]
    5aa8:	f240 424c 	movw	r2, #1100	; 0x44c
    5aac:	4b07      	ldr	r3, [pc, #28]	; (5acc <bt_hci_ecc_init+0x3c>)
    5aae:	4620      	mov	r0, r4
    5ab0:	f00b fcc0 	bl	11434 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    5ab4:	4906      	ldr	r1, [pc, #24]	; (5ad0 <bt_hci_ecc_init+0x40>)
    5ab6:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    5ab8:	b006      	add	sp, #24
    5aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5abe:	f011 b9f6 	b.w	16eae <z_impl_k_thread_name_set>
    5ac2:	bf00      	nop
    5ac4:	200001cc 	.word	0x200001cc
    5ac8:	20002b60 	.word	0x20002b60
    5acc:	00005809 	.word	0x00005809
    5ad0:	000182b2 	.word	0x000182b2

00005ad4 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5ad4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    5ad6:	7802      	ldrb	r2, [r0, #0]
    5ad8:	2a01      	cmp	r2, #1
{
    5ada:	4604      	mov	r4, r0
    5adc:	460b      	mov	r3, r1
	switch (src->type) {
    5ade:	d017      	beq.n	5b10 <uuid_to_uuid128+0x3c>
    5ae0:	d303      	bcc.n	5aea <uuid_to_uuid128+0x16>
    5ae2:	2a02      	cmp	r2, #2
    5ae4:	d02c      	beq.n	5b40 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5ae6:	bcf0      	pop	{r4, r5, r6, r7}
    5ae8:	4770      	bx	lr
		*dst = uuid128_base;
    5aea:	4a18      	ldr	r2, [pc, #96]	; (5b4c <uuid_to_uuid128+0x78>)
    5aec:	460d      	mov	r5, r1
    5aee:	f102 0710 	add.w	r7, r2, #16
    5af2:	6810      	ldr	r0, [r2, #0]
    5af4:	6851      	ldr	r1, [r2, #4]
    5af6:	462e      	mov	r6, r5
    5af8:	c603      	stmia	r6!, {r0, r1}
    5afa:	3208      	adds	r2, #8
    5afc:	42ba      	cmp	r2, r7
    5afe:	4635      	mov	r5, r6
    5b00:	d1f7      	bne.n	5af2 <uuid_to_uuid128+0x1e>
    5b02:	7812      	ldrb	r2, [r2, #0]
    5b04:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    5b06:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    5b08:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5b0a:	0a12      	lsrs	r2, r2, #8
    5b0c:	739a      	strb	r2, [r3, #14]
    5b0e:	e7ea      	b.n	5ae6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    5b10:	4a0e      	ldr	r2, [pc, #56]	; (5b4c <uuid_to_uuid128+0x78>)
    5b12:	460d      	mov	r5, r1
    5b14:	f102 0710 	add.w	r7, r2, #16
    5b18:	6810      	ldr	r0, [r2, #0]
    5b1a:	6851      	ldr	r1, [r2, #4]
    5b1c:	462e      	mov	r6, r5
    5b1e:	c603      	stmia	r6!, {r0, r1}
    5b20:	3208      	adds	r2, #8
    5b22:	42ba      	cmp	r2, r7
    5b24:	4635      	mov	r5, r6
    5b26:	d1f7      	bne.n	5b18 <uuid_to_uuid128+0x44>
    5b28:	7812      	ldrb	r2, [r2, #0]
    5b2a:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    5b2c:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    5b2e:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5b30:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    5b34:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    5b36:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    5b38:	0a12      	lsrs	r2, r2, #8
    5b3a:	7399      	strb	r1, [r3, #14]
    5b3c:	741a      	strb	r2, [r3, #16]
    5b3e:	e7d2      	b.n	5ae6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    5b40:	4601      	mov	r1, r0
    5b42:	2211      	movs	r2, #17
    5b44:	4618      	mov	r0, r3
}
    5b46:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    5b48:	f00d bc8c 	b.w	13464 <memcpy>
    5b4c:	000182b9 	.word	0x000182b9

00005b50 <le_dhkey_complete>:
{
    5b50:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    5b52:	4c06      	ldr	r4, [pc, #24]	; (5b6c <le_dhkey_complete+0x1c>)
    5b54:	6822      	ldr	r2, [r4, #0]
    5b56:	b132      	cbz	r2, 5b66 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    5b58:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5b5a:	7803      	ldrb	r3, [r0, #0]
    5b5c:	b923      	cbnz	r3, 5b68 <le_dhkey_complete+0x18>
    5b5e:	3001      	adds	r0, #1
    5b60:	4790      	blx	r2
		dh_key_cb = NULL;
    5b62:	2300      	movs	r3, #0
    5b64:	6023      	str	r3, [r4, #0]
}
    5b66:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5b68:	2000      	movs	r0, #0
    5b6a:	e7f9      	b.n	5b60 <le_dhkey_complete+0x10>
    5b6c:	2000023c 	.word	0x2000023c

00005b70 <le_pkey_complete>:
{
    5b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    5b72:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5b74:	480f      	ldr	r0, [pc, #60]	; (5bb4 <le_pkey_complete+0x44>)
    5b76:	f06f 0120 	mvn.w	r1, #32
    5b7a:	f00d fd8f 	bl	1369c <atomic_and>
	if (!evt->status) {
    5b7e:	7833      	ldrb	r3, [r6, #0]
    5b80:	b943      	cbnz	r3, 5b94 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    5b82:	1c71      	adds	r1, r6, #1
    5b84:	2240      	movs	r2, #64	; 0x40
    5b86:	480c      	ldr	r0, [pc, #48]	; (5bb8 <le_pkey_complete+0x48>)
    5b88:	f00d fc6c 	bl	13464 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5b8c:	2110      	movs	r1, #16
    5b8e:	4809      	ldr	r0, [pc, #36]	; (5bb4 <le_pkey_complete+0x44>)
    5b90:	f00d fd75 	bl	1367e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5b94:	4d09      	ldr	r5, [pc, #36]	; (5bbc <le_pkey_complete+0x4c>)
    5b96:	682c      	ldr	r4, [r5, #0]
		cb->func(evt->status ? NULL : evt->key);
    5b98:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5b9a:	b90c      	cbnz	r4, 5ba0 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    5b9c:	602c      	str	r4, [r5, #0]
}
    5b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : evt->key);
    5ba0:	7832      	ldrb	r2, [r6, #0]
    5ba2:	6823      	ldr	r3, [r4, #0]
    5ba4:	2a00      	cmp	r2, #0
    5ba6:	bf0c      	ite	eq
    5ba8:	4638      	moveq	r0, r7
    5baa:	2000      	movne	r0, #0
    5bac:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5bae:	6864      	ldr	r4, [r4, #4]
    5bb0:	e7f3      	b.n	5b9a <le_pkey_complete+0x2a>
    5bb2:	bf00      	nop
    5bb4:	20004f08 	.word	0x20004f08
    5bb8:	20002106 	.word	0x20002106
    5bbc:	20000240 	.word	0x20000240

00005bc0 <hci_le_meta_event>:
{
    5bc0:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5bc2:	2101      	movs	r1, #1
{
    5bc4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5bc6:	3008      	adds	r0, #8
    5bc8:	f010 fbfb 	bl	163c2 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5bcc:	4621      	mov	r1, r4
    5bce:	230a      	movs	r3, #10
    5bd0:	4a02      	ldr	r2, [pc, #8]	; (5bdc <hci_le_meta_event+0x1c>)
    5bd2:	7800      	ldrb	r0, [r0, #0]
}
    5bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5bd8:	f00d bd3a 	b.w	13650 <handle_event>
    5bdc:	00017694 	.word	0x00017694

00005be0 <hci_cmd_done.isra.16>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    5be0:	b538      	push	{r3, r4, r5, lr}
    5be2:	4605      	mov	r5, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5be4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    5be6:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5be8:	f00a f922 	bl	fe30 <net_buf_pool_get>
    5bec:	4b05      	ldr	r3, [pc, #20]	; (5c04 <hci_cmd_done.isra.16+0x24>)
    5bee:	4283      	cmp	r3, r0
    5bf0:	d106      	bne.n	5c00 <hci_cmd_done.isra.16+0x20>
	if (cmd(buf)->sync) {
    5bf2:	69a0      	ldr	r0, [r4, #24]
    5bf4:	b120      	cbz	r0, 5c00 <hci_cmd_done.isra.16+0x20>
		cmd(buf)->status = status;
    5bf6:	7565      	strb	r5, [r4, #21]
}
    5bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5bfc:	f00b bb74 	b.w	112e8 <z_impl_k_sem_give>
    5c00:	bd38      	pop	{r3, r4, r5, pc}
    5c02:	bf00      	nop
    5c04:	200055b8 	.word	0x200055b8

00005c08 <hci_cmd_status>:
{
    5c08:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5c0a:	2104      	movs	r1, #4
{
    5c0c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5c0e:	3008      	adds	r0, #8
    5c10:	f010 fbd7 	bl	163c2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5c14:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5c16:	7800      	ldrb	r0, [r0, #0]
    5c18:	4621      	mov	r1, r4
    5c1a:	f7ff ffe1 	bl	5be0 <hci_cmd_done.isra.16>
	if (ncmd) {
    5c1e:	b125      	cbz	r5, 5c2a <hci_cmd_status+0x22>
    5c20:	4802      	ldr	r0, [pc, #8]	; (5c2c <hci_cmd_status+0x24>)
}
    5c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c26:	f00b bb5f 	b.w	112e8 <z_impl_k_sem_give>
    5c2a:	bd38      	pop	{r3, r4, r5, pc}
    5c2c:	20004f40 	.word	0x20004f40

00005c30 <hci_cmd_complete>:
{
    5c30:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5c32:	2103      	movs	r1, #3
{
    5c34:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5c36:	3008      	adds	r0, #8
    5c38:	f010 fbc3 	bl	163c2 <net_buf_simple_pull_mem>
	status = buf->data[0];
    5c3c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5c3e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5c40:	7818      	ldrb	r0, [r3, #0]
    5c42:	4621      	mov	r1, r4
    5c44:	f7ff ffcc 	bl	5be0 <hci_cmd_done.isra.16>
	if (ncmd) {
    5c48:	b125      	cbz	r5, 5c54 <hci_cmd_complete+0x24>
    5c4a:	4803      	ldr	r0, [pc, #12]	; (5c58 <hci_cmd_complete+0x28>)
}
    5c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c50:	f00b bb4a 	b.w	112e8 <z_impl_k_sem_give>
    5c54:	bd38      	pop	{r3, r4, r5, pc}
    5c56:	bf00      	nop
    5c58:	20004f40 	.word	0x20004f40

00005c5c <hci_tx_thread>:
{
    5c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5c60:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 5d48 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5c64:	4c36      	ldr	r4, [pc, #216]	; (5d40 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5c66:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5c6a:	4836      	ldr	r0, [pc, #216]	; (5d44 <hci_tx_thread+0xe8>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5c6c:	f36f 3310 	bfc	r3, #12, #5
    5c70:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5c74:	f001 f9e6 	bl	7044 <bt_conn_prepare_events>
    5c78:	1c46      	adds	r6, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    5c7a:	f04f 32ff 	mov.w	r2, #4294967295
    5c7e:	4631      	mov	r1, r6
    5c80:	4831      	ldr	r0, [pc, #196]	; (5d48 <hci_tx_thread+0xec>)
    5c82:	f00b fdbd 	bl	11800 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5c86:	2800      	cmp	r0, #0
    5c88:	d053      	beq.n	5d32 <hci_tx_thread+0xd6>
	BT_ASSERT(buf);
    5c8a:	4040      	eors	r0, r0
    5c8c:	f380 8811 	msr	BASEPRI, r0
    5c90:	f04f 0003 	mov.w	r0, #3
    5c94:	df02      	svc	2
		switch (ev->state) {
    5c96:	68eb      	ldr	r3, [r5, #12]
    5c98:	f3c3 3304 	ubfx	r3, r3, #12, #5
    5c9c:	2b04      	cmp	r3, #4
    5c9e:	d131      	bne.n	5d04 <hci_tx_thread+0xa8>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5ca0:	f895 a00c 	ldrb.w	sl, [r5, #12]
    5ca4:	f1ba 0f00 	cmp.w	sl, #0
    5ca8:	d133      	bne.n	5d12 <hci_tx_thread+0xb6>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5caa:	4651      	mov	r1, sl
    5cac:	4658      	mov	r0, fp
    5cae:	f010 fb33 	bl	16318 <net_buf_get>
	BT_ASSERT(buf);
    5cb2:	4607      	mov	r7, r0
    5cb4:	2800      	cmp	r0, #0
    5cb6:	d0e8      	beq.n	5c8a <hci_tx_thread+0x2e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    5cb8:	f04f 31ff 	mov.w	r1, #4294967295
    5cbc:	4648      	mov	r0, r9
    5cbe:	f00b fb3f 	bl	11340 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5cc2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    5cc6:	b118      	cbz	r0, 5cd0 <hci_tx_thread+0x74>
		net_buf_unref(bt_dev.sent_cmd);
    5cc8:	f00a f94e 	bl	ff68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5ccc:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    5cd0:	4638      	mov	r0, r7
    5cd2:	f010 fb4b 	bl	1636c <net_buf_ref>
    5cd6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    5cda:	4638      	mov	r0, r7
    5cdc:	f7ff fe4c 	bl	5978 <bt_hci_ecc_send>
	if (err) {
    5ce0:	b180      	cbz	r0, 5d04 <hci_tx_thread+0xa8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5ce2:	4648      	mov	r0, r9
    5ce4:	f00b fb00 	bl	112e8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    5ce8:	2100      	movs	r1, #0
    5cea:	201f      	movs	r0, #31
    5cec:	f7ff ff78 	bl	5be0 <hci_cmd_done.isra.16>
		net_buf_unref(bt_dev.sent_cmd);
    5cf0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    5cf4:	f00a f938 	bl	ff68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5cf8:	2300      	movs	r3, #0
		net_buf_unref(buf);
    5cfa:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    5cfc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    5d00:	f00a f932 	bl	ff68 <net_buf_unref>
	for (; count; ev++, count--) {
    5d04:	3514      	adds	r5, #20
    5d06:	3e01      	subs	r6, #1
    5d08:	2e00      	cmp	r6, #0
    5d0a:	d1c4      	bne.n	5c96 <hci_tx_thread+0x3a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    5d0c:	f00b fa9c 	bl	11248 <z_impl_k_yield>
    5d10:	e7a9      	b.n	5c66 <hci_tx_thread+0xa>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    5d12:	f1ba 0f01 	cmp.w	sl, #1
    5d16:	d104      	bne.n	5d22 <hci_tx_thread+0xc6>
					conn = CONTAINER_OF(ev->fifo,
    5d18:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    5d1a:	381c      	subs	r0, #28
    5d1c:	f001 f8c8 	bl	6eb0 <bt_conn_notify_tx>
    5d20:	e7f0      	b.n	5d04 <hci_tx_thread+0xa8>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5d22:	f1ba 0f02 	cmp.w	sl, #2
    5d26:	d1ed      	bne.n	5d04 <hci_tx_thread+0xa8>
					conn = CONTAINER_OF(ev->fifo,
    5d28:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    5d2a:	382c      	subs	r0, #44	; 0x2c
    5d2c:	f001 fc2c 	bl	7588 <bt_conn_process_tx>
    5d30:	e7e8      	b.n	5d04 <hci_tx_thread+0xa8>
    5d32:	4d05      	ldr	r5, [pc, #20]	; (5d48 <hci_tx_thread+0xec>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    5d34:	f8df 9014 	ldr.w	r9, [pc, #20]	; 5d4c <hci_tx_thread+0xf0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5d38:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
    5d3c:	e7e4      	b.n	5d08 <hci_tx_thread+0xac>
    5d3e:	bf00      	nop
    5d40:	20004e98 	.word	0x20004e98
    5d44:	20005018 	.word	0x20005018
    5d48:	20005004 	.word	0x20005004
    5d4c:	20004f40 	.word	0x20004f40

00005d50 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5d52:	4e0b      	ldr	r6, [pc, #44]	; (5d80 <id_find+0x30>)
{
    5d54:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5d56:	2500      	movs	r5, #0
    5d58:	79f3      	ldrb	r3, [r6, #7]
    5d5a:	b2ec      	uxtb	r4, r5
    5d5c:	42a3      	cmp	r3, r4
    5d5e:	d802      	bhi.n	5d66 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5d60:	f06f 0401 	mvn.w	r4, #1
    5d64:	e009      	b.n	5d7a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5d66:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5d6a:	2207      	movs	r2, #7
    5d6c:	4431      	add	r1, r6
    5d6e:	4638      	mov	r0, r7
    5d70:	f00d fb68 	bl	13444 <memcmp>
    5d74:	3501      	adds	r5, #1
    5d76:	2800      	cmp	r0, #0
    5d78:	d1ee      	bne.n	5d58 <id_find+0x8>
}
    5d7a:	4620      	mov	r0, r4
    5d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d7e:	bf00      	nop
    5d80:	20004e98 	.word	0x20004e98

00005d84 <slave_update_conn_param>:
{
    5d84:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    5d86:	2108      	movs	r1, #8
{
    5d88:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    5d8a:	3004      	adds	r0, #4
    5d8c:	f00d fd7f 	bl	1388e <atomic_test_bit>
    5d90:	b940      	cbnz	r0, 5da4 <slave_update_conn_param+0x20>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5d92:	f103 0178 	add.w	r1, r3, #120	; 0x78
    5d96:	f241 3288 	movw	r2, #5000	; 0x1388
    5d9a:	4803      	ldr	r0, [pc, #12]	; (5da8 <slave_update_conn_param+0x24>)
}
    5d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5da0:	f00b bbf6 	b.w	11590 <k_delayed_work_submit_to_queue>
    5da4:	bd08      	pop	{r3, pc}
    5da6:	bf00      	nop
    5da8:	20001f38 	.word	0x20001f38

00005dac <bt_hci_cmd_create>:
{
    5dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5db0:	4606      	mov	r6, r0
    5db2:	460f      	mov	r7, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5db4:	480c      	ldr	r0, [pc, #48]	; (5de8 <bt_hci_cmd_create+0x3c>)
    5db6:	f04f 31ff 	mov.w	r1, #4294967295
    5dba:	f010 faa7 	bl	1630c <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5dbe:	f100 0508 	add.w	r5, r0, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5dc2:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5dc4:	2100      	movs	r1, #0
    5dc6:	4628      	mov	r0, r5
    5dc8:	f010 fabf 	bl	1634a <net_buf_simple_reserve>
	cmd(buf)->type = BT_BUF_CMD;
    5dcc:	2300      	movs	r3, #0
    5dce:	7523      	strb	r3, [r4, #20]
	cmd(buf)->opcode = opcode;
    5dd0:	82e6      	strh	r6, [r4, #22]
	cmd(buf)->sync = NULL;
    5dd2:	61a3      	str	r3, [r4, #24]
	hdr = net_buf_add(buf, sizeof(*hdr));
    5dd4:	2103      	movs	r1, #3
    5dd6:	4628      	mov	r0, r5
    5dd8:	f010 facc 	bl	16374 <net_buf_simple_add>
	hdr->param_len = param_len;
    5ddc:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5dde:	8006      	strh	r6, [r0, #0]
}
    5de0:	4620      	mov	r0, r4
    5de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5de6:	bf00      	nop
    5de8:	200055b8 	.word	0x200055b8

00005dec <bt_hci_cmd_send>:
{
    5dec:	b538      	push	{r3, r4, r5, lr}
    5dee:	4605      	mov	r5, r0
	if (!buf) {
    5df0:	460c      	mov	r4, r1
    5df2:	b919      	cbnz	r1, 5dfc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5df4:	f7ff ffda 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
    5df8:	4604      	mov	r4, r0
    5dfa:	b198      	cbz	r0, 5e24 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5dfc:	f640 4335 	movw	r3, #3125	; 0xc35
    5e00:	429d      	cmp	r5, r3
    5e02:	d109      	bne.n	5e18 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    5e04:	4620      	mov	r0, r4
    5e06:	f7ff fdb7 	bl	5978 <bt_hci_ecc_send>
		if (err) {
    5e0a:	4605      	mov	r5, r0
    5e0c:	b110      	cbz	r0, 5e14 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    5e0e:	4620      	mov	r0, r4
    5e10:	f00a f8aa 	bl	ff68 <net_buf_unref>
}
    5e14:	4628      	mov	r0, r5
    5e16:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5e18:	4621      	mov	r1, r4
    5e1a:	4804      	ldr	r0, [pc, #16]	; (5e2c <bt_hci_cmd_send+0x40>)
    5e1c:	f010 fa99 	bl	16352 <net_buf_put>
	return 0;
    5e20:	2500      	movs	r5, #0
    5e22:	e7f7      	b.n	5e14 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    5e24:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5e28:	e7f4      	b.n	5e14 <bt_hci_cmd_send+0x28>
    5e2a:	bf00      	nop
    5e2c:	20004f5c 	.word	0x20004f5c

00005e30 <bt_hci_cmd_send_sync>:
{
    5e30:	b530      	push	{r4, r5, lr}
    5e32:	4615      	mov	r5, r2
    5e34:	b087      	sub	sp, #28
	if (!buf) {
    5e36:	460c      	mov	r4, r1
    5e38:	b919      	cbnz	r1, 5e42 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    5e3a:	f7ff ffb7 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
    5e3e:	4604      	mov	r4, r0
    5e40:	b328      	cbz	r0, 5e8e <bt_hci_cmd_send_sync+0x5e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    5e42:	2201      	movs	r2, #1
    5e44:	2100      	movs	r1, #0
    5e46:	4668      	mov	r0, sp
    5e48:	f011 f81f 	bl	16e8a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5e4c:	f8c4 d018 	str.w	sp, [r4, #24]
	net_buf_ref(buf);
    5e50:	4620      	mov	r0, r4
    5e52:	f010 fa8b 	bl	1636c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5e56:	4621      	mov	r1, r4
    5e58:	480e      	ldr	r0, [pc, #56]	; (5e94 <bt_hci_cmd_send_sync+0x64>)
    5e5a:	f010 fa7a 	bl	16352 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    5e5e:	f242 7110 	movw	r1, #10000	; 0x2710
    5e62:	4668      	mov	r0, sp
    5e64:	f00b fa6c 	bl	11340 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    5e68:	7d63      	ldrb	r3, [r4, #21]
    5e6a:	b14b      	cbz	r3, 5e80 <bt_hci_cmd_send_sync+0x50>
		switch (cmd(buf)->status) {
    5e6c:	2b09      	cmp	r3, #9
			err = -EIO;
    5e6e:	bf0c      	ite	eq
    5e70:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    5e74:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    5e78:	4620      	mov	r0, r4
    5e7a:	f00a f875 	bl	ff68 <net_buf_unref>
    5e7e:	e003      	b.n	5e88 <bt_hci_cmd_send_sync+0x58>
		if (rsp) {
    5e80:	2d00      	cmp	r5, #0
    5e82:	d0f9      	beq.n	5e78 <bt_hci_cmd_send_sync+0x48>
			*rsp = buf;
    5e84:	602c      	str	r4, [r5, #0]
		err = 0;
    5e86:	461d      	mov	r5, r3
}
    5e88:	4628      	mov	r0, r5
    5e8a:	b007      	add	sp, #28
    5e8c:	bd30      	pop	{r4, r5, pc}
			return -ENOBUFS;
    5e8e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5e92:	e7f9      	b.n	5e88 <bt_hci_cmd_send_sync+0x58>
    5e94:	20004f5c 	.word	0x20004f5c

00005e98 <set_advertise_enable>:
{
    5e98:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5e9a:	2101      	movs	r1, #1
{
    5e9c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5e9e:	f242 000a 	movw	r0, #8202	; 0x200a
    5ea2:	f7ff ff83 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    5ea6:	4604      	mov	r4, r0
    5ea8:	b1d8      	cbz	r0, 5ee2 <set_advertise_enable+0x4a>
    5eaa:	3008      	adds	r0, #8
	if (enable) {
    5eac:	b18d      	cbz	r5, 5ed2 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5eae:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5eb0:	f010 fa6f 	bl	16392 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5eb4:	4621      	mov	r1, r4
    5eb6:	2200      	movs	r2, #0
    5eb8:	f242 000a 	movw	r0, #8202	; 0x200a
    5ebc:	f7ff ffb8 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    5ec0:	4604      	mov	r4, r0
    5ec2:	b920      	cbnz	r0, 5ece <set_advertise_enable+0x36>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    5ec4:	b13d      	cbz	r5, 5ed6 <set_advertise_enable+0x3e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5ec6:	2140      	movs	r1, #64	; 0x40
    5ec8:	4807      	ldr	r0, [pc, #28]	; (5ee8 <set_advertise_enable+0x50>)
    5eca:	f00d fbd8 	bl	1367e <atomic_or>
}
    5ece:	4620      	mov	r0, r4
    5ed0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5ed2:	4629      	mov	r1, r5
    5ed4:	e7ec      	b.n	5eb0 <set_advertise_enable+0x18>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5ed6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5eda:	4803      	ldr	r0, [pc, #12]	; (5ee8 <set_advertise_enable+0x50>)
    5edc:	f00d fbde 	bl	1369c <atomic_and>
    5ee0:	e7f5      	b.n	5ece <set_advertise_enable+0x36>
		return -ENOBUFS;
    5ee2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5ee6:	e7f2      	b.n	5ece <set_advertise_enable+0x36>
    5ee8:	20004f08 	.word	0x20004f08

00005eec <hci_disconn_complete>:
{
    5eec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5eee:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    5ef0:	7835      	ldrb	r5, [r6, #0]
    5ef2:	bb1d      	cbnz	r5, 5f3c <hci_disconn_complete+0x50>
	conn = bt_conn_lookup_handle(handle);
    5ef4:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    5ef8:	f001 f9fa 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
    5efc:	4604      	mov	r4, r0
    5efe:	b170      	cbz	r0, 5f1e <hci_disconn_complete+0x32>
	conn->err = evt->reason;
    5f00:	78f3      	ldrb	r3, [r6, #3]
    5f02:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5f04:	4629      	mov	r1, r5
    5f06:	f001 f967 	bl	71d8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    5f0a:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    5f0c:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    5f0e:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    5f10:	b11b      	cbz	r3, 5f1a <hci_disconn_complete+0x2e>
}
    5f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    5f16:	f00e b841 	b.w	13f9c <bt_conn_unref>
	bt_conn_unref(conn);
    5f1a:	f00e f83f 	bl	13f9c <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5f1e:	2109      	movs	r1, #9
    5f20:	4807      	ldr	r0, [pc, #28]	; (5f40 <hci_disconn_complete+0x54>)
    5f22:	f00d fcb4 	bl	1388e <atomic_test_bit>
    5f26:	b148      	cbz	r0, 5f3c <hci_disconn_complete+0x50>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5f28:	2106      	movs	r1, #6
    5f2a:	4805      	ldr	r0, [pc, #20]	; (5f40 <hci_disconn_complete+0x54>)
    5f2c:	f00d fcaf 	bl	1388e <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5f30:	b920      	cbnz	r0, 5f3c <hci_disconn_complete+0x50>
		set_advertise_enable(true);
    5f32:	2001      	movs	r0, #1
}
    5f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		set_advertise_enable(true);
    5f38:	f7ff bfae 	b.w	5e98 <set_advertise_enable>
}
    5f3c:	bd70      	pop	{r4, r5, r6, pc}
    5f3e:	bf00      	nop
    5f40:	20004f08 	.word	0x20004f08

00005f44 <set_random_address>:
{
    5f44:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    5f46:	4d15      	ldr	r5, [pc, #84]	; (5f9c <set_random_address+0x58>)
    5f48:	2206      	movs	r2, #6
    5f4a:	f105 010a 	add.w	r1, r5, #10
    5f4e:	4606      	mov	r6, r0
    5f50:	f00d fa78 	bl	13444 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5f54:	4604      	mov	r4, r0
    5f56:	b1d8      	cbz	r0, 5f90 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5f58:	2106      	movs	r1, #6
    5f5a:	f242 0005 	movw	r0, #8197	; 0x2005
    5f5e:	f7ff ff25 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    5f62:	4604      	mov	r4, r0
    5f64:	b1b0      	cbz	r0, 5f94 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    5f66:	2206      	movs	r2, #6
    5f68:	4631      	mov	r1, r6
    5f6a:	3008      	adds	r0, #8
    5f6c:	f010 fa08 	bl	16380 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5f70:	4621      	mov	r1, r4
    5f72:	2200      	movs	r2, #0
    5f74:	f242 0005 	movw	r0, #8197	; 0x2005
    5f78:	f7ff ff5a 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    5f7c:	4604      	mov	r4, r0
    5f7e:	b938      	cbnz	r0, 5f90 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    5f80:	2206      	movs	r2, #6
    5f82:	4631      	mov	r1, r6
    5f84:	f105 000a 	add.w	r0, r5, #10
    5f88:	f00d fa6c 	bl	13464 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5f8c:	2301      	movs	r3, #1
    5f8e:	726b      	strb	r3, [r5, #9]
}
    5f90:	4620      	mov	r0, r4
    5f92:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5f94:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5f98:	e7fa      	b.n	5f90 <set_random_address+0x4c>
    5f9a:	bf00      	nop
    5f9c:	20004e98 	.word	0x20004e98

00005fa0 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    5fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fa4:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    5fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    5faa:	4615      	mov	r5, r2
    5fac:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    5fae:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    5fb0:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    5fb2:	a902      	add	r1, sp, #8
    5fb4:	f242 0008 	movw	r0, #8200	; 0x2008
{
    5fb8:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    5fbc:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    5fc0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    5fc4:	f00d fe35 	bl	13c32 <set_ad>
	if (err) {
    5fc8:	4604      	mov	r4, r0
    5fca:	bb10      	cbnz	r0, 6012 <__kernel_ram_size+0x12>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    5fcc:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    5fd0:	f1b8 0f00 	cmp.w	r8, #0
    5fd4:	d011      	beq.n	5ffa <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    5fd6:	b115      	cbz	r5, 5fde <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    5fd8:	4602      	mov	r2, r0
    5fda:	42b2      	cmp	r2, r6
    5fdc:	d11d      	bne.n	601a <__kernel_ram_size+0x1a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    5fde:	4d14      	ldr	r5, [pc, #80]	; (6030 <__kernel_ram_size+0x30>)
    5fe0:	4628      	mov	r0, r5
    5fe2:	f00d fa1a 	bl	1341a <strlen>
    5fe6:	2309      	movs	r3, #9
    5fe8:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    5fec:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    5fee:	f88d 0001 	strb.w	r0, [sp, #1]
    5ff2:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    5ff4:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    5ff8:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    5ffa:	9b02      	ldr	r3, [sp, #8]
    5ffc:	b913      	cbnz	r3, 6004 <__kernel_ram_size+0x4>
    5ffe:	9b04      	ldr	r3, [sp, #16]
    6000:	b903      	cbnz	r3, 6004 <__kernel_ram_size+0x4>
    6002:	b137      	cbz	r7, 6012 <__kernel_ram_size+0x12>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    6004:	2202      	movs	r2, #2
    6006:	a902      	add	r1, sp, #8
    6008:	f242 0009 	movw	r0, #8201	; 0x2009
    600c:	f00d fe11 	bl	13c32 <set_ad>
    6010:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    6012:	4620      	mov	r0, r4
    6014:	b006      	add	sp, #24
    6016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    601a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    601e:	3908      	subs	r1, #8
    6020:	2901      	cmp	r1, #1
    6022:	d901      	bls.n	6028 <__kernel_ram_size+0x28>
	for (i = 0; i < ad_len; i++) {
    6024:	3201      	adds	r2, #1
    6026:	e7d8      	b.n	5fda <le_adv_update+0x3a>
				return -EINVAL;
    6028:	f06f 0415 	mvn.w	r4, #21
    602c:	e7f1      	b.n	6012 <__kernel_ram_size+0x12>
    602e:	bf00      	nop
    6030:	00017d87 	.word	0x00017d87

00006034 <le_phy_update_complete>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6034:	6883      	ldr	r3, [r0, #8]
{
    6036:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
    6038:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    603c:	f001 f958 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
    6040:	4604      	mov	r4, r0
    6042:	b1e8      	cbz	r0, 6080 <le_phy_update_complete+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6044:	f06f 0180 	mvn.w	r1, #128	; 0x80
    6048:	3004      	adds	r0, #4
    604a:	f00d fb27 	bl	1369c <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    604e:	0601      	lsls	r1, r0, #24
    6050:	d511      	bpl.n	6076 <le_phy_update_complete+0x42>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    6052:	4b0c      	ldr	r3, [pc, #48]	; (6084 <le_phy_update_complete+0x50>)
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    6054:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6058:	069a      	lsls	r2, r3, #26
    605a:	d506      	bpl.n	606a <le_phy_update_complete+0x36>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    605c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    6060:	069b      	lsls	r3, r3, #26
    6062:	d502      	bpl.n	606a <le_phy_update_complete+0x36>
		hci_le_set_data_len(conn);
    6064:	4620      	mov	r0, r4
    6066:	f00d fe3d 	bl	13ce4 <hci_le_set_data_len.isra.28>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    606a:	78e3      	ldrb	r3, [r4, #3]
    606c:	2b01      	cmp	r3, #1
    606e:	d102      	bne.n	6076 <le_phy_update_complete+0x42>
		slave_update_conn_param(conn);
    6070:	4620      	mov	r0, r4
    6072:	f7ff fe87 	bl	5d84 <slave_update_conn_param>
	bt_conn_unref(conn);
    6076:	4620      	mov	r0, r4
}
    6078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    607c:	f00d bf8e 	b.w	13f9c <bt_conn_unref>
}
    6080:	bd10      	pop	{r4, pc}
    6082:	bf00      	nop
    6084:	20004e98 	.word	0x20004e98

00006088 <le_remote_feat_complete>:
{
    6088:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    608a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    608c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    6090:	f001 f92e 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
    6094:	4604      	mov	r4, r0
    6096:	b370      	cbz	r0, 60f6 <le_remote_feat_complete+0x6e>
	if (!evt->status) {
    6098:	782b      	ldrb	r3, [r5, #0]
    609a:	b923      	cbnz	r3, 60a6 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
    609c:	2208      	movs	r2, #8
    609e:	1ce9      	adds	r1, r5, #3
    60a0:	306c      	adds	r0, #108	; 0x6c
    60a2:	f00d f9df 	bl	13464 <memcpy>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    60a6:	4d14      	ldr	r5, [pc, #80]	; (60f8 <le_remote_feat_complete+0x70>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    60a8:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    60ac:	07d0      	lsls	r0, r2, #31
    60ae:	d510      	bpl.n	60d2 <le_remote_feat_complete+0x4a>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    60b0:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    60b4:	07d9      	lsls	r1, r3, #31
    60b6:	d50c      	bpl.n	60d2 <le_remote_feat_complete+0x4a>
		err = hci_le_set_phy(conn);
    60b8:	4620      	mov	r0, r4
    60ba:	f00d fd43 	bl	13b44 <hci_le_set_phy.isra.29>
		if (!err) {
    60be:	b940      	cbnz	r0, 60d2 <le_remote_feat_complete+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    60c0:	2180      	movs	r1, #128	; 0x80
    60c2:	1d20      	adds	r0, r4, #4
    60c4:	f00d fadb 	bl	1367e <atomic_or>
	bt_conn_unref(conn);
    60c8:	4620      	mov	r0, r4
}
    60ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    60ce:	f00d bf65 	b.w	13f9c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    60d2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    60d6:	069a      	lsls	r2, r3, #26
    60d8:	d506      	bpl.n	60e8 <le_remote_feat_complete+0x60>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    60da:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    60de:	069b      	lsls	r3, r3, #26
    60e0:	d502      	bpl.n	60e8 <le_remote_feat_complete+0x60>
		hci_le_set_data_len(conn);
    60e2:	4620      	mov	r0, r4
    60e4:	f00d fdfe 	bl	13ce4 <hci_le_set_data_len.isra.28>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    60e8:	78e3      	ldrb	r3, [r4, #3]
    60ea:	2b01      	cmp	r3, #1
    60ec:	d1ec      	bne.n	60c8 <le_remote_feat_complete+0x40>
		slave_update_conn_param(conn);
    60ee:	4620      	mov	r0, r4
    60f0:	f7ff fe48 	bl	5d84 <slave_update_conn_param>
    60f4:	e7e8      	b.n	60c8 <le_remote_feat_complete+0x40>
}
    60f6:	bd38      	pop	{r3, r4, r5, pc}
    60f8:	20004e98 	.word	0x20004e98

000060fc <enh_conn_complete>:
{
    60fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    60fe:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6102:	f8b0 6001 	ldrh.w	r6, [r0, #1]
{
    6106:	b085      	sub	sp, #20
    6108:	4605      	mov	r5, r0
    610a:	4870      	ldr	r0, [pc, #448]	; (62cc <enh_conn_complete+0x1d0>)
    610c:	f00d fac6 	bl	1369c <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    6110:	0400      	lsls	r0, r0, #16
    6112:	d504      	bpl.n	611e <enh_conn_complete+0x22>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id, NULL);
    6114:	2200      	movs	r2, #0
    6116:	496e      	ldr	r1, [pc, #440]	; (62d0 <enh_conn_complete+0x1d4>)
    6118:	2002      	movs	r0, #2
    611a:	f003 f987 	bl	942c <bt_keys_foreach>
	if (evt->status) {
    611e:	782b      	ldrb	r3, [r5, #0]
    6120:	b1b3      	cbz	r3, 6150 <enh_conn_complete+0x54>
		conn = find_pending_connect(NULL);
    6122:	2000      	movs	r0, #0
    6124:	f00d fba6 	bl	13874 <find_pending_connect>
		if (!conn) {
    6128:	4604      	mov	r4, r0
    612a:	b178      	cbz	r0, 614c <enh_conn_complete+0x50>
		conn->err = evt->status;
    612c:	782b      	ldrb	r3, [r5, #0]
    612e:	7303      	strb	r3, [r0, #12]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    6130:	2b3c      	cmp	r3, #60	; 0x3c
    6132:	d109      	bne.n	6148 <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6134:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6138:	4864      	ldr	r0, [pc, #400]	; (62cc <enh_conn_complete+0x1d0>)
    613a:	f00d faaf 	bl	1369c <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    613e:	2100      	movs	r1, #0
    6140:	4620      	mov	r0, r4
    6142:	f001 f849 	bl	71d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    6146:	4620      	mov	r0, r4
    6148:	f00d ff28 	bl	13f9c <bt_conn_unref>
}
    614c:	b005      	add	sp, #20
    614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6150:	1d2c      	adds	r4, r5, #4
    6152:	4621      	mov	r1, r4
    6154:	a802      	add	r0, sp, #8
    6156:	f00d fa8f 	bl	13678 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    615a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    615e:	3b02      	subs	r3, #2
    6160:	b2db      	uxtb	r3, r3
    6162:	2b01      	cmp	r3, #1
    6164:	f200 8090 	bhi.w	6288 <enh_conn_complete+0x18c>
    6168:	2206      	movs	r2, #6
    616a:	f105 0111 	add.w	r1, r5, #17
    616e:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6172:	f88d 3008 	strb.w	r3, [sp, #8]
    6176:	f00d f975 	bl	13464 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    617a:	2301      	movs	r3, #1
    617c:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    6180:	a802      	add	r0, sp, #8
    6182:	f00d fb77 	bl	13874 <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    6186:	78eb      	ldrb	r3, [r5, #3]
    6188:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    618a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    618c:	d109      	bne.n	61a2 <enh_conn_complete+0xa6>
    618e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6192:	484e      	ldr	r0, [pc, #312]	; (62cc <enh_conn_complete+0x1d0>)
    6194:	f00d fa82 	bl	1369c <atomic_and>
		if (!conn) {
    6198:	b92c      	cbnz	r4, 61a6 <enh_conn_complete+0xaa>
			conn = bt_conn_add_le(&id_addr);
    619a:	a802      	add	r0, sp, #8
    619c:	f000 ffd8 	bl	7150 <bt_conn_add_le>
    61a0:	4604      	mov	r4, r0
	if (!conn) {
    61a2:	2c00      	cmp	r4, #0
    61a4:	d0d2      	beq.n	614c <enh_conn_complete+0x50>
	conn->handle = handle;
    61a6:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    61a8:	a902      	add	r1, sp, #8
	conn->handle = handle;
    61aa:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    61ae:	f00d fa63 	bl	13678 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    61b2:	7e2a      	ldrb	r2, [r5, #24]
    61b4:	7deb      	ldrb	r3, [r5, #23]
    61b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    61ba:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    61be:	7eaa      	ldrb	r2, [r5, #26]
    61c0:	7e6b      	ldrb	r3, [r5, #25]
    61c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    61c6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    61ca:	7eeb      	ldrb	r3, [r5, #27]
    61cc:	7f2a      	ldrb	r2, [r5, #28]
    61ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    61d2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    61d6:	78ef      	ldrb	r7, [r5, #3]
    61d8:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
    61da:	2300      	movs	r3, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    61dc:	2f01      	cmp	r7, #1
	conn->err = 0U;
    61de:	7323      	strb	r3, [r4, #12]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    61e0:	d120      	bne.n	6224 <enh_conn_complete+0x128>
		conn->id = bt_dev.adv_id;
    61e2:	4e3c      	ldr	r6, [pc, #240]	; (62d4 <enh_conn_complete+0x1d8>)
    61e4:	7a33      	ldrb	r3, [r6, #8]
    61e6:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    61e8:	4669      	mov	r1, sp
    61ea:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    61ee:	f00d fa43 	bl	13678 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    61f2:	7a21      	ldrb	r1, [r4, #8]
    61f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    61f8:	4431      	add	r1, r6
    61fa:	f104 0056 	add.w	r0, r4, #86	; 0x56
    61fe:	f00d fa3b 	bl	13678 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6202:	2109      	movs	r1, #9
    6204:	f106 0070 	add.w	r0, r6, #112	; 0x70
    6208:	f00d fb41 	bl	1388e <atomic_test_bit>
    620c:	b150      	cbz	r0, 6224 <enh_conn_complete+0x128>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    620e:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    6212:	2000      	movs	r0, #0
    6214:	f003 0140 	and.w	r1, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6218:	ea50 0301 	orrs.w	r3, r0, r1
    621c:	d002      	beq.n	6224 <enh_conn_complete+0x128>
			set_advertise_enable(true);
    621e:	4638      	mov	r0, r7
    6220:	f7ff fe3a 	bl	5e98 <set_advertise_enable>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6224:	78e3      	ldrb	r3, [r4, #3]
    6226:	b96b      	cbnz	r3, 6244 <enh_conn_complete+0x148>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    6228:	4669      	mov	r1, sp
    622a:	f104 0056 	add.w	r0, r4, #86	; 0x56
    622e:	f00d fa23 	bl	13678 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    6232:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    6234:	4b27      	ldr	r3, [pc, #156]	; (62d4 <enh_conn_complete+0x1d8>)
					&bt_dev.id_addr[conn->id]);
    6236:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    623a:	4419      	add	r1, r3
    623c:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    6240:	f00d fa1a 	bl	13678 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6244:	2104      	movs	r1, #4
    6246:	4620      	mov	r0, r4
    6248:	f000 ffc6 	bl	71d8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    624c:	7b63      	ldrb	r3, [r4, #13]
    624e:	2b04      	cmp	r3, #4
    6250:	f47f af79 	bne.w	6146 <enh_conn_complete+0x4a>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    6254:	78eb      	ldrb	r3, [r5, #3]
    6256:	b123      	cbz	r3, 6262 <enh_conn_complete+0x166>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    6258:	4b1e      	ldr	r3, [pc, #120]	; (62d4 <enh_conn_complete+0x1d8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    625a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    625e:	0719      	lsls	r1, r3, #28
    6260:	d517      	bpl.n	6292 <enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6262:	2102      	movs	r1, #2
    6264:	f242 0016 	movw	r0, #8214	; 0x2016
    6268:	f7ff fda0 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    626c:	4605      	mov	r5, r0
    626e:	b180      	cbz	r0, 6292 <enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    6270:	2102      	movs	r1, #2
    6272:	3008      	adds	r0, #8
    6274:	f010 f87e 	bl	16374 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6278:	8823      	ldrh	r3, [r4, #0]
    627a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    627c:	4629      	mov	r1, r5
    627e:	f242 0016 	movw	r0, #8214	; 0x2016
    6282:	f7ff fdb3 	bl	5dec <bt_hci_cmd_send>
    6286:	e75e      	b.n	6146 <enh_conn_complete+0x4a>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    6288:	4621      	mov	r1, r4
    628a:	4668      	mov	r0, sp
    628c:	f00d f9f4 	bl	13678 <bt_addr_le_copy>
    6290:	e776      	b.n	6180 <enh_conn_complete+0x84>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    6292:	4d10      	ldr	r5, [pc, #64]	; (62d4 <enh_conn_complete+0x1d8>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6294:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    6298:	07d2      	lsls	r2, r2, #31
    629a:	d508      	bpl.n	62ae <enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    629c:	4620      	mov	r0, r4
    629e:	f00d fc51 	bl	13b44 <hci_le_set_phy.isra.29>
		if (!err) {
    62a2:	b920      	cbnz	r0, 62ae <enh_conn_complete+0x1b2>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    62a4:	2180      	movs	r1, #128	; 0x80
    62a6:	1d20      	adds	r0, r4, #4
    62a8:	f00d f9e9 	bl	1367e <atomic_or>
    62ac:	e74b      	b.n	6146 <enh_conn_complete+0x4a>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    62ae:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    62b2:	069b      	lsls	r3, r3, #26
    62b4:	d502      	bpl.n	62bc <enh_conn_complete+0x1c0>
		hci_le_set_data_len(conn);
    62b6:	4620      	mov	r0, r4
    62b8:	f00d fd14 	bl	13ce4 <hci_le_set_data_len.isra.28>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    62bc:	78e3      	ldrb	r3, [r4, #3]
    62be:	2b01      	cmp	r3, #1
    62c0:	f47f af41 	bne.w	6146 <enh_conn_complete+0x4a>
		slave_update_conn_param(conn);
    62c4:	4620      	mov	r0, r4
    62c6:	f7ff fd5d 	bl	5d84 <slave_update_conn_param>
    62ca:	e73c      	b.n	6146 <enh_conn_complete+0x4a>
    62cc:	20004f08 	.word	0x20004f08
    62d0:	00013d89 	.word	0x00013d89
    62d4:	20004e98 	.word	0x20004e98

000062d8 <le_legacy_conn_complete>:
{
    62d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    62da:	6884      	ldr	r4, [r0, #8]
{
    62dc:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
    62de:	7823      	ldrb	r3, [r4, #0]
    62e0:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
    62e4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    62e8:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
    62ec:	78e3      	ldrb	r3, [r4, #3]
    62ee:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
    62f2:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    62f6:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
    62fa:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    62fe:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
    6302:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    6306:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    630a:	ad05      	add	r5, sp, #20
	enh.clock_accuracy = evt->clock_accuracy;
    630c:	7c63      	ldrb	r3, [r4, #17]
    630e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    6312:	1d21      	adds	r1, r4, #4
    6314:	4628      	mov	r0, r5
    6316:	f00d f9af 	bl	13678 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    631a:	2600      	movs	r6, #0
    631c:	2206      	movs	r2, #6
    631e:	4669      	mov	r1, sp
    6320:	f10d 001b 	add.w	r0, sp, #27
    6324:	9600      	str	r6, [sp, #0]
    6326:	f8ad 6004 	strh.w	r6, [sp, #4]
    632a:	f00d f89b 	bl	13464 <memcpy>
	if (evt->role == BT_HCI_ROLE_SLAVE) {
    632e:	78e3      	ldrb	r3, [r4, #3]
    6330:	2b01      	cmp	r3, #1
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    6332:	bf0a      	itet	eq
    6334:	4b14      	ldreq	r3, [pc, #80]	; (6388 <le_legacy_conn_complete+0xb0>)
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    6336:	4630      	movne	r0, r6
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    6338:	7a18      	ldrbeq	r0, [r3, #8]
    633a:	4629      	mov	r1, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    633c:	f00d fcfc 	bl	13d38 <bt_lookup_id_addr>
	if (id_addr != &enh.peer_addr) {
    6340:	42a8      	cmp	r0, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    6342:	4604      	mov	r4, r0
	if (id_addr != &enh.peer_addr) {
    6344:	d014      	beq.n	6370 <le_legacy_conn_complete+0x98>
    6346:	2206      	movs	r2, #6
    6348:	f10d 0115 	add.w	r1, sp, #21
    634c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    6350:	f00d f888 	bl	13464 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    6354:	4621      	mov	r1, r4
    6356:	4628      	mov	r0, r5
    6358:	f00d f98e 	bl	13678 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    635c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6360:	3302      	adds	r3, #2
    6362:	f88d 3014 	strb.w	r3, [sp, #20]
	enh_conn_complete(&enh);
    6366:	a804      	add	r0, sp, #16
    6368:	f7ff fec8 	bl	60fc <enh_conn_complete>
}
    636c:	b00c      	add	sp, #48	; 0x30
    636e:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    6370:	2300      	movs	r3, #0
    6372:	2206      	movs	r2, #6
    6374:	a902      	add	r1, sp, #8
    6376:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    637a:	9302      	str	r3, [sp, #8]
    637c:	f8ad 300c 	strh.w	r3, [sp, #12]
    6380:	f00d f870 	bl	13464 <memcpy>
    6384:	e7ef      	b.n	6366 <le_legacy_conn_complete+0x8e>
    6386:	bf00      	nop
    6388:	20004e98 	.word	0x20004e98

0000638c <bt_id_add>:
{
    638c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    638e:	4e3f      	ldr	r6, [pc, #252]	; (648c <bt_id_add+0x100>)
    6390:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    6394:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    6398:	4605      	mov	r5, r0
    639a:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    639c:	b10a      	cbz	r2, 63a2 <bt_id_add+0x16>
    639e:	429a      	cmp	r2, r3
    63a0:	d204      	bcs.n	63ac <bt_id_add+0x20>
		bt_dev.le.rl_entries++;
    63a2:	3301      	adds	r3, #1
    63a4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    63a8:	b003      	add	sp, #12
    63aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    63ac:	2103      	movs	r1, #3
    63ae:	2000      	movs	r0, #0
    63b0:	f000 fffe 	bl	73b0 <bt_conn_lookup_state_le>
	if (conn) {
    63b4:	4607      	mov	r7, r0
    63b6:	b168      	cbz	r0, 63d4 <bt_id_add+0x48>
    63b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    63bc:	f106 0070 	add.w	r0, r6, #112	; 0x70
    63c0:	f00d f95d 	bl	1367e <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_ADD;
    63c4:	7a6b      	ldrb	r3, [r5, #9]
    63c6:	f043 0304 	orr.w	r3, r3, #4
    63ca:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    63cc:	4638      	mov	r0, r7
    63ce:	f00d fde5 	bl	13f9c <bt_conn_unref>
		return;
    63d2:	e7e9      	b.n	63a8 <bt_id_add+0x1c>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    63d4:	f106 0070 	add.w	r0, r6, #112	; 0x70
    63d8:	2106      	movs	r1, #6
    63da:	f00d fa58 	bl	1388e <atomic_test_bit>
	if (adv_enabled) {
    63de:	4606      	mov	r6, r0
    63e0:	b110      	cbz	r0, 63e8 <bt_id_add+0x5c>
		set_advertise_enable(false);
    63e2:	4638      	mov	r0, r7
    63e4:	f7ff fd58 	bl	5e98 <set_advertise_enable>
	if (bt_dev.le.rl_entries) {
    63e8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    63ec:	b993      	cbnz	r3, 6414 <bt_id_add+0x88>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    63ee:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    63f2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    63f6:	429a      	cmp	r2, r3
    63f8:	d11a      	bne.n	6430 <bt_id_add+0xa4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    63fa:	2200      	movs	r2, #0
    63fc:	4611      	mov	r1, r2
    63fe:	f242 0029 	movw	r0, #8233	; 0x2029
    6402:	f7ff fd15 	bl	5e30 <bt_hci_cmd_send_sync>
		if (err) {
    6406:	b950      	cbnz	r0, 641e <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    6408:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    640c:	3301      	adds	r3, #1
    640e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    6412:	e004      	b.n	641e <bt_id_add+0x92>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    6414:	2000      	movs	r0, #0
    6416:	f00d fbe2 	bl	13bde <addr_res_enable>
		if (err) {
    641a:	2800      	cmp	r0, #0
    641c:	d0e7      	beq.n	63ee <bt_id_add+0x62>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    641e:	2001      	movs	r0, #1
    6420:	f00d fbdd 	bl	13bde <addr_res_enable>
	if (adv_enabled) {
    6424:	2e00      	cmp	r6, #0
    6426:	d0bf      	beq.n	63a8 <bt_id_add+0x1c>
		set_advertise_enable(true);
    6428:	2001      	movs	r0, #1
    642a:	f7ff fd35 	bl	5e98 <set_advertise_enable>
    642e:	e7bb      	b.n	63a8 <bt_id_add+0x1c>
	err = hci_id_add(&keys->addr, keys->irk.val);
    6430:	1c6f      	adds	r7, r5, #1
    6432:	f105 0126 	add.w	r1, r5, #38	; 0x26
    6436:	4638      	mov	r0, r7
    6438:	f00d fba4 	bl	13b84 <hci_id_add>
	if (err) {
    643c:	4605      	mov	r5, r0
    643e:	2800      	cmp	r0, #0
    6440:	d1ed      	bne.n	641e <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    6442:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    6446:	3301      	adds	r3, #1
    6448:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    644c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    6450:	075b      	lsls	r3, r3, #29
    6452:	d5e4      	bpl.n	641e <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    6454:	4639      	mov	r1, r7
    6456:	4668      	mov	r0, sp
    6458:	f00d f90e 	bl	13678 <bt_addr_le_copy>
	cp.mode = mode;
    645c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    645e:	2108      	movs	r1, #8
    6460:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    6464:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    6468:	f7ff fca0 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    646c:	4604      	mov	r4, r0
    646e:	2800      	cmp	r0, #0
    6470:	d0d5      	beq.n	641e <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    6472:	2208      	movs	r2, #8
    6474:	4669      	mov	r1, sp
    6476:	4410      	add	r0, r2
    6478:	f00f ff82 	bl	16380 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    647c:	462a      	mov	r2, r5
    647e:	4621      	mov	r1, r4
    6480:	f242 004e 	movw	r0, #8270	; 0x204e
    6484:	f7ff fcd4 	bl	5e30 <bt_hci_cmd_send_sync>
    6488:	e7c9      	b.n	641e <bt_id_add+0x92>
    648a:	bf00      	nop
    648c:	20004e98 	.word	0x20004e98

00006490 <bt_id_del>:
{
    6490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    6494:	4e37      	ldr	r6, [pc, #220]	; (6574 <bt_id_del+0xe4>)
    6496:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    649a:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    649e:	4605      	mov	r5, r0
    64a0:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size ||
    64a2:	b112      	cbz	r2, 64aa <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    64a4:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    64a6:	4293      	cmp	r3, r2
    64a8:	dd04      	ble.n	64b4 <bt_id_del+0x24>
		bt_dev.le.rl_entries--;
    64aa:	3b01      	subs	r3, #1
    64ac:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    64b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    64b4:	2103      	movs	r1, #3
    64b6:	2000      	movs	r0, #0
    64b8:	f000 ff7a 	bl	73b0 <bt_conn_lookup_state_le>
	if (conn) {
    64bc:	4680      	mov	r8, r0
    64be:	b170      	cbz	r0, 64de <bt_id_del+0x4e>
    64c0:	f106 0070 	add.w	r0, r6, #112	; 0x70
    64c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    64c8:	f00d f8d9 	bl	1367e <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_DEL;
    64cc:	7a6b      	ldrb	r3, [r5, #9]
    64ce:	f043 0308 	orr.w	r3, r3, #8
    64d2:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    64d4:	4640      	mov	r0, r8
}
    64d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    64da:	f00d bd5f 	b.w	13f9c <bt_conn_unref>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    64de:	2106      	movs	r1, #6
    64e0:	f106 0070 	add.w	r0, r6, #112	; 0x70
    64e4:	f00d f9d3 	bl	1388e <atomic_test_bit>
	if (adv_enabled) {
    64e8:	4607      	mov	r7, r0
    64ea:	b110      	cbz	r0, 64f2 <bt_id_del+0x62>
		set_advertise_enable(false);
    64ec:	4640      	mov	r0, r8
    64ee:	f7ff fcd3 	bl	5e98 <set_advertise_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    64f2:	2000      	movs	r0, #0
    64f4:	f00d fb73 	bl	13bde <addr_res_enable>
	if (err) {
    64f8:	4680      	mov	r8, r0
    64fa:	b988      	cbnz	r0, 6520 <bt_id_del+0x90>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    64fc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    6500:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    6504:	429a      	cmp	r2, r3
    6506:	d218      	bcs.n	653a <bt_id_del+0xaa>
		bt_dev.le.rl_entries--;
    6508:	3b01      	subs	r3, #1
    650a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    650e:	896b      	ldrh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6510:	4919      	ldr	r1, [pc, #100]	; (6578 <bt_id_del+0xe8>)
		keys->keys &= ~BT_KEYS_IRK;
    6512:	f023 0302 	bic.w	r3, r3, #2
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6516:	4602      	mov	r2, r0
		keys->keys &= ~BT_KEYS_IRK;
    6518:	816b      	strh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    651a:	2002      	movs	r0, #2
    651c:	f002 ff86 	bl	942c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    6520:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    6524:	b113      	cbz	r3, 652c <bt_id_del+0x9c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    6526:	2001      	movs	r0, #1
    6528:	f00d fb59 	bl	13bde <addr_res_enable>
	if (adv_enabled) {
    652c:	2f00      	cmp	r7, #0
    652e:	d0bf      	beq.n	64b0 <bt_id_del+0x20>
		set_advertise_enable(true);
    6530:	2001      	movs	r0, #1
}
    6532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		set_advertise_enable(true);
    6536:	f7ff bcaf 	b.w	5e98 <set_advertise_enable>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    653a:	2107      	movs	r1, #7
    653c:	f242 0028 	movw	r0, #8232	; 0x2028
    6540:	f7ff fc34 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    6544:	4606      	mov	r6, r0
    6546:	2800      	cmp	r0, #0
    6548:	d0ea      	beq.n	6520 <bt_id_del+0x90>
	cp = net_buf_add(buf, sizeof(*cp));
    654a:	2107      	movs	r1, #7
    654c:	3008      	adds	r0, #8
    654e:	f00f ff11 	bl	16374 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    6552:	1c69      	adds	r1, r5, #1
    6554:	f00d f890 	bl	13678 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    6558:	4642      	mov	r2, r8
    655a:	4631      	mov	r1, r6
    655c:	f242 0028 	movw	r0, #8232	; 0x2028
    6560:	f7ff fc66 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    6564:	2800      	cmp	r0, #0
    6566:	d1db      	bne.n	6520 <bt_id_del+0x90>
	bt_dev.le.rl_entries--;
    6568:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    656c:	3b01      	subs	r3, #1
    656e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    6572:	e7d5      	b.n	6520 <bt_id_del+0x90>
    6574:	20004e98 	.word	0x20004e98
    6578:	00013bd5 	.word	0x00013bd5

0000657c <id_create.isra.26>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    657c:	b530      	push	{r4, r5, lr}
    657e:	4d14      	ldr	r5, [pc, #80]	; (65d0 <id_create.isra.26+0x54>)
    6580:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6584:	b085      	sub	sp, #20
    6586:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6588:	460c      	mov	r4, r1
    658a:	b179      	cbz	r1, 65ac <id_create.isra.26+0x30>
    658c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    658e:	2207      	movs	r2, #7
    6590:	4669      	mov	r1, sp
    6592:	4620      	mov	r0, r4
    6594:	9300      	str	r3, [sp, #0]
    6596:	f8cd 3003 	str.w	r3, [sp, #3]
    659a:	f00c ff53 	bl	13444 <memcmp>
    659e:	b128      	cbz	r0, 65ac <id_create.isra.26+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    65a0:	4621      	mov	r1, r4
    65a2:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    65a4:	f00d f868 	bl	13678 <bt_addr_le_copy>
}
    65a8:	b005      	add	sp, #20
    65aa:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    65ac:	a802      	add	r0, sp, #8
    65ae:	f00d fbfb 	bl	13da8 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    65b2:	a802      	add	r0, sp, #8
    65b4:	f7ff fbcc 	bl	5d50 <id_find>
    65b8:	2800      	cmp	r0, #0
    65ba:	daf7      	bge.n	65ac <id_create.isra.26+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    65bc:	a902      	add	r1, sp, #8
    65be:	4628      	mov	r0, r5
    65c0:	f00d f85a 	bl	13678 <bt_addr_le_copy>
		if (addr) {
    65c4:	2c00      	cmp	r4, #0
    65c6:	d0ef      	beq.n	65a8 <id_create.isra.26+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    65c8:	4629      	mov	r1, r5
    65ca:	4620      	mov	r0, r4
    65cc:	e7ea      	b.n	65a4 <id_create.isra.26+0x28>
    65ce:	bf00      	nop
    65d0:	20004e98 	.word	0x20004e98

000065d4 <bt_recv>:
{
    65d4:	b570      	push	{r4, r5, r6, lr}
	switch (bt_buf_get_type(buf)) {
    65d6:	7d05      	ldrb	r5, [r0, #20]
    65d8:	2d01      	cmp	r5, #1
{
    65da:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    65dc:	d02e      	beq.n	663c <bt_recv+0x68>
    65de:	2d03      	cmp	r5, #3
    65e0:	d140      	bne.n	6664 <bt_recv+0x90>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    65e2:	8983      	ldrh	r3, [r0, #12]
    65e4:	2b03      	cmp	r3, #3
    65e6:	d805      	bhi.n	65f4 <bt_recv+0x20>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    65e8:	4040      	eors	r0, r0
    65ea:	f380 8811 	msr	BASEPRI, r0
    65ee:	f04f 0003 	mov.w	r0, #3
    65f2:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    65f4:	2104      	movs	r1, #4
    65f6:	3008      	adds	r0, #8
    65f8:	f00f fee3 	bl	163c2 <net_buf_simple_pull_mem>
	acl(buf)->id = BT_CONN_ID_INVALID;
    65fc:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    65fe:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    6600:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    6602:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    6604:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    6606:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    660a:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    660c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    660e:	d003      	beq.n	6618 <bt_recv+0x44>
	net_buf_unref(buf);
    6610:	4620      	mov	r0, r4
    6612:	f009 fca9 	bl	ff68 <net_buf_unref>
    6616:	e00f      	b.n	6638 <bt_recv+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6618:	f000 fe6a 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
    661c:	4605      	mov	r5, r0
    661e:	2800      	cmp	r0, #0
    6620:	d0f6      	beq.n	6610 <bt_recv+0x3c>
	acl(buf)->id = bt_conn_index(conn);
    6622:	f001 f833 	bl	768c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6626:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    6628:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    662a:	4621      	mov	r1, r4
    662c:	4628      	mov	r0, r5
    662e:	f00d fc26 	bl	13e7e <bt_conn_recv>
	bt_conn_unref(conn);
    6632:	4628      	mov	r0, r5
    6634:	f00d fcb2 	bl	13f9c <bt_conn_unref>
		return 0;
    6638:	2000      	movs	r0, #0
}
    663a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    663c:	8983      	ldrh	r3, [r0, #12]
    663e:	2b01      	cmp	r3, #1
    6640:	d9d2      	bls.n	65e8 <bt_recv+0x14>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6642:	2102      	movs	r1, #2
    6644:	3008      	adds	r0, #8
    6646:	f00f febc 	bl	163c2 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    664a:	7800      	ldrb	r0, [r0, #0]
    664c:	2813      	cmp	r0, #19
    664e:	d803      	bhi.n	6658 <bt_recv+0x84>
    6650:	4085      	lsls	r5, r0
    6652:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    6656:	d1c7      	bne.n	65e8 <bt_recv+0x14>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6658:	2305      	movs	r3, #5
    665a:	4a05      	ldr	r2, [pc, #20]	; (6670 <bt_recv+0x9c>)
    665c:	4621      	mov	r1, r4
    665e:	f00c fff7 	bl	13650 <handle_event>
    6662:	e7d5      	b.n	6610 <bt_recv+0x3c>
		net_buf_unref(buf);
    6664:	f009 fc80 	bl	ff68 <net_buf_unref>
		return -EINVAL;
    6668:	f06f 0015 	mvn.w	r0, #21
    666c:	e7e5      	b.n	663a <bt_recv+0x66>
    666e:	bf00      	nop
    6670:	00017724 	.word	0x00017724

00006674 <bt_recv_prio>:
{
    6674:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6676:	7d05      	ldrb	r5, [r0, #20]
    6678:	2d01      	cmp	r5, #1
{
    667a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    667c:	d005      	beq.n	668a <bt_recv_prio+0x16>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    667e:	4040      	eors	r0, r0
    6680:	f380 8811 	msr	BASEPRI, r0
    6684:	f04f 0003 	mov.w	r0, #3
    6688:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    668a:	8983      	ldrh	r3, [r0, #12]
    668c:	2b01      	cmp	r3, #1
    668e:	d9f6      	bls.n	667e <bt_recv_prio+0xa>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6690:	2102      	movs	r1, #2
    6692:	3008      	adds	r0, #8
    6694:	f00f fe95 	bl	163c2 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6698:	7800      	ldrb	r0, [r0, #0]
    669a:	2813      	cmp	r0, #19
    669c:	d8ef      	bhi.n	667e <bt_recv_prio+0xa>
    669e:	4085      	lsls	r5, r0
    66a0:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    66a4:	d0eb      	beq.n	667e <bt_recv_prio+0xa>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    66a6:	2303      	movs	r3, #3
    66a8:	4a04      	ldr	r2, [pc, #16]	; (66bc <bt_recv_prio+0x48>)
    66aa:	4621      	mov	r1, r4
    66ac:	f00c ffd0 	bl	13650 <handle_event>
	net_buf_unref(buf);
    66b0:	4620      	mov	r0, r4
    66b2:	f009 fc59 	bl	ff68 <net_buf_unref>
}
    66b6:	2000      	movs	r0, #0
    66b8:	bd38      	pop	{r3, r4, r5, pc}
    66ba:	bf00      	nop
    66bc:	0001774c 	.word	0x0001774c

000066c0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    66c0:	4a08      	ldr	r2, [pc, #32]	; (66e4 <bt_hci_driver_register+0x24>)
    66c2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    66c6:	b93b      	cbnz	r3, 66d8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    66c8:	68c1      	ldr	r1, [r0, #12]
    66ca:	b141      	cbz	r1, 66de <bt_hci_driver_register+0x1e>
    66cc:	6901      	ldr	r1, [r0, #16]
    66ce:	b131      	cbz	r1, 66de <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    66d0:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    66d4:	4618      	mov	r0, r3
    66d6:	4770      	bx	lr
		return -EALREADY;
    66d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    66dc:	4770      	bx	lr
		return -EINVAL;
    66de:	f06f 0015 	mvn.w	r0, #21
}
    66e2:	4770      	bx	lr
    66e4:	20004e98 	.word	0x20004e98

000066e8 <bt_finalize_init>:
    66e8:	2102      	movs	r1, #2
    66ea:	4801      	ldr	r0, [pc, #4]	; (66f0 <bt_finalize_init+0x8>)
    66ec:	f00c bfc7 	b.w	1367e <atomic_or>
    66f0:	20004f08 	.word	0x20004f08

000066f4 <bt_get_name>:
}
    66f4:	4800      	ldr	r0, [pc, #0]	; (66f8 <bt_get_name+0x4>)
    66f6:	4770      	bx	lr
    66f8:	00017d87 	.word	0x00017d87

000066fc <bt_id_create>:
{
    66fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    66fe:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6700:	4606      	mov	r6, r0
    6702:	b928      	cbnz	r0, 6710 <bt_id_create+0x14>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6704:	b1f4      	cbz	r4, 6744 <bt_id_create+0x48>
			return -EINVAL;
    6706:	f06f 0515 	mvn.w	r5, #21
}
    670a:	4628      	mov	r0, r5
    670c:	b002      	add	sp, #8
    670e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6710:	2300      	movs	r3, #0
    6712:	2207      	movs	r2, #7
    6714:	4669      	mov	r1, sp
    6716:	9300      	str	r3, [sp, #0]
    6718:	f8cd 3003 	str.w	r3, [sp, #3]
    671c:	f00c fe92 	bl	13444 <memcmp>
    6720:	2800      	cmp	r0, #0
    6722:	d0ef      	beq.n	6704 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6724:	7833      	ldrb	r3, [r6, #0]
    6726:	2b01      	cmp	r3, #1
    6728:	d1ed      	bne.n	6706 <bt_id_create+0xa>
    672a:	79b3      	ldrb	r3, [r6, #6]
    672c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6730:	2bc0      	cmp	r3, #192	; 0xc0
    6732:	d1e8      	bne.n	6706 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6734:	4630      	mov	r0, r6
    6736:	f7ff fb0b 	bl	5d50 <id_find>
    673a:	2800      	cmp	r0, #0
    673c:	dbe2      	blt.n	6704 <bt_id_create+0x8>
			return -EALREADY;
    673e:	f06f 0544 	mvn.w	r5, #68	; 0x44
    6742:	e7e2      	b.n	670a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6744:	4b0d      	ldr	r3, [pc, #52]	; (677c <bt_id_create+0x80>)
    6746:	79dc      	ldrb	r4, [r3, #7]
    6748:	2c01      	cmp	r4, #1
    674a:	d013      	beq.n	6774 <bt_id_create+0x78>
	new_id = bt_dev.id_count++;
    674c:	1c62      	adds	r2, r4, #1
    674e:	71da      	strb	r2, [r3, #7]
    6750:	4625      	mov	r5, r4
	if (new_id == BT_ID_DEFAULT &&
    6752:	b954      	cbnz	r4, 676a <bt_id_create+0x6e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6754:	2101      	movs	r1, #1
    6756:	f103 0070 	add.w	r0, r3, #112	; 0x70
    675a:	f00d f898 	bl	1388e <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    675e:	b920      	cbnz	r0, 676a <bt_id_create+0x6e>
    6760:	2108      	movs	r1, #8
    6762:	f103 0070 	add.w	r0, r3, #112	; 0x70
    6766:	f00c ff8a 	bl	1367e <atomic_or>
	id_create(new_id, addr, irk);
    676a:	4631      	mov	r1, r6
    676c:	4620      	mov	r0, r4
    676e:	f7ff ff05 	bl	657c <id_create.isra.26>
	return new_id;
    6772:	e7ca      	b.n	670a <bt_id_create+0xe>
		return -ENOMEM;
    6774:	f06f 050b 	mvn.w	r5, #11
    6778:	e7c7      	b.n	670a <bt_id_create+0xe>
    677a:	bf00      	nop
    677c:	20004e98 	.word	0x20004e98

00006780 <bt_setup_id_addr>:
{
    6780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    6784:	4d23      	ldr	r5, [pc, #140]	; (6814 <bt_setup_id_addr+0x94>)
    6786:	79e9      	ldrb	r1, [r5, #7]
{
    6788:	b085      	sub	sp, #20
	if (!bt_dev.id_count) {
    678a:	b929      	cbnz	r1, 6798 <bt_setup_id_addr+0x18>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    678c:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    6790:	07db      	lsls	r3, r3, #31
    6792:	d406      	bmi.n	67a2 <bt_setup_id_addr+0x22>
		bt_dev.id_count = bt_read_static_addr(addrs);
    6794:	2300      	movs	r3, #0
    6796:	71eb      	strb	r3, [r5, #7]
	return bt_id_create(NULL, NULL);
    6798:	2100      	movs	r1, #0
    679a:	4608      	mov	r0, r1
    679c:	f7ff ffae 	bl	66fc <bt_id_create>
    67a0:	e022      	b.n	67e8 <bt_setup_id_addr+0x68>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    67a2:	aa01      	add	r2, sp, #4
    67a4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    67a8:	f7ff fb42 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    67ac:	4604      	mov	r4, r0
    67ae:	2800      	cmp	r0, #0
    67b0:	d1f0      	bne.n	6794 <bt_setup_id_addr+0x14>
	rp = (void *)rsp->data;
    67b2:	9b01      	ldr	r3, [sp, #4]
    67b4:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    67b6:	7877      	ldrb	r7, [r6, #1]
    67b8:	f117 0800 	adds.w	r8, r7, #0
    67bc:	bf18      	it	ne
    67be:	f04f 0801 	movne.w	r8, #1
	for (i = 0; i < cnt; i++) {
    67c2:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    67c4:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    67c8:	3602      	adds	r6, #2
	for (i = 0; i < cnt; i++) {
    67ca:	4598      	cmp	r8, r3
    67cc:	dc0f      	bgt.n	67ee <bt_setup_id_addr+0x6e>
	net_buf_unref(rsp);
    67ce:	9801      	ldr	r0, [sp, #4]
    67d0:	f009 fbca 	bl	ff68 <net_buf_unref>
		bt_dev.id_count = bt_read_static_addr(addrs);
    67d4:	f885 8007 	strb.w	r8, [r5, #7]
		if (bt_dev.id_count) {
    67d8:	2f00      	cmp	r7, #0
    67da:	d0dd      	beq.n	6798 <bt_setup_id_addr+0x18>
			for (i = 0; i < bt_dev.id_count; i++) {
    67dc:	79eb      	ldrb	r3, [r5, #7]
    67de:	42a3      	cmp	r3, r4
    67e0:	dc0f      	bgt.n	6802 <bt_setup_id_addr+0x82>
			return set_random_address(&bt_dev.id_addr[0].a);
    67e2:	480d      	ldr	r0, [pc, #52]	; (6818 <bt_setup_id_addr+0x98>)
    67e4:	f7ff fbae 	bl	5f44 <set_random_address>
}
    67e8:	b005      	add	sp, #20
    67ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    67ee:	2206      	movs	r2, #6
    67f0:	4631      	mov	r1, r6
    67f2:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    67f6:	f88d 9008 	strb.w	r9, [sp, #8]
    67fa:	f00c fe33 	bl	13464 <memcpy>
	for (i = 0; i < cnt; i++) {
    67fe:	2301      	movs	r3, #1
    6800:	e7e3      	b.n	67ca <bt_setup_id_addr+0x4a>
				id_create(i, &addrs[i], NULL);
    6802:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    6806:	ab02      	add	r3, sp, #8
    6808:	b2e0      	uxtb	r0, r4
    680a:	4419      	add	r1, r3
    680c:	f7ff feb6 	bl	657c <id_create.isra.26>
			for (i = 0; i < bt_dev.id_count; i++) {
    6810:	3401      	adds	r4, #1
    6812:	e7e3      	b.n	67dc <bt_setup_id_addr+0x5c>
    6814:	20004e98 	.word	0x20004e98
    6818:	20004e99 	.word	0x20004e99

0000681c <bt_enable>:
{
    681c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    681e:	4d26      	ldr	r5, [pc, #152]	; (68b8 <bt_enable+0x9c>)
    6820:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    6824:	b086      	sub	sp, #24
    6826:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6828:	2b00      	cmp	r3, #0
    682a:	d03f      	beq.n	68ac <bt_enable+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    682c:	2101      	movs	r1, #1
    682e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    6832:	f00c ff24 	bl	1367e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6836:	f010 0001 	ands.w	r0, r0, #1
    683a:	d13a      	bne.n	68b2 <bt_enable+0x96>
	ready_cb = cb;
    683c:	4b1f      	ldr	r3, [pc, #124]	; (68bc <bt_enable+0xa0>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    683e:	4920      	ldr	r1, [pc, #128]	; (68c0 <bt_enable+0xa4>)
    6840:	601e      	str	r6, [r3, #0]
    6842:	f06f 0308 	mvn.w	r3, #8
    6846:	f44f 7220 	mov.w	r2, #640	; 0x280
    684a:	e9cd 0302 	strd	r0, r3, [sp, #8]
    684e:	e9cd 0004 	strd	r0, r0, [sp, #16]
    6852:	4b1c      	ldr	r3, [pc, #112]	; (68c4 <bt_enable+0xa8>)
    6854:	e9cd 0000 	strd	r0, r0, [sp]
    6858:	481b      	ldr	r0, [pc, #108]	; (68c8 <bt_enable+0xac>)
    685a:	f00a fdeb 	bl	11434 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    685e:	491b      	ldr	r1, [pc, #108]	; (68cc <bt_enable+0xb0>)
    6860:	4819      	ldr	r0, [pc, #100]	; (68c8 <bt_enable+0xac>)
    6862:	f010 fb24 	bl	16eae <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    6866:	f7ff f913 	bl	5a90 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    686a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    686e:	68db      	ldr	r3, [r3, #12]
    6870:	4798      	blx	r3
	if (err) {
    6872:	4604      	mov	r4, r0
    6874:	b950      	cbnz	r0, 688c <bt_enable+0x70>
	if (!cb) {
    6876:	b966      	cbnz	r6, 6892 <bt_enable+0x76>
	err = hci_init();
    6878:	f7fa f892 	bl	9a0 <hci_init>
	if (err) {
    687c:	4604      	mov	r4, r0
    687e:	b928      	cbnz	r0, 688c <bt_enable+0x70>
		err = bt_conn_init();
    6880:	f000 ff10 	bl	76a4 <bt_conn_init>
		if (err) {
    6884:	4604      	mov	r4, r0
    6886:	b908      	cbnz	r0, 688c <bt_enable+0x70>
	bt_finalize_init();
    6888:	f7ff ff2e 	bl	66e8 <bt_finalize_init>
}
    688c:	4620      	mov	r0, r4
    688e:	b006      	add	sp, #24
    6890:	bd70      	pop	{r4, r5, r6, pc}
    6892:	2101      	movs	r1, #1
    6894:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    6898:	f00c fef1 	bl	1367e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    689c:	07c3      	lsls	r3, r0, #31
    689e:	d4f5      	bmi.n	688c <bt_enable+0x70>
		k_queue_append(&work_q->queue, work);
    68a0:	f105 0164 	add.w	r1, r5, #100	; 0x64
    68a4:	480a      	ldr	r0, [pc, #40]	; (68d0 <bt_enable+0xb4>)
    68a6:	f010 f954 	bl	16b52 <k_queue_append>
    68aa:	e7ef      	b.n	688c <bt_enable+0x70>
		return -ENODEV;
    68ac:	f06f 0412 	mvn.w	r4, #18
    68b0:	e7ec      	b.n	688c <bt_enable+0x70>
		return -EALREADY;
    68b2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    68b6:	e7e9      	b.n	688c <bt_enable+0x70>
    68b8:	20004e98 	.word	0x20004e98
    68bc:	20000244 	.word	0x20000244
    68c0:	20002fb0 	.word	0x20002fb0
    68c4:	00005c5d 	.word	0x00005c5d
    68c8:	20000248 	.word	0x20000248
    68cc:	000182ca 	.word	0x000182ca
    68d0:	20001f38 	.word	0x20001f38

000068d4 <init_work>:
{
    68d4:	b510      	push	{r4, lr}
	err = hci_init();
    68d6:	f7fa f863 	bl	9a0 <hci_init>
	if (err) {
    68da:	4604      	mov	r4, r0
    68dc:	b928      	cbnz	r0, 68ea <init_work+0x16>
		err = bt_conn_init();
    68de:	f000 fee1 	bl	76a4 <bt_conn_init>
		if (err) {
    68e2:	4604      	mov	r4, r0
    68e4:	b908      	cbnz	r0, 68ea <init_work+0x16>
	bt_finalize_init();
    68e6:	f7ff feff 	bl	66e8 <bt_finalize_init>
	if (ready_cb) {
    68ea:	4b04      	ldr	r3, [pc, #16]	; (68fc <init_work+0x28>)
    68ec:	681b      	ldr	r3, [r3, #0]
    68ee:	b11b      	cbz	r3, 68f8 <init_work+0x24>
		ready_cb(err);
    68f0:	4620      	mov	r0, r4
}
    68f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    68f6:	4718      	bx	r3
}
    68f8:	bd10      	pop	{r4, pc}
    68fa:	bf00      	nop
    68fc:	20000244 	.word	0x20000244

00006900 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    6900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const bt_addr_le_t *id_addr;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6904:	4e8e      	ldr	r6, [pc, #568]	; (6b40 <bt_le_adv_start_internal+0x240>)
{
    6906:	b089      	sub	sp, #36	; 0x24
    6908:	4605      	mov	r5, r0
    690a:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    690c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    6910:	2101      	movs	r1, #1
{
    6912:	4617      	mov	r7, r2
    6914:	4699      	mov	r9, r3
    6916:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    691a:	f00c ffb8 	bl	1388e <atomic_test_bit>
    691e:	2800      	cmp	r0, #0
    6920:	f000 8104 	beq.w	6b2c <bt_le_adv_start_internal+0x22c>
	if (param->id >= bt_dev.id_count ||
    6924:	7828      	ldrb	r0, [r5, #0]
    6926:	79f3      	ldrb	r3, [r6, #7]
    6928:	4283      	cmp	r3, r0
    692a:	d805      	bhi.n	6938 <bt_le_adv_start_internal+0x38>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    692c:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	return 0;
}
    6930:	4620      	mov	r0, r4
    6932:	b009      	add	sp, #36	; 0x24
    6934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    6938:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    693c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    693e:	2207      	movs	r2, #7
    6940:	a902      	add	r1, sp, #8
    6942:	4430      	add	r0, r6
    6944:	9302      	str	r3, [sp, #8]
    6946:	f8cd 300b 	str.w	r3, [sp, #11]
    694a:	f00c fd7b 	bl	13444 <memcmp>
	if (param->id >= bt_dev.id_count ||
    694e:	2800      	cmp	r0, #0
    6950:	d0ec      	beq.n	692c <bt_le_adv_start_internal+0x2c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6952:	786b      	ldrb	r3, [r5, #1]
    6954:	07da      	lsls	r2, r3, #31
    6956:	d405      	bmi.n	6964 <bt_le_adv_start_internal+0x64>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    6958:	7c32      	ldrb	r2, [r6, #16]
    695a:	2a08      	cmp	r2, #8
    695c:	d802      	bhi.n	6964 <bt_le_adv_start_internal+0x64>
    695e:	886a      	ldrh	r2, [r5, #2]
    6960:	2a9f      	cmp	r2, #159	; 0x9f
    6962:	d9e3      	bls.n	692c <bt_le_adv_start_internal+0x2c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    6964:	06db      	lsls	r3, r3, #27
    6966:	d402      	bmi.n	696e <bt_le_adv_start_internal+0x6e>
    6968:	f1b8 0f00 	cmp.w	r8, #0
    696c:	d108      	bne.n	6980 <bt_le_adv_start_internal+0x80>
		if (param->interval_min > param->interval_max ||
    696e:	886a      	ldrh	r2, [r5, #2]
    6970:	88ab      	ldrh	r3, [r5, #4]
    6972:	429a      	cmp	r2, r3
    6974:	d8da      	bhi.n	692c <bt_le_adv_start_internal+0x2c>
    6976:	2a1f      	cmp	r2, #31
    6978:	d9d8      	bls.n	692c <bt_le_adv_start_internal+0x2c>
		    param->interval_min < 0x0020 ||
    697a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    697e:	d8d5      	bhi.n	692c <bt_le_adv_start_internal+0x2c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6980:	2106      	movs	r1, #6
    6982:	4870      	ldr	r0, [pc, #448]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6984:	f00c ff83 	bl	1388e <atomic_test_bit>
    6988:	2800      	cmp	r0, #0
    698a:	f040 80d2 	bne.w	6b32 <bt_le_adv_start_internal+0x232>
	if (!dir_adv) {
    698e:	f1b8 0f00 	cmp.w	r8, #0
    6992:	d07e      	beq.n	6a92 <bt_le_adv_start_internal+0x192>
	(void)memset(&set_param, 0, sizeof(set_param));
    6994:	220f      	movs	r2, #15
    6996:	2100      	movs	r1, #0
    6998:	a804      	add	r0, sp, #16
    699a:	f00c fd90 	bl	134be <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    699e:	886b      	ldrh	r3, [r5, #2]
    69a0:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    69a4:	88ab      	ldrh	r3, [r5, #4]
    69a6:	f8ad 3012 	strh.w	r3, [sp, #18]
	set_param.channel_map  = 0x07;
    69aa:	2307      	movs	r3, #7
    69ac:	f88d 301d 	strb.w	r3, [sp, #29]
	if (bt_dev.adv_id != param->id) {
    69b0:	7a32      	ldrb	r2, [r6, #8]
    69b2:	782b      	ldrb	r3, [r5, #0]
    69b4:	429a      	cmp	r2, r3
    69b6:	d004      	beq.n	69c2 <bt_le_adv_start_internal+0xc2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    69b8:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    69bc:	4861      	ldr	r0, [pc, #388]	; (6b44 <bt_le_adv_start_internal+0x244>)
    69be:	f00c fe6d 	bl	1369c <atomic_and>
	bt_dev.adv_id = param->id;
    69c2:	782f      	ldrb	r7, [r5, #0]
    69c4:	7237      	strb	r7, [r6, #8]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    69c6:	786b      	ldrb	r3, [r5, #1]
    69c8:	f013 0401 	ands.w	r4, r3, #1
    69cc:	d076      	beq.n	6abc <bt_le_adv_start_internal+0x1bc>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    69ce:	00fc      	lsls	r4, r7, #3
    69d0:	1be3      	subs	r3, r4, r7
    69d2:	5cf3      	ldrb	r3, [r6, r3]
    69d4:	2b01      	cmp	r3, #1
    69d6:	d105      	bne.n	69e4 <bt_le_adv_start_internal+0xe4>
				set_random_address(&id_addr->a);
    69d8:	2007      	movs	r0, #7
    69da:	fb10 3007 	smlabb	r0, r0, r7, r3
    69de:	4430      	add	r0, r6
    69e0:	f7ff fab0 	bl	5f44 <set_random_address>
			set_param.own_addr_type = id_addr->type;
    69e4:	1be7      	subs	r7, r4, r7
    69e6:	5df3      	ldrb	r3, [r6, r7]
    69e8:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    69ec:	f1b8 0f00 	cmp.w	r8, #0
    69f0:	d061      	beq.n	6ab6 <bt_le_adv_start_internal+0x1b6>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    69f2:	786b      	ldrb	r3, [r5, #1]
    69f4:	06df      	lsls	r7, r3, #27
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    69f6:	bf4c      	ite	mi
    69f8:	2304      	movmi	r3, #4
				set_param.type = BT_LE_ADV_DIRECT_IND;
    69fa:	2301      	movpl	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, peer);
    69fc:	4641      	mov	r1, r8
    69fe:	f10d 0016 	add.w	r0, sp, #22
				set_param.type = BT_LE_ADV_DIRECT_IND;
    6a02:	f88d 3014 	strb.w	r3, [sp, #20]
			bt_addr_le_copy(&set_param.direct_addr, peer);
    6a06:	f00c fe37 	bl	13678 <bt_addr_le_copy>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    6a0a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    6a0e:	065e      	lsls	r6, r3, #25
    6a10:	d508      	bpl.n	6a24 <bt_le_adv_start_internal+0x124>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
    6a12:	786b      	ldrb	r3, [r5, #1]
    6a14:	069c      	lsls	r4, r3, #26
    6a16:	d505      	bpl.n	6a24 <bt_le_adv_start_internal+0x124>
				set_param.own_addr_type |=
    6a18:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6a1c:	f043 0302 	orr.w	r3, r3, #2
    6a20:	f88d 3015 	strb.w	r3, [sp, #21]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    6a24:	210f      	movs	r1, #15
    6a26:	f242 0006 	movw	r0, #8198	; 0x2006
    6a2a:	f7ff f9bf 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    6a2e:	4604      	mov	r4, r0
    6a30:	2800      	cmp	r0, #0
    6a32:	f000 8081 	beq.w	6b38 <bt_le_adv_start_internal+0x238>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    6a36:	220f      	movs	r2, #15
    6a38:	a904      	add	r1, sp, #16
    6a3a:	3008      	adds	r0, #8
    6a3c:	f00f fca0 	bl	16380 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    6a40:	4621      	mov	r1, r4
    6a42:	2200      	movs	r2, #0
    6a44:	f242 0006 	movw	r0, #8198	; 0x2006
    6a48:	f7ff f9f2 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    6a4c:	4604      	mov	r4, r0
    6a4e:	2800      	cmp	r0, #0
    6a50:	f47f af6e 	bne.w	6930 <bt_le_adv_start_internal+0x30>
	err = set_advertise_enable(true);
    6a54:	2001      	movs	r0, #1
    6a56:	f7ff fa1f 	bl	5e98 <set_advertise_enable>
	if (err) {
    6a5a:	4604      	mov	r4, r0
    6a5c:	2800      	cmp	r0, #0
    6a5e:	f47f af67 	bne.w	6930 <bt_le_adv_start_internal+0x30>
	if (val) {
    6a62:	786b      	ldrb	r3, [r5, #1]
    6a64:	0799      	lsls	r1, r3, #30
    6a66:	d44f      	bmi.n	6b08 <bt_le_adv_start_internal+0x208>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a68:	f44f 7100 	mov.w	r1, #512	; 0x200
    6a6c:	4835      	ldr	r0, [pc, #212]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6a6e:	f00c fe06 	bl	1367e <atomic_or>
	if (val) {
    6a72:	786b      	ldrb	r3, [r5, #1]
    6a74:	071a      	lsls	r2, r3, #28
    6a76:	d54d      	bpl.n	6b14 <bt_le_adv_start_internal+0x214>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a78:	2180      	movs	r1, #128	; 0x80
    6a7a:	4832      	ldr	r0, [pc, #200]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6a7c:	f00c fdff 	bl	1367e <atomic_or>
	if (val) {
    6a80:	786b      	ldrb	r3, [r5, #1]
    6a82:	07db      	lsls	r3, r3, #31
    6a84:	d54c      	bpl.n	6b20 <bt_le_adv_start_internal+0x220>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a86:	f44f 7180 	mov.w	r1, #256	; 0x100
    6a8a:	482e      	ldr	r0, [pc, #184]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6a8c:	f00c fdf7 	bl	1367e <atomic_or>
    6a90:	e74e      	b.n	6930 <bt_le_adv_start_internal+0x30>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    6a92:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    6a94:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    6a98:	f003 0301 	and.w	r3, r3, #1
    6a9c:	9201      	str	r2, [sp, #4]
    6a9e:	9300      	str	r3, [sp, #0]
    6aa0:	4620      	mov	r0, r4
    6aa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6aa4:	464a      	mov	r2, r9
    6aa6:	4639      	mov	r1, r7
    6aa8:	f7ff fa7a 	bl	5fa0 <le_adv_update>
		if (err) {
    6aac:	4604      	mov	r4, r0
    6aae:	2800      	cmp	r0, #0
    6ab0:	f43f af70 	beq.w	6994 <bt_le_adv_start_internal+0x94>
    6ab4:	e73c      	b.n	6930 <bt_le_adv_start_internal+0x30>
			set_param.type = BT_LE_ADV_IND;
    6ab6:	f88d 8014 	strb.w	r8, [sp, #20]
    6aba:	e7b3      	b.n	6a24 <bt_le_adv_start_internal+0x124>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    6abc:	0758      	lsls	r0, r3, #29
    6abe:	d51c      	bpl.n	6afa <bt_le_adv_start_internal+0x1fa>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6ac0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    6ac4:	eba8 0307 	sub.w	r3, r8, r7
    6ac8:	5cf3      	ldrb	r3, [r6, r3]
    6aca:	2b01      	cmp	r3, #1
    6acc:	d106      	bne.n	6adc <bt_le_adv_start_internal+0x1dc>
				err = set_random_address(&id_addr->a);
    6ace:	2007      	movs	r0, #7
    6ad0:	fb10 3007 	smlabb	r0, r0, r7, r3
    6ad4:	4430      	add	r0, r6
    6ad6:	f7ff fa35 	bl	5f44 <set_random_address>
    6ada:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    6adc:	eba8 0707 	sub.w	r7, r8, r7
    6ae0:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    6ae2:	f88d 3015 	strb.w	r3, [sp, #21]
		if (err) {
    6ae6:	2c00      	cmp	r4, #0
    6ae8:	f47f af22 	bne.w	6930 <bt_le_adv_start_internal+0x30>
		if (sd) {
    6aec:	f1b9 0f00 	cmp.w	r9, #0
    6af0:	d008      	beq.n	6b04 <bt_le_adv_start_internal+0x204>
			set_param.type = BT_LE_ADV_SCAN_IND;
    6af2:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    6af4:	f88d 3014 	strb.w	r3, [sp, #20]
    6af8:	e794      	b.n	6a24 <bt_le_adv_start_internal+0x124>
			err = le_set_private_addr(param->id);
    6afa:	f00d f888 	bl	13c0e <le_set_private_addr.isra.21>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    6afe:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    6b00:	4604      	mov	r4, r0
    6b02:	e7ee      	b.n	6ae2 <bt_le_adv_start_internal+0x1e2>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    6b04:	2303      	movs	r3, #3
    6b06:	e7f5      	b.n	6af4 <bt_le_adv_start_internal+0x1f4>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6b08:	f46f 7100 	mvn.w	r1, #512	; 0x200
    6b0c:	480d      	ldr	r0, [pc, #52]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6b0e:	f00c fdc5 	bl	1369c <atomic_and>
    6b12:	e7ae      	b.n	6a72 <bt_le_adv_start_internal+0x172>
    6b14:	f06f 0180 	mvn.w	r1, #128	; 0x80
    6b18:	480a      	ldr	r0, [pc, #40]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6b1a:	f00c fdbf 	bl	1369c <atomic_and>
    6b1e:	e7af      	b.n	6a80 <bt_le_adv_start_internal+0x180>
    6b20:	f46f 7180 	mvn.w	r1, #256	; 0x100
    6b24:	4807      	ldr	r0, [pc, #28]	; (6b44 <bt_le_adv_start_internal+0x244>)
    6b26:	f00c fdb9 	bl	1369c <atomic_and>
    6b2a:	e701      	b.n	6930 <bt_le_adv_start_internal+0x30>
		return -EAGAIN;
    6b2c:	f06f 040a 	mvn.w	r4, #10
    6b30:	e6fe      	b.n	6930 <bt_le_adv_start_internal+0x30>
		return -EALREADY;
    6b32:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6b36:	e6fb      	b.n	6930 <bt_le_adv_start_internal+0x30>
		return -ENOBUFS;
    6b38:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6b3c:	e6f8      	b.n	6930 <bt_le_adv_start_internal+0x30>
    6b3e:	bf00      	nop
    6b40:	20004e98 	.word	0x20004e98
    6b44:	20004f08 	.word	0x20004f08

00006b48 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    6b48:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6b4a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    6b4e:	4810      	ldr	r0, [pc, #64]	; (6b90 <bt_le_adv_stop+0x48>)
    6b50:	f00c fda4 	bl	1369c <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6b54:	2106      	movs	r1, #6
    6b56:	480e      	ldr	r0, [pc, #56]	; (6b90 <bt_le_adv_stop+0x48>)
    6b58:	f00c fe99 	bl	1388e <atomic_test_bit>
    6b5c:	b910      	cbnz	r0, 6b64 <bt_le_adv_stop+0x1c>
		return 0;
    6b5e:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    6b60:	4620      	mov	r0, r4
    6b62:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6b64:	2000      	movs	r0, #0
    6b66:	f7ff f997 	bl	5e98 <set_advertise_enable>
	if (err) {
    6b6a:	4604      	mov	r4, r0
    6b6c:	2800      	cmp	r0, #0
    6b6e:	d1f7      	bne.n	6b60 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    6b70:	210a      	movs	r1, #10
    6b72:	4807      	ldr	r0, [pc, #28]	; (6b90 <bt_le_adv_stop+0x48>)
    6b74:	f00c fe8b 	bl	1388e <atomic_test_bit>
    6b78:	2800      	cmp	r0, #0
    6b7a:	d0f0      	beq.n	6b5e <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    6b7c:	210c      	movs	r1, #12
    6b7e:	4804      	ldr	r0, [pc, #16]	; (6b90 <bt_le_adv_stop+0x48>)
    6b80:	f00c fe85 	bl	1388e <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    6b84:	2800      	cmp	r0, #0
    6b86:	d0ea      	beq.n	6b5e <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    6b88:	f00d f841 	bl	13c0e <le_set_private_addr.isra.21>
    6b8c:	e7e8      	b.n	6b60 <bt_le_adv_stop+0x18>
    6b8e:	bf00      	nop
    6b90:	20004f08 	.word	0x20004f08

00006b94 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    6b94:	b538      	push	{r3, r4, r5, lr}
    6b96:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6b98:	4805      	ldr	r0, [pc, #20]	; (6bb0 <bt_buf_get_rx+0x1c>)
    6b9a:	f00f fbb7 	bl	1630c <net_buf_alloc_fixed>
#endif

	if (buf) {
    6b9e:	4604      	mov	r4, r0
    6ba0:	b120      	cbz	r0, 6bac <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6ba2:	2100      	movs	r1, #0
    6ba4:	3008      	adds	r0, #8
    6ba6:	f00f fbd0 	bl	1634a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    6baa:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6bac:	4620      	mov	r0, r4
    6bae:	bd38      	pop	{r3, r4, r5, pc}
    6bb0:	200055d8 	.word	0x200055d8

00006bb4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    6bb4:	b510      	push	{r4, lr}
    6bb6:	4601      	mov	r1, r0
    6bb8:	f04f 0320 	mov.w	r3, #32
    6bbc:	f3ef 8011 	mrs	r0, BASEPRI
    6bc0:	f383 8811 	msr	BASEPRI, r3
    6bc4:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6bc8:	4a0c      	ldr	r2, [pc, #48]	; (6bfc <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    6bca:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    6bcc:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    6bd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    6bd4:	f380 8811 	msr	BASEPRI, r0
    6bd8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    6bdc:	b924      	cbnz	r4, 6be8 <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6bde:	2001      	movs	r0, #1
}
    6be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6be4:	f7ff bfd6 	b.w	6b94 <bt_buf_get_rx>
    6be8:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6bea:	f104 0008 	add.w	r0, r4, #8
    6bee:	7522      	strb	r2, [r4, #20]
		buf->len = 0U;
    6bf0:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6bf2:	4619      	mov	r1, r3
    6bf4:	f00f fba9 	bl	1634a <net_buf_simple_reserve>
}
    6bf8:	4620      	mov	r0, r4
    6bfa:	bd10      	pop	{r4, pc}
    6bfc:	20004e98 	.word	0x20004e98

00006c00 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    6c00:	280e      	cmp	r0, #14
{
    6c02:	460b      	mov	r3, r1
    6c04:	b510      	push	{r4, lr}
    6c06:	4611      	mov	r1, r2
	switch (evt) {
    6c08:	d315      	bcc.n	6c36 <bt_buf_get_evt+0x36>
    6c0a:	280f      	cmp	r0, #15
    6c0c:	d90e      	bls.n	6c2c <bt_buf_get_evt+0x2c>
    6c0e:	2813      	cmp	r0, #19
    6c10:	d111      	bne.n	6c36 <bt_buf_get_evt+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
    6c12:	480d      	ldr	r0, [pc, #52]	; (6c48 <bt_buf_get_evt+0x48>)
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
    6c14:	f00f fb7a 	bl	1630c <net_buf_alloc_fixed>
			if (buf) {
    6c18:	4604      	mov	r4, r0
    6c1a:	b128      	cbz	r0, 6c28 <bt_buf_get_evt+0x28>
				net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6c1c:	2100      	movs	r1, #0
    6c1e:	3008      	adds	r0, #8
    6c20:	f00f fb93 	bl	1634a <net_buf_simple_reserve>
    6c24:	2301      	movs	r3, #1
    6c26:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    6c28:	4620      	mov	r0, r4
    6c2a:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    6c2c:	4610      	mov	r0, r2
}
    6c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    6c32:	f7ff bfbf 	b.w	6bb4 <bt_buf_get_cmd_complete>
		if (discardable) {
    6c36:	b10b      	cbz	r3, 6c3c <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    6c38:	4804      	ldr	r0, [pc, #16]	; (6c4c <bt_buf_get_evt+0x4c>)
    6c3a:	e7eb      	b.n	6c14 <bt_buf_get_evt+0x14>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6c3c:	2001      	movs	r0, #1
}
    6c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6c42:	f7ff bfa7 	b.w	6b94 <bt_buf_get_rx>
    6c46:	bf00      	nop
    6c48:	200055f8 	.word	0x200055f8
    6c4c:	20005578 	.word	0x20005578

00006c50 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    6c52:	4d17      	ldr	r5, [pc, #92]	; (6cb0 <bt_pub_key_gen+0x60>)
    6c54:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    6c58:	f003 0306 	and.w	r3, r3, #6
    6c5c:	2b06      	cmp	r3, #6
    6c5e:	d122      	bne.n	6ca6 <bt_pub_key_gen+0x56>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    6c60:	4e14      	ldr	r6, [pc, #80]	; (6cb4 <bt_pub_key_gen+0x64>)
    6c62:	6833      	ldr	r3, [r6, #0]
    6c64:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    6c66:	6030      	str	r0, [r6, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    6c68:	2120      	movs	r1, #32
    6c6a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    6c6e:	f00c fd06 	bl	1367e <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6c72:	f010 0720 	ands.w	r7, r0, #32
    6c76:	d119      	bne.n	6cac <bt_pub_key_gen+0x5c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6c78:	f06f 0110 	mvn.w	r1, #16
    6c7c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    6c80:	f00c fd0c 	bl	1369c <atomic_and>
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6c84:	463a      	mov	r2, r7
    6c86:	4639      	mov	r1, r7
    6c88:	f242 0025 	movw	r0, #8229	; 0x2025
    6c8c:	f7ff f8d0 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    6c90:	4604      	mov	r4, r0
    6c92:	b130      	cbz	r0, 6ca2 <bt_pub_key_gen+0x52>
    6c94:	f06f 0120 	mvn.w	r1, #32
    6c98:	f105 0070 	add.w	r0, r5, #112	; 0x70
    6c9c:	f00c fcfe 	bl	1369c <atomic_and>
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    6ca0:	6037      	str	r7, [r6, #0]
		return err;
	}

	return 0;
}
    6ca2:	4620      	mov	r0, r4
    6ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    6ca6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6caa:	e7fa      	b.n	6ca2 <bt_pub_key_gen+0x52>
		return 0;
    6cac:	2400      	movs	r4, #0
    6cae:	e7f8      	b.n	6ca2 <bt_pub_key_gen+0x52>
    6cb0:	20004e98 	.word	0x20004e98
    6cb4:	20000240 	.word	0x20000240

00006cb8 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    6cb8:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6cba:	2104      	movs	r1, #4
    6cbc:	4803      	ldr	r0, [pc, #12]	; (6ccc <bt_pub_key_get+0x14>)
    6cbe:	f00c fde6 	bl	1388e <atomic_test_bit>
    6cc2:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    6cc4:	4802      	ldr	r0, [pc, #8]	; (6cd0 <bt_pub_key_get+0x18>)
    6cc6:	bf08      	it	eq
    6cc8:	2000      	moveq	r0, #0
    6cca:	bd08      	pop	{r3, pc}
    6ccc:	20004f08 	.word	0x20004f08
    6cd0:	20002106 	.word	0x20002106

00006cd4 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6cd6:	4c1a      	ldr	r4, [pc, #104]	; (6d40 <bt_dh_key_gen+0x6c>)
    6cd8:	6822      	ldr	r2, [r4, #0]
{
    6cda:	4607      	mov	r7, r0
    6cdc:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6cde:	b112      	cbz	r2, 6ce6 <bt_dh_key_gen+0x12>
		return -EBUSY;
    6ce0:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    6ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6ce6:	2105      	movs	r1, #5
    6ce8:	4816      	ldr	r0, [pc, #88]	; (6d44 <bt_dh_key_gen+0x70>)
    6cea:	f00c fdd0 	bl	1388e <atomic_test_bit>
    6cee:	4606      	mov	r6, r0
    6cf0:	2800      	cmp	r0, #0
    6cf2:	d1f5      	bne.n	6ce0 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6cf4:	2104      	movs	r1, #4
    6cf6:	4813      	ldr	r0, [pc, #76]	; (6d44 <bt_dh_key_gen+0x70>)
    6cf8:	f00c fdc9 	bl	1388e <atomic_test_bit>
    6cfc:	b1e8      	cbz	r0, 6d3a <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6cfe:	2140      	movs	r1, #64	; 0x40
    6d00:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    6d04:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6d06:	f7ff f851 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
    6d0a:	4605      	mov	r5, r0
    6d0c:	b918      	cbnz	r0, 6d16 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    6d0e:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    6d10:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6d14:	e7e6      	b.n	6ce4 <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    6d16:	2140      	movs	r1, #64	; 0x40
    6d18:	3008      	adds	r0, #8
    6d1a:	f00f fb2b 	bl	16374 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6d1e:	2240      	movs	r2, #64	; 0x40
    6d20:	4639      	mov	r1, r7
    6d22:	f00c fb9f 	bl	13464 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6d26:	4632      	mov	r2, r6
    6d28:	4629      	mov	r1, r5
    6d2a:	f242 0026 	movw	r0, #8230	; 0x2026
    6d2e:	f7ff f87f 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
    6d32:	2800      	cmp	r0, #0
    6d34:	d0d6      	beq.n	6ce4 <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    6d36:	6026      	str	r6, [r4, #0]
		return err;
    6d38:	e7d4      	b.n	6ce4 <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    6d3a:	f06f 0030 	mvn.w	r0, #48	; 0x30
    6d3e:	e7d1      	b.n	6ce4 <bt_dh_key_gen+0x10>
    6d40:	2000023c 	.word	0x2000023c
    6d44:	20004f08 	.word	0x20004f08

00006d48 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6d48:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6d4a:	4b09      	ldr	r3, [pc, #36]	; (6d70 <notify_connected+0x28>)
    6d4c:	681c      	ldr	r4, [r3, #0]
{
    6d4e:	4605      	mov	r5, r0
    6d50:	7b29      	ldrb	r1, [r5, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    6d52:	b92c      	cbnz	r4, 6d60 <notify_connected+0x18>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
    6d54:	b951      	cbnz	r1, 6d6c <notify_connected+0x24>
		bt_gatt_connected(conn);
    6d56:	4628      	mov	r0, r5
	}
}
    6d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6d5c:	f001 bc20 	b.w	85a0 <bt_gatt_connected>
		if (cb->connected) {
    6d60:	6823      	ldr	r3, [r4, #0]
    6d62:	b10b      	cbz	r3, 6d68 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6d64:	4628      	mov	r0, r5
    6d66:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6d68:	69a4      	ldr	r4, [r4, #24]
    6d6a:	e7f1      	b.n	6d50 <notify_connected+0x8>
}
    6d6c:	bd38      	pop	{r3, r4, r5, pc}
    6d6e:	bf00      	nop
    6d70:	200002b8 	.word	0x200002b8

00006d74 <tx_free>:

	atomic_set_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE);
}

static void tx_free(struct bt_conn_tx *tx)
{
    6d74:	b510      	push	{r4, lr}
    6d76:	4604      	mov	r4, r0
	if (tx->conn) {
    6d78:	6840      	ldr	r0, [r0, #4]
    6d7a:	b120      	cbz	r0, 6d86 <tx_free+0x12>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    6d7c:	3044      	adds	r0, #68	; 0x44
    6d7e:	f00d f84c 	bl	13e1a <atomic_dec>
		tx->conn = NULL;
    6d82:	2300      	movs	r3, #0
    6d84:	6063      	str	r3, [r4, #4]
	tx->data.cb = NULL;
    6d86:	2300      	movs	r3, #0
	tx->data.user_data = NULL;
    6d88:	e9c4 3305 	strd	r3, r3, [r4, #20]
	k_fifo_put(&free_tx, tx);
    6d8c:	4621      	mov	r1, r4
    6d8e:	4802      	ldr	r0, [pc, #8]	; (6d98 <tx_free+0x24>)
}
    6d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_tx, tx);
    6d94:	f00f bedd 	b.w	16b52 <k_queue_append>
    6d98:	20005538 	.word	0x20005538

00006d9c <bt_conn_get_pkts>:
}
    6d9c:	4800      	ldr	r0, [pc, #0]	; (6da0 <bt_conn_get_pkts+0x4>)
    6d9e:	4770      	bx	lr
    6da0:	20004f24 	.word	0x20004f24

00006da4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6da4:	1d03      	adds	r3, r0, #4
{
    6da6:	b570      	push	{r4, r5, r6, lr}
    6da8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6daa:	4618      	mov	r0, r3
    6dac:	f00d f824 	bl	13df8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6db0:	0582      	lsls	r2, r0, #22
    6db2:	d519      	bpl.n	6de8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6db4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6db8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    6dbc:	4291      	cmp	r1, r2
    6dbe:	d813      	bhi.n	6de8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6dc0:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    6dc4:	4291      	cmp	r1, r2
    6dc6:	d30f      	bcc.n	6de8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    6dc8:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    6dcc:	4291      	cmp	r1, r2
    6dce:	d10b      	bne.n	6de8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6dd0:	f3bf 8f5b 	dmb	ish
    6dd4:	e853 2f00 	ldrex	r2, [r3]
    6dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    6ddc:	e843 2100 	strex	r1, r2, [r3]
    6de0:	2900      	cmp	r1, #0
    6de2:	d1f7      	bne.n	6dd4 <notify_le_param_updated+0x30>
    6de4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    6de8:	4b07      	ldr	r3, [pc, #28]	; (6e08 <notify_le_param_updated+0x64>)
    6dea:	681d      	ldr	r5, [r3, #0]
    6dec:	b905      	cbnz	r5, 6df0 <notify_le_param_updated+0x4c>
}
    6dee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6df0:	68ee      	ldr	r6, [r5, #12]
    6df2:	b13e      	cbz	r6, 6e04 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    6df4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6df8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    6dfc:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    6e00:	4620      	mov	r0, r4
    6e02:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6e04:	69ad      	ldr	r5, [r5, #24]
    6e06:	e7f1      	b.n	6dec <notify_le_param_updated+0x48>
    6e08:	200002b8 	.word	0x200002b8

00006e0c <le_param_req>:
{
    6e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e0e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6e10:	4608      	mov	r0, r1
{
    6e12:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    6e14:	f00c ff98 	bl	13d48 <bt_le_conn_params_valid>
    6e18:	4605      	mov	r5, r0
    6e1a:	b910      	cbnz	r0, 6e22 <le_param_req+0x16>
		return false;
    6e1c:	2500      	movs	r5, #0
}
    6e1e:	4628      	mov	r0, r5
    6e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6e22:	4b09      	ldr	r3, [pc, #36]	; (6e48 <le_param_req+0x3c>)
    6e24:	681c      	ldr	r4, [r3, #0]
    6e26:	2c00      	cmp	r4, #0
    6e28:	d0f9      	beq.n	6e1e <le_param_req+0x12>
		if (!cb->le_param_req) {
    6e2a:	68a3      	ldr	r3, [r4, #8]
    6e2c:	b90b      	cbnz	r3, 6e32 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e2e:	69a4      	ldr	r4, [r4, #24]
    6e30:	e7f9      	b.n	6e26 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    6e32:	4631      	mov	r1, r6
    6e34:	4638      	mov	r0, r7
    6e36:	4798      	blx	r3
    6e38:	2800      	cmp	r0, #0
    6e3a:	d0ef      	beq.n	6e1c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    6e3c:	4630      	mov	r0, r6
    6e3e:	f00c ff83 	bl	13d48 <bt_le_conn_params_valid>
    6e42:	2800      	cmp	r0, #0
    6e44:	d1f3      	bne.n	6e2e <le_param_req+0x22>
    6e46:	e7e9      	b.n	6e1c <le_param_req+0x10>
    6e48:	200002b8 	.word	0x200002b8

00006e4c <bt_conn_identity_resolved>:
{
    6e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6e4e:	78c3      	ldrb	r3, [r0, #3]
{
    6e50:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6e52:	b93b      	cbnz	r3, 6e64 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    6e54:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6e58:	4b08      	ldr	r3, [pc, #32]	; (6e7c <bt_conn_identity_resolved+0x30>)
    6e5a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6e5c:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    6e60:	b91d      	cbnz	r5, 6e6a <bt_conn_identity_resolved+0x1e>
}
    6e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    6e64:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6e68:	e7f6      	b.n	6e58 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    6e6a:	692b      	ldr	r3, [r5, #16]
    6e6c:	b11b      	cbz	r3, 6e76 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6e6e:	463a      	mov	r2, r7
    6e70:	4631      	mov	r1, r6
    6e72:	4620      	mov	r0, r4
    6e74:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6e76:	69ad      	ldr	r5, [r5, #24]
    6e78:	e7f2      	b.n	6e60 <bt_conn_identity_resolved+0x14>
    6e7a:	bf00      	nop
    6e7c:	200002b8 	.word	0x200002b8

00006e80 <bt_conn_security_changed>:
{
    6e80:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    6e82:	4b06      	ldr	r3, [pc, #24]	; (6e9c <bt_conn_security_changed+0x1c>)
    6e84:	681c      	ldr	r4, [r3, #0]
{
    6e86:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6e88:	b904      	cbnz	r4, 6e8c <bt_conn_security_changed+0xc>
}
    6e8a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    6e8c:	6963      	ldr	r3, [r4, #20]
    6e8e:	b113      	cbz	r3, 6e96 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    6e90:	7a69      	ldrb	r1, [r5, #9]
    6e92:	4628      	mov	r0, r5
    6e94:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6e96:	69a4      	ldr	r4, [r4, #24]
    6e98:	e7f6      	b.n	6e88 <bt_conn_security_changed+0x8>
    6e9a:	bf00      	nop
    6e9c:	200002b8 	.word	0x200002b8

00006ea0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    6ea0:	4b02      	ldr	r3, [pc, #8]	; (6eac <bt_conn_cb_register+0xc>)
    6ea2:	681a      	ldr	r2, [r3, #0]
    6ea4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6ea6:	6018      	str	r0, [r3, #0]
}
    6ea8:	4770      	bx	lr
    6eaa:	bf00      	nop
    6eac:	200002b8 	.word	0x200002b8

00006eb0 <bt_conn_notify_tx>:
{
    6eb0:	b538      	push	{r3, r4, r5, lr}
    6eb2:	4d12      	ldr	r5, [pc, #72]	; (6efc <bt_conn_notify_tx+0x4c>)
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6eb4:	f100 041c 	add.w	r4, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6eb8:	2100      	movs	r1, #0
    6eba:	4620      	mov	r0, r4
    6ebc:	f00f fe72 	bl	16ba4 <z_impl_k_queue_get>
    6ec0:	4601      	mov	r1, r0
    6ec2:	b900      	cbnz	r0, 6ec6 <bt_conn_notify_tx+0x16>
}
    6ec4:	bd38      	pop	{r3, r4, r5, pc}
		if (tx->data.cb) {
    6ec6:	694b      	ldr	r3, [r1, #20]
    6ec8:	b1ab      	cbz	r3, 6ef6 <bt_conn_notify_tx+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6eca:	f3bf 8f5b 	dmb	ish
    6ece:	f101 0310 	add.w	r3, r1, #16
    6ed2:	e853 2f00 	ldrex	r2, [r3]
    6ed6:	f042 0001 	orr.w	r0, r2, #1
    6eda:	e843 0c00 	strex	ip, r0, [r3]
    6ede:	f1bc 0f00 	cmp.w	ip, #0
    6ee2:	d1f6      	bne.n	6ed2 <bt_conn_notify_tx+0x22>
    6ee4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6ee8:	07d3      	lsls	r3, r2, #31
    6eea:	d4e5      	bmi.n	6eb8 <bt_conn_notify_tx+0x8>
		k_queue_append(&work_q->queue, work);
    6eec:	3108      	adds	r1, #8
    6eee:	4628      	mov	r0, r5
    6ef0:	f00f fe2f 	bl	16b52 <k_queue_append>
    6ef4:	e7e0      	b.n	6eb8 <bt_conn_notify_tx+0x8>
			tx_free(tx);
    6ef6:	f7ff ff3d 	bl	6d74 <tx_free>
    6efa:	e7dd      	b.n	6eb8 <bt_conn_notify_tx+0x8>
    6efc:	20001f38 	.word	0x20001f38

00006f00 <send_frag>:
{
    6f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!atomic_get(&conns[i].ref)) {
    6f04:	4c49      	ldr	r4, [pc, #292]	; (702c <send_frag+0x12c>)
{
    6f06:	4605      	mov	r5, r0
    6f08:	460e      	mov	r6, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6f0a:	4849      	ldr	r0, [pc, #292]	; (7030 <send_frag+0x130>)
    6f0c:	f04f 31ff 	mov.w	r1, #4294967295
    6f10:	4691      	mov	r9, r2
    6f12:	461f      	mov	r7, r3
    6f14:	f00a fa14 	bl	11340 <z_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    6f18:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6f1c:	f00c ff6c 	bl	13df8 <atomic_get>
    6f20:	b130      	cbz	r0, 6f30 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6f22:	7b63      	ldrb	r3, [r4, #13]
    6f24:	3b04      	subs	r3, #4
    6f26:	2b01      	cmp	r3, #1
    6f28:	d802      	bhi.n	6f30 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    6f2a:	4620      	mov	r0, r4
    6f2c:	f7ff ffc0 	bl	6eb0 <bt_conn_notify_tx>
		if (!atomic_get(&conns[i].ref)) {
    6f30:	4840      	ldr	r0, [pc, #256]	; (7034 <send_frag+0x134>)
    6f32:	f00c ff61 	bl	13df8 <atomic_get>
    6f36:	b138      	cbz	r0, 6f48 <send_frag+0x48>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6f38:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    6f3c:	3b04      	subs	r3, #4
    6f3e:	2b01      	cmp	r3, #1
    6f40:	d802      	bhi.n	6f48 <send_frag+0x48>
			bt_conn_notify_tx(&conns[i]);
    6f42:	483d      	ldr	r0, [pc, #244]	; (7038 <send_frag+0x138>)
    6f44:	f7ff ffb4 	bl	6eb0 <bt_conn_notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    6f48:	7b69      	ldrb	r1, [r5, #13]
    6f4a:	2904      	cmp	r1, #4
    6f4c:	d155      	bne.n	6ffa <send_frag+0xfa>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6f4e:	46a8      	mov	r8, r5
	hdr = net_buf_push(buf, sizeof(*hdr));
    6f50:	f106 0008 	add.w	r0, r6, #8
    6f54:	f00f fa25 	bl	163a2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6f58:	f838 2b44 	ldrh.w	r2, [r8], #68
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6f5c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6f5e:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6f62:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6f64:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6f66:	8043      	strh	r3, [r0, #2]
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6f68:	f04f 31ff 	mov.w	r1, #4294967295
    6f6c:	4833      	ldr	r0, [pc, #204]	; (703c <send_frag+0x13c>)
	tx = add_pending_tx(conn, conn_tx(buf)->cb, conn_tx(buf)->user_data);
    6f6e:	e9d6 a905 	ldrd	sl, r9, [r6, #20]
    6f72:	f00f fe17 	bl	16ba4 <z_impl_k_queue_get>
    6f76:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    6f78:	4640      	mov	r0, r8
    6f7a:	f00c ff5b 	bl	13e34 <atomic_inc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    6f7e:	4a30      	ldr	r2, [pc, #192]	; (7040 <send_frag+0x140>)
	tx->conn = bt_conn_ref(conn);
    6f80:	6065      	str	r5, [r4, #4]
    6f82:	2300      	movs	r3, #0
    6f84:	60a3      	str	r3, [r4, #8]
    6f86:	e9c4 2303 	strd	r2, r3, [r4, #12]
	tx->data.user_data = user_data;
    6f8a:	e9c4 a905 	strd	sl, r9, [r4, #20]
	__asm__ volatile(
    6f8e:	f04f 0120 	mov.w	r1, #32
    6f92:	f3ef 8211 	mrs	r2, BASEPRI
    6f96:	f381 8811 	msr	BASEPRI, r1
    6f9a:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    6f9e:	6023      	str	r3, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6fa0:	69ab      	ldr	r3, [r5, #24]
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d134      	bne.n	7010 <send_frag+0x110>
	list->head = node;
    6fa6:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile(
    6faa:	f382 8811 	msr	BASEPRI, r2
    6fae:	f3bf 8f6f 	isb	sy
    6fb2:	2302      	movs	r3, #2
    6fb4:	7533      	strb	r3, [r6, #20]
	err = bt_send(buf);
    6fb6:	4630      	mov	r0, r6
    6fb8:	f00c ff04 	bl	13dc4 <bt_send>
	if (err) {
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d033      	beq.n	7028 <send_frag+0x128>
	__asm__ volatile(
    6fc0:	f04f 0320 	mov.w	r3, #32
    6fc4:	f3ef 8111 	mrs	r1, BASEPRI
    6fc8:	f383 8811 	msr	BASEPRI, r3
    6fcc:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6fd0:	696b      	ldr	r3, [r5, #20]
    6fd2:	2200      	movs	r2, #0
    6fd4:	b153      	cbz	r3, 6fec <send_frag+0xec>
    6fd6:	429c      	cmp	r4, r3
    6fd8:	d123      	bne.n	7022 <send_frag+0x122>
    6fda:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6fdc:	b9da      	cbnz	r2, 7016 <send_frag+0x116>
    6fde:	69aa      	ldr	r2, [r5, #24]
	list->head = node;
    6fe0:	616b      	str	r3, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    6fe2:	4294      	cmp	r4, r2
    6fe4:	d100      	bne.n	6fe8 <send_frag+0xe8>
	list->tail = node;
    6fe6:	61ab      	str	r3, [r5, #24]
	parent->next = child;
    6fe8:	2300      	movs	r3, #0
    6fea:	6023      	str	r3, [r4, #0]
	__asm__ volatile(
    6fec:	f381 8811 	msr	BASEPRI, r1
    6ff0:	f3bf 8f6f 	isb	sy
	tx_free(tx);
    6ff4:	4620      	mov	r0, r4
    6ff6:	f7ff febd 	bl	6d74 <tx_free>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6ffa:	480d      	ldr	r0, [pc, #52]	; (7030 <send_frag+0x130>)
    6ffc:	f00a f974 	bl	112e8 <z_impl_k_sem_give>
	if (always_consume) {
    7000:	b11f      	cbz	r7, 700a <send_frag+0x10a>
		net_buf_unref(buf);
    7002:	4630      	mov	r0, r6
    7004:	f008 ffb0 	bl	ff68 <net_buf_unref>
	return false;
    7008:	2700      	movs	r7, #0
}
    700a:	4638      	mov	r0, r7
    700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7010:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7012:	61ac      	str	r4, [r5, #24]
    7014:	e7c9      	b.n	6faa <send_frag+0xaa>
	parent->next = child;
    7016:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7018:	69ab      	ldr	r3, [r5, #24]
    701a:	429c      	cmp	r4, r3
	list->tail = node;
    701c:	bf08      	it	eq
    701e:	61aa      	streq	r2, [r5, #24]
    7020:	e7e2      	b.n	6fe8 <send_frag+0xe8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7022:	461a      	mov	r2, r3
    7024:	681b      	ldr	r3, [r3, #0]
    7026:	e7d5      	b.n	6fd4 <send_frag+0xd4>
	return true;
    7028:	2701      	movs	r7, #1
    702a:	e7ee      	b.n	700a <send_frag+0x10a>
    702c:	20000310 	.word	0x20000310
    7030:	20004f24 	.word	0x20004f24
    7034:	200003ec 	.word	0x200003ec
    7038:	200003a8 	.word	0x200003a8
    703c:	20005538 	.word	0x20005538
    7040:	00013e4f 	.word	0x00013e4f

00007044 <bt_conn_prepare_events>:
{
    7044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn_change.signaled = 0U;
    7048:	4b39      	ldr	r3, [pc, #228]	; (7130 <bt_conn_prepare_events+0xec>)
		if (!atomic_get(&conn->ref)) {
    704a:	4d3a      	ldr	r5, [pc, #232]	; (7134 <bt_conn_prepare_events+0xf0>)
	conn_change.signaled = 0U;
    704c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    704e:	2101      	movs	r1, #1
{
    7050:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    7052:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7054:	f010 f8b6 	bl	171c4 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    7058:	f105 0044 	add.w	r0, r5, #68	; 0x44
    705c:	f00c fecc 	bl	13df8 <atomic_get>
    7060:	2800      	cmp	r0, #0
    7062:	d047      	beq.n	70f4 <bt_conn_prepare_events+0xb0>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7064:	7b6b      	ldrb	r3, [r5, #13]
    7066:	b39b      	cbz	r3, 70d0 <bt_conn_prepare_events+0x8c>
		if (conn->state != BT_CONN_CONNECTED) {
    7068:	7b6e      	ldrb	r6, [r5, #13]
    706a:	2e04      	cmp	r6, #4
    706c:	d142      	bne.n	70f4 <bt_conn_prepare_events+0xb0>
		k_poll_event_init(&events[ev_count],
    706e:	4631      	mov	r1, r6
    7070:	4b31      	ldr	r3, [pc, #196]	; (7138 <bt_conn_prepare_events+0xf4>)
    7072:	2200      	movs	r2, #0
    7074:	f104 0014 	add.w	r0, r4, #20
    7078:	f010 f8a4 	bl	171c4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    707c:	2301      	movs	r3, #1
    707e:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    7082:	4631      	mov	r1, r6
    7084:	4b2d      	ldr	r3, [pc, #180]	; (713c <bt_conn_prepare_events+0xf8>)
    7086:	2200      	movs	r2, #0
    7088:	f104 0028 	add.w	r0, r4, #40	; 0x28
    708c:	f010 f89a 	bl	171c4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    7090:	2302      	movs	r3, #2
    7092:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    7096:	2603      	movs	r6, #3
		if (!atomic_get(&conn->ref)) {
    7098:	4829      	ldr	r0, [pc, #164]	; (7140 <bt_conn_prepare_events+0xfc>)
    709a:	f00c fead 	bl	13df8 <atomic_get>
    709e:	b1a0      	cbz	r0, 70ca <bt_conn_prepare_events+0x86>
		if (conn->state == BT_CONN_DISCONNECTED &&
    70a0:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    70a4:	bb43      	cbnz	r3, 70f8 <bt_conn_prepare_events+0xb4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    70a6:	f3bf 8f5b 	dmb	ish
    70aa:	4826      	ldr	r0, [pc, #152]	; (7144 <bt_conn_prepare_events+0x100>)
    70ac:	e850 3f00 	ldrex	r3, [r0]
    70b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    70b4:	e840 2100 	strex	r1, r2, [r0]
    70b8:	2900      	cmp	r1, #0
    70ba:	d1f7      	bne.n	70ac <bt_conn_prepare_events+0x68>
    70bc:	f3bf 8f5b 	dmb	ish
    70c0:	065b      	lsls	r3, r3, #25
    70c2:	d519      	bpl.n	70f8 <bt_conn_prepare_events+0xb4>
			conn_cleanup(conn);
    70c4:	3804      	subs	r0, #4
    70c6:	f00c ff32 	bl	13f2e <conn_cleanup>
}
    70ca:	4630      	mov	r0, r6
    70cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70d0:	1d2b      	adds	r3, r5, #4
    70d2:	f3bf 8f5b 	dmb	ish
    70d6:	e853 2f00 	ldrex	r2, [r3]
    70da:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    70de:	e843 1000 	strex	r0, r1, [r3]
    70e2:	2800      	cmp	r0, #0
    70e4:	d1f7      	bne.n	70d6 <bt_conn_prepare_events+0x92>
    70e6:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    70ea:	0652      	lsls	r2, r2, #25
    70ec:	d5bc      	bpl.n	7068 <bt_conn_prepare_events+0x24>
			conn_cleanup(conn);
    70ee:	4628      	mov	r0, r5
    70f0:	f00c ff1d 	bl	13f2e <conn_cleanup>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    70f4:	2601      	movs	r6, #1
    70f6:	e7cf      	b.n	7098 <bt_conn_prepare_events+0x54>
		if (conn->state != BT_CONN_CONNECTED) {
    70f8:	f895 80a5 	ldrb.w	r8, [r5, #165]	; 0xa5
    70fc:	f1b8 0f04 	cmp.w	r8, #4
    7100:	d1e3      	bne.n	70ca <bt_conn_prepare_events+0x86>
		k_poll_event_init(&events[ev_count],
    7102:	2514      	movs	r5, #20
    7104:	4375      	muls	r5, r6
    7106:	1967      	adds	r7, r4, r5
    7108:	4b0f      	ldr	r3, [pc, #60]	; (7148 <bt_conn_prepare_events+0x104>)
    710a:	2200      	movs	r2, #0
    710c:	4641      	mov	r1, r8
    710e:	4638      	mov	r0, r7
		k_poll_event_init(&events[ev_count],
    7110:	3514      	adds	r5, #20
		k_poll_event_init(&events[ev_count],
    7112:	f010 f857 	bl	171c4 <k_poll_event_init>
		k_poll_event_init(&events[ev_count],
    7116:	442c      	add	r4, r5
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    7118:	2301      	movs	r3, #1
    711a:	733b      	strb	r3, [r7, #12]
		k_poll_event_init(&events[ev_count],
    711c:	2200      	movs	r2, #0
    711e:	4b0b      	ldr	r3, [pc, #44]	; (714c <bt_conn_prepare_events+0x108>)
    7120:	4641      	mov	r1, r8
    7122:	4620      	mov	r0, r4
    7124:	f010 f84e 	bl	171c4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    7128:	2302      	movs	r3, #2
    712a:	3602      	adds	r6, #2
    712c:	7323      	strb	r3, [r4, #12]
	return ev_count;
    712e:	e7cc      	b.n	70ca <bt_conn_prepare_events+0x86>
    7130:	2000507c 	.word	0x2000507c
    7134:	20000310 	.word	0x20000310
    7138:	2000032c 	.word	0x2000032c
    713c:	2000033c 	.word	0x2000033c
    7140:	200003ec 	.word	0x200003ec
    7144:	200003ac 	.word	0x200003ac
    7148:	200003c4 	.word	0x200003c4
    714c:	200003d4 	.word	0x200003d4

00007150 <bt_conn_add_le>:
{
    7150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7154:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    7156:	481c      	ldr	r0, [pc, #112]	; (71c8 <bt_conn_add_le+0x78>)
    7158:	4e1c      	ldr	r6, [pc, #112]	; (71cc <bt_conn_add_le+0x7c>)
    715a:	f00c fe4d 	bl	13df8 <atomic_get>
    715e:	b128      	cbz	r0, 716c <bt_conn_add_le+0x1c>
    7160:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
    7164:	f00c fe48 	bl	13df8 <atomic_get>
    7168:	bb58      	cbnz	r0, 71c2 <bt_conn_add_le+0x72>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    716a:	2001      	movs	r0, #1
    716c:	2298      	movs	r2, #152	; 0x98
    716e:	fb02 f400 	mul.w	r4, r2, r0
			conn = &conns[i];
    7172:	1935      	adds	r5, r6, r4
	(void)memset(conn, 0, sizeof(*conn));
    7174:	2100      	movs	r1, #0
    7176:	4628      	mov	r0, r5
    7178:	f00c f9a1 	bl	134be <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    717c:	f3bf 8f5b 	dmb	ish
    7180:	f105 0344 	add.w	r3, r5, #68	; 0x44
    7184:	2701      	movs	r7, #1
    7186:	e853 2f00 	ldrex	r2, [r3]
    718a:	e843 7100 	strex	r1, r7, [r3]
    718e:	2900      	cmp	r1, #0
    7190:	d1f9      	bne.n	7186 <bt_conn_add_le+0x36>
    7192:	f3bf 8f5b 	dmb	ish
	bt_addr_le_copy(&conn->le.dst, peer);
    7196:	f104 0048 	add.w	r0, r4, #72	; 0x48
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    719a:	4641      	mov	r1, r8
    719c:	2207      	movs	r2, #7
    719e:	4430      	add	r0, r6
    71a0:	f00c f960 	bl	13464 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
    71a4:	2300      	movs	r3, #0
    71a6:	70ab      	strb	r3, [r5, #2]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    71a8:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    71ac:	4b08      	ldr	r3, [pc, #32]	; (71d0 <bt_conn_add_le+0x80>)
	conn->sec_level = BT_SECURITY_LOW;
    71ae:	726f      	strb	r7, [r5, #9]
	conn->required_sec_level = BT_SECURITY_LOW;
    71b0:	72af      	strb	r7, [r5, #10]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    71b2:	662b      	str	r3, [r5, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    71b4:	4907      	ldr	r1, [pc, #28]	; (71d4 <bt_conn_add_le+0x84>)
    71b6:	4430      	add	r0, r6
    71b8:	f00f ff04 	bl	16fc4 <k_delayed_work_init>
}
    71bc:	4628      	mov	r0, r5
    71be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
    71c2:	2500      	movs	r5, #0
    71c4:	e7fa      	b.n	71bc <bt_conn_add_le+0x6c>
    71c6:	bf00      	nop
    71c8:	20000354 	.word	0x20000354
    71cc:	20000310 	.word	0x20000310
    71d0:	00280018 	.word	0x00280018
    71d4:	00007475 	.word	0x00007475

000071d8 <bt_conn_set_state>:
{
    71d8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    71da:	7b45      	ldrb	r5, [r0, #13]
    71dc:	428d      	cmp	r5, r1
{
    71de:	4604      	mov	r4, r0
	if (conn->state == state) {
    71e0:	d07e      	beq.n	72e0 <bt_conn_set_state+0x108>
	conn->state = state;
    71e2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    71e4:	b915      	cbnz	r5, 71ec <bt_conn_set_state+0x14>
	atomic_inc(&conn->ref);
    71e6:	3044      	adds	r0, #68	; 0x44
    71e8:	f00c fe24 	bl	13e34 <atomic_inc>
	switch (conn->state) {
    71ec:	7b63      	ldrb	r3, [r4, #13]
    71ee:	b1db      	cbz	r3, 7228 <bt_conn_set_state+0x50>
    71f0:	2b04      	cmp	r3, #4
    71f2:	d175      	bne.n	72e0 <bt_conn_set_state+0x108>
		if (conn->type == BT_CONN_TYPE_SCO) {
    71f4:	78a3      	ldrb	r3, [r4, #2]
    71f6:	2b02      	cmp	r3, #2
    71f8:	d072      	beq.n	72e0 <bt_conn_set_state+0x108>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    71fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    71fe:	f00f fca0 	bl	16b42 <z_impl_k_queue_init>
    7202:	f104 001c 	add.w	r0, r4, #28
    7206:	f00f fc9c 	bl	16b42 <z_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    720a:	2100      	movs	r1, #0
    720c:	4835      	ldr	r0, [pc, #212]	; (72e4 <bt_conn_set_state+0x10c>)
    720e:	f00a fb91 	bl	11934 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7212:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    7214:	4620      	mov	r0, r4
	list->tail = NULL;
    7216:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    721a:	f000 fa79 	bl	7710 <bt_l2cap_connected>
		notify_connected(conn);
    721e:	4620      	mov	r0, r4
}
    7220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		notify_connected(conn);
    7224:	f7ff bd90 	b.w	6d48 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7228:	78a3      	ldrb	r3, [r4, #2]
    722a:	2b02      	cmp	r3, #2
    722c:	d105      	bne.n	723a <bt_conn_set_state+0x62>
	atomic_dec(&conn->ref);
    722e:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    7232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    7236:	f00c bdf0 	b.w	13e1a <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    723a:	1f2b      	subs	r3, r5, #4
    723c:	2b01      	cmp	r3, #1
    723e:	d841      	bhi.n	72c4 <bt_conn_set_state+0xec>
			bt_l2cap_disconnected(conn);
    7240:	4620      	mov	r0, r4
    7242:	f00c ff74 	bl	1412e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    7246:	4b28      	ldr	r3, [pc, #160]	; (72e8 <bt_conn_set_state+0x110>)
    7248:	681d      	ldr	r5, [r3, #0]
    724a:	b9dd      	cbnz	r5, 7284 <bt_conn_set_state+0xac>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    724c:	4d27      	ldr	r5, [pc, #156]	; (72ec <bt_conn_set_state+0x114>)
	__asm__ volatile(
    724e:	f04f 0320 	mov.w	r3, #32
    7252:	f3ef 8211 	mrs	r2, BASEPRI
    7256:	f383 8811 	msr	BASEPRI, r3
    725a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    725e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7260:	b128      	cbz	r0, 726e <bt_conn_set_state+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7262:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    7264:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    7266:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7268:	4288      	cmp	r0, r1
	list->tail = node;
    726a:	bf08      	it	eq
    726c:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
    726e:	f382 8811 	msr	BASEPRI, r2
    7272:	f3bf 8f6f 	isb	sy
		if (!node) {
    7276:	b160      	cbz	r0, 7292 <bt_conn_set_state+0xba>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    7278:	f7ff fd7c 	bl	6d74 <tx_free>
    727c:	4628      	mov	r0, r5
    727e:	f00a f833 	bl	112e8 <z_impl_k_sem_give>
    7282:	e7e4      	b.n	724e <bt_conn_set_state+0x76>
		if (cb->disconnected) {
    7284:	686b      	ldr	r3, [r5, #4]
    7286:	b113      	cbz	r3, 728e <bt_conn_set_state+0xb6>
			cb->disconnected(conn, conn->err);
    7288:	7b21      	ldrb	r1, [r4, #12]
    728a:	4620      	mov	r0, r4
    728c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    728e:	69ad      	ldr	r5, [r5, #24]
    7290:	e7db      	b.n	724a <bt_conn_set_state+0x72>
			if (conn->type == BT_CONN_TYPE_LE) {
    7292:	78a3      	ldrb	r3, [r4, #2]
    7294:	b91b      	cbnz	r3, 729e <bt_conn_set_state+0xc6>
				k_delayed_work_cancel(&conn->le.update_work);
    7296:	f104 0078 	add.w	r0, r4, #120	; 0x78
    729a:	f00f fe9b 	bl	16fd4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    729e:	f3bf 8f5b 	dmb	ish
    72a2:	3404      	adds	r4, #4
    72a4:	e854 3f00 	ldrex	r3, [r4]
    72a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    72ac:	e844 3200 	strex	r2, r3, [r4]
    72b0:	2a00      	cmp	r2, #0
    72b2:	d1f7      	bne.n	72a4 <bt_conn_set_state+0xcc>
    72b4:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    72b8:	2100      	movs	r1, #0
    72ba:	480a      	ldr	r0, [pc, #40]	; (72e4 <bt_conn_set_state+0x10c>)
}
    72bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    72c0:	f00a bb38 	b.w	11934 <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    72c4:	2d03      	cmp	r5, #3
    72c6:	d103      	bne.n	72d0 <bt_conn_set_state+0xf8>
			notify_connected(conn);
    72c8:	4620      	mov	r0, r4
    72ca:	f7ff fd3d 	bl	6d48 <notify_connected>
    72ce:	e7ae      	b.n	722e <bt_conn_set_state+0x56>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    72d0:	2d01      	cmp	r5, #1
    72d2:	d103      	bne.n	72dc <bt_conn_set_state+0x104>
			if (conn->err) {
    72d4:	7b23      	ldrb	r3, [r4, #12]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d0a9      	beq.n	722e <bt_conn_set_state+0x56>
    72da:	e7f5      	b.n	72c8 <bt_conn_set_state+0xf0>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    72dc:	2d02      	cmp	r5, #2
    72de:	d0f9      	beq.n	72d4 <bt_conn_set_state+0xfc>
}
    72e0:	bd38      	pop	{r3, r4, r5, pc}
    72e2:	bf00      	nop
    72e4:	2000507c 	.word	0x2000507c
    72e8:	200002b8 	.word	0x200002b8
    72ec:	20004f24 	.word	0x20004f24

000072f0 <bt_conn_lookup_handle>:
		if (!atomic_get(&conns[i].ref)) {
    72f0:	4b14      	ldr	r3, [pc, #80]	; (7344 <bt_conn_lookup_handle+0x54>)
{
    72f2:	b510      	push	{r4, lr}
    72f4:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    72f6:	f103 0044 	add.w	r0, r3, #68	; 0x44
    72fa:	f00c fd7d 	bl	13df8 <atomic_get>
    72fe:	b130      	cbz	r0, 730e <bt_conn_lookup_handle+0x1e>
		if (conns[i].state != BT_CONN_CONNECTED &&
    7300:	7b5a      	ldrb	r2, [r3, #13]
    7302:	3a04      	subs	r2, #4
    7304:	2a01      	cmp	r2, #1
    7306:	d802      	bhi.n	730e <bt_conn_lookup_handle+0x1e>
		if (conns[i].handle == handle) {
    7308:	881a      	ldrh	r2, [r3, #0]
    730a:	428a      	cmp	r2, r1
    730c:	d013      	beq.n	7336 <bt_conn_lookup_handle+0x46>
		if (!atomic_get(&conns[i].ref)) {
    730e:	480e      	ldr	r0, [pc, #56]	; (7348 <bt_conn_lookup_handle+0x58>)
    7310:	f00c fd72 	bl	13df8 <atomic_get>
    7314:	b198      	cbz	r0, 733e <bt_conn_lookup_handle+0x4e>
		if (conns[i].state != BT_CONN_CONNECTED &&
    7316:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
    731a:	3a04      	subs	r2, #4
    731c:	2a01      	cmp	r2, #1
    731e:	d80e      	bhi.n	733e <bt_conn_lookup_handle+0x4e>
		if (conns[i].handle == handle) {
    7320:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
    7324:	428a      	cmp	r2, r1
    7326:	d10a      	bne.n	733e <bt_conn_lookup_handle+0x4e>
		if (!atomic_get(&conns[i].ref)) {
    7328:	4807      	ldr	r0, [pc, #28]	; (7348 <bt_conn_lookup_handle+0x58>)
    732a:	2498      	movs	r4, #152	; 0x98
			return bt_conn_ref(&conns[i]);
    732c:	441c      	add	r4, r3
	atomic_inc(&conn->ref);
    732e:	f00c fd81 	bl	13e34 <atomic_inc>
}
    7332:	4620      	mov	r0, r4
    7334:	bd10      	pop	{r4, pc}
		if (conns[i].handle == handle) {
    7336:	2400      	movs	r4, #0
		if (!atomic_get(&conns[i].ref)) {
    7338:	f103 0044 	add.w	r0, r3, #68	; 0x44
    733c:	e7f6      	b.n	732c <bt_conn_lookup_handle+0x3c>
	return NULL;
    733e:	2400      	movs	r4, #0
    7340:	e7f7      	b.n	7332 <bt_conn_lookup_handle+0x42>
    7342:	bf00      	nop
    7344:	20000310 	.word	0x20000310
    7348:	200003ec 	.word	0x200003ec

0000734c <bt_conn_lookup_addr_le>:
{
    734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    734e:	4c15      	ldr	r4, [pc, #84]	; (73a4 <bt_conn_lookup_addr_le+0x58>)
{
    7350:	4606      	mov	r6, r0
		if (!atomic_get(&conns[i].ref)) {
    7352:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    7356:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    7358:	f00c fd4e 	bl	13df8 <atomic_get>
    735c:	4627      	mov	r7, r4
    735e:	b140      	cbz	r0, 7372 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7360:	78a3      	ldrb	r3, [r4, #2]
    7362:	b933      	cbnz	r3, 7372 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].id == id &&
    7364:	7a23      	ldrb	r3, [r4, #8]
    7366:	42b3      	cmp	r3, r6
    7368:	d103      	bne.n	7372 <bt_conn_lookup_addr_le+0x26>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    736a:	4620      	mov	r0, r4
    736c:	f00c fdf7 	bl	13f5e <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    7370:	b180      	cbz	r0, 7394 <bt_conn_lookup_addr_le+0x48>
		if (!atomic_get(&conns[i].ref)) {
    7372:	480d      	ldr	r0, [pc, #52]	; (73a8 <bt_conn_lookup_addr_le+0x5c>)
    7374:	f00c fd40 	bl	13df8 <atomic_get>
    7378:	b190      	cbz	r0, 73a0 <bt_conn_lookup_addr_le+0x54>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    737a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
    737e:	b97b      	cbnz	r3, 73a0 <bt_conn_lookup_addr_le+0x54>
		if (conns[i].id == id &&
    7380:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
    7384:	42b3      	cmp	r3, r6
    7386:	d10b      	bne.n	73a0 <bt_conn_lookup_addr_le+0x54>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    7388:	4629      	mov	r1, r5
    738a:	4808      	ldr	r0, [pc, #32]	; (73ac <bt_conn_lookup_addr_le+0x60>)
    738c:	f00c fde7 	bl	13f5e <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    7390:	b930      	cbnz	r0, 73a0 <bt_conn_lookup_addr_le+0x54>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    7392:	4c06      	ldr	r4, [pc, #24]	; (73ac <bt_conn_lookup_addr_le+0x60>)
		if (!atomic_get(&conns[i].ref)) {
    7394:	f104 0044 	add.w	r0, r4, #68	; 0x44
	atomic_inc(&conn->ref);
    7398:	f00c fd4c 	bl	13e34 <atomic_inc>
}
    739c:	4620      	mov	r0, r4
    739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
    73a0:	2400      	movs	r4, #0
    73a2:	e7fb      	b.n	739c <bt_conn_lookup_addr_le+0x50>
    73a4:	20000310 	.word	0x20000310
    73a8:	200003ec 	.word	0x200003ec
    73ac:	200003a8 	.word	0x200003a8

000073b0 <bt_conn_lookup_state_le>:
{
    73b0:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    73b2:	4c18      	ldr	r4, [pc, #96]	; (7414 <bt_conn_lookup_state_le+0x64>)
{
    73b4:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    73b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    73ba:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    73bc:	f00c fd1c 	bl	13df8 <atomic_get>
    73c0:	b150      	cbz	r0, 73d8 <bt_conn_lookup_state_le+0x28>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    73c2:	78a3      	ldrb	r3, [r4, #2]
    73c4:	b943      	cbnz	r3, 73d8 <bt_conn_lookup_state_le+0x28>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    73c6:	b125      	cbz	r5, 73d2 <bt_conn_lookup_state_le+0x22>
    73c8:	4629      	mov	r1, r5
    73ca:	4620      	mov	r0, r4
    73cc:	f00c fdc7 	bl	13f5e <bt_conn_addr_le_cmp>
    73d0:	b910      	cbnz	r0, 73d8 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    73d2:	7b63      	ldrb	r3, [r4, #13]
    73d4:	42b3      	cmp	r3, r6
    73d6:	d016      	beq.n	7406 <bt_conn_lookup_state_le+0x56>
		if (!atomic_get(&conns[i].ref)) {
    73d8:	480f      	ldr	r0, [pc, #60]	; (7418 <bt_conn_lookup_state_le+0x68>)
    73da:	f00c fd0d 	bl	13df8 <atomic_get>
    73de:	b180      	cbz	r0, 7402 <bt_conn_lookup_state_le+0x52>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    73e0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    73e4:	b96b      	cbnz	r3, 7402 <bt_conn_lookup_state_le+0x52>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    73e6:	b935      	cbnz	r5, 73f6 <bt_conn_lookup_state_le+0x46>
		if (conns[i].state == state) {
    73e8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    73ec:	42b3      	cmp	r3, r6
    73ee:	d108      	bne.n	7402 <bt_conn_lookup_state_le+0x52>
    73f0:	2398      	movs	r3, #152	; 0x98
		if (!atomic_get(&conns[i].ref)) {
    73f2:	4809      	ldr	r0, [pc, #36]	; (7418 <bt_conn_lookup_state_le+0x68>)
    73f4:	e009      	b.n	740a <bt_conn_lookup_state_le+0x5a>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    73f6:	4629      	mov	r1, r5
    73f8:	4808      	ldr	r0, [pc, #32]	; (741c <bt_conn_lookup_state_le+0x6c>)
    73fa:	f00c fdb0 	bl	13f5e <bt_conn_addr_le_cmp>
    73fe:	2800      	cmp	r0, #0
    7400:	d0f2      	beq.n	73e8 <bt_conn_lookup_state_le+0x38>
	return NULL;
    7402:	2400      	movs	r4, #0
    7404:	e004      	b.n	7410 <bt_conn_lookup_state_le+0x60>
		if (!atomic_get(&conns[i].ref)) {
    7406:	4806      	ldr	r0, [pc, #24]	; (7420 <bt_conn_lookup_state_le+0x70>)
		if (conns[i].state == state) {
    7408:	2300      	movs	r3, #0
			return bt_conn_ref(&conns[i]);
    740a:	441c      	add	r4, r3
	atomic_inc(&conn->ref);
    740c:	f00c fd12 	bl	13e34 <atomic_inc>
}
    7410:	4620      	mov	r0, r4
    7412:	bd70      	pop	{r4, r5, r6, pc}
    7414:	20000310 	.word	0x20000310
    7418:	200003ec 	.word	0x200003ec
    741c:	200003a8 	.word	0x200003a8
    7420:	20000354 	.word	0x20000354

00007424 <send_conn_le_param_update>:
{
    7424:	b538      	push	{r3, r4, r5, lr}
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7426:	4b12      	ldr	r3, [pc, #72]	; (7470 <send_conn_le_param_update+0x4c>)
    7428:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
{
    742c:	460d      	mov	r5, r1
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    742e:	0799      	lsls	r1, r3, #30
{
    7430:	4604      	mov	r4, r0
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7432:	d407      	bmi.n	7444 <send_conn_le_param_update+0x20>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    7434:	78e3      	ldrb	r3, [r4, #3]
    7436:	b173      	cbz	r3, 7456 <send_conn_le_param_update+0x32>
	return bt_l2cap_update_conn_param(conn, param);
    7438:	4629      	mov	r1, r5
    743a:	4620      	mov	r0, r4
}
    743c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    7440:	f000 b9f4 	b.w	782c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7444:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    7448:	079a      	lsls	r2, r3, #30
    744a:	d5f3      	bpl.n	7434 <send_conn_le_param_update+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    744c:	3004      	adds	r0, #4
    744e:	f00c fcd3 	bl	13df8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    7452:	0543      	lsls	r3, r0, #21
    7454:	d4ee      	bmi.n	7434 <send_conn_le_param_update+0x10>
		rc = bt_conn_le_conn_update(conn, param);
    7456:	4629      	mov	r1, r5
    7458:	4620      	mov	r0, r4
    745a:	f00c fde0 	bl	1401e <bt_conn_le_conn_update>
		if (rc == 0) {
    745e:	b928      	cbnz	r0, 746c <send_conn_le_param_update+0x48>
			conn->le.pending_latency = param->latency;
    7460:	88ab      	ldrh	r3, [r5, #4]
    7462:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			conn->le.pending_timeout = param->timeout;
    7466:	88eb      	ldrh	r3, [r5, #6]
    7468:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
    746c:	bd38      	pop	{r3, r4, r5, pc}
    746e:	bf00      	nop
    7470:	20004e98 	.word	0x20004e98

00007474 <conn_le_update_timeout>:
{
    7474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7476:	f1a0 0278 	sub.w	r2, r0, #120	; 0x78
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    747a:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    747e:	f3bf 8f5b 	dmb	ish
    7482:	e854 3f00 	ldrex	r3, [r4]
    7486:	f423 7100 	bic.w	r1, r3, #512	; 0x200
    748a:	e844 1c00 	strex	ip, r1, [r4]
    748e:	f1bc 0f00 	cmp.w	ip, #0
    7492:	d1f6      	bne.n	7482 <conn_le_update_timeout+0xe>
    7494:	f3bf 8f5b 	dmb	ish
    7498:	059b      	lsls	r3, r3, #22
    749a:	d521      	bpl.n	74e0 <conn_le_update_timeout+0x6c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    749c:	f830 3c18 	ldrh.w	r3, [r0, #-24]
    74a0:	f8ad 3000 	strh.w	r3, [sp]
    74a4:	f830 3c16 	ldrh.w	r3, [r0, #-22]
    74a8:	f8ad 3002 	strh.w	r3, [sp, #2]
    74ac:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    74b0:	f8ad 3004 	strh.w	r3, [sp, #4]
    74b4:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    74b8:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    74bc:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    74be:	4610      	mov	r0, r2
    74c0:	f7ff ffb0 	bl	7424 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    74c4:	f3bf 8f5b 	dmb	ish
    74c8:	e854 3f00 	ldrex	r3, [r4]
    74cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    74d0:	e844 3200 	strex	r2, r3, [r4]
    74d4:	2a00      	cmp	r2, #0
    74d6:	d1f7      	bne.n	74c8 <conn_le_update_timeout+0x54>
    74d8:	f3bf 8f5b 	dmb	ish
}
    74dc:	b004      	add	sp, #16
    74de:	bd10      	pop	{r4, pc}
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    74e0:	4903      	ldr	r1, [pc, #12]	; (74f0 <conn_le_update_timeout+0x7c>)
    74e2:	6808      	ldr	r0, [r1, #0]
    74e4:	6849      	ldr	r1, [r1, #4]
    74e6:	ab02      	add	r3, sp, #8
    74e8:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    74ea:	a902      	add	r1, sp, #8
    74ec:	e7e7      	b.n	74be <conn_le_update_timeout+0x4a>
    74ee:	bf00      	nop
    74f0:	00017400 	.word	0x00017400

000074f4 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    74f4:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    74f6:	4b08      	ldr	r3, [pc, #32]	; (7518 <bt_conn_create_pdu+0x24>)
{
    74f8:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    74fa:	2800      	cmp	r0, #0
    74fc:	bf08      	it	eq
    74fe:	4618      	moveq	r0, r3
    7500:	f04f 31ff 	mov.w	r1, #4294967295
    7504:	f00e ff02 	bl	1630c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    7508:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    750a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    750c:	3008      	adds	r0, #8
    750e:	f00e ff1c 	bl	1634a <net_buf_simple_reserve>

	return buf;
}
    7512:	4620      	mov	r0, r4
    7514:	bd38      	pop	{r3, r4, r5, pc}
    7516:	bf00      	nop
    7518:	20005558 	.word	0x20005558

0000751c <create_frag.isra.9>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7520:	4606      	mov	r6, r0
    7522:	460d      	mov	r5, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    7524:	4816      	ldr	r0, [pc, #88]	; (7580 <create_frag.isra.9+0x64>)
    7526:	2100      	movs	r1, #0
    7528:	f7ff ffe4 	bl	74f4 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    752c:	7833      	ldrb	r3, [r6, #0]
    752e:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    7530:	4604      	mov	r4, r0
    7532:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    7536:	d005      	beq.n	7544 <create_frag.isra.9+0x28>
		net_buf_unref(frag);
    7538:	f008 fd16 	bl	ff68 <net_buf_unref>
		return NULL;
    753c:	4634      	mov	r4, r6
}
    753e:	4620      	mov	r0, r4
    7540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->user_data = NULL;
    7544:	e9c0 6605 	strd	r6, r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7548:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    754c:	4e0d      	ldr	r6, [pc, #52]	; (7584 <create_frag.isra.9+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    754e:	4638      	mov	r0, r7
    7550:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    7554:	f00e ff49 	bl	163ea <net_buf_simple_tailroom>
    7558:	4580      	cmp	r8, r0
    755a:	d20c      	bcs.n	7576 <create_frag.isra.9+0x5a>
	return bt_dev.le.mtu;
    755c:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    7560:	f855 1f08 	ldr.w	r1, [r5, #8]!
    7564:	4632      	mov	r2, r6
    7566:	4638      	mov	r0, r7
    7568:	f00e ff0a 	bl	16380 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    756c:	4631      	mov	r1, r6
    756e:	4628      	mov	r0, r5
    7570:	f00e ff1f 	bl	163b2 <net_buf_simple_pull>
    7574:	e7e3      	b.n	753e <create_frag.isra.9+0x22>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7576:	4638      	mov	r0, r7
    7578:	f00e ff37 	bl	163ea <net_buf_simple_tailroom>
    757c:	b286      	uxth	r6, r0
    757e:	e7ef      	b.n	7560 <create_frag.isra.9+0x44>
    7580:	20005598 	.word	0x20005598
    7584:	20004e98 	.word	0x20004e98

00007588 <bt_conn_process_tx>:
{
    7588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    758a:	7b43      	ldrb	r3, [r0, #13]
{
    758c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    758e:	b993      	cbnz	r3, 75b6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7590:	f3bf 8f5b 	dmb	ish
    7594:	1d03      	adds	r3, r0, #4
    7596:	e853 2f00 	ldrex	r2, [r3]
    759a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    759e:	e843 1400 	strex	r4, r1, [r3]
    75a2:	2c00      	cmp	r4, #0
    75a4:	d1f7      	bne.n	7596 <bt_conn_process_tx+0xe>
    75a6:	f3bf 8f5b 	dmb	ish
    75aa:	0653      	lsls	r3, r2, #25
    75ac:	d503      	bpl.n	75b6 <bt_conn_process_tx+0x2e>
}
    75ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    75b2:	f00c bcbc 	b.w	13f2e <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    75b6:	2100      	movs	r1, #0
    75b8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    75bc:	f00e feac 	bl	16318 <net_buf_get>
	BT_ASSERT(buf);
    75c0:	4604      	mov	r4, r0
    75c2:	b928      	cbnz	r0, 75d0 <bt_conn_process_tx+0x48>
    75c4:	4040      	eors	r0, r0
    75c6:	f380 8811 	msr	BASEPRI, r0
    75ca:	f04f 0003 	mov.w	r0, #3
    75ce:	df02      	svc	2
	return bt_dev.le.mtu;
    75d0:	4e19      	ldr	r6, [pc, #100]	; (7638 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    75d2:	8981      	ldrh	r1, [r0, #12]
    75d4:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    75d8:	4291      	cmp	r1, r2
    75da:	d807      	bhi.n	75ec <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    75dc:	2300      	movs	r3, #0
    75de:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    75e0:	4621      	mov	r1, r4
    75e2:	4628      	mov	r0, r5
    75e4:	f7ff fc8c 	bl	6f00 <send_frag>
	if (!send_buf(conn, buf)) {
    75e8:	b140      	cbz	r0, 75fc <bt_conn_process_tx+0x74>
}
    75ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75ec:	f105 070d 	add.w	r7, r5, #13
	frag = create_frag(conn, buf);
    75f0:	4601      	mov	r1, r0
    75f2:	4638      	mov	r0, r7
    75f4:	f7ff ff92 	bl	751c <create_frag.isra.9>
	if (!frag) {
    75f8:	4601      	mov	r1, r0
    75fa:	b920      	cbnz	r0, 7606 <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    75fc:	4620      	mov	r0, r4
}
    75fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    7602:	f008 bcb1 	b.w	ff68 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    7606:	2301      	movs	r3, #1
    7608:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    760a:	4628      	mov	r0, r5
    760c:	f7ff fc78 	bl	6f00 <send_frag>
    7610:	2800      	cmp	r0, #0
    7612:	d0f3      	beq.n	75fc <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    7614:	89a2      	ldrh	r2, [r4, #12]
    7616:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    761a:	429a      	cmp	r2, r3
    761c:	d802      	bhi.n	7624 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    761e:	2300      	movs	r3, #0
    7620:	2201      	movs	r2, #1
    7622:	e7dd      	b.n	75e0 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    7624:	4621      	mov	r1, r4
    7626:	4638      	mov	r0, r7
    7628:	f7ff ff78 	bl	751c <create_frag.isra.9>
		if (!frag) {
    762c:	4601      	mov	r1, r0
    762e:	2800      	cmp	r0, #0
    7630:	d0e4      	beq.n	75fc <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    7632:	2301      	movs	r3, #1
    7634:	461a      	mov	r2, r3
    7636:	e7e8      	b.n	760a <bt_conn_process_tx+0x82>
    7638:	20004e98 	.word	0x20004e98

0000763c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
    763c:	4b0c      	ldr	r3, [pc, #48]	; (7670 <bt_conn_auth_cb_register+0x34>)
	if (!cb) {
    763e:	b908      	cbnz	r0, 7644 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    7640:	6018      	str	r0, [r3, #0]
		return 0;
    7642:	4770      	bx	lr
	}

	if (bt_auth) {
    7644:	681a      	ldr	r2, [r3, #0]
    7646:	b962      	cbnz	r2, 7662 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    7648:	6902      	ldr	r2, [r0, #16]
    764a:	b93a      	cbnz	r2, 765c <bt_conn_auth_cb_register+0x20>
    764c:	6802      	ldr	r2, [r0, #0]
    764e:	b95a      	cbnz	r2, 7668 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    7650:	6842      	ldr	r2, [r0, #4]
    7652:	b94a      	cbnz	r2, 7668 <bt_conn_auth_cb_register+0x2c>
    7654:	6882      	ldr	r2, [r0, #8]
    7656:	b93a      	cbnz	r2, 7668 <bt_conn_auth_cb_register+0x2c>
    7658:	6942      	ldr	r2, [r0, #20]
    765a:	b92a      	cbnz	r2, 7668 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    765c:	6018      	str	r0, [r3, #0]
	return 0;
    765e:	2000      	movs	r0, #0
    7660:	4770      	bx	lr
		return -EALREADY;
    7662:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7666:	4770      	bx	lr
		return -EINVAL;
    7668:	f06f 0015 	mvn.w	r0, #21
}
    766c:	4770      	bx	lr
    766e:	bf00      	nop
    7670:	200002b4 	.word	0x200002b4

00007674 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
    7674:	4a04      	ldr	r2, [pc, #16]	; (7688 <bt_conn_auth_pairing_confirm+0x14>)
    7676:	6812      	ldr	r2, [r2, #0]
    7678:	b11a      	cbz	r2, 7682 <bt_conn_auth_pairing_confirm+0xe>
		return -EINVAL;
	}

	switch (conn->type) {
    767a:	7883      	ldrb	r3, [r0, #2]
    767c:	b90b      	cbnz	r3, 7682 <bt_conn_auth_pairing_confirm+0xe>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
    767e:	f00d bf28 	b.w	154d2 <bt_smp_auth_pairing_confirm>
		return ssp_confirm_reply(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
    7682:	f06f 0015 	mvn.w	r0, #21
    7686:	4770      	bx	lr
    7688:	200002b4 	.word	0x200002b4

0000768c <bt_conn_index>:
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    768c:	4b03      	ldr	r3, [pc, #12]	; (769c <bt_conn_index+0x10>)
    768e:	1ac0      	subs	r0, r0, r3
    7690:	4b03      	ldr	r3, [pc, #12]	; (76a0 <bt_conn_index+0x14>)
    7692:	10c0      	asrs	r0, r0, #3
    7694:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    7696:	b2c0      	uxtb	r0, r0
    7698:	4770      	bx	lr
    769a:	bf00      	nop
    769c:	20000310 	.word	0x20000310
    76a0:	286bca1b 	.word	0x286bca1b

000076a4 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    76a4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    76a6:	490b      	ldr	r1, [pc, #44]	; (76d4 <bt_conn_init+0x30>)
    76a8:	480b      	ldr	r0, [pc, #44]	; (76d8 <bt_conn_init+0x34>)
    76aa:	f00f fa52 	bl	16b52 <k_queue_append>
    76ae:	490b      	ldr	r1, [pc, #44]	; (76dc <bt_conn_init+0x38>)
    76b0:	4809      	ldr	r0, [pc, #36]	; (76d8 <bt_conn_init+0x34>)
    76b2:	f00f fa4e 	bl	16b52 <k_queue_append>
    76b6:	490a      	ldr	r1, [pc, #40]	; (76e0 <bt_conn_init+0x3c>)
    76b8:	4807      	ldr	r0, [pc, #28]	; (76d8 <bt_conn_init+0x34>)
    76ba:	f00f fa4a 	bl	16b52 <k_queue_append>
	}

	bt_att_init();
    76be:	f00d f97d 	bl	149bc <bt_att_init>

	err = bt_smp_init();
    76c2:	f001 fe55 	bl	9370 <bt_smp_init>
	if (err) {
    76c6:	4604      	mov	r4, r0
    76c8:	b908      	cbnz	r0, 76ce <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    76ca:	f00c fdc0 	bl	1424e <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    76ce:	4620      	mov	r0, r4
    76d0:	bd10      	pop	{r4, pc}
    76d2:	bf00      	nop
    76d4:	200002bc 	.word	0x200002bc
    76d8:	20005538 	.word	0x20005538
    76dc:	200002d8 	.word	0x200002d8
    76e0:	200002f4 	.word	0x200002f4

000076e4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    76e4:	4a08      	ldr	r2, [pc, #32]	; (7708 <l2cap_accept+0x24>)
    76e6:	6813      	ldr	r3, [r2, #0]
    76e8:	b11b      	cbz	r3, 76f2 <l2cap_accept+0xe>
    76ea:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    76ee:	b943      	cbnz	r3, 7702 <l2cap_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    76f0:	2301      	movs	r3, #1
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    76f2:	20ac      	movs	r0, #172	; 0xac
    76f4:	fb00 2303 	mla	r3, r0, r3, r2
    76f8:	4a04      	ldr	r2, [pc, #16]	; (770c <l2cap_accept+0x28>)
    76fa:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;

		return 0;
    76fc:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    76fe:	600b      	str	r3, [r1, #0]
		return 0;
    7700:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7702:	f06f 000b 	mvn.w	r0, #11
}
    7706:	4770      	bx	lr
    7708:	20000440 	.word	0x20000440
    770c:	2000508c 	.word	0x2000508c

00007710 <bt_l2cap_connected>:
{
    7710:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7714:	4f26      	ldr	r7, [pc, #152]	; (77b0 <bt_l2cap_connected+0xa0>)
    7716:	f8df 809c 	ldr.w	r8, [pc, #156]	; 77b4 <bt_l2cap_connected+0xa4>
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    771a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 77b8 <bt_l2cap_connected+0xa8>
    771e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 77bc <bt_l2cap_connected+0xac>
{
    7722:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7724:	4547      	cmp	r7, r8
    7726:	d302      	bcc.n	772e <bt_l2cap_connected+0x1e>
}
    7728:	b002      	add	sp, #8
    772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    772e:	687b      	ldr	r3, [r7, #4]
    7730:	a901      	add	r1, sp, #4
    7732:	4628      	mov	r0, r5
    7734:	4798      	blx	r3
    7736:	2800      	cmp	r0, #0
    7738:	db35      	blt.n	77a6 <bt_l2cap_connected+0x96>
		ch = BT_L2CAP_LE_CHAN(chan);
    773a:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    773c:	883b      	ldrh	r3, [r7, #0]
    773e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		ch->tx.cid = fchan->cid;
    7742:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    7746:	2600      	movs	r6, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7748:	4649      	mov	r1, r9
    774a:	f104 0010 	add.w	r0, r4, #16
    774e:	f00f fc39 	bl	16fc4 <k_delayed_work_init>
    7752:	e9c4 6a0d 	strd	r6, sl, [r4, #52]	; 0x34
    7756:	63e6      	str	r6, [r4, #60]	; 0x3c
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    7758:	f104 0040 	add.w	r0, r4, #64	; 0x40
    775c:	f00f f9f1 	bl	16b42 <z_impl_k_queue_init>
	parent->next = child;
    7760:	60a6      	str	r6, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    7762:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_append(&conn->channels, &chan->node);
    7764:	f104 0308 	add.w	r3, r4, #8
    7768:	b9fa      	cbnz	r2, 77aa <bt_l2cap_connected+0x9a>
	list->head = node;
    776a:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
		if (chan->ops->connected) {
    776e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    7770:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    7772:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    7774:	60e6      	str	r6, [r4, #12]
		if (chan->ops->connected) {
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	b103      	cbz	r3, 777c <bt_l2cap_connected+0x6c>
			chan->ops->connected(chan);
    777a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    777c:	9b01      	ldr	r3, [sp, #4]
    777e:	f3bf 8f5b 	dmb	ish
    7782:	3330      	adds	r3, #48	; 0x30
    7784:	e853 2f00 	ldrex	r2, [r3]
    7788:	f042 0201 	orr.w	r2, r2, #1
    778c:	e843 2100 	strex	r1, r2, [r3]
    7790:	2900      	cmp	r1, #0
    7792:	d1f7      	bne.n	7784 <bt_l2cap_connected+0x74>
    7794:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    7798:	9801      	ldr	r0, [sp, #4]
    779a:	6843      	ldr	r3, [r0, #4]
    779c:	699b      	ldr	r3, [r3, #24]
    779e:	b113      	cbz	r3, 77a6 <bt_l2cap_connected+0x96>
			chan->ops->status(chan, chan->status);
    77a0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    77a4:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    77a6:	3708      	adds	r7, #8
    77a8:	e7bc      	b.n	7724 <bt_l2cap_connected+0x14>
	parent->next = child;
    77aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
    77ac:	642b      	str	r3, [r5, #64]	; 0x40
    77ae:	e7de      	b.n	776e <bt_l2cap_connected+0x5e>
    77b0:	000173a4 	.word	0x000173a4
    77b4:	000173bc 	.word	0x000173bc
    77b8:	00014115 	.word	0x00014115
    77bc:	0001406f 	.word	0x0001406f

000077c0 <bt_l2cap_recv>:
{
    77c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    77c2:	898b      	ldrh	r3, [r1, #12]
    77c4:	2b03      	cmp	r3, #3
{
    77c6:	4604      	mov	r4, r0
    77c8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    77ca:	d804      	bhi.n	77d6 <bt_l2cap_recv+0x16>
		net_buf_unref(buf);
    77cc:	4628      	mov	r0, r5
}
    77ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_unref(buf);
    77d2:	f008 bbc9 	b.w	ff68 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    77d6:	2104      	movs	r1, #4
    77d8:	f105 0008 	add.w	r0, r5, #8
    77dc:	f00e fdf1 	bl	163c2 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    77e0:	8841      	ldrh	r1, [r0, #2]
    77e2:	4620      	mov	r0, r4
    77e4:	f00c fd28 	bl	14238 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    77e8:	4604      	mov	r4, r0
    77ea:	2800      	cmp	r0, #0
    77ec:	d0ee      	beq.n	77cc <bt_l2cap_recv+0xc>
	net_buf_put(&chan->rx_queue, buf);
    77ee:	4629      	mov	r1, r5
    77f0:	3040      	adds	r0, #64	; 0x40
    77f2:	f00e fdae 	bl	16352 <net_buf_put>
    77f6:	f3bf 8f5b 	dmb	ish
    77fa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    77fe:	e853 2f00 	ldrex	r2, [r3]
    7802:	f042 0101 	orr.w	r1, r2, #1
    7806:	e843 1000 	strex	r0, r1, [r3]
    780a:	2800      	cmp	r0, #0
    780c:	d1f7      	bne.n	77fe <bt_l2cap_recv+0x3e>
    780e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7812:	07d3      	lsls	r3, r2, #31
    7814:	d406      	bmi.n	7824 <bt_l2cap_recv+0x64>
		k_queue_append(&work_q->queue, work);
    7816:	f104 0134 	add.w	r1, r4, #52	; 0x34
    781a:	4803      	ldr	r0, [pc, #12]	; (7828 <bt_l2cap_recv+0x68>)
}
    781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7820:	f00f b997 	b.w	16b52 <k_queue_append>
    7824:	bd38      	pop	{r3, r4, r5, pc}
    7826:	bf00      	nop
    7828:	20001f38 	.word	0x20001f38

0000782c <bt_l2cap_update_conn_param>:
{
    782c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ident++;
    7830:	4b19      	ldr	r3, [pc, #100]	; (7898 <bt_l2cap_update_conn_param+0x6c>)
    7832:	781a      	ldrb	r2, [r3, #0]
    7834:	3201      	adds	r2, #1
	if (!ident) {
    7836:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    783a:	bf08      	it	eq
    783c:	2201      	moveq	r2, #1
{
    783e:	460e      	mov	r6, r1
		ident++;
    7840:	701a      	strb	r2, [r3, #0]
{
    7842:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7844:	2104      	movs	r1, #4
    7846:	2000      	movs	r0, #0
	return ident;
    7848:	781c      	ldrb	r4, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    784a:	f7ff fe53 	bl	74f4 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    784e:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7852:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7854:	2104      	movs	r1, #4
    7856:	4640      	mov	r0, r8
    7858:	f00e fd8c 	bl	16374 <net_buf_simple_add>
	hdr->code = code;
    785c:	2312      	movs	r3, #18
	hdr->ident = ident;
    785e:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7860:	2108      	movs	r1, #8
    7862:	2400      	movs	r4, #0
	hdr->code = code;
    7864:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    7866:	7081      	strb	r1, [r0, #2]
    7868:	70c4      	strb	r4, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    786a:	4640      	mov	r0, r8
    786c:	f00e fd82 	bl	16374 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7870:	8833      	ldrh	r3, [r6, #0]
    7872:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7874:	8873      	ldrh	r3, [r6, #2]
    7876:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7878:	88b3      	ldrh	r3, [r6, #4]
    787a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    787c:	88f3      	ldrh	r3, [r6, #6]
    787e:	80c3      	strh	r3, [r0, #6]
		      bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    7880:	463a      	mov	r2, r7
    7882:	4628      	mov	r0, r5
    7884:	9400      	str	r4, [sp, #0]
    7886:	4623      	mov	r3, r4
    7888:	2105      	movs	r1, #5
    788a:	f00c fc79 	bl	14180 <bt_l2cap_send_cb>
}
    788e:	4620      	mov	r0, r4
    7890:	b002      	add	sp, #8
    7892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7896:	bf00      	nop
    7898:	20002146 	.word	0x20002146

0000789c <att_op_get_type>:
		att_indicate },
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(u8_t op)
{
    789c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    789e:	4a0a      	ldr	r2, [pc, #40]	; (78c8 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    78a0:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    78a2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    78a6:	4284      	cmp	r4, r0
    78a8:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    78ac:	d102      	bne.n	78b4 <att_op_get_type+0x18>
			return handlers[i].type;
    78ae:	440a      	add	r2, r1
    78b0:	7890      	ldrb	r0, [r2, #2]
	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
}
    78b2:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    78b4:	3301      	adds	r3, #1
    78b6:	2b0d      	cmp	r3, #13
    78b8:	d1f3      	bne.n	78a2 <att_op_get_type+0x6>
	return ATT_UNKNOWN;
    78ba:	f010 0f40 	tst.w	r0, #64	; 0x40
    78be:	bf14      	ite	ne
    78c0:	2000      	movne	r0, #0
    78c2:	2006      	moveq	r0, #6
    78c4:	e7f5      	b.n	78b2 <att_op_get_type+0x16>
    78c6:	bf00      	nop
    78c8:	00017798 	.word	0x00017798

000078cc <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    78cc:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    78ce:	4c11      	ldr	r4, [pc, #68]	; (7914 <bt_att_accept+0x48>)
    78d0:	6825      	ldr	r5, [r4, #0]
{
    78d2:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    78d4:	b1cd      	cbz	r5, 790a <bt_att_accept+0x3e>
    78d6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    78da:	b9c3      	cbnz	r3, 790e <bt_att_accept+0x42>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    78dc:	2501      	movs	r5, #1
		struct bt_att *att = &bt_req_pool[i];
    78de:	f504 7082 	add.w	r0, r4, #260	; 0x104
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    78e2:	f44f 7282 	mov.w	r2, #260	; 0x104
    78e6:	2100      	movs	r1, #0
    78e8:	f00b fde9 	bl	134be <memset>
		att->chan.chan.ops = &ops;
    78ec:	f44f 7082 	mov.w	r0, #260	; 0x104
    78f0:	4368      	muls	r0, r5
    78f2:	1825      	adds	r5, r4, r0
    78f4:	4b08      	ldr	r3, [pc, #32]	; (7918 <bt_att_accept+0x4c>)
    78f6:	606b      	str	r3, [r5, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    78f8:	2202      	movs	r2, #2
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    78fa:	30dc      	adds	r0, #220	; 0xdc
    78fc:	4420      	add	r0, r4
    78fe:	4611      	mov	r1, r2
    7900:	f00f fac3 	bl	16e8a <z_impl_k_sem_init>
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    7904:	6035      	str	r5, [r6, #0]

		return 0;
    7906:	2000      	movs	r0, #0
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    7908:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_att *att = &bt_req_pool[i];
    790a:	4620      	mov	r0, r4
    790c:	e7e9      	b.n	78e2 <bt_att_accept+0x16>
	return -ENOMEM;
    790e:	f06f 000b 	mvn.w	r0, #11
    7912:	e7f9      	b.n	7908 <bt_att_accept+0x3c>
    7914:	20000598 	.word	0x20000598
    7918:	200050a8 	.word	0x200050a8

0000791c <bt_att_connected>:
{
    791c:	b510      	push	{r4, lr}
    791e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    7920:	30f4      	adds	r0, #244	; 0xf4
    7922:	f00f f90e 	bl	16b42 <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7926:	2317      	movs	r3, #23
    7928:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    792c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	k_delayed_work_init(&att->timeout_work, att_timeout);
    7930:	4904      	ldr	r1, [pc, #16]	; (7944 <bt_att_connected+0x28>)
    7932:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    7936:	f00f fb45 	bl	16fc4 <k_delayed_work_init>
	list->head = NULL;
    793a:	2300      	movs	r3, #0
	list->tail = NULL;
    793c:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
}
    7940:	bd10      	pop	{r4, pc}
    7942:	bf00      	nop
    7944:	000147df 	.word	0x000147df

00007948 <att_cb.isra.5>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    7948:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    794a:	7800      	ldrb	r0, [r0, #0]
    794c:	f7ff ffa6 	bl	789c <att_op_get_type>
    7950:	3801      	subs	r0, #1
    7952:	b2c0      	uxtb	r0, r0
    7954:	2804      	cmp	r0, #4
    7956:	bf96      	itet	ls
    7958:	4b02      	ldrls	r3, [pc, #8]	; (7964 <att_cb.isra.5+0x1c>)
    795a:	4803      	ldrhi	r0, [pc, #12]	; (7968 <att_cb.isra.5+0x20>)
    795c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    7960:	bd08      	pop	{r3, pc}
    7962:	bf00      	nop
    7964:	00017784 	.word	0x00017784
    7968:	000145df 	.word	0x000145df

0000796c <att_handle_rsp>:
{
    796c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7970:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    7972:	30bc      	adds	r0, #188	; 0xbc
{
    7974:	461e      	mov	r6, r3
    7976:	460f      	mov	r7, r1
    7978:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    797a:	f00f fb2b 	bl	16fd4 <k_delayed_work_cancel>
	if (!att->req) {
    797e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    7982:	b12b      	cbz	r3, 7990 <att_handle_rsp+0x24>
	if (att->req == &cancel) {
    7984:	4a19      	ldr	r2, [pc, #100]	; (79ec <att_handle_rsp+0x80>)
    7986:	4293      	cmp	r3, r2
    7988:	d115      	bne.n	79b6 <att_handle_rsp+0x4a>
		att->req = NULL;
    798a:	2300      	movs	r3, #0
    798c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
Z_GENLIST_IS_EMPTY(slist)
    7990:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
Z_GENLIST_GET(slist, snode)
    7994:	b159      	cbz	r1, 79ae <att_handle_rsp+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7996:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return node->next;
    799a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    799c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    79a0:	4291      	cmp	r1, r2
	list->tail = node;
    79a2:	bf08      	it	eq
    79a4:	f8c4 30b8 	streq.w	r3, [r4, #184]	; 0xb8
	att_send_req(att, ATT_REQ(node));
    79a8:	4620      	mov	r0, r4
    79aa:	f00c fe62 	bl	14672 <att_send_req>
}
    79ae:	2000      	movs	r0, #0
    79b0:	b002      	add	sp, #8
    79b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->req->buf) {
    79b6:	6918      	ldr	r0, [r3, #16]
    79b8:	b128      	cbz	r0, 79c6 <att_handle_rsp+0x5a>
		net_buf_unref(att->req->buf);
    79ba:	f008 fad5 	bl	ff68 <net_buf_unref>
		att->req->buf = NULL;
    79be:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    79c2:	2200      	movs	r2, #0
    79c4:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    79c6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    79ca:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    79cc:	685d      	ldr	r5, [r3, #4]
	att->req->func = NULL;
    79ce:	2200      	movs	r2, #0
    79d0:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    79d2:	4631      	mov	r1, r6
    79d4:	9300      	str	r3, [sp, #0]
    79d6:	463a      	mov	r2, r7
    79d8:	4643      	mov	r3, r8
    79da:	47a8      	blx	r5
	if (!att->req->func) {
    79dc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    79e0:	6843      	ldr	r3, [r0, #4]
    79e2:	2b00      	cmp	r3, #0
    79e4:	d1d1      	bne.n	798a <att_handle_rsp+0x1e>
		att_req_destroy(att->req);
    79e6:	f00c fc35 	bl	14254 <att_req_destroy>
    79ea:	e7ce      	b.n	798a <att_handle_rsp+0x1e>
    79ec:	200007a0 	.word	0x200007a0

000079f0 <att_req_sent>:
{
    79f0:	b538      	push	{r3, r4, r5, lr}
    79f2:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    79f4:	2104      	movs	r1, #4
{
    79f6:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    79f8:	f00c fc13 	bl	14222 <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    79fc:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
    7a00:	b133      	cbz	r3, 7a10 <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7a02:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    7a06:	f247 5230 	movw	r2, #30000	; 0x7530
    7a0a:	4804      	ldr	r0, [pc, #16]	; (7a1c <att_req_sent+0x2c>)
    7a0c:	f009 fdc0 	bl	11590 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    7a10:	4629      	mov	r1, r5
    7a12:	4620      	mov	r0, r4
}
    7a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    7a18:	f00c bde1 	b.w	145de <att_pdu_sent>
    7a1c:	20001f38 	.word	0x20001f38

00007a20 <att_write_cmd>:
{
    7a20:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7a22:	6804      	ldr	r4, [r0, #0]
{
    7a24:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    7a26:	f101 0008 	add.w	r0, r1, #8
{
    7a2a:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    7a2c:	f00e fcd1 	bl	163d2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7a30:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    7a32:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7a34:	4620      	mov	r0, r4
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    7a36:	68af      	ldr	r7, [r5, #8]
    7a38:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7a3a:	f00d f9af 	bl	14d9c <bt_gatt_change_aware>
    7a3e:	b328      	cbz	r0, 7a8c <att_write_cmd+0x6c>
	if (!handle) {
    7a40:	b336      	cbz	r6, 7a90 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    7a42:	2218      	movs	r2, #24
    7a44:	2100      	movs	r1, #0
    7a46:	a802      	add	r0, sp, #8
    7a48:	f00b fd39 	bl	134be <memset>
	data.req = req;
    7a4c:	2300      	movs	r3, #0
    7a4e:	f88d 3010 	strb.w	r3, [sp, #16]
	data.offset = offset;
    7a52:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7a56:	2301      	movs	r3, #1
    7a58:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7a5c:	4a0d      	ldr	r2, [pc, #52]	; (7a94 <att_write_cmd+0x74>)
	data.conn = conn;
    7a5e:	9402      	str	r4, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7a60:	ab02      	add	r3, sp, #8
    7a62:	4631      	mov	r1, r6
    7a64:	4630      	mov	r0, r6
	data.value = value;
    7a66:	9705      	str	r7, [sp, #20]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    7a68:	f88d 5018 	strb.w	r5, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7a6c:	f00c fc03 	bl	14276 <bt_gatt_foreach_attr>
	if (data.err) {
    7a70:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7a74:	b93b      	cbnz	r3, 7a86 <att_write_cmd+0x66>
	if (data.buf) {
    7a76:	9a03      	ldr	r2, [sp, #12]
    7a78:	b12a      	cbz	r2, 7a86 <att_write_cmd+0x66>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    7a7a:	9300      	str	r3, [sp, #0]
    7a7c:	2104      	movs	r1, #4
    7a7e:	4b06      	ldr	r3, [pc, #24]	; (7a98 <att_write_cmd+0x78>)
    7a80:	4620      	mov	r0, r4
    7a82:	f00c fb7d 	bl	14180 <bt_l2cap_send_cb>
    7a86:	2000      	movs	r0, #0
}
    7a88:	b009      	add	sp, #36	; 0x24
    7a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7a8c:	2012      	movs	r0, #18
    7a8e:	e7fb      	b.n	7a88 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    7a90:	2001      	movs	r0, #1
    7a92:	e7f9      	b.n	7a88 <att_write_cmd+0x68>
    7a94:	00014883 	.word	0x00014883
    7a98:	0001482b 	.word	0x0001482b

00007a9c <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    7a9c:	688b      	ldr	r3, [r1, #8]
{
    7a9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    7aa2:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7aa4:	2d16      	cmp	r5, #22
{
    7aa6:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7aa8:	d922      	bls.n	7af0 <att_mtu_req+0x54>
	struct bt_conn *conn = att->chan.chan.conn;
    7aaa:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7aae:	2202      	movs	r2, #2
    7ab0:	2103      	movs	r1, #3
    7ab2:	4640      	mov	r0, r8
    7ab4:	f00c ff51 	bl	1495a <bt_att_create_pdu>
	if (!pdu) {
    7ab8:	4607      	mov	r7, r0
    7aba:	b1d8      	cbz	r0, 7af4 <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    7abc:	2102      	movs	r1, #2
    7abe:	3008      	adds	r0, #8
    7ac0:	f00e fc58 	bl	16374 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7ac4:	2400      	movs	r4, #0
    7ac6:	2341      	movs	r3, #65	; 0x41
    7ac8:	7003      	strb	r3, [r0, #0]
    7aca:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    7acc:	4b0a      	ldr	r3, [pc, #40]	; (7af8 <att_mtu_req+0x5c>)
    7ace:	9400      	str	r4, [sp, #0]
    7ad0:	4640      	mov	r0, r8
    7ad2:	463a      	mov	r2, r7
    7ad4:	2104      	movs	r1, #4
    7ad6:	f00c fb53 	bl	14180 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    7ada:	2d41      	cmp	r5, #65	; 0x41
    7adc:	bf28      	it	cs
    7ade:	2541      	movcs	r5, #65	; 0x41
    7ae0:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	att->chan.tx.mtu = att->chan.rx.mtu;
    7ae4:	f8a6 5072 	strh.w	r5, [r6, #114]	; 0x72
	return 0;
    7ae8:	4620      	mov	r0, r4
}
    7aea:	b002      	add	sp, #8
    7aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    7af0:	2004      	movs	r0, #4
    7af2:	e7fa      	b.n	7aea <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
    7af4:	200e      	movs	r0, #14
    7af6:	e7f8      	b.n	7aea <att_mtu_req+0x4e>
    7af8:	0001482b 	.word	0x0001482b

00007afc <send_err_rsp.part.8>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7b00:	4688      	mov	r8, r1
    7b02:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7b04:	2101      	movs	r1, #1
    7b06:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7b08:	4605      	mov	r5, r0
    7b0a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7b0c:	f00c ff25 	bl	1495a <bt_att_create_pdu>
	if (!buf) {
    7b10:	4604      	mov	r4, r0
    7b12:	b180      	cbz	r0, 7b36 <send_err_rsp.part.8+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7b14:	2104      	movs	r1, #4
    7b16:	3008      	adds	r0, #8
    7b18:	f00e fc2c 	bl	16374 <net_buf_simple_add>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7b1c:	2300      	movs	r3, #0
	rsp->request = req;
    7b1e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    7b22:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    7b26:	70c6      	strb	r6, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7b28:	4622      	mov	r2, r4
    7b2a:	9300      	str	r3, [sp, #0]
    7b2c:	2104      	movs	r1, #4
    7b2e:	4b03      	ldr	r3, [pc, #12]	; (7b3c <send_err_rsp.part.8+0x40>)
    7b30:	4628      	mov	r0, r5
    7b32:	f00c fb25 	bl	14180 <bt_l2cap_send_cb>
}
    7b36:	b002      	add	sp, #8
    7b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b3c:	0001482b 	.word	0x0001482b

00007b40 <bt_att_recv>:
{
    7b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    7b42:	898b      	ldrh	r3, [r1, #12]
{
    7b44:	4604      	mov	r4, r0
    7b46:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    7b48:	b3ab      	cbz	r3, 7bb6 <bt_att_recv+0x76>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7b4a:	2101      	movs	r1, #1
    7b4c:	f106 0008 	add.w	r0, r6, #8
    7b50:	f00e fc37 	bl	163c2 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    7b54:	4a2d      	ldr	r2, [pc, #180]	; (7c0c <bt_att_recv+0xcc>)
    7b56:	7805      	ldrb	r5, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7b58:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7b5a:	2300      	movs	r3, #0
    7b5c:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    7b5e:	f812 c033 	ldrb.w	ip, [r2, r3, lsl #3]
    7b62:	45ac      	cmp	ip, r5
    7b64:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    7b68:	d117      	bne.n	7b9a <bt_att_recv+0x5a>
		if (handler->type == ATT_REQUEST &&
    7b6a:	4402      	add	r2, r0
    7b6c:	7895      	ldrb	r5, [r2, #2]
    7b6e:	2d01      	cmp	r5, #1
    7b70:	d023      	beq.n	7bba <bt_att_recv+0x7a>
		} else if (handler->type == ATT_INDICATION &&
    7b72:	2d05      	cmp	r5, #5
    7b74:	d133      	bne.n	7bde <bt_att_recv+0x9e>
    7b76:	f3bf 8f5b 	dmb	ish
    7b7a:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    7b7e:	e852 3f00 	ldrex	r3, [r2]
    7b82:	f043 0c02 	orr.w	ip, r3, #2
    7b86:	e842 ce00 	strex	lr, ip, [r2]
    7b8a:	f1be 0f00 	cmp.w	lr, #0
    7b8e:	d1f6      	bne.n	7b7e <bt_att_recv+0x3e>
    7b90:	f3bf 8f5b 	dmb	ish
    7b94:	f013 0f02 	tst.w	r3, #2
    7b98:	e020      	b.n	7bdc <bt_att_recv+0x9c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7b9a:	3301      	adds	r3, #1
    7b9c:	2b0d      	cmp	r3, #13
    7b9e:	d1de      	bne.n	7b5e <bt_att_recv+0x1e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    7ba0:	4628      	mov	r0, r5
    7ba2:	f7ff fe7b 	bl	789c <att_op_get_type>
    7ba6:	b130      	cbz	r0, 7bb6 <bt_att_recv+0x76>
	if (!req) {
    7ba8:	b12d      	cbz	r5, 7bb6 <bt_att_recv+0x76>
    7baa:	2306      	movs	r3, #6
    7bac:	2200      	movs	r2, #0
    7bae:	4629      	mov	r1, r5
    7bb0:	6820      	ldr	r0, [r4, #0]
    7bb2:	f7ff ffa3 	bl	7afc <send_err_rsp.part.8>
}
    7bb6:	2000      	movs	r0, #0
    7bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bba:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    7bbe:	f3bf 8f5b 	dmb	ish
    7bc2:	e852 3f00 	ldrex	r3, [r2]
    7bc6:	f043 0c01 	orr.w	ip, r3, #1
    7bca:	e842 ce00 	strex	lr, ip, [r2]
    7bce:	f1be 0f00 	cmp.w	lr, #0
    7bd2:	d1f6      	bne.n	7bc2 <bt_att_recv+0x82>
    7bd4:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    7bd8:	f013 0f01 	tst.w	r3, #1
    7bdc:	d1eb      	bne.n	7bb6 <bt_att_recv+0x76>
	if (buf->len < handler->expect_len) {
    7bde:	180b      	adds	r3, r1, r0
    7be0:	89b1      	ldrh	r1, [r6, #12]
    7be2:	785a      	ldrb	r2, [r3, #1]
    7be4:	4291      	cmp	r1, r2
    7be6:	d203      	bcs.n	7bf0 <bt_att_recv+0xb0>
	if (handler->type == ATT_REQUEST && err) {
    7be8:	2d01      	cmp	r5, #1
    7bea:	d1e4      	bne.n	7bb6 <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    7bec:	2304      	movs	r3, #4
    7bee:	e008      	b.n	7c02 <bt_att_recv+0xc2>
		err = handler->func(att, buf);
    7bf0:	685b      	ldr	r3, [r3, #4]
    7bf2:	4631      	mov	r1, r6
    7bf4:	4620      	mov	r0, r4
    7bf6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7bf8:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    7bfa:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7bfc:	d1db      	bne.n	7bb6 <bt_att_recv+0x76>
    7bfe:	2800      	cmp	r0, #0
    7c00:	d0d9      	beq.n	7bb6 <bt_att_recv+0x76>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    7c02:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    7c04:	2900      	cmp	r1, #0
    7c06:	d0d6      	beq.n	7bb6 <bt_att_recv+0x76>
    7c08:	2200      	movs	r2, #0
    7c0a:	e7d1      	b.n	7bb0 <bt_att_recv+0x70>
    7c0c:	00017798 	.word	0x00017798

00007c10 <att_read_group_req>:
{
    7c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7c14:	898b      	ldrh	r3, [r1, #12]
    7c16:	2b06      	cmp	r3, #6
{
    7c18:	b08f      	sub	sp, #60	; 0x3c
    7c1a:	4681      	mov	r9, r0
    7c1c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7c1e:	d001      	beq.n	7c24 <att_read_group_req+0x14>
    7c20:	2b14      	cmp	r3, #20
    7c22:	d16e      	bne.n	7d02 <att_read_group_req+0xf2>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7c24:	2104      	movs	r1, #4
    7c26:	f104 0008 	add.w	r0, r4, #8
	struct bt_conn *conn = att->chan.chan.conn;
    7c2a:	f8d9 8000 	ldr.w	r8, [r9]
	req = net_buf_pull_mem(buf, sizeof(*req));
    7c2e:	f00e fbc8 	bl	163c2 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    7c32:	ae04      	add	r6, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    7c34:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7c36:	8847      	ldrh	r7, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7c38:	4621      	mov	r1, r4
    7c3a:	4630      	mov	r0, r6
    7c3c:	f00c fcfe 	bl	1463c <uuid_create>
    7c40:	2800      	cmp	r0, #0
    7c42:	d060      	beq.n	7d06 <att_read_group_req+0xf6>
	if (!start || !end) {
    7c44:	2d00      	cmp	r5, #0
    7c46:	d036      	beq.n	7cb6 <att_read_group_req+0xa6>
    7c48:	2400      	movs	r4, #0
    7c4a:	b39f      	cbz	r7, 7cb4 <att_read_group_req+0xa4>
	if (start > end) {
    7c4c:	42bd      	cmp	r5, r7
    7c4e:	d832      	bhi.n	7cb6 <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7c50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7c54:	a902      	add	r1, sp, #8
    7c56:	4630      	mov	r0, r6
    7c58:	f88d 4008 	strb.w	r4, [sp, #8]
    7c5c:	f8ad 300a 	strh.w	r3, [sp, #10]
    7c60:	f00b fccc 	bl	135fc <bt_uuid_cmp>
    7c64:	bb90      	cbnz	r0, 7ccc <att_read_group_req+0xbc>
	struct bt_conn *conn = att->chan.chan.conn;
    7c66:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    7c6a:	2214      	movs	r2, #20
    7c6c:	2100      	movs	r1, #0
    7c6e:	a809      	add	r0, sp, #36	; 0x24
    7c70:	f00b fc25 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7c74:	2201      	movs	r2, #1
    7c76:	2111      	movs	r1, #17
    7c78:	4640      	mov	r0, r8
    7c7a:	f00c fe6e 	bl	1495a <bt_att_create_pdu>
    7c7e:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    7c80:	2800      	cmp	r0, #0
    7c82:	d040      	beq.n	7d06 <att_read_group_req+0xf6>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7c84:	2101      	movs	r1, #1
    7c86:	3008      	adds	r0, #8
	data.uuid = uuid;
    7c88:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7c8c:	f00e fb72 	bl	16374 <net_buf_simple_add>
	data.rsp->len = 0U;
    7c90:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7c92:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7c94:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    7c96:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7c98:	4a1c      	ldr	r2, [pc, #112]	; (7d0c <att_read_group_req+0xfc>)
	data.group = NULL;
    7c9a:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7c9c:	4639      	mov	r1, r7
    7c9e:	4628      	mov	r0, r5
    7ca0:	f00c fae9 	bl	14276 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    7ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ca6:	781c      	ldrb	r4, [r3, #0]
    7ca8:	bb1c      	cbnz	r4, 7cf2 <att_read_group_req+0xe2>
		net_buf_unref(data.buf);
    7caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7cac:	f008 f95c 	bl	ff68 <net_buf_unref>
    7cb0:	230a      	movs	r3, #10
    7cb2:	e018      	b.n	7ce6 <att_read_group_req+0xd6>
			*err = 0U;
    7cb4:	463d      	mov	r5, r7
    7cb6:	2301      	movs	r3, #1
    7cb8:	462a      	mov	r2, r5
    7cba:	2110      	movs	r1, #16
    7cbc:	4640      	mov	r0, r8
    7cbe:	f7ff ff1d 	bl	7afc <send_err_rsp.part.8>
		return 0;
    7cc2:	2400      	movs	r4, #0
}
    7cc4:	4620      	mov	r0, r4
    7cc6:	b00f      	add	sp, #60	; 0x3c
    7cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7ccc:	f642 0301 	movw	r3, #10241	; 0x2801
    7cd0:	a903      	add	r1, sp, #12
    7cd2:	4630      	mov	r0, r6
    7cd4:	f88d 400c 	strb.w	r4, [sp, #12]
    7cd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    7cdc:	f00b fc8e 	bl	135fc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7ce0:	2800      	cmp	r0, #0
    7ce2:	d0c0      	beq.n	7c66 <att_read_group_req+0x56>
    7ce4:	2310      	movs	r3, #16
    7ce6:	462a      	mov	r2, r5
    7ce8:	2110      	movs	r1, #16
    7cea:	4640      	mov	r0, r8
    7cec:	f7ff ff06 	bl	7afc <send_err_rsp.part.8>
    7cf0:	e7e8      	b.n	7cc4 <att_read_group_req+0xb4>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    7cf2:	9600      	str	r6, [sp, #0]
    7cf4:	4b06      	ldr	r3, [pc, #24]	; (7d10 <att_read_group_req+0x100>)
    7cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7cf8:	2104      	movs	r1, #4
    7cfa:	4640      	mov	r0, r8
    7cfc:	f00c fa40 	bl	14180 <bt_l2cap_send_cb>
    7d00:	e7df      	b.n	7cc2 <att_read_group_req+0xb2>
		return BT_ATT_ERR_INVALID_PDU;
    7d02:	2404      	movs	r4, #4
    7d04:	e7de      	b.n	7cc4 <att_read_group_req+0xb4>
		return BT_ATT_ERR_UNLIKELY;
    7d06:	240e      	movs	r4, #14
    7d08:	e7dc      	b.n	7cc4 <att_read_group_req+0xb4>
    7d0a:	bf00      	nop
    7d0c:	0001428d 	.word	0x0001428d
    7d10:	0001482b 	.word	0x0001482b

00007d14 <att_read_mult_req>:
{
    7d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7d18:	6805      	ldr	r5, [r0, #0]
{
    7d1a:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    7d1c:	2214      	movs	r2, #20
{
    7d1e:	4606      	mov	r6, r0
    7d20:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    7d22:	a803      	add	r0, sp, #12
    7d24:	2100      	movs	r1, #0
    7d26:	f00b fbca 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    7d2a:	2200      	movs	r2, #0
    7d2c:	210f      	movs	r1, #15
    7d2e:	4628      	mov	r0, r5
    7d30:	f00c fe13 	bl	1495a <bt_att_create_pdu>
    7d34:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7d36:	b378      	cbz	r0, 7d98 <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7d38:	f8df 9064 	ldr.w	r9, [pc, #100]	; 7da0 <att_read_mult_req+0x8c>
	data.att = att;
    7d3c:	9603      	str	r6, [sp, #12]
		handle = net_buf_pull_le16(buf);
    7d3e:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7d42:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    7d46:	89a3      	ldrh	r3, [r4, #12]
    7d48:	2b01      	cmp	r3, #1
    7d4a:	d808      	bhi.n	7d5e <att_read_mult_req+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    7d4c:	2400      	movs	r4, #0
    7d4e:	9400      	str	r4, [sp, #0]
    7d50:	4b12      	ldr	r3, [pc, #72]	; (7d9c <att_read_mult_req+0x88>)
    7d52:	9a05      	ldr	r2, [sp, #20]
    7d54:	2104      	movs	r1, #4
    7d56:	4628      	mov	r0, r5
    7d58:	f00c fa12 	bl	14180 <bt_l2cap_send_cb>
    7d5c:	e018      	b.n	7d90 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    7d5e:	4638      	mov	r0, r7
    7d60:	f00e fb37 	bl	163d2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7d64:	ab03      	add	r3, sp, #12
    7d66:	464a      	mov	r2, r9
    7d68:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    7d6a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7d6c:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7d70:	f00c fa81 	bl	14276 <bt_gatt_foreach_attr>
		if (data.err) {
    7d74:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7d78:	2b00      	cmp	r3, #0
    7d7a:	d0e4      	beq.n	7d46 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    7d7c:	9805      	ldr	r0, [sp, #20]
    7d7e:	f008 f8f3 	bl	ff68 <net_buf_unref>
    7d82:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7d86:	4632      	mov	r2, r6
    7d88:	210e      	movs	r1, #14
    7d8a:	4628      	mov	r0, r5
    7d8c:	f7ff feb6 	bl	7afc <send_err_rsp.part.8>
			return 0;
    7d90:	2000      	movs	r0, #0
}
    7d92:	b009      	add	sp, #36	; 0x24
    7d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    7d98:	200e      	movs	r0, #14
    7d9a:	e7fa      	b.n	7d92 <att_read_mult_req+0x7e>
    7d9c:	0001482b 	.word	0x0001482b
    7da0:	000148e5 	.word	0x000148e5

00007da4 <att_read_rsp>:
{
    7da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7da8:	6805      	ldr	r5, [r0, #0]
{
    7daa:	b088      	sub	sp, #32
    7dac:	4604      	mov	r4, r0
    7dae:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7db0:	4628      	mov	r0, r5
    7db2:	2101      	movs	r1, #1
{
    7db4:	4690      	mov	r8, r2
    7db6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    7db8:	f00c fff0 	bl	14d9c <bt_gatt_change_aware>
    7dbc:	b3a0      	cbz	r0, 7e28 <att_read_rsp+0x84>
	if (!handle) {
    7dbe:	b3ae      	cbz	r6, 7e2c <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    7dc0:	2214      	movs	r2, #20
    7dc2:	2100      	movs	r1, #0
    7dc4:	a803      	add	r0, sp, #12
    7dc6:	f00b fb7a 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    7dca:	2200      	movs	r2, #0
    7dcc:	4641      	mov	r1, r8
    7dce:	4628      	mov	r0, r5
    7dd0:	f00c fdc3 	bl	1495a <bt_att_create_pdu>
    7dd4:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7dd6:	b358      	cbz	r0, 7e30 <att_read_rsp+0x8c>
	data.offset = offset;
    7dd8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7ddc:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7de0:	2301      	movs	r3, #1
    7de2:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7de6:	4a13      	ldr	r2, [pc, #76]	; (7e34 <att_read_rsp+0x90>)
	data.att = att;
    7de8:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7dea:	ab03      	add	r3, sp, #12
    7dec:	4631      	mov	r1, r6
    7dee:	4630      	mov	r0, r6
    7df0:	f00c fa41 	bl	14276 <bt_gatt_foreach_attr>
	if (data.err) {
    7df4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7df8:	b174      	cbz	r4, 7e18 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    7dfa:	9805      	ldr	r0, [sp, #20]
    7dfc:	f008 f8b4 	bl	ff68 <net_buf_unref>
    7e00:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7e04:	4632      	mov	r2, r6
    7e06:	4639      	mov	r1, r7
    7e08:	4628      	mov	r0, r5
    7e0a:	f7ff fe77 	bl	7afc <send_err_rsp.part.8>
		return 0;
    7e0e:	2400      	movs	r4, #0
}
    7e10:	4620      	mov	r0, r4
    7e12:	b008      	add	sp, #32
    7e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    7e18:	9400      	str	r4, [sp, #0]
    7e1a:	4b07      	ldr	r3, [pc, #28]	; (7e38 <att_read_rsp+0x94>)
    7e1c:	9a05      	ldr	r2, [sp, #20]
    7e1e:	2104      	movs	r1, #4
    7e20:	4628      	mov	r0, r5
    7e22:	f00c f9ad 	bl	14180 <bt_l2cap_send_cb>
	return 0;
    7e26:	e7f3      	b.n	7e10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7e28:	2412      	movs	r4, #18
    7e2a:	e7f1      	b.n	7e10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    7e2c:	2401      	movs	r4, #1
    7e2e:	e7ef      	b.n	7e10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7e30:	240e      	movs	r4, #14
    7e32:	e7ed      	b.n	7e10 <att_read_rsp+0x6c>
    7e34:	000148e5 	.word	0x000148e5
    7e38:	0001482b 	.word	0x0001482b

00007e3c <att_read_type_req>:
{
    7e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7e40:	898b      	ldrh	r3, [r1, #12]
    7e42:	2b06      	cmp	r3, #6
{
    7e44:	b08f      	sub	sp, #60	; 0x3c
    7e46:	4607      	mov	r7, r0
    7e48:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7e4a:	d001      	beq.n	7e50 <att_read_type_req+0x14>
    7e4c:	2b14      	cmp	r3, #20
    7e4e:	d154      	bne.n	7efa <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7e50:	2104      	movs	r1, #4
    7e52:	f106 0008 	add.w	r0, r6, #8
	struct bt_conn *conn = att->chan.chan.conn;
    7e56:	f8d7 9000 	ldr.w	r9, [r7]
	req = net_buf_pull_mem(buf, sizeof(*req));
    7e5a:	f00e fab2 	bl	163c2 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    7e5e:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    7e62:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7e64:	8844      	ldrh	r4, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7e66:	4631      	mov	r1, r6
    7e68:	4640      	mov	r0, r8
    7e6a:	f00c fbe7 	bl	1463c <uuid_create>
    7e6e:	b180      	cbz	r0, 7e92 <att_read_type_req+0x56>
	if (!start || !end) {
    7e70:	b195      	cbz	r5, 7e98 <att_read_type_req+0x5c>
    7e72:	b184      	cbz	r4, 7e96 <att_read_type_req+0x5a>
	if (start > end) {
    7e74:	42ac      	cmp	r4, r5
    7e76:	d30f      	bcc.n	7e98 <att_read_type_req+0x5c>
	struct bt_conn *conn = att->chan.chan.conn;
    7e78:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    7e7a:	2218      	movs	r2, #24
    7e7c:	2100      	movs	r1, #0
    7e7e:	a808      	add	r0, sp, #32
    7e80:	f00b fb1d 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    7e84:	2201      	movs	r2, #1
    7e86:	2109      	movs	r1, #9
    7e88:	4630      	mov	r0, r6
    7e8a:	f00c fd66 	bl	1495a <bt_att_create_pdu>
    7e8e:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    7e90:	b968      	cbnz	r0, 7eae <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
    7e92:	240e      	movs	r4, #14
    7e94:	e007      	b.n	7ea6 <att_read_type_req+0x6a>
			*err = 0U;
    7e96:	4625      	mov	r5, r4
    7e98:	2301      	movs	r3, #1
    7e9a:	462a      	mov	r2, r5
    7e9c:	2108      	movs	r1, #8
    7e9e:	4648      	mov	r0, r9
    7ea0:	f7ff fe2c 	bl	7afc <send_err_rsp.part.8>
		return 0;
    7ea4:	2400      	movs	r4, #0
}
    7ea6:	4620      	mov	r0, r4
    7ea8:	b00f      	add	sp, #60	; 0x3c
    7eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7eae:	2101      	movs	r1, #1
    7eb0:	3008      	adds	r0, #8
	data.uuid = uuid;
    7eb2:	e9cd 7808 	strd	r7, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7eb6:	f00e fa5d 	bl	16374 <net_buf_simple_add>
	data.rsp->len = 0U;
    7eba:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7ebc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7ebe:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7ec0:	4621      	mov	r1, r4
	data.rsp->len = 0U;
    7ec2:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7ec4:	4a0e      	ldr	r2, [pc, #56]	; (7f00 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7ec6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7eca:	4628      	mov	r0, r5
    7ecc:	ab08      	add	r3, sp, #32
    7ece:	f00c f9d2 	bl	14276 <bt_gatt_foreach_attr>
	if (data.err) {
    7ed2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    7ed6:	b144      	cbz	r4, 7eea <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    7ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
    7eda:	f008 f845 	bl	ff68 <net_buf_unref>
    7ede:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    7ee2:	462a      	mov	r2, r5
    7ee4:	2108      	movs	r1, #8
    7ee6:	4630      	mov	r0, r6
    7ee8:	e7da      	b.n	7ea0 <att_read_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    7eea:	9400      	str	r4, [sp, #0]
    7eec:	4b05      	ldr	r3, [pc, #20]	; (7f04 <att_read_type_req+0xc8>)
    7eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7ef0:	2104      	movs	r1, #4
    7ef2:	4630      	mov	r0, r6
    7ef4:	f00c f944 	bl	14180 <bt_l2cap_send_cb>
    7ef8:	e7d5      	b.n	7ea6 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
    7efa:	2404      	movs	r4, #4
    7efc:	e7d3      	b.n	7ea6 <att_read_type_req+0x6a>
    7efe:	bf00      	nop
    7f00:	000144eb 	.word	0x000144eb
    7f04:	0001482b 	.word	0x0001482b

00007f08 <att_find_type_req>:
{
    7f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f0c:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    7f0e:	f8d0 b000 	ldr.w	fp, [r0]
{
    7f12:	b08b      	sub	sp, #44	; 0x2c
    7f14:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    7f16:	2106      	movs	r1, #6
    7f18:	f108 0008 	add.w	r0, r8, #8
    7f1c:	f00e fa51 	bl	163c2 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7f20:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    7f22:	b1fd      	cbz	r5, 7f64 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7f24:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    7f26:	b1e7      	cbz	r7, 7f62 <att_find_type_req+0x5a>
	if (start > end) {
    7f28:	42af      	cmp	r7, r5
    7f2a:	d31b      	bcc.n	7f64 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    7f2c:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7f2e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7f32:	2400      	movs	r4, #0
    7f34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7f38:	a904      	add	r1, sp, #16
    7f3a:	a803      	add	r0, sp, #12
	value = buf->data;
    7f3c:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7f40:	f88d 400c 	strb.w	r4, [sp, #12]
    7f44:	f88d 4010 	strb.w	r4, [sp, #16]
    7f48:	f8ad 3012 	strh.w	r3, [sp, #18]
    7f4c:	f00b fb56 	bl	135fc <bt_uuid_cmp>
    7f50:	4606      	mov	r6, r0
    7f52:	b190      	cbz	r0, 7f7a <att_find_type_req+0x72>
    7f54:	230a      	movs	r3, #10
    7f56:	462a      	mov	r2, r5
    7f58:	2106      	movs	r1, #6
    7f5a:	4658      	mov	r0, fp
    7f5c:	f7ff fdce 	bl	7afc <send_err_rsp.part.8>
		return 0;
    7f60:	e007      	b.n	7f72 <att_find_type_req+0x6a>
			*err = 0U;
    7f62:	463d      	mov	r5, r7
    7f64:	2301      	movs	r3, #1
    7f66:	462a      	mov	r2, r5
    7f68:	2106      	movs	r1, #6
    7f6a:	4658      	mov	r0, fp
    7f6c:	f7ff fdc6 	bl	7afc <send_err_rsp.part.8>
		return 0;
    7f70:	2400      	movs	r4, #0
}
    7f72:	4620      	mov	r0, r4
    7f74:	b00b      	add	sp, #44	; 0x2c
    7f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(&data, 0, sizeof(data));
    7f7a:	2214      	movs	r2, #20
				 buf->len);
    7f7c:	f8b8 400c 	ldrh.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    7f80:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    7f84:	4601      	mov	r1, r0
    7f86:	eb0d 0002 	add.w	r0, sp, r2
    7f8a:	f00b fa98 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7f8e:	4632      	mov	r2, r6
    7f90:	2107      	movs	r1, #7
    7f92:	4640      	mov	r0, r8
    7f94:	f00c fce1 	bl	1495a <bt_att_create_pdu>
    7f98:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    7f9a:	b310      	cbz	r0, 7fe2 <att_find_type_req+0xda>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7f9c:	230a      	movs	r3, #10
    7f9e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7fa2:	4a11      	ldr	r2, [pc, #68]	; (7fe8 <att_find_type_req+0xe0>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    7fa4:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7fa8:	ab05      	add	r3, sp, #20
    7faa:	4639      	mov	r1, r7
    7fac:	4628      	mov	r0, r5
	data.att = att;
    7fae:	f8cd 9014 	str.w	r9, [sp, #20]
	data.value = value;
    7fb2:	e9cd 6a07 	strd	r6, sl, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7fb6:	f00c f95e 	bl	14276 <bt_gatt_foreach_attr>
	if (data.err) {
    7fba:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    7fbe:	b144      	cbz	r4, 7fd2 <att_find_type_req+0xca>
		net_buf_unref(data.buf);
    7fc0:	9806      	ldr	r0, [sp, #24]
    7fc2:	f007 ffd1 	bl	ff68 <net_buf_unref>
    7fc6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    7fca:	462a      	mov	r2, r5
    7fcc:	2106      	movs	r1, #6
    7fce:	4640      	mov	r0, r8
    7fd0:	e7cc      	b.n	7f6c <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    7fd2:	9400      	str	r4, [sp, #0]
    7fd4:	4b05      	ldr	r3, [pc, #20]	; (7fec <att_find_type_req+0xe4>)
    7fd6:	9a06      	ldr	r2, [sp, #24]
    7fd8:	2104      	movs	r1, #4
    7fda:	4640      	mov	r0, r8
    7fdc:	f00c f8d0 	bl	14180 <bt_l2cap_send_cb>
    7fe0:	e7c7      	b.n	7f72 <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    7fe2:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    7fe4:	e7c5      	b.n	7f72 <att_find_type_req+0x6a>
    7fe6:	bf00      	nop
    7fe8:	000143f5 	.word	0x000143f5
    7fec:	0001482b 	.word	0x0001482b

00007ff0 <att_find_info_req>:
{
    7ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7ff2:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    7ff4:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7ff6:	881d      	ldrh	r5, [r3, #0]
{
    7ff8:	b087      	sub	sp, #28
    7ffa:	4607      	mov	r7, r0
	if (!start || !end) {
    7ffc:	b195      	cbz	r5, 8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7ffe:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8000:	b17c      	cbz	r4, 8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
	if (start > end) {
    8002:	42a5      	cmp	r5, r4
    8004:	d80e      	bhi.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
	(void)memset(&data, 0, sizeof(data));
    8006:	2210      	movs	r2, #16
    8008:	2100      	movs	r1, #0
    800a:	a802      	add	r0, sp, #8
    800c:	f00b fa57 	bl	134be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8010:	2200      	movs	r2, #0
    8012:	2105      	movs	r1, #5
    8014:	4630      	mov	r0, r6
    8016:	f00c fca0 	bl	1495a <bt_att_create_pdu>
    801a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    801c:	b958      	cbnz	r0, 8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
		return BT_ATT_ERR_UNLIKELY;
    801e:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    8020:	e007      	b.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
			*err = 0U;
    8022:	4625      	mov	r5, r4
    8024:	2301      	movs	r3, #1
    8026:	462a      	mov	r2, r5
    8028:	2104      	movs	r1, #4
    802a:	4630      	mov	r0, r6
    802c:	f7ff fd66 	bl	7afc <send_err_rsp.part.8>
		return 0;
    8030:	2000      	movs	r0, #0
}
    8032:	b007      	add	sp, #28
    8034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8036:	4621      	mov	r1, r4
    8038:	ab02      	add	r3, sp, #8
    803a:	4a0a      	ldr	r2, [pc, #40]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
	data.att = att;
    803c:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    803e:	4628      	mov	r0, r5
    8040:	f00c f919 	bl	14276 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8044:	9c04      	ldr	r4, [sp, #16]
    8046:	b924      	cbnz	r4, 8052 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52>
		net_buf_unref(data.buf);
    8048:	9803      	ldr	r0, [sp, #12]
    804a:	f007 ff8d 	bl	ff68 <net_buf_unref>
    804e:	230a      	movs	r3, #10
    8050:	e7e9      	b.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    8052:	2400      	movs	r4, #0
    8054:	9400      	str	r4, [sp, #0]
    8056:	4b04      	ldr	r3, [pc, #16]	; (8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    8058:	9a03      	ldr	r2, [sp, #12]
    805a:	2104      	movs	r1, #4
    805c:	4630      	mov	r0, r6
    805e:	f00c f88f 	bl	14180 <bt_l2cap_send_cb>
    8062:	e7e5      	b.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    8064:	0001435b 	.word	0x0001435b
    8068:	0001482b 	.word	0x0001482b

0000806c <att_write_req>:
{
    806c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8070:	6805      	ldr	r5, [r0, #0]
{
    8072:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    8074:	f101 0008 	add.w	r0, r1, #8
{
    8078:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    807a:	f00e f9aa 	bl	163d2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    807e:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    8080:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    8082:	4628      	mov	r0, r5
			     handle, 0, buf->data, buf->len);
    8084:	f8d4 9008 	ldr.w	r9, [r4, #8]
    8088:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    808a:	f00c fe87 	bl	14d9c <bt_gatt_change_aware>
    808e:	2800      	cmp	r0, #0
    8090:	d040      	beq.n	8114 <att_write_req+0xa8>
	if (!handle) {
    8092:	2e00      	cmp	r6, #0
    8094:	d040      	beq.n	8118 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    8096:	2218      	movs	r2, #24
    8098:	2100      	movs	r1, #0
    809a:	a802      	add	r0, sp, #8
    809c:	f00b fa0f 	bl	134be <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    80a0:	2200      	movs	r2, #0
    80a2:	2113      	movs	r1, #19
    80a4:	4628      	mov	r0, r5
    80a6:	f00c fc58 	bl	1495a <bt_att_create_pdu>
    80aa:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    80ac:	b380      	cbz	r0, 8110 <att_write_req+0xa4>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    80ae:	2301      	movs	r3, #1
    80b0:	f88d 301c 	strb.w	r3, [sp, #28]
	data.req = req;
    80b4:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    80b8:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    80ba:	ab02      	add	r3, sp, #8
    80bc:	4a17      	ldr	r2, [pc, #92]	; (811c <att_write_req+0xb0>)
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    80be:	f88d 4018 	strb.w	r4, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    80c2:	4631      	mov	r1, r6
    80c4:	4630      	mov	r0, r6
	data.conn = conn;
    80c6:	9502      	str	r5, [sp, #8]
	data.req = req;
    80c8:	f88d 8010 	strb.w	r8, [sp, #16]
	data.offset = offset;
    80cc:	f8ad 701a 	strh.w	r7, [sp, #26]
	data.value = value;
    80d0:	f8cd 9014 	str.w	r9, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    80d4:	f00c f8cf 	bl	14276 <bt_gatt_foreach_attr>
	if (data.err) {
    80d8:	f89d 401c 	ldrb.w	r4, [sp, #28]
    80dc:	b174      	cbz	r4, 80fc <att_write_req+0x90>
			net_buf_unref(data.buf);
    80de:	9803      	ldr	r0, [sp, #12]
    80e0:	f007 ff42 	bl	ff68 <net_buf_unref>
    80e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    80e8:	4632      	mov	r2, r6
    80ea:	4641      	mov	r1, r8
    80ec:	4628      	mov	r0, r5
    80ee:	f7ff fd05 	bl	7afc <send_err_rsp.part.8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    80f2:	463c      	mov	r4, r7
}
    80f4:	4620      	mov	r0, r4
    80f6:	b009      	add	sp, #36	; 0x24
    80f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    80fc:	9a03      	ldr	r2, [sp, #12]
    80fe:	2a00      	cmp	r2, #0
    8100:	d0f8      	beq.n	80f4 <att_write_req+0x88>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8102:	9400      	str	r4, [sp, #0]
    8104:	4b06      	ldr	r3, [pc, #24]	; (8120 <att_write_req+0xb4>)
    8106:	2104      	movs	r1, #4
    8108:	4628      	mov	r0, r5
    810a:	f00c f839 	bl	14180 <bt_l2cap_send_cb>
    810e:	e7f1      	b.n	80f4 <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    8110:	240e      	movs	r4, #14
    8112:	e7ef      	b.n	80f4 <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8114:	2412      	movs	r4, #18
    8116:	e7ed      	b.n	80f4 <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    8118:	2401      	movs	r4, #1
    811a:	e7eb      	b.n	80f4 <att_write_req+0x88>
    811c:	00014883 	.word	0x00014883
    8120:	0001482b 	.word	0x0001482b

00008124 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    8124:	b5f0      	push	{r4, r5, r6, r7, lr}
    8126:	490f      	ldr	r1, [pc, #60]	; (8164 <find_static_attr+0x40>)
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8128:	4f0f      	ldr	r7, [pc, #60]	; (8168 <find_static_attr+0x44>)
	u16_t handle = 1;
    812a:	2501      	movs	r5, #1
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    812c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8130:	f1a1 0308 	sub.w	r3, r1, #8
    8134:	42bb      	cmp	r3, r7
    8136:	d211      	bcs.n	815c <find_static_attr+0x38>
    8138:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    813c:	2200      	movs	r2, #0
    813e:	e006      	b.n	814e <find_static_attr+0x2a>
			if (attr == &static_svc->attrs[i]) {
    8140:	f851 4c08 	ldr.w	r4, [r1, #-8]
    8144:	fb0c 4402 	mla	r4, ip, r2, r4
    8148:	42a0      	cmp	r0, r4
    814a:	d008      	beq.n	815e <find_static_attr+0x3a>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    814c:	3201      	adds	r2, #1
    814e:	18ab      	adds	r3, r5, r2
    8150:	42b2      	cmp	r2, r6
    8152:	b29b      	uxth	r3, r3
    8154:	d1f4      	bne.n	8140 <find_static_attr+0x1c>
    8156:	3108      	adds	r1, #8
    8158:	461d      	mov	r5, r3
    815a:	e7e9      	b.n	8130 <find_static_attr+0xc>
				return handle;
			}
		}
	}

	return 0;
    815c:	2300      	movs	r3, #0
}
    815e:	4618      	mov	r0, r3
    8160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8162:	bf00      	nop
    8164:	000173c4 	.word	0x000173c4
    8168:	000173d4 	.word	0x000173d4

0000816c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    816c:	6882      	ldr	r2, [r0, #8]
    816e:	4b10      	ldr	r3, [pc, #64]	; (81b0 <connected_cb+0x44>)
    8170:	429a      	cmp	r2, r3
{
    8172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8176:	4606      	mov	r6, r0
    8178:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    817a:	d114      	bne.n	81a6 <connected_cb+0x3a>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    817c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    817e:	2400      	movs	r4, #0
    8180:	686b      	ldr	r3, [r5, #4]
    8182:	429c      	cmp	r4, r3
    8184:	d20f      	bcs.n	81a6 <connected_cb+0x3a>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8186:	6829      	ldr	r1, [r5, #0]
    8188:	0127      	lsls	r7, r4, #4
    818a:	4439      	add	r1, r7
    818c:	3101      	adds	r1, #1
    818e:	4640      	mov	r0, r8
    8190:	f00b fee5 	bl	13f5e <bt_conn_addr_le_cmp>
    8194:	b950      	cbnz	r0, 81ac <connected_cb+0x40>
			continue;
		}

		if (ccc->cfg[i].value) {
    8196:	682b      	ldr	r3, [r5, #0]
    8198:	443b      	add	r3, r7
    819a:	891b      	ldrh	r3, [r3, #8]
    819c:	b133      	cbz	r3, 81ac <connected_cb+0x40>
			gatt_ccc_changed(attr, ccc);
    819e:	4629      	mov	r1, r5
    81a0:	4630      	mov	r0, r6
    81a2:	f00c fc62 	bl	14a6a <gatt_ccc_changed>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    81a6:	2001      	movs	r0, #1
    81a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    81ac:	3401      	adds	r4, #1
    81ae:	e7e7      	b.n	8180 <connected_cb+0x14>
    81b0:	00014b7d 	.word	0x00014b7d

000081b4 <gatt_indicate>:
{
    81b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81b8:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    81ba:	8c92      	ldrh	r2, [r2, #36]	; 0x24
{
    81bc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    81be:	3202      	adds	r2, #2
    81c0:	211d      	movs	r1, #29
{
    81c2:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    81c4:	f00c fbc9 	bl	1495a <bt_att_create_pdu>
	if (!buf) {
    81c8:	4605      	mov	r5, r0
    81ca:	b310      	cbz	r0, 8212 <gatt_indicate+0x5e>
	ind = net_buf_add(buf, sizeof(*ind));
    81cc:	f100 0608 	add.w	r6, r0, #8
    81d0:	2102      	movs	r1, #2
    81d2:	4630      	mov	r0, r6
    81d4:	f00e f8ce 	bl	16374 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    81d8:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    81da:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(handle);
    81dc:	f827 9b02 	strh.w	r9, [r7], #2
	net_buf_add(buf, params->len);
    81e0:	4630      	mov	r0, r6
    81e2:	f00e f8c7 	bl	16374 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    81e6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    81e8:	6a21      	ldr	r1, [r4, #32]
    81ea:	4638      	mov	r0, r7
    81ec:	f00b f93a 	bl	13464 <memcpy>
		req->func = func;
    81f0:	4b09      	ldr	r3, [pc, #36]	; (8218 <gatt_indicate+0x64>)
    81f2:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    81f4:	2300      	movs	r3, #0
		req->buf = buf;
    81f6:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    81f8:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    81fa:	4621      	mov	r1, r4
    81fc:	4640      	mov	r0, r8
    81fe:	f00c fc11 	bl	14a24 <bt_att_req_send>
	if (err) {
    8202:	4604      	mov	r4, r0
    8204:	b110      	cbz	r0, 820c <gatt_indicate+0x58>
		net_buf_unref(buf);
    8206:	4628      	mov	r0, r5
    8208:	f007 feae 	bl	ff68 <net_buf_unref>
}
    820c:	4620      	mov	r0, r4
    820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOMEM;
    8212:	f06f 040b 	mvn.w	r4, #11
    8216:	e7f9      	b.n	820c <gatt_indicate+0x58>
    8218:	00014a9f 	.word	0x00014a9f

0000821c <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    821c:	6882      	ldr	r2, [r0, #8]
    821e:	4b24      	ldr	r3, [pc, #144]	; (82b0 <notify_cb+0x94>)
    8220:	429a      	cmp	r2, r3
{
    8222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8226:	4605      	mov	r5, r0
    8228:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    822a:	d002      	beq.n	8232 <notify_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
    822c:	2001      	movs	r0, #1
}
    822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    8232:	2400      	movs	r4, #0
	ccc = attr->user_data;
    8234:	f8d0 800c 	ldr.w	r8, [r0, #12]
    8238:	46a1      	mov	r9, r4
	for (i = 0; i < ccc->cfg_len; i++) {
    823a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    823e:	429c      	cmp	r4, r3
    8240:	d2f4      	bcs.n	822c <notify_cb+0x10>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    8242:	f8d8 2000 	ldr.w	r2, [r8]
		if (cfg->value != data->type) {
    8246:	88b0      	ldrh	r0, [r6, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    8248:	0123      	lsls	r3, r4, #4
    824a:	18d1      	adds	r1, r2, r3
		if (cfg->value != data->type) {
    824c:	890f      	ldrh	r7, [r1, #8]
    824e:	4287      	cmp	r7, r0
    8250:	d10a      	bne.n	8268 <notify_cb+0x4c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8252:	3101      	adds	r1, #1
    8254:	5cd0      	ldrb	r0, [r2, r3]
    8256:	f7ff f879 	bl	734c <bt_conn_lookup_addr_le>
		if (!conn) {
    825a:	4607      	mov	r7, r0
    825c:	b120      	cbz	r0, 8268 <notify_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
    825e:	7b43      	ldrb	r3, [r0, #13]
    8260:	2b04      	cmp	r3, #4
    8262:	d003      	beq.n	826c <notify_cb+0x50>
			bt_conn_unref(conn);
    8264:	f00b fe9a 	bl	13f9c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    8268:	3401      	adds	r4, #1
    826a:	e7e6      	b.n	823a <notify_cb+0x1e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    826c:	f8d8 3014 	ldr.w	r3, [r8, #20]
    8270:	b99b      	cbnz	r3, 829a <notify_cb+0x7e>
    8272:	8a29      	ldrh	r1, [r5, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    8274:	88b3      	ldrh	r3, [r6, #4]
    8276:	68b2      	ldr	r2, [r6, #8]
    8278:	3901      	subs	r1, #1
    827a:	2b02      	cmp	r3, #2
    827c:	b289      	uxth	r1, r1
    827e:	d111      	bne.n	82a4 <notify_cb+0x88>
			err = gatt_indicate(conn, attr->handle - 1,
    8280:	4638      	mov	r0, r7
    8282:	f7ff ff97 	bl	81b4 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    8286:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    8288:	4638      	mov	r0, r7
    828a:	f00b fe87 	bl	13f9c <bt_conn_unref>
		if (err < 0) {
    828e:	f1ba 0f00 	cmp.w	sl, #0
    8292:	db0b      	blt.n	82ac <notify_cb+0x90>
		data->err = 0;
    8294:	f8c6 9000 	str.w	r9, [r6]
    8298:	e7e6      	b.n	8268 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    829a:	4629      	mov	r1, r5
    829c:	4798      	blx	r3
    829e:	2800      	cmp	r0, #0
    82a0:	d1e7      	bne.n	8272 <notify_cb+0x56>
    82a2:	e7e1      	b.n	8268 <notify_cb+0x4c>
			err = gatt_notify(conn, attr->handle - 1,
    82a4:	4638      	mov	r0, r7
    82a6:	f00c fc27 	bl	14af8 <gatt_notify>
    82aa:	e7ec      	b.n	8286 <notify_cb+0x6a>
			return BT_GATT_ITER_STOP;
    82ac:	2000      	movs	r0, #0
    82ae:	e7be      	b.n	822e <notify_cb+0x12>
    82b0:	00014b7d 	.word	0x00014b7d

000082b4 <read_ppcp>:
{
    82b4:	b513      	push	{r0, r1, r4, lr}
    82b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    82ba:	4c0b      	ldr	r4, [pc, #44]	; (82e8 <read_ppcp+0x34>)
{
    82bc:	4610      	mov	r0, r2
	if (offset > value_len) {
    82be:	2908      	cmp	r1, #8
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    82c0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    82c4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    82c8:	d80b      	bhi.n	82e2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    82ca:	f1c1 0408 	rsb	r4, r1, #8
    82ce:	429c      	cmp	r4, r3
    82d0:	bfa8      	it	ge
    82d2:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    82d4:	4622      	mov	r2, r4
    82d6:	4469      	add	r1, sp
    82d8:	f00b f8c4 	bl	13464 <memcpy>
}
    82dc:	4620      	mov	r0, r4
    82de:	b002      	add	sp, #8
    82e0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    82e2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    82e6:	e7f9      	b.n	82dc <read_ppcp+0x28>
    82e8:	00280018 	.word	0x00280018

000082ec <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    82ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    82f0:	4b27      	ldr	r3, [pc, #156]	; (8390 <disconnected_cb+0xa4>)
    82f2:	6882      	ldr	r2, [r0, #8]
    82f4:	429a      	cmp	r2, r3
{
    82f6:	4680      	mov	r8, r0
    82f8:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    82fa:	d110      	bne.n	831e <disconnected_cb+0x32>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    82fc:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    82fe:	892b      	ldrh	r3, [r5, #8]
    8300:	b16b      	cbz	r3, 831e <disconnected_cb+0x32>
	}

	/* Checking if all values are disabled */
	value_used = false;

	for (i = 0; i < ccc->cfg_len; i++) {
    8302:	2600      	movs	r6, #0
	value_used = false;
    8304:	4634      	mov	r4, r6

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8306:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    830a:	686b      	ldr	r3, [r5, #4]
    830c:	429e      	cmp	r6, r3
    830e:	d30a      	bcc.n	8326 <disconnected_cb+0x3a>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    8310:	b92c      	cbnz	r4, 831e <disconnected_cb+0x32>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    8312:	68eb      	ldr	r3, [r5, #12]
		ccc->value = 0U;
    8314:	812c      	strh	r4, [r5, #8]
		if (ccc->cfg_changed) {
    8316:	b113      	cbz	r3, 831e <disconnected_cb+0x32>
			ccc->cfg_changed(attr, ccc->value);
    8318:	4621      	mov	r1, r4
    831a:	4640      	mov	r0, r8
    831c:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    831e:	2001      	movs	r0, #1
    8320:	b003      	add	sp, #12
    8322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    8326:	682a      	ldr	r2, [r5, #0]
    8328:	0133      	lsls	r3, r6, #4
    832a:	eb02 0a03 	add.w	sl, r2, r3
		if (!cfg->value) {
    832e:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    8332:	b151      	cbz	r1, 834a <disconnected_cb+0x5e>
		if (conn->id != cfg->id ||
    8334:	7a38      	ldrb	r0, [r7, #8]
    8336:	5cd1      	ldrb	r1, [r2, r3]
    8338:	4288      	cmp	r0, r1
    833a:	f10a 0901 	add.w	r9, sl, #1
    833e:	d006      	beq.n	834e <disconnected_cb+0x62>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8340:	4649      	mov	r1, r9
    8342:	5cd0      	ldrb	r0, [r2, r3]
    8344:	f7ff f802 	bl	734c <bt_conn_lookup_addr_le>
			if (tmp) {
    8348:	b9a0      	cbnz	r0, 8374 <disconnected_cb+0x88>
	for (i = 0; i < ccc->cfg_len; i++) {
    834a:	3601      	adds	r6, #1
    834c:	e7dd      	b.n	830a <disconnected_cb+0x1e>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    834e:	4649      	mov	r1, r9
    8350:	4638      	mov	r0, r7
    8352:	e9cd 3200 	strd	r3, r2, [sp]
    8356:	f00b fe02 	bl	13f5e <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    835a:	e9dd 3200 	ldrd	r3, r2, [sp]
    835e:	2800      	cmp	r0, #0
    8360:	d1ee      	bne.n	8340 <disconnected_cb+0x54>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8362:	4659      	mov	r1, fp
    8364:	7a38      	ldrb	r0, [r7, #8]
    8366:	f00b fd2f 	bl	13dc8 <bt_addr_le_is_bonded>
    836a:	b950      	cbnz	r0, 8382 <disconnected_cb+0x96>
				clear_ccc_cfg(cfg);
    836c:	4650      	mov	r0, sl
    836e:	f00c fbf0 	bl	14b52 <clear_ccc_cfg>
    8372:	e7ea      	b.n	834a <disconnected_cb+0x5e>
				if (tmp->state == BT_CONN_CONNECTED) {
    8374:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    8376:	2b04      	cmp	r3, #4
    8378:	bf08      	it	eq
    837a:	2401      	moveq	r4, #1
				bt_conn_unref(tmp);
    837c:	f00b fe0e 	bl	13f9c <bt_conn_unref>
    8380:	e7e3      	b.n	834a <disconnected_cb+0x5e>
    8382:	2207      	movs	r2, #7
    8384:	4659      	mov	r1, fp
    8386:	4648      	mov	r0, r9
    8388:	f00b f86c 	bl	13464 <memcpy>
    838c:	e7dd      	b.n	834a <disconnected_cb+0x5e>
    838e:	bf00      	nop
    8390:	00014b7d 	.word	0x00014b7d

00008394 <bt_gatt_init>:
{
    8394:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8396:	4b0f      	ldr	r3, [pc, #60]	; (83d4 <bt_gatt_init+0x40>)
    8398:	f3bf 8f5b 	dmb	ish
    839c:	2201      	movs	r2, #1
    839e:	e853 1f00 	ldrex	r1, [r3]
    83a2:	2900      	cmp	r1, #0
    83a4:	d103      	bne.n	83ae <bt_gatt_init+0x1a>
    83a6:	e843 2000 	strex	r0, r2, [r3]
    83aa:	2800      	cmp	r0, #0
    83ac:	d1f7      	bne.n	839e <bt_gatt_init+0xa>
    83ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    83b2:	d108      	bne.n	83c6 <bt_gatt_init+0x32>
    83b4:	4a08      	ldr	r2, [pc, #32]	; (83d8 <bt_gatt_init+0x44>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    83b6:	4909      	ldr	r1, [pc, #36]	; (83dc <bt_gatt_init+0x48>)
    83b8:	8813      	ldrh	r3, [r2, #0]
    83ba:	4c09      	ldr	r4, [pc, #36]	; (83e0 <bt_gatt_init+0x4c>)
	if (!atomic_cas(&init, 0, 1)) {
    83bc:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    83be:	42a1      	cmp	r1, r4
    83c0:	d302      	bcc.n	83c8 <bt_gatt_init+0x34>
    83c2:	b100      	cbz	r0, 83c6 <bt_gatt_init+0x32>
    83c4:	8013      	strh	r3, [r2, #0]
}
    83c6:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    83c8:	6848      	ldr	r0, [r1, #4]
    83ca:	4403      	add	r3, r0
    83cc:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    83ce:	3108      	adds	r1, #8
    83d0:	2001      	movs	r0, #1
    83d2:	e7f4      	b.n	83be <bt_gatt_init+0x2a>
    83d4:	200007b8 	.word	0x200007b8
    83d8:	20001fc2 	.word	0x20001fc2
    83dc:	000173bc 	.word	0x000173bc
    83e0:	000173d4 	.word	0x000173d4

000083e4 <bt_gatt_attr_value_handle>:
{
    83e4:	b508      	push	{r3, lr}
	if ((attr != NULL)
    83e6:	b188      	cbz	r0, 840c <bt_gatt_attr_value_handle+0x28>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    83e8:	6841      	ldr	r1, [r0, #4]
    83ea:	4b09      	ldr	r3, [pc, #36]	; (8410 <bt_gatt_attr_value_handle+0x2c>)
    83ec:	4299      	cmp	r1, r3
    83ee:	d10d      	bne.n	840c <bt_gatt_attr_value_handle+0x28>
		handle = chrc->value_handle;
    83f0:	68c3      	ldr	r3, [r0, #12]
    83f2:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    83f4:	b91b      	cbnz	r3, 83fe <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    83f6:	8a03      	ldrh	r3, [r0, #16]
    83f8:	b11b      	cbz	r3, 8402 <bt_gatt_attr_value_handle+0x1e>
    83fa:	3301      	adds	r3, #1
    83fc:	b29b      	uxth	r3, r3
}
    83fe:	4618      	mov	r0, r3
    8400:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    8402:	f7ff fe8f 	bl	8124 <find_static_attr>
    8406:	3001      	adds	r0, #1
    8408:	b283      	uxth	r3, r0
    840a:	e7f8      	b.n	83fe <bt_gatt_attr_value_handle+0x1a>
	u16_t handle = 0;
    840c:	2300      	movs	r3, #0
    840e:	e7f6      	b.n	83fe <bt_gatt_attr_value_handle+0x1a>
    8410:	00014cdf 	.word	0x00014cdf

00008414 <bt_gatt_foreach_attr_type>:
{
    8414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8418:	b089      	sub	sp, #36	; 0x24
    841a:	469a      	mov	sl, r3
    841c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    8420:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    8422:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8426:	2d00      	cmp	r5, #0
    8428:	bf08      	it	eq
    842a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    842c:	4b25      	ldr	r3, [pc, #148]	; (84c4 <bt_gatt_foreach_attr_type+0xb0>)
    842e:	881b      	ldrh	r3, [r3, #0]
    8430:	4283      	cmp	r3, r0
{
    8432:	4680      	mov	r8, r0
    8434:	4691      	mov	r9, r2
	if (start_handle <= last_static_handle) {
    8436:	d33e      	bcc.n	84b6 <bt_gatt_foreach_attr_type+0xa2>
    8438:	4e23      	ldr	r6, [pc, #140]	; (84c8 <bt_gatt_foreach_attr_type+0xb4>)
		u16_t handle = 1;
    843a:	2701      	movs	r7, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    843c:	4a23      	ldr	r2, [pc, #140]	; (84cc <bt_gatt_foreach_attr_type+0xb8>)
    843e:	f1a6 0308 	sub.w	r3, r6, #8
    8442:	4293      	cmp	r3, r2
    8444:	d237      	bcs.n	84b6 <bt_gatt_foreach_attr_type+0xa2>
			if (handle + static_svc->attr_count < start_handle) {
    8446:	f856 4c04 	ldr.w	r4, [r6, #-4]
    844a:	443c      	add	r4, r7
    844c:	4544      	cmp	r4, r8
    844e:	d235      	bcs.n	84bc <bt_gatt_foreach_attr_type+0xa8>
				handle += static_svc->attr_count;
    8450:	b2a4      	uxth	r4, r4
    8452:	3608      	adds	r6, #8
		u16_t handle = 1;
    8454:	4627      	mov	r7, r4
    8456:	e7f1      	b.n	843c <bt_gatt_foreach_attr_type+0x28>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8458:	9903      	ldr	r1, [sp, #12]
    845a:	4648      	mov	r0, r9
    845c:	f00b f8ce 	bl	135fc <bt_uuid_cmp>
    8460:	b1d0      	cbz	r0, 8498 <bt_gatt_foreach_attr_type+0x84>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8462:	f10b 0b01 	add.w	fp, fp, #1
    8466:	f856 2c04 	ldr.w	r2, [r6, #-4]
    846a:	eb07 040b 	add.w	r4, r7, fp
    846e:	455a      	cmp	r2, fp
    8470:	b2a4      	uxth	r4, r4
    8472:	d9ee      	bls.n	8452 <bt_gatt_foreach_attr_type+0x3e>
				memcpy(&attr, &static_svc->attrs[i],
    8474:	f856 1c08 	ldr.w	r1, [r6, #-8]
    8478:	2214      	movs	r2, #20
    847a:	fb02 110b 	mla	r1, r2, fp, r1
    847e:	a803      	add	r0, sp, #12
    8480:	f00a fff0 	bl	13464 <memcpy>
	if (attr->handle > end_handle) {
    8484:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    8486:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    848a:	42a3      	cmp	r3, r4
    848c:	d313      	bcc.n	84b6 <bt_gatt_foreach_attr_type+0xa2>
	if (attr->handle < start_handle) {
    848e:	45a0      	cmp	r8, r4
    8490:	d8e7      	bhi.n	8462 <bt_gatt_foreach_attr_type+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8492:	f1b9 0f00 	cmp.w	r9, #0
    8496:	d1df      	bne.n	8458 <bt_gatt_foreach_attr_type+0x44>
	if (attr_data && attr_data != attr->user_data) {
    8498:	f1ba 0f00 	cmp.w	sl, #0
    849c:	d002      	beq.n	84a4 <bt_gatt_foreach_attr_type+0x90>
    849e:	9a06      	ldr	r2, [sp, #24]
    84a0:	4592      	cmp	sl, r2
    84a2:	d1de      	bne.n	8462 <bt_gatt_foreach_attr_type+0x4e>
	*num_matches -= 1;
    84a4:	3d01      	subs	r5, #1
    84a6:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    84a8:	9914      	ldr	r1, [sp, #80]	; 0x50
    84aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    84ac:	a803      	add	r0, sp, #12
    84ae:	4798      	blx	r3
	if (!*num_matches) {
    84b0:	b10d      	cbz	r5, 84b6 <bt_gatt_foreach_attr_type+0xa2>
				if (gatt_foreach_iter(&attr, start_handle,
    84b2:	2800      	cmp	r0, #0
    84b4:	d1d5      	bne.n	8462 <bt_gatt_foreach_attr_type+0x4e>
}
    84b6:	b009      	add	sp, #36	; 0x24
    84b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    84bc:	f04f 0b00 	mov.w	fp, #0
    84c0:	e7d1      	b.n	8466 <bt_gatt_foreach_attr_type+0x52>
    84c2:	bf00      	nop
    84c4:	20001fc2 	.word	0x20001fc2
    84c8:	000173c4 	.word	0x000173c4
    84cc:	000173d4 	.word	0x000173d4

000084d0 <bt_gatt_notify_cb>:
{
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	4605      	mov	r5, r0
	attr = params->attr;
    84d4:	6848      	ldr	r0, [r1, #4]
{
    84d6:	b08a      	sub	sp, #40	; 0x28
	handle = attr->handle ? : find_static_attr(attr);
    84d8:	8a04      	ldrh	r4, [r0, #16]
	attr = params->attr;
    84da:	9004      	str	r0, [sp, #16]
{
    84dc:	460e      	mov	r6, r1
	handle = attr->handle ? : find_static_attr(attr);
    84de:	b93c      	cbnz	r4, 84f0 <bt_gatt_notify_cb+0x20>
    84e0:	f7ff fe20 	bl	8124 <find_static_attr>
	if (!handle) {
    84e4:	4604      	mov	r4, r0
    84e6:	b918      	cbnz	r0, 84f0 <bt_gatt_notify_cb+0x20>
		return -ENOENT;
    84e8:	f06f 0001 	mvn.w	r0, #1
}
    84ec:	b00a      	add	sp, #40	; 0x28
    84ee:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    84f0:	6832      	ldr	r2, [r6, #0]
    84f2:	b1ba      	cbz	r2, 8524 <bt_gatt_notify_cb+0x54>
		attr = NULL;
    84f4:	a90a      	add	r1, sp, #40	; 0x28
    84f6:	2300      	movs	r3, #0
    84f8:	f841 3d18 	str.w	r3, [r1, #-24]!
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    84fc:	9102      	str	r1, [sp, #8]
    84fe:	4926      	ldr	r1, [pc, #152]	; (8598 <bt_gatt_notify_cb+0xc8>)
    8500:	9101      	str	r1, [sp, #4]
    8502:	2101      	movs	r1, #1
    8504:	9100      	str	r1, [sp, #0]
    8506:	4620      	mov	r0, r4
    8508:	f64f 71ff 	movw	r1, #65535	; 0xffff
    850c:	f7ff ff82 	bl	8414 <bt_gatt_foreach_attr_type>
		if (!attr) {
    8510:	9804      	ldr	r0, [sp, #16]
    8512:	2800      	cmp	r0, #0
    8514:	d0e8      	beq.n	84e8 <bt_gatt_notify_cb+0x18>
		handle = attr->handle ? : find_static_attr(attr);
    8516:	8a04      	ldrh	r4, [r0, #16]
    8518:	b924      	cbnz	r4, 8524 <bt_gatt_notify_cb+0x54>
    851a:	f7ff fe03 	bl	8124 <find_static_attr>
		if (!handle) {
    851e:	4604      	mov	r4, r0
    8520:	2800      	cmp	r0, #0
    8522:	d0e1      	beq.n	84e8 <bt_gatt_notify_cb+0x18>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    8524:	9b04      	ldr	r3, [sp, #16]
    8526:	6818      	ldr	r0, [r3, #0]
    8528:	2300      	movs	r3, #0
    852a:	f88d 3014 	strb.w	r3, [sp, #20]
    852e:	a905      	add	r1, sp, #20
    8530:	f642 0303 	movw	r3, #10243	; 0x2803
    8534:	f8ad 3016 	strh.w	r3, [sp, #22]
    8538:	f00b f860 	bl	135fc <bt_uuid_cmp>
    853c:	b938      	cbnz	r0, 854e <bt_gatt_notify_cb+0x7e>
		struct bt_gatt_chrc *chrc = attr->user_data;
    853e:	9804      	ldr	r0, [sp, #16]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    8540:	68c3      	ldr	r3, [r0, #12]
    8542:	799b      	ldrb	r3, [r3, #6]
    8544:	06db      	lsls	r3, r3, #27
    8546:	d524      	bpl.n	8592 <bt_gatt_notify_cb+0xc2>
		handle = bt_gatt_attr_value_handle(attr);
    8548:	f7ff ff4c 	bl	83e4 <bt_gatt_attr_value_handle>
    854c:	4604      	mov	r4, r0
	if (conn) {
    854e:	b12d      	cbz	r5, 855c <bt_gatt_notify_cb+0x8c>
		return gatt_notify(conn, handle, params);
    8550:	4632      	mov	r2, r6
    8552:	4621      	mov	r1, r4
    8554:	4628      	mov	r0, r5
    8556:	f00c facf 	bl	14af8 <gatt_notify>
    855a:	e7c7      	b.n	84ec <bt_gatt_notify_cb+0x1c>
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    855c:	f642 1202 	movw	r2, #10498	; 0x2902
    8560:	f8ad 201a 	strh.w	r2, [sp, #26]
    8564:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
    8566:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    856a:	9202      	str	r2, [sp, #8]
    856c:	4a0b      	ldr	r2, [pc, #44]	; (859c <bt_gatt_notify_cb+0xcc>)
	data.err = -ENOTCONN;
    856e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    8570:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    8572:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    8576:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    857a:	4620      	mov	r0, r4
    857c:	462b      	mov	r3, r5
    857e:	aa06      	add	r2, sp, #24
    8580:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    8584:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    8586:	f88d 5018 	strb.w	r5, [sp, #24]
    858a:	f7ff ff43 	bl	8414 <bt_gatt_foreach_attr_type>
	return data.err;
    858e:	9807      	ldr	r0, [sp, #28]
    8590:	e7ac      	b.n	84ec <bt_gatt_notify_cb+0x1c>
			return -EINVAL;
    8592:	f06f 0015 	mvn.w	r0, #21
    8596:	e7a9      	b.n	84ec <bt_gatt_notify_cb+0x1c>
    8598:	00014b4d 	.word	0x00014b4d
    859c:	0000821d 	.word	0x0000821d

000085a0 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    85a0:	4603      	mov	r3, r0
    85a2:	4a03      	ldr	r2, [pc, #12]	; (85b0 <bt_gatt_connected+0x10>)
    85a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    85a8:	2001      	movs	r0, #1
    85aa:	f00c bbc9 	b.w	14d40 <bt_gatt_foreach_attr>
    85ae:	bf00      	nop
    85b0:	0000816d 	.word	0x0000816d

000085b4 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    85b4:	4603      	mov	r3, r0
    85b6:	4a03      	ldr	r2, [pc, #12]	; (85c4 <bt_gatt_disconnected+0x10>)
    85b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    85bc:	2001      	movs	r0, #1
    85be:	f00c bbbf 	b.w	14d40 <bt_gatt_foreach_attr>
    85c2:	bf00      	nop
    85c4:	000082ed 	.word	0x000082ed

000085c8 <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    85c8:	4b10      	ldr	r3, [pc, #64]	; (860c <get_io_capa+0x44>)
    85ca:	681b      	ldr	r3, [r3, #0]
    85cc:	b1ab      	cbz	r3, 85fa <get_io_capa+0x32>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    85ce:	681a      	ldr	r2, [r3, #0]
    85d0:	b132      	cbz	r2, 85e0 <get_io_capa+0x18>
    85d2:	6859      	ldr	r1, [r3, #4]
    85d4:	b121      	cbz	r1, 85e0 <get_io_capa+0x18>
    85d6:	6899      	ldr	r1, [r3, #8]
    85d8:	b989      	cbnz	r1, 85fe <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    85da:	490d      	ldr	r1, [pc, #52]	; (8610 <get_io_capa+0x48>)
    85dc:	7809      	ldrb	r1, [r1, #0]
    85de:	b171      	cbz	r1, 85fe <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    85e0:	490b      	ldr	r1, [pc, #44]	; (8610 <get_io_capa+0x48>)
    85e2:	7809      	ldrb	r1, [r1, #0]
    85e4:	b111      	cbz	r1, 85ec <get_io_capa+0x24>
    85e6:	b10a      	cbz	r2, 85ec <get_io_capa+0x24>
    85e8:	6899      	ldr	r1, [r3, #8]
    85ea:	b951      	cbnz	r1, 8602 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    85ec:	685b      	ldr	r3, [r3, #4]
    85ee:	b953      	cbnz	r3, 8606 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    85f0:	2a00      	cmp	r2, #0
    85f2:	bf0c      	ite	eq
    85f4:	2003      	moveq	r0, #3
    85f6:	2000      	movne	r0, #0
    85f8:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    85fa:	2003      	movs	r0, #3
    85fc:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    85fe:	2004      	movs	r0, #4
    8600:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    8602:	2001      	movs	r0, #1
    8604:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    8606:	2002      	movs	r0, #2
	}
}
    8608:	4770      	bx	lr
    860a:	bf00      	nop
    860c:	200002b4 	.word	0x200002b4
    8610:	20002148 	.word	0x20002148

00008614 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    8614:	4a09      	ldr	r2, [pc, #36]	; (863c <bt_smp_accept+0x28>)
    8616:	6813      	ldr	r3, [r2, #0]
    8618:	b11b      	cbz	r3, 8622 <bt_smp_accept+0xe>
    861a:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
    861e:	b94b      	cbnz	r3, 8634 <bt_smp_accept+0x20>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    8620:	2301      	movs	r3, #1
			continue;
		}

		smp->chan.chan.ops = &ops;
    8622:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    8626:	fb00 2303 	mla	r3, r0, r3, r2
    862a:	4a05      	ldr	r2, [pc, #20]	; (8640 <bt_smp_accept+0x2c>)
    862c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;

		return 0;
    862e:	2000      	movs	r0, #0
		*chan = &smp->chan.chan;
    8630:	600b      	str	r3, [r1, #0]
		return 0;
    8632:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    8634:	f06f 000b 	mvn.w	r0, #11
}
    8638:	4770      	bx	lr
    863a:	bf00      	nop
    863c:	200007bc 	.word	0x200007bc
    8640:	200050dc 	.word	0x200050dc

00008644 <get_auth.isra.1>:
	if (sc_supported) {
    8644:	4b0c      	ldr	r3, [pc, #48]	; (8678 <get_auth.isra.1+0x34>)
    8646:	781b      	ldrb	r3, [r3, #0]
static u8_t get_auth(struct bt_conn *conn, u8_t auth)
    8648:	b510      	push	{r4, lr}
	if (sc_supported) {
    864a:	b17b      	cbz	r3, 866c <get_auth.isra.1+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    864c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    8650:	f7ff ffba 	bl	85c8 <get_io_capa>
	if (bondable) {
    8654:	4b09      	ldr	r3, [pc, #36]	; (867c <get_auth.isra.1+0x38>)
    8656:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    8658:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    865a:	bf0c      	ite	eq
    865c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    8660:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    8664:	b12b      	cbz	r3, 8672 <get_auth.isra.1+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    8666:	f044 0001 	orr.w	r0, r4, #1
}
    866a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    866c:	f000 0407 	and.w	r4, r0, #7
    8670:	e7ee      	b.n	8650 <get_auth.isra.1+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    8672:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    8676:	e7f8      	b.n	866a <get_auth.isra.1+0x26>
    8678:	20002148 	.word	0x20002148
    867c:	2000534a 	.word	0x2000534a

00008680 <smp_init>:
{
    8680:	b538      	push	{r3, r4, r5, lr}
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    8682:	f100 05ac 	add.w	r5, r0, #172	; 0xac
{
    8686:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    8688:	22ec      	movs	r2, #236	; 0xec
    868a:	2100      	movs	r1, #0
    868c:	4628      	mov	r0, r5
    868e:	f00a ff16 	bl	134be <memset>
	if (bt_rand(smp->prnd, 16)) {
    8692:	f104 00d3 	add.w	r0, r4, #211	; 0xd3
    8696:	2110      	movs	r1, #16
    8698:	f00d f9cc 	bl	15a34 <bt_rand>
    869c:	4604      	mov	r4, r0
    869e:	b948      	cbnz	r0, 86b4 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    86a0:	2105      	movs	r1, #5
    86a2:	4628      	mov	r0, r5
    86a4:	f00c fb97 	bl	14dd6 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    86a8:	f7fe fb06 	bl	6cb8 <bt_pub_key_get>
    86ac:	4b02      	ldr	r3, [pc, #8]	; (86b8 <smp_init+0x38>)
    86ae:	6018      	str	r0, [r3, #0]
}
    86b0:	4620      	mov	r0, r4
    86b2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    86b4:	2408      	movs	r4, #8
    86b6:	e7fb      	b.n	86b0 <smp_init+0x30>
    86b8:	20000b2c 	.word	0x20000b2c

000086bc <smp_send.isra.6>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    86bc:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    86be:	2300      	movs	r3, #0
    86c0:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    86c2:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    86c4:	4613      	mov	r3, r2
    86c6:	6800      	ldr	r0, [r0, #0]
    86c8:	460a      	mov	r2, r1
    86ca:	2106      	movs	r1, #6
    86cc:	f00b fd58 	bl	14180 <bt_l2cap_send_cb>
    86d0:	4804      	ldr	r0, [pc, #16]	; (86e4 <smp_send.isra.6+0x28>)
    86d2:	f247 5230 	movw	r2, #30000	; 0x7530
    86d6:	f504 71cc 	add.w	r1, r4, #408	; 0x198
}
    86da:	b002      	add	sp, #8
    86dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86e0:	f008 bf56 	b.w	11590 <k_delayed_work_submit_to_queue>
    86e4:	20001f38 	.word	0x20001f38

000086e8 <compute_and_check_and_send_slave_dhcheck>:
{
    86e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)memset(r, 0, sizeof(r));
    86ec:	2210      	movs	r2, #16
{
    86ee:	b0a3      	sub	sp, #140	; 0x8c
    86f0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    86f2:	2100      	movs	r1, #0
    86f4:	eb0d 0002 	add.w	r0, sp, r2
    86f8:	f00a fee1 	bl	134be <memset>
	switch (smp->method) {
    86fc:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    8700:	2b05      	cmp	r3, #5
    8702:	f200 8083 	bhi.w	880c <compute_and_check_and_send_slave_dhcheck+0x124>
    8706:	e8df f003 	tbb	[pc, r3]
    870a:	0309      	.short	0x0309
    870c:	83810903 	.word	0x83810903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    8710:	2204      	movs	r2, #4
    8712:	f504 71c2 	add.w	r1, r4, #388	; 0x184
    8716:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    8718:	f00a fea4 	bl	13464 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    871c:	ad14      	add	r5, sp, #80	; 0x50
    871e:	2235      	movs	r2, #53	; 0x35
    8720:	2100      	movs	r1, #0
    8722:	4628      	mov	r0, r5
		   &smp->chan.chan.conn->le.init_addr,
    8724:	f8d4 a000 	ldr.w	sl, [r4]
	u8_t m[53] = { 0x00, /* counter */
    8728:	f00a fec9 	bl	134be <memset>
    872c:	2362      	movs	r3, #98	; 0x62
    872e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    8732:	2374      	movs	r3, #116	; 0x74
    8734:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
	sys_memcpy_swap(ws, w, 32);
    8738:	ae0c      	add	r6, sp, #48	; 0x30
	u8_t m[53] = { 0x00, /* counter */
    873a:	236c      	movs	r3, #108	; 0x6c
    873c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(ws, w, 32);
    8740:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    8742:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    8744:	f204 1143 	addw	r1, r4, #323	; 0x143
    8748:	4630      	mov	r0, r6
	u8_t m[53] = { 0x00, /* counter */
    874a:	f04f 0b01 	mov.w	fp, #1
    874e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    8752:	f88d b083 	strb.w	fp, [sp, #131]	; 0x83
	sys_memcpy_swap(ws, w, 32);
    8756:	f00c fb23 	bl	14da0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    875a:	ab08      	add	r3, sp, #32
    875c:	2220      	movs	r2, #32
    875e:	4631      	mov	r1, r6
    8760:	4852      	ldr	r0, [pc, #328]	; (88ac <compute_and_check_and_send_slave_dhcheck+0x1c4>)
    8762:	f00c fb57 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
    8766:	2800      	cmp	r0, #0
    8768:	d150      	bne.n	880c <compute_and_check_and_send_slave_dhcheck+0x124>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    876a:	f104 08e3 	add.w	r8, r4, #227	; 0xe3
	sys_memcpy_swap(m + 5, n1, 16);
    876e:	2210      	movs	r2, #16
    8770:	4641      	mov	r1, r8
    8772:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    8776:	f104 09d3 	add.w	r9, r4, #211	; 0xd3
	sys_memcpy_swap(m + 5, n1, 16);
    877a:	f00c fb11 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    877e:	2210      	movs	r2, #16
    8780:	4649      	mov	r1, r9
    8782:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    8786:	f00c fb0b 	bl	14da0 <sys_memcpy_swap>
	m[37] = a1->type;
    878a:	f89a 304f 	ldrb.w	r3, [sl, #79]	; 0x4f
    878e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    8792:	2206      	movs	r2, #6
    8794:	f10a 0150 	add.w	r1, sl, #80	; 0x50
    8798:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    879c:	f00c fb00 	bl	14da0 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    87a0:	f204 1773 	addw	r7, r4, #371	; 0x173
	m[44] = a2->type;
    87a4:	f89a 3056 	ldrb.w	r3, [sl, #86]	; 0x56
    87a8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    87ac:	2206      	movs	r2, #6
    87ae:	f10a 0157 	add.w	r1, sl, #87	; 0x57
    87b2:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    87b6:	f00c faf3 	bl	14da0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    87ba:	463b      	mov	r3, r7
    87bc:	2235      	movs	r2, #53	; 0x35
    87be:	4629      	mov	r1, r5
    87c0:	a808      	add	r0, sp, #32
    87c2:	f00c fb27 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
    87c6:	bb08      	cbnz	r0, 880c <compute_and_check_and_send_slave_dhcheck+0x124>
	sys_mem_swap(mackey, 16);
    87c8:	4638      	mov	r0, r7
		   smp->tk)) {
    87ca:	f104 0af3 	add.w	sl, r4, #243	; 0xf3
	sys_mem_swap(mackey, 16);
    87ce:	f00c fba6 	bl	14f1e <sys_mem_swap.constprop.14>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    87d2:	4653      	mov	r3, sl
    87d4:	2235      	movs	r2, #53	; 0x35
    87d6:	4629      	mov	r1, r5
    87d8:	a808      	add	r0, sp, #32
	m[0] = 0x01;
    87da:	f88d b050 	strb.w	fp, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    87de:	f00c fb19 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
    87e2:	b998      	cbnz	r0, 880c <compute_and_check_and_send_slave_dhcheck+0x124>
	sys_mem_swap(ltk, 16);
    87e4:	4650      	mov	r0, sl
    87e6:	f00c fb9a 	bl	14f1e <sys_mem_swap.constprop.14>
		   &smp->chan.chan.conn->le.resp_addr,
    87ea:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    87ec:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    87ee:	f852 3bbd 	ldr.w	r3, [r2], #189
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    87f2:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    87f4:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    87f8:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    87fa:	e9cd 2300 	strd	r2, r3, [sp]
    87fe:	9102      	str	r1, [sp, #8]
    8800:	ab04      	add	r3, sp, #16
    8802:	4642      	mov	r2, r8
    8804:	4649      	mov	r1, r9
    8806:	f00c fb98 	bl	14f3a <smp_f6>
    880a:	b148      	cbz	r0, 8820 <compute_and_check_and_send_slave_dhcheck+0x138>
		return BT_SMP_ERR_UNSPECIFIED;
    880c:	2008      	movs	r0, #8
    880e:	e045      	b.n	889c <compute_and_check_and_send_slave_dhcheck+0x1b4>
		if (smp->oobd_remote) {
    8810:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    8814:	2900      	cmp	r1, #0
    8816:	d081      	beq.n	871c <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    8818:	2210      	movs	r2, #16
    881a:	eb0d 0002 	add.w	r0, sp, r2
    881e:	e77b      	b.n	8718 <compute_and_check_and_send_slave_dhcheck+0x30>
	if (smp->method == LE_SC_OOB) {
    8820:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    8824:	2b05      	cmp	r3, #5
    8826:	d107      	bne.n	8838 <compute_and_check_and_send_slave_dhcheck+0x150>
		if (smp->oobd_local) {
    8828:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
			memcpy(r, smp->oobd_local->r, sizeof(r));
    882c:	2210      	movs	r2, #16
    882e:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    8832:	b3b1      	cbz	r1, 88a2 <compute_and_check_and_send_slave_dhcheck+0x1ba>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    8834:	f00a fe16 	bl	13464 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    8838:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    883a:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    883c:	f852 3bb6 	ldr.w	r3, [r2], #182
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    8840:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    8842:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    8846:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    8848:	e9cd 2300 	strd	r2, r3, [sp]
    884c:	9102      	str	r1, [sp, #8]
    884e:	ab04      	add	r3, sp, #16
    8850:	464a      	mov	r2, r9
    8852:	4641      	mov	r1, r8
    8854:	f00c fb71 	bl	14f3a <smp_f6>
    8858:	2800      	cmp	r0, #0
    885a:	d1d7      	bne.n	880c <compute_and_check_and_send_slave_dhcheck+0x124>
	if (memcmp(smp->e, re, 16)) {
    885c:	2210      	movs	r2, #16
    885e:	4631      	mov	r1, r6
    8860:	f204 1063 	addw	r0, r4, #355	; 0x163
    8864:	f00a fdee 	bl	13444 <memcmp>
    8868:	4607      	mov	r7, r0
    886a:	b9e8      	cbnz	r0, 88a8 <compute_and_check_and_send_slave_dhcheck+0x1c0>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    886c:	200d      	movs	r0, #13
    886e:	f00c fb46 	bl	14efe <smp_create_pdu.isra.3>
	if (!buf) {
    8872:	4606      	mov	r6, r0
    8874:	b160      	cbz	r0, 8890 <compute_and_check_and_send_slave_dhcheck+0x1a8>
	req = net_buf_add(buf, sizeof(*req));
    8876:	2110      	movs	r1, #16
    8878:	3008      	adds	r0, #8
    887a:	f00d fd7b 	bl	16374 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    887e:	2210      	movs	r2, #16
    8880:	4629      	mov	r1, r5
    8882:	f00a fdef 	bl	13464 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    8886:	463a      	mov	r2, r7
    8888:	4631      	mov	r1, r6
    888a:	4620      	mov	r0, r4
    888c:	f7ff ff16 	bl	86bc <smp_send.isra.6>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    8890:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    8894:	2101      	movs	r1, #1
    8896:	f00c fa9e 	bl	14dd6 <atomic_set_bit>
	return 0;
    889a:	2000      	movs	r0, #0
}
    889c:	b023      	add	sp, #140	; 0x8c
    889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memset(r, 0, sizeof(r));
    88a2:	f00a fe0c 	bl	134be <memset>
    88a6:	e7c7      	b.n	8838 <compute_and_check_and_send_slave_dhcheck+0x150>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    88a8:	200b      	movs	r0, #11
    88aa:	e7f7      	b.n	889c <compute_and_check_and_send_slave_dhcheck+0x1b4>
    88ac:	00018302 	.word	0x00018302

000088b0 <smp_pairing_req>:
{
    88b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    88b4:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    88b6:	78f3      	ldrb	r3, [r6, #3]
    88b8:	3b07      	subs	r3, #7
    88ba:	2b09      	cmp	r3, #9
{
    88bc:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    88be:	d904      	bls.n	88ca <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    88c0:	2506      	movs	r5, #6
}
    88c2:	4628      	mov	r0, r5
    88c4:	b002      	add	sp, #8
    88c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    88ca:	4607      	mov	r7, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    88cc:	210e      	movs	r1, #14
	struct bt_conn *conn = smp->chan.chan.conn;
    88ce:	f857 8bb0 	ldr.w	r8, [r7], #176
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    88d2:	4638      	mov	r0, r7
    88d4:	f00c fa76 	bl	14dc4 <atomic_test_bit>
    88d8:	b928      	cbnz	r0, 88e6 <smp_pairing_req+0x36>
		int ret = smp_init(smp);
    88da:	4620      	mov	r0, r4
    88dc:	f7ff fed0 	bl	8680 <smp_init>
		if (ret) {
    88e0:	b108      	cbz	r0, 88e6 <smp_pairing_req+0x36>
			return ret;
    88e2:	b2c5      	uxtb	r5, r0
    88e4:	e7ed      	b.n	88c2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    88e6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    88e8:	2206      	movs	r2, #6
    88ea:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    88ec:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	memcpy(smp->preq + 1, req, sizeof(*req));
    88f0:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
    88f4:	f00a fdb6 	bl	13464 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    88f8:	2302      	movs	r3, #2
    88fa:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	rsp->auth_req = get_auth(conn, req->auth_req);
    88fe:	78b0      	ldrb	r0, [r6, #2]
    8900:	f7ff fea0 	bl	8644 <get_auth.isra.1>
    8904:	f884 00bf 	strb.w	r0, [r4, #191]	; 0xbf
    8908:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    890a:	f7ff fe5d 	bl	85c8 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    890e:	4b94      	ldr	r3, [pc, #592]	; (8b60 <smp_pairing_req+0x2b0>)
	rsp->io_capability = get_io_capa();
    8910:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    891a:	2310      	movs	r3, #16
    891c:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    8920:	7933      	ldrb	r3, [r6, #4]
    8922:	f003 0303 	and.w	r3, r3, #3
    8926:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    892a:	7973      	ldrb	r3, [r6, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    892c:	072d      	lsls	r5, r5, #28
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    892e:	f003 0301 	and.w	r3, r3, #1
    8932:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    8936:	d50f      	bpl.n	8958 <smp_pairing_req+0xa8>
    8938:	78b3      	ldrb	r3, [r6, #2]
    893a:	0718      	lsls	r0, r3, #28
    893c:	d50c      	bpl.n	8958 <smp_pairing_req+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    893e:	2105      	movs	r1, #5
    8940:	4638      	mov	r0, r7
    8942:	f00c fa48 	bl	14dd6 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    8946:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    894a:	f003 0302 	and.w	r3, r3, #2
    894e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    8952:	2300      	movs	r3, #0
    8954:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    8958:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    895c:	0699      	lsls	r1, r3, #26
    895e:	d506      	bpl.n	896e <smp_pairing_req+0xbe>
    8960:	78b3      	ldrb	r3, [r6, #2]
    8962:	069a      	lsls	r2, r3, #26
    8964:	d503      	bpl.n	896e <smp_pairing_req+0xbe>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    8966:	2113      	movs	r1, #19
    8968:	4638      	mov	r0, r7
    896a:	f00c fa34 	bl	14dd6 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    896e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    8972:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
	smp->remote_dist = rsp->init_key_dist;
    8976:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    897a:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    897e:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    8982:	07db      	lsls	r3, r3, #31
    8984:	d506      	bpl.n	8994 <smp_pairing_req+0xe4>
    8986:	78b3      	ldrb	r3, [r6, #2]
    8988:	07dd      	lsls	r5, r3, #31
    898a:	d503      	bpl.n	8994 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    898c:	210c      	movs	r1, #12
    898e:	4638      	mov	r0, r7
    8990:	f00c fa21 	bl	14dd6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    8994:	2103      	movs	r1, #3
    8996:	4638      	mov	r0, r7
    8998:	f00c fa1d 	bl	14dd6 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    899c:	2105      	movs	r1, #5
    899e:	f00c fa11 	bl	14dc4 <atomic_test_bit>
    89a2:	7836      	ldrb	r6, [r6, #0]
    89a4:	2800      	cmp	r0, #0
    89a6:	f040 808d 	bne.w	8ac4 <smp_pairing_req+0x214>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    89aa:	2e04      	cmp	r6, #4
    89ac:	d915      	bls.n	89da <smp_pairing_req+0x12a>
	smp->method = legacy_get_pair_method(smp, remote_io);
    89ae:	2300      	movs	r3, #0
    89b0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    89b4:	210e      	movs	r1, #14
    89b6:	4638      	mov	r0, r7
    89b8:	f00c fa04 	bl	14dc4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    89bc:	4605      	mov	r5, r0
    89be:	bb10      	cbnz	r0, 8a06 <smp_pairing_req+0x156>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    89c0:	4e68      	ldr	r6, [pc, #416]	; (8b64 <smp_pairing_req+0x2b4>)
    89c2:	6833      	ldr	r3, [r6, #0]
    89c4:	b1fb      	cbz	r3, 8a06 <smp_pairing_req+0x156>
	    bt_auth && bt_auth->pairing_confirm) {
    89c6:	695b      	ldr	r3, [r3, #20]
    89c8:	b1eb      	cbz	r3, 8a06 <smp_pairing_req+0x156>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    89ca:	4638      	mov	r0, r7
    89cc:	2109      	movs	r1, #9
    89ce:	f00c fa02 	bl	14dd6 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    89d2:	6833      	ldr	r3, [r6, #0]
    89d4:	6820      	ldr	r0, [r4, #0]
    89d6:	695b      	ldr	r3, [r3, #20]
    89d8:	e072      	b.n	8ac0 <smp_pairing_req+0x210>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    89da:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    89de:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
    89e2:	4313      	orrs	r3, r2
    89e4:	0758      	lsls	r0, r3, #29
    89e6:	d5e2      	bpl.n	89ae <smp_pairing_req+0xfe>
	method = gen_method_legacy[remote_io][get_io_capa()];
    89e8:	f7ff fdee 	bl	85c8 <get_io_capa>
    89ec:	4b5e      	ldr	r3, [pc, #376]	; (8b68 <smp_pairing_req+0x2b8>)
    89ee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    89f2:	441e      	add	r6, r3
    89f4:	5c33      	ldrb	r3, [r6, r0]
	if (method == PASSKEY_ROLE) {
    89f6:	2b04      	cmp	r3, #4
    89f8:	d122      	bne.n	8a40 <smp_pairing_req+0x190>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    89fa:	6823      	ldr	r3, [r4, #0]
    89fc:	78db      	ldrb	r3, [r3, #3]
    89fe:	b1eb      	cbz	r3, 8a3c <smp_pairing_req+0x18c>
	smp->method = legacy_get_pair_method(smp, remote_io);
    8a00:	2301      	movs	r3, #1
    8a02:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	ret = send_pairing_rsp(smp);
    8a06:	4620      	mov	r0, r4
    8a08:	f00c fb48 	bl	1509c <send_pairing_rsp>
	if (ret) {
    8a0c:	4605      	mov	r5, r0
    8a0e:	2800      	cmp	r0, #0
    8a10:	f47f af57 	bne.w	88c2 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    8a14:	2103      	movs	r1, #3
    8a16:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8a1a:	f00c f9dc 	bl	14dd6 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    8a1e:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    8a20:	f106 0148 	add.w	r1, r6, #72	; 0x48
    8a24:	7a30      	ldrb	r0, [r6, #8]
    8a26:	f000 fd9f 	bl	9568 <bt_keys_find_addr>
    8a2a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    8a2e:	b160      	cbz	r0, 8a4a <smp_pairing_req+0x19a>
    8a30:	7a42      	ldrb	r2, [r0, #9]
    8a32:	07d1      	lsls	r1, r2, #31
    8a34:	d509      	bpl.n	8a4a <smp_pairing_req+0x19a>
    8a36:	b943      	cbnz	r3, 8a4a <smp_pairing_req+0x19a>
		return BT_SMP_ERR_UNSPECIFIED;
    8a38:	2508      	movs	r5, #8
    8a3a:	e742      	b.n	88c2 <smp_pairing_req+0x12>
	smp->method = legacy_get_pair_method(smp, remote_io);
    8a3c:	2302      	movs	r3, #2
    8a3e:	e7e0      	b.n	8a02 <smp_pairing_req+0x152>
    8a40:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    8a44:	2b00      	cmp	r3, #0
    8a46:	d1de      	bne.n	8a06 <smp_pairing_req+0x156>
    8a48:	e7b4      	b.n	89b4 <smp_pairing_req+0x104>
	switch (smp->method) {
    8a4a:	2b01      	cmp	r3, #1
    8a4c:	d030      	beq.n	8ab0 <smp_pairing_req+0x200>
    8a4e:	f4ff af38 	bcc.w	88c2 <smp_pairing_req+0x12>
    8a52:	2b02      	cmp	r3, #2
    8a54:	d1f0      	bne.n	8a38 <smp_pairing_req+0x188>
			if (bt_rand(&passkey, sizeof(passkey))) {
    8a56:	2104      	movs	r1, #4
    8a58:	eb0d 0001 	add.w	r0, sp, r1
    8a5c:	f00c ffea 	bl	15a34 <bt_rand>
    8a60:	2800      	cmp	r0, #0
    8a62:	d1e9      	bne.n	8a38 <smp_pairing_req+0x188>
			passkey %= 1000000;
    8a64:	9901      	ldr	r1, [sp, #4]
    8a66:	4a41      	ldr	r2, [pc, #260]	; (8b6c <smp_pairing_req+0x2bc>)
		if (bt_auth && bt_auth->passkey_display) {
    8a68:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8b64 <smp_pairing_req+0x2b4>
			passkey %= 1000000;
    8a6c:	fbb1 f3f2 	udiv	r3, r1, r2
    8a70:	fb02 1313 	mls	r3, r2, r3, r1
    8a74:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    8a76:	f8d8 3000 	ldr.w	r3, [r8]
    8a7a:	b15b      	cbz	r3, 8a94 <smp_pairing_req+0x1e4>
    8a7c:	681b      	ldr	r3, [r3, #0]
    8a7e:	b14b      	cbz	r3, 8a94 <smp_pairing_req+0x1e4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    8a80:	210a      	movs	r1, #10
    8a82:	4638      	mov	r0, r7
    8a84:	f00c f9a7 	bl	14dd6 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    8a88:	f8d8 3000 	ldr.w	r3, [r8]
    8a8c:	9901      	ldr	r1, [sp, #4]
    8a8e:	681b      	ldr	r3, [r3, #0]
    8a90:	4630      	mov	r0, r6
    8a92:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    8a94:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    8a96:	f884 30f3 	strb.w	r3, [r4, #243]	; 0xf3
	dst[1] = val >> 8;
    8a9a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    8a9e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    8aa0:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	dst[1] = val >> 8;
    8aa4:	0a1b      	lsrs	r3, r3, #8
    8aa6:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
    8aaa:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
    8aae:	e708      	b.n	88c2 <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8ab0:	4638      	mov	r0, r7
    8ab2:	2109      	movs	r1, #9
    8ab4:	f00c f98f 	bl	14dd6 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    8ab8:	4b2a      	ldr	r3, [pc, #168]	; (8b64 <smp_pairing_req+0x2b4>)
    8aba:	681b      	ldr	r3, [r3, #0]
    8abc:	685b      	ldr	r3, [r3, #4]
    8abe:	4630      	mov	r0, r6
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    8ac0:	4798      	blx	r3
		return 0;
    8ac2:	e6fe      	b.n	88c2 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    8ac4:	f894 50b8 	ldrb.w	r5, [r4, #184]	; 0xb8
    8ac8:	f894 00bf 	ldrb.w	r0, [r4, #191]	; 0xbf
    8acc:	ea05 0300 	and.w	r3, r5, r0
    8ad0:	071a      	lsls	r2, r3, #28
    8ad2:	d506      	bpl.n	8ae2 <smp_pairing_req+0x232>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    8ad4:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
    8ad8:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
    8adc:	4313      	orrs	r3, r2
    8ade:	07db      	lsls	r3, r3, #31
    8ae0:	d427      	bmi.n	8b32 <smp_pairing_req+0x282>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    8ae2:	2e04      	cmp	r6, #4
    8ae4:	d827      	bhi.n	8b36 <smp_pairing_req+0x286>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    8ae6:	4305      	orrs	r5, r0
    8ae8:	f015 0504 	ands.w	r5, r5, #4
    8aec:	d006      	beq.n	8afc <smp_pairing_req+0x24c>
	return gen_method_sc[remote_io][get_io_capa()];
    8aee:	f7ff fd6b 	bl	85c8 <get_io_capa>
    8af2:	4b1f      	ldr	r3, [pc, #124]	; (8b70 <smp_pairing_req+0x2c0>)
    8af4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    8af8:	441e      	add	r6, r3
    8afa:	5c35      	ldrb	r5, [r6, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    8afc:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    8b00:	f898 300a 	ldrb.w	r3, [r8, #10]
    8b04:	2b04      	cmp	r3, #4
    8b06:	d118      	bne.n	8b3a <smp_pairing_req+0x28a>
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    8b08:	b33d      	cbz	r5, 8b5a <smp_pairing_req+0x2aa>
	return MIN(req->max_key_size, rsp->max_key_size);
    8b0a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
    8b0e:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    8b12:	4293      	cmp	r3, r2
    8b14:	bf28      	it	cs
    8b16:	4613      	movcs	r3, r2
    8b18:	2b10      	cmp	r3, #16
    8b1a:	f47f aed1 	bne.w	88c0 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    8b1e:	210c      	movs	r1, #12
    8b20:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8b24:	f00c f957 	bl	14dd6 <atomic_set_bit>
	return send_pairing_rsp(smp);
    8b28:	4620      	mov	r0, r4
    8b2a:	f00c fab7 	bl	1509c <send_pairing_rsp>
    8b2e:	4605      	mov	r5, r0
    8b30:	e6c7      	b.n	88c2 <smp_pairing_req+0x12>
			return LE_SC_OOB;
    8b32:	2505      	movs	r5, #5
    8b34:	e7e2      	b.n	8afc <smp_pairing_req+0x24c>
		return JUST_WORKS;
    8b36:	2500      	movs	r5, #0
    8b38:	e7e0      	b.n	8afc <smp_pairing_req+0x24c>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    8b3a:	2d00      	cmp	r5, #0
    8b3c:	d1ef      	bne.n	8b1e <smp_pairing_req+0x26e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8b3e:	210e      	movs	r1, #14
    8b40:	4638      	mov	r0, r7
    8b42:	f00c f93f 	bl	14dc4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    8b46:	2800      	cmp	r0, #0
    8b48:	d1e9      	bne.n	8b1e <smp_pairing_req+0x26e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8b4a:	4e06      	ldr	r6, [pc, #24]	; (8b64 <smp_pairing_req+0x2b4>)
    8b4c:	6833      	ldr	r3, [r6, #0]
    8b4e:	2b00      	cmp	r3, #0
    8b50:	d0e5      	beq.n	8b1e <smp_pairing_req+0x26e>
	    bt_auth && bt_auth->pairing_confirm) {
    8b52:	695b      	ldr	r3, [r3, #20]
    8b54:	2b00      	cmp	r3, #0
    8b56:	d0e2      	beq.n	8b1e <smp_pairing_req+0x26e>
    8b58:	e737      	b.n	89ca <smp_pairing_req+0x11a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    8b5a:	2503      	movs	r5, #3
    8b5c:	e6b1      	b.n	88c2 <smp_pairing_req+0x12>
    8b5e:	bf00      	nop
    8b60:	20002147 	.word	0x20002147
    8b64:	200002b4 	.word	0x200002b4
    8b68:	000182d0 	.word	0x000182d0
    8b6c:	000f4240 	.word	0x000f4240
    8b70:	000182e9 	.word	0x000182e9

00008b74 <sc_send_public_key>:
{
    8b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b76:	4606      	mov	r6, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    8b78:	200c      	movs	r0, #12
    8b7a:	f00c f9c0 	bl	14efe <smp_create_pdu.isra.3>
	if (!req_buf) {
    8b7e:	4604      	mov	r4, r0
    8b80:	b1b0      	cbz	r0, 8bb0 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    8b82:	2140      	movs	r1, #64	; 0x40
    8b84:	3008      	adds	r0, #8
    8b86:	f00d fbf5 	bl	16374 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    8b8a:	4d0a      	ldr	r5, [pc, #40]	; (8bb4 <sc_send_public_key+0x40>)
    8b8c:	2220      	movs	r2, #32
    8b8e:	6829      	ldr	r1, [r5, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    8b90:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    8b92:	f00a fc67 	bl	13464 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    8b96:	6829      	ldr	r1, [r5, #0]
    8b98:	2220      	movs	r2, #32
    8b9a:	4411      	add	r1, r2
    8b9c:	18b8      	adds	r0, r7, r2
    8b9e:	f00a fc61 	bl	13464 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    8ba2:	4630      	mov	r0, r6
    8ba4:	2200      	movs	r2, #0
    8ba6:	4621      	mov	r1, r4
    8ba8:	f7ff fd88 	bl	86bc <smp_send.isra.6>
	return 0;
    8bac:	2000      	movs	r0, #0
}
    8bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    8bb0:	2008      	movs	r0, #8
    8bb2:	e7fc      	b.n	8bae <sc_send_public_key+0x3a>
    8bb4:	20000b2c 	.word	0x20000b2c

00008bb8 <smp_send_pairing_confirm>:
{
    8bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    8bba:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
{
    8bbe:	4605      	mov	r5, r0
	switch (smp->method) {
    8bc0:	2b03      	cmp	r3, #3
    8bc2:	d825      	bhi.n	8c10 <smp_send_pairing_confirm+0x58>
    8bc4:	e8df f003 	tbb	[pc, r3]
    8bc8:	26020226 	.word	0x26020226
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8bcc:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
    8bd0:	f8d0 4184 	ldr.w	r4, [r0, #388]	; 0x184
    8bd4:	40dc      	lsrs	r4, r3
    8bd6:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    8bda:	f064 047f 	orn	r4, r4, #127	; 0x7f
    8bde:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    8be0:	2003      	movs	r0, #3
    8be2:	f00c f98c 	bl	14efe <smp_create_pdu.isra.3>
	if (!buf) {
    8be6:	4606      	mov	r6, r0
    8be8:	b190      	cbz	r0, 8c10 <smp_send_pairing_confirm+0x58>
	req = net_buf_add(buf, sizeof(*req));
    8bea:	2110      	movs	r1, #16
    8bec:	3008      	adds	r0, #8
    8bee:	f00d fbc1 	bl	16374 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    8bf2:	9000      	str	r0, [sp, #0]
    8bf4:	480f      	ldr	r0, [pc, #60]	; (8c34 <smp_send_pairing_confirm+0x7c>)
    8bf6:	4623      	mov	r3, r4
    8bf8:	f105 02d3 	add.w	r2, r5, #211	; 0xd3
    8bfc:	f205 1103 	addw	r1, r5, #259	; 0x103
    8c00:	6800      	ldr	r0, [r0, #0]
    8c02:	f00c f9e5 	bl	14fd0 <smp_f4>
    8c06:	4604      	mov	r4, r0
    8c08:	b130      	cbz	r0, 8c18 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
    8c0a:	4630      	mov	r0, r6
    8c0c:	f007 f9ac 	bl	ff68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    8c10:	2008      	movs	r0, #8
    8c12:	e00c      	b.n	8c2e <smp_send_pairing_confirm+0x76>
		r = 0U;
    8c14:	2400      	movs	r4, #0
    8c16:	e7e3      	b.n	8be0 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL, NULL);
    8c18:	4602      	mov	r2, r0
    8c1a:	4631      	mov	r1, r6
    8c1c:	4628      	mov	r0, r5
    8c1e:	f7ff fd4d 	bl	86bc <smp_send.isra.6>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    8c22:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8c26:	4621      	mov	r1, r4
    8c28:	f00c f8e4 	bl	14df4 <atomic_clear_bit>
	return 0;
    8c2c:	4620      	mov	r0, r4
}
    8c2e:	b002      	add	sp, #8
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	bf00      	nop
    8c34:	20000b2c 	.word	0x20000b2c

00008c38 <smp_public_key_slave.part.10>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    8c38:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    8c3a:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
static u8_t smp_public_key_slave(struct bt_smp *smp)
    8c3e:	4604      	mov	r4, r0
	switch (smp->method) {
    8c40:	2b05      	cmp	r3, #5
    8c42:	d814      	bhi.n	8c6e <smp_public_key_slave.part.10+0x36>
    8c44:	e8df f003 	tbb	[pc, r3]
    8c48:	030d3603 	.word	0x030d3603
    8c4c:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8c4e:	30ac      	adds	r0, #172	; 0xac
    8c50:	2104      	movs	r1, #4
    8c52:	f00c f8c0 	bl	14dd6 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    8c56:	4620      	mov	r0, r4
    8c58:	f7ff ffae 	bl	8bb8 <smp_send_pairing_confirm>
		if (err) {
    8c5c:	2800      	cmp	r0, #0
    8c5e:	d037      	beq.n	8cd0 <smp_public_key_slave.part.10+0x98>
}
    8c60:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    8c62:	2104      	movs	r1, #4
    8c64:	f500 70c2 	add.w	r0, r0, #388	; 0x184
    8c68:	f00c fee4 	bl	15a34 <bt_rand>
    8c6c:	b108      	cbz	r0, 8c72 <smp_public_key_slave.part.10+0x3a>
		return BT_SMP_ERR_UNSPECIFIED;
    8c6e:	2008      	movs	r0, #8
    8c70:	e7f6      	b.n	8c60 <smp_public_key_slave.part.10+0x28>
		smp->passkey %= 1000000;
    8c72:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
    8c76:	4a1f      	ldr	r2, [pc, #124]	; (8cf4 <smp_public_key_slave.part.10+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    8c78:	4d1f      	ldr	r5, [pc, #124]	; (8cf8 <smp_public_key_slave.part.10+0xc0>)
		smp->passkey %= 1000000;
    8c7a:	fbb1 f3f2 	udiv	r3, r1, r2
    8c7e:	fb02 1313 	mls	r3, r2, r3, r1
    8c82:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
	if (bt_auth && bt_auth->passkey_display) {
    8c86:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    8c88:	f884 0188 	strb.w	r0, [r4, #392]	; 0x188
	if (bt_auth && bt_auth->passkey_display) {
    8c8c:	b163      	cbz	r3, 8ca8 <smp_public_key_slave.part.10+0x70>
    8c8e:	681b      	ldr	r3, [r3, #0]
    8c90:	b153      	cbz	r3, 8ca8 <smp_public_key_slave.part.10+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    8c92:	210a      	movs	r1, #10
    8c94:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    8c98:	f00c f89d 	bl	14dd6 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    8c9c:	682b      	ldr	r3, [r5, #0]
    8c9e:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
    8ca2:	681b      	ldr	r3, [r3, #0]
    8ca4:	6820      	ldr	r0, [r4, #0]
    8ca6:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    8ca8:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8caa:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8cae:	f00c f892 	bl	14dd6 <atomic_set_bit>
    8cb2:	e00d      	b.n	8cd0 <smp_public_key_slave.part.10+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    8cb4:	2103      	movs	r1, #3
    8cb6:	30ac      	adds	r0, #172	; 0xac
    8cb8:	f00c f88d 	bl	14dd6 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8cbc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    8cc0:	2109      	movs	r1, #9
    8cc2:	f00c f888 	bl	14dd6 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    8cc6:	4b0c      	ldr	r3, [pc, #48]	; (8cf8 <smp_public_key_slave.part.10+0xc0>)
    8cc8:	6820      	ldr	r0, [r4, #0]
    8cca:	681b      	ldr	r3, [r3, #0]
    8ccc:	685b      	ldr	r3, [r3, #4]
    8cce:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    8cd0:	490a      	ldr	r1, [pc, #40]	; (8cfc <smp_public_key_slave.part.10+0xc4>)
    8cd2:	f204 1003 	addw	r0, r4, #259	; 0x103
    8cd6:	f7fd fffd 	bl	6cd4 <bt_dh_key_gen>
    8cda:	4605      	mov	r5, r0
    8cdc:	2800      	cmp	r0, #0
    8cde:	d1c6      	bne.n	8c6e <smp_public_key_slave.part.10+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    8ce0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    8ce4:	2107      	movs	r1, #7
    8ce6:	f00c f876 	bl	14dd6 <atomic_set_bit>
	return 0;
    8cea:	4628      	mov	r0, r5
    8cec:	e7b8      	b.n	8c60 <smp_public_key_slave.part.10+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8cee:	2104      	movs	r1, #4
    8cf0:	e7db      	b.n	8caa <smp_public_key_slave.part.10+0x72>
    8cf2:	bf00      	nop
    8cf4:	000f4240 	.word	0x000f4240
    8cf8:	200002b4 	.word	0x200002b4
    8cfc:	00008da9 	.word	0x00008da9

00008d00 <smp_public_key>:
{
    8d00:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    8d02:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    8d04:	f200 1403 	addw	r4, r0, #259	; 0x103
{
    8d08:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    8d0a:	2220      	movs	r2, #32
    8d0c:	4631      	mov	r1, r6
    8d0e:	4620      	mov	r0, r4
    8d10:	f00a fba8 	bl	13464 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    8d14:	2220      	movs	r2, #32
    8d16:	18b1      	adds	r1, r6, r2
    8d18:	f205 1023 	addw	r0, r5, #291	; 0x123
    8d1c:	f00a fba2 	bl	13464 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    8d20:	2240      	movs	r2, #64	; 0x40
    8d22:	490f      	ldr	r1, [pc, #60]	; (8d60 <smp_public_key+0x60>)
    8d24:	4620      	mov	r0, r4
    8d26:	f00a fb8d 	bl	13444 <memcmp>
    8d2a:	b920      	cbnz	r0, 8d36 <smp_public_key+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    8d2c:	210d      	movs	r1, #13
    8d2e:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8d32:	f00c f850 	bl	14dd6 <atomic_set_bit>
	if (!sc_public_key) {
    8d36:	4b0b      	ldr	r3, [pc, #44]	; (8d64 <smp_public_key+0x64>)
    8d38:	681c      	ldr	r4, [r3, #0]
    8d3a:	b934      	cbnz	r4, 8d4a <smp_public_key+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    8d3c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8d40:	2106      	movs	r1, #6
    8d42:	f00c f848 	bl	14dd6 <atomic_set_bit>
		return 0;
    8d46:	4620      	mov	r0, r4
}
    8d48:	bd70      	pop	{r4, r5, r6, pc}
	err = sc_send_public_key(smp);
    8d4a:	4628      	mov	r0, r5
    8d4c:	f7ff ff12 	bl	8b74 <sc_send_public_key>
	if (err) {
    8d50:	2800      	cmp	r0, #0
    8d52:	d1f9      	bne.n	8d48 <smp_public_key+0x48>
    8d54:	4628      	mov	r0, r5
}
    8d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d5a:	f7ff bf6d 	b.w	8c38 <smp_public_key_slave.part.10>
    8d5e:	bf00      	nop
    8d60:	00018312 	.word	0x00018312
    8d64:	20000b2c 	.word	0x20000b2c

00008d68 <smp_pairing_complete>:
{
    8d68:	b510      	push	{r4, lr}
    8d6a:	4b0e      	ldr	r3, [pc, #56]	; (8da4 <smp_pairing_complete+0x3c>)
    8d6c:	4604      	mov	r4, r0
	if (!status) {
    8d6e:	b979      	cbnz	r1, 8d90 <smp_pairing_complete+0x28>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    8d70:	210c      	movs	r1, #12
    8d72:	30b0      	adds	r0, #176	; 0xb0
    8d74:	f00c f826 	bl	14dc4 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    8d78:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    8d7a:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    8d7c:	b11b      	cbz	r3, 8d86 <smp_pairing_complete+0x1e>
    8d7e:	699b      	ldr	r3, [r3, #24]
    8d80:	b10b      	cbz	r3, 8d86 <smp_pairing_complete+0x1e>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    8d82:	6820      	ldr	r0, [r4, #0]
    8d84:	4798      	blx	r3
	smp_reset(smp);
    8d86:	4620      	mov	r0, r4
}
    8d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    8d8c:	f00c b9bc 	b.w	15108 <smp_reset>
	} else if (bt_auth && bt_auth->pairing_failed) {
    8d90:	681b      	ldr	r3, [r3, #0]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d0f7      	beq.n	8d86 <smp_pairing_complete+0x1e>
    8d96:	69db      	ldr	r3, [r3, #28]
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d0f4      	beq.n	8d86 <smp_pairing_complete+0x1e>
		bt_auth->pairing_failed(smp->chan.chan.conn);
    8d9c:	6800      	ldr	r0, [r0, #0]
    8d9e:	4798      	blx	r3
    8da0:	e7f1      	b.n	8d86 <smp_pairing_complete+0x1e>
    8da2:	bf00      	nop
    8da4:	200002b4 	.word	0x200002b4

00008da8 <bt_smp_dhkey_ready>:
{
    8da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    8daa:	2107      	movs	r1, #7
{
    8dac:	4607      	mov	r7, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    8dae:	4820      	ldr	r0, [pc, #128]	; (8e30 <bt_smp_dhkey_ready+0x88>)
    8db0:	4c20      	ldr	r4, [pc, #128]	; (8e34 <bt_smp_dhkey_ready+0x8c>)
    8db2:	f00c f98e 	bl	150d2 <atomic_test_and_clear_bit>
    8db6:	b938      	cbnz	r0, 8dc8 <bt_smp_dhkey_ready+0x20>
    8db8:	2107      	movs	r1, #7
    8dba:	f504 701a 	add.w	r0, r4, #616	; 0x268
    8dbe:	f00c f988 	bl	150d2 <atomic_test_and_clear_bit>
    8dc2:	b398      	cbz	r0, 8e2c <bt_smp_dhkey_ready+0x84>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    8dc4:	2301      	movs	r3, #1
    8dc6:	e000      	b.n	8dca <bt_smp_dhkey_ready+0x22>
    8dc8:	2300      	movs	r3, #0
    8dca:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
    8dce:	435d      	muls	r5, r3
			smp = &bt_smp_pool[i];
    8dd0:	1966      	adds	r6, r4, r5
	if (!dhkey) {
    8dd2:	b92f      	cbnz	r7, 8de0 <bt_smp_dhkey_ready+0x38>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    8dd4:	210b      	movs	r1, #11
			smp_error(smp, err);
    8dd6:	4630      	mov	r0, r6
}
    8dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			smp_error(smp, err);
    8ddc:	f00c b9bf 	b.w	1515e <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    8de0:	f205 1043 	addw	r0, r5, #323	; 0x143
    8de4:	4639      	mov	r1, r7
    8de6:	2220      	movs	r2, #32
    8de8:	4420      	add	r0, r4
    8dea:	f00a fb3b 	bl	13464 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    8dee:	f105 03b0 	add.w	r3, r5, #176	; 0xb0
    8df2:	4423      	add	r3, r4
    8df4:	2109      	movs	r1, #9
    8df6:	4618      	mov	r0, r3
    8df8:	f00b ffe4 	bl	14dc4 <atomic_test_bit>
    8dfc:	b128      	cbz	r0, 8e0a <bt_smp_dhkey_ready+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    8dfe:	2108      	movs	r1, #8
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    8e00:	4618      	mov	r0, r3
}
    8e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    8e06:	f00b bfe6 	b.w	14dd6 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    8e0a:	210f      	movs	r1, #15
    8e0c:	4618      	mov	r0, r3
    8e0e:	f00b ffd9 	bl	14dc4 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    8e12:	2108      	movs	r1, #8
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    8e14:	2800      	cmp	r0, #0
    8e16:	d1f3      	bne.n	8e00 <bt_smp_dhkey_ready+0x58>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    8e18:	4618      	mov	r0, r3
    8e1a:	f00b ffd3 	bl	14dc4 <atomic_test_bit>
    8e1e:	b128      	cbz	r0, 8e2c <bt_smp_dhkey_ready+0x84>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    8e20:	4630      	mov	r0, r6
    8e22:	f7ff fc61 	bl	86e8 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    8e26:	4601      	mov	r1, r0
    8e28:	2800      	cmp	r0, #0
    8e2a:	d1d4      	bne.n	8dd6 <bt_smp_dhkey_ready+0x2e>
}
    8e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e2e:	bf00      	nop
    8e30:	2000086c 	.word	0x2000086c
    8e34:	200007bc 	.word	0x200007bc

00008e38 <bt_smp_recv>:
{
    8e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    8e3a:	898b      	ldrh	r3, [r1, #12]
{
    8e3c:	4604      	mov	r4, r0
    8e3e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8e40:	b38b      	cbz	r3, 8ea6 <bt_smp_recv+0x6e>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8e42:	2101      	movs	r1, #1
    8e44:	f105 0008 	add.w	r0, r5, #8
    8e48:	f00d fabb 	bl	163c2 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8e4c:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8e4e:	4607      	mov	r7, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8e50:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    8e54:	f00b ffb6 	bl	14dc4 <atomic_test_bit>
    8e58:	bb28      	cbnz	r0, 8ea6 <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    8e5a:	7839      	ldrb	r1, [r7, #0]
    8e5c:	290d      	cmp	r1, #13
    8e5e:	d803      	bhi.n	8e68 <bt_smp_recv+0x30>
    8e60:	4e12      	ldr	r6, [pc, #72]	; (8eac <bt_smp_recv+0x74>)
    8e62:	f856 3031 	ldr.w	r3, [r6, r1, lsl #3]
    8e66:	b923      	cbnz	r3, 8e72 <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    8e68:	2107      	movs	r1, #7
		smp_error(smp, err);
    8e6a:	4620      	mov	r0, r4
    8e6c:	f00c f977 	bl	1515e <smp_error>
    8e70:	e019      	b.n	8ea6 <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    8e72:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8e76:	f00c f92c 	bl	150d2 <atomic_test_and_clear_bit>
    8e7a:	783b      	ldrb	r3, [r7, #0]
    8e7c:	b918      	cbnz	r0, 8e86 <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    8e7e:	2b05      	cmp	r3, #5
    8e80:	d011      	beq.n	8ea6 <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    8e82:	2108      	movs	r1, #8
    8e84:	e7f1      	b.n	8e6a <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    8e86:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
    8e8a:	89a9      	ldrh	r1, [r5, #12]
    8e8c:	7912      	ldrb	r2, [r2, #4]
    8e8e:	4291      	cmp	r1, r2
    8e90:	d001      	beq.n	8e96 <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    8e92:	210a      	movs	r1, #10
    8e94:	e7e9      	b.n	8e6a <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    8e96:	4629      	mov	r1, r5
    8e98:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    8e9c:	4620      	mov	r0, r4
    8e9e:	4798      	blx	r3
	if (err) {
    8ea0:	4601      	mov	r1, r0
    8ea2:	2800      	cmp	r0, #0
    8ea4:	d1e1      	bne.n	8e6a <bt_smp_recv+0x32>
}
    8ea6:	2000      	movs	r0, #0
    8ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8eaa:	bf00      	nop
    8eac:	000178a0 	.word	0x000178a0

00008eb0 <smp_pairing_failed>:
{
    8eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    8eb2:	4604      	mov	r4, r0
{
    8eb4:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    8eb6:	f854 7bb0 	ldr.w	r7, [r4], #176
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    8eba:	688e      	ldr	r6, [r1, #8]
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    8ebc:	4620      	mov	r0, r4
    8ebe:	2109      	movs	r1, #9
    8ec0:	f00c f907 	bl	150d2 <atomic_test_and_clear_bit>
    8ec4:	b190      	cbz	r0, 8eec <smp_pairing_failed+0x3c>
		if (bt_auth && bt_auth->cancel) {
    8ec6:	4b10      	ldr	r3, [pc, #64]	; (8f08 <smp_pairing_failed+0x58>)
    8ec8:	681b      	ldr	r3, [r3, #0]
    8eca:	b9b3      	cbnz	r3, 8efa <smp_pairing_failed+0x4a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    8ecc:	2102      	movs	r1, #2
    8ece:	4620      	mov	r0, r4
    8ed0:	f00b ff78 	bl	14dc4 <atomic_test_bit>
    8ed4:	b120      	cbz	r0, 8ee0 <smp_pairing_failed+0x30>
	    smp->chan.chan.conn->le.keys) {
    8ed6:	682b      	ldr	r3, [r5, #0]
    8ed8:	6f58      	ldr	r0, [r3, #116]	; 0x74
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    8eda:	b108      	cbz	r0, 8ee0 <smp_pairing_failed+0x30>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    8edc:	f00c fbd6 	bl	1568c <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    8ee0:	4628      	mov	r0, r5
    8ee2:	7831      	ldrb	r1, [r6, #0]
    8ee4:	f7ff ff40 	bl	8d68 <smp_pairing_complete>
}
    8ee8:	2000      	movs	r0, #0
    8eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    8eec:	210a      	movs	r1, #10
    8eee:	4620      	mov	r0, r4
    8ef0:	f00c f8ef 	bl	150d2 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    8ef4:	2800      	cmp	r0, #0
    8ef6:	d1e6      	bne.n	8ec6 <smp_pairing_failed+0x16>
    8ef8:	e7e8      	b.n	8ecc <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
    8efa:	691b      	ldr	r3, [r3, #16]
    8efc:	2b00      	cmp	r3, #0
    8efe:	d0e5      	beq.n	8ecc <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
    8f00:	4638      	mov	r0, r7
    8f02:	4798      	blx	r3
    8f04:	e7e2      	b.n	8ecc <smp_pairing_failed+0x1c>
    8f06:	bf00      	nop
    8f08:	200002b4 	.word	0x200002b4

00008f0c <bt_smp_encrypt_change>:
{
    8f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f10:	4604      	mov	r4, r0
    8f12:	b089      	sub	sp, #36	; 0x24
	if (hci_status) {
    8f14:	b961      	cbnz	r1, 8f30 <bt_smp_encrypt_change+0x24>
	if (!conn->encrypt) {
    8f16:	6803      	ldr	r3, [r0, #0]
    8f18:	7adb      	ldrb	r3, [r3, #11]
    8f1a:	b14b      	cbz	r3, 8f30 <bt_smp_encrypt_change+0x24>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8f1c:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
    8f20:	2103      	movs	r1, #3
    8f22:	4628      	mov	r0, r5
    8f24:	f00b ff4e 	bl	14dc4 <atomic_test_bit>
    8f28:	b928      	cbnz	r0, 8f36 <bt_smp_encrypt_change+0x2a>
		smp_reset(smp);
    8f2a:	4620      	mov	r0, r4
    8f2c:	f00c f8ec 	bl	15108 <smp_reset>
}
    8f30:	b009      	add	sp, #36	; 0x24
    8f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    8f36:	2101      	movs	r1, #1
    8f38:	4628      	mov	r0, r5
    8f3a:	f00b ff5b 	bl	14df4 <atomic_clear_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8f3e:	2105      	movs	r1, #5
    8f40:	f00b ff40 	bl	14dc4 <atomic_test_bit>
    8f44:	b1b8      	cbz	r0, 8f76 <bt_smp_encrypt_change+0x6a>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    8f46:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    8f4a:	071f      	lsls	r7, r3, #28
    8f4c:	d507      	bpl.n	8f5e <bt_smp_encrypt_change+0x52>
    8f4e:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    8f52:	071e      	lsls	r6, r3, #28
    8f54:	d503      	bpl.n	8f5e <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    8f56:	2110      	movs	r1, #16
    8f58:	4628      	mov	r0, r5
    8f5a:	f00b ff3c 	bl	14dd6 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    8f5e:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    8f62:	f023 0308 	bic.w	r3, r3, #8
    8f66:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    8f6a:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    8f6e:	f023 0308 	bic.w	r3, r3, #8
    8f72:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    8f76:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    8f7a:	07d8      	lsls	r0, r3, #31
    8f7c:	f140 8084 	bpl.w	9088 <bt_smp_encrypt_change+0x17c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    8f80:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    8f82:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8f86:	f00b ff26 	bl	14dd6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    8f8a:	2102      	movs	r1, #2
    8f8c:	4628      	mov	r0, r5
    8f8e:	f00b ff22 	bl	14dd6 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
    8f92:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
    8f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8f96:	2b00      	cmp	r3, #0
    8f98:	d06d      	beq.n	9076 <bt_smp_encrypt_change+0x16a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8f9a:	2105      	movs	r1, #5
    8f9c:	f00b ff12 	bl	14dc4 <atomic_test_bit>
    8fa0:	4680      	mov	r8, r0
    8fa2:	2800      	cmp	r0, #0
    8fa4:	d167      	bne.n	9076 <bt_smp_encrypt_change+0x16a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    8fa6:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    8faa:	07db      	lsls	r3, r3, #31
    8fac:	d563      	bpl.n	9076 <bt_smp_encrypt_change+0x16a>
	struct bt_keys *keys = conn->le.keys;
    8fae:	6823      	ldr	r3, [r4, #0]
		bt_rand(key, sizeof(key));
    8fb0:	2110      	movs	r1, #16
    8fb2:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    8fb6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
		bt_rand(key, sizeof(key));
    8fb8:	f00c fd3c 	bl	15a34 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    8fbc:	2108      	movs	r1, #8
    8fbe:	eb0d 0001 	add.w	r0, sp, r1
    8fc2:	f00c fd37 	bl	15a34 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    8fc6:	2102      	movs	r1, #2
    8fc8:	a801      	add	r0, sp, #4
    8fca:	f00c fd33 	bl	15a34 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    8fce:	2006      	movs	r0, #6
    8fd0:	f00b ff95 	bl	14efe <smp_create_pdu.isra.3>
		if (!buf) {
    8fd4:	4607      	mov	r7, r0
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d04d      	beq.n	9076 <bt_smp_encrypt_change+0x16a>
		info = net_buf_add(buf, sizeof(*info));
    8fda:	2110      	movs	r1, #16
    8fdc:	3008      	adds	r0, #8
    8fde:	f00d f9c9 	bl	16374 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    8fe2:	7a32      	ldrb	r2, [r6, #8]
    8fe4:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    8fe6:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    8fe8:	f00a fa3c 	bl	13464 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    8fec:	7a30      	ldrb	r0, [r6, #8]
    8fee:	280f      	cmp	r0, #15
    8ff0:	d805      	bhi.n	8ffe <bt_smp_encrypt_change+0xf2>
			(void)memset(info->ltk + keys->enc_size, 0,
    8ff2:	f1c0 0210 	rsb	r2, r0, #16
    8ff6:	4641      	mov	r1, r8
    8ff8:	4448      	add	r0, r9
    8ffa:	f00a fa60 	bl	134be <memset>
		smp_send(smp, buf, NULL, NULL);
    8ffe:	4639      	mov	r1, r7
    9000:	2200      	movs	r2, #0
    9002:	4620      	mov	r0, r4
    9004:	f7ff fb5a 	bl	86bc <smp_send.isra.6>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    9008:	2007      	movs	r0, #7
    900a:	f00b ff78 	bl	14efe <smp_create_pdu.isra.3>
		if (!buf) {
    900e:	4607      	mov	r7, r0
    9010:	b388      	cbz	r0, 9076 <bt_smp_encrypt_change+0x16a>
		ident = net_buf_add(buf, sizeof(*ident));
    9012:	210a      	movs	r1, #10
    9014:	3008      	adds	r0, #8
    9016:	f00d f9ad 	bl	16374 <net_buf_simple_add>
		memcpy(ident->rand, rand, sizeof(ident->rand));
    901a:	2208      	movs	r2, #8
    901c:	eb0d 0102 	add.w	r1, sp, r2
		ident = net_buf_add(buf, sizeof(*ident));
    9020:	4680      	mov	r8, r0
		memcpy(ident->rand, rand, sizeof(ident->rand));
    9022:	3002      	adds	r0, #2
    9024:	f00a fa1e 	bl	13464 <memcpy>
		memcpy(ident->ediv, ediv, sizeof(ident->ediv));
    9028:	2202      	movs	r2, #2
    902a:	a901      	add	r1, sp, #4
    902c:	4640      	mov	r0, r8
    902e:	f00a fa19 	bl	13464 <memcpy>
		smp_send(smp, buf, ident_sent, NULL);
    9032:	4639      	mov	r1, r7
    9034:	4620      	mov	r0, r4
    9036:	4a19      	ldr	r2, [pc, #100]	; (909c <bt_smp_encrypt_change+0x190>)
    9038:	f7ff fb40 	bl	86bc <smp_send.isra.6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    903c:	210c      	movs	r1, #12
    903e:	4628      	mov	r0, r5
    9040:	f00b fec0 	bl	14dc4 <atomic_test_bit>
    9044:	b1b8      	cbz	r0, 9076 <bt_smp_encrypt_change+0x16a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    9046:	2101      	movs	r1, #1
    9048:	4630      	mov	r0, r6
    904a:	f00c fb1b 	bl	15684 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    904e:	2210      	movs	r2, #16
    9050:	eb0d 0102 	add.w	r1, sp, r2
    9054:	f106 0046 	add.w	r0, r6, #70	; 0x46
    9058:	f00a fa04 	bl	13464 <memcpy>
			memcpy(keys->slave_ltk.rand, rand, sizeof(rand));
    905c:	2208      	movs	r2, #8
    905e:	eb0d 0102 	add.w	r1, sp, r2
    9062:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    9066:	f00a f9fd 	bl	13464 <memcpy>
			memcpy(keys->slave_ltk.ediv, ediv,
    906a:	2202      	movs	r2, #2
    906c:	a901      	add	r1, sp, #4
    906e:	f106 0044 	add.w	r0, r6, #68	; 0x44
    9072:	f00a f9f7 	bl	13464 <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
    9076:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
    907a:	2900      	cmp	r1, #0
    907c:	f47f af58 	bne.w	8f30 <bt_smp_encrypt_change+0x24>
		smp_pairing_complete(smp, 0);
    9080:	4620      	mov	r0, r4
    9082:	f7ff fe71 	bl	8d68 <smp_pairing_complete>
    9086:	e753      	b.n	8f30 <bt_smp_encrypt_change+0x24>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9088:	0799      	lsls	r1, r3, #30
    908a:	d501      	bpl.n	9090 <bt_smp_encrypt_change+0x184>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    908c:	2108      	movs	r1, #8
    908e:	e778      	b.n	8f82 <bt_smp_encrypt_change+0x76>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9090:	075a      	lsls	r2, r3, #29
    9092:	f57f af7a 	bpl.w	8f8a <bt_smp_encrypt_change+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9096:	210a      	movs	r1, #10
    9098:	e773      	b.n	8f82 <bt_smp_encrypt_change+0x76>
    909a:	bf00      	nop
    909c:	00015241 	.word	0x00015241

000090a0 <bt_smp_connected>:
{
    90a0:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    90a2:	4905      	ldr	r1, [pc, #20]	; (90b8 <bt_smp_connected+0x18>)
{
    90a4:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    90a6:	f500 70cc 	add.w	r0, r0, #408	; 0x198
    90aa:	f00d ff8b 	bl	16fc4 <k_delayed_work_init>
	smp_reset(smp);
    90ae:	4620      	mov	r0, r4
}
    90b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    90b4:	f00c b828 	b.w	15108 <smp_reset>
    90b8:	00015199 	.word	0x00015199

000090bc <bt_smp_pkey_ready>:
{
    90bc:	b508      	push	{r3, lr}
	sc_public_key = pkey;
    90be:	4b16      	ldr	r3, [pc, #88]	; (9118 <bt_smp_pkey_ready+0x5c>)
    90c0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    90c2:	b340      	cbz	r0, 9116 <bt_smp_pkey_ready+0x5a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    90c4:	4815      	ldr	r0, [pc, #84]	; (911c <bt_smp_pkey_ready+0x60>)
    90c6:	f008 f90f 	bl	112e8 <z_impl_k_sem_give>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    90ca:	2106      	movs	r1, #6
    90cc:	4814      	ldr	r0, [pc, #80]	; (9120 <bt_smp_pkey_ready+0x64>)
    90ce:	f00b fe79 	bl	14dc4 <atomic_test_bit>
    90d2:	b138      	cbz	r0, 90e4 <bt_smp_pkey_ready+0x28>
	err = sc_send_public_key(smp);
    90d4:	4813      	ldr	r0, [pc, #76]	; (9124 <bt_smp_pkey_ready+0x68>)
    90d6:	f7ff fd4d 	bl	8b74 <sc_send_public_key>
	if (err) {
    90da:	b1b0      	cbz	r0, 910a <bt_smp_pkey_ready+0x4e>
			smp_error(smp, err);
    90dc:	4601      	mov	r1, r0
    90de:	4811      	ldr	r0, [pc, #68]	; (9124 <bt_smp_pkey_ready+0x68>)
    90e0:	f00c f83d 	bl	1515e <smp_error>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    90e4:	2106      	movs	r1, #6
    90e6:	4810      	ldr	r0, [pc, #64]	; (9128 <bt_smp_pkey_ready+0x6c>)
    90e8:	f00b fe6c 	bl	14dc4 <atomic_test_bit>
    90ec:	b198      	cbz	r0, 9116 <bt_smp_pkey_ready+0x5a>
	err = sc_send_public_key(smp);
    90ee:	480f      	ldr	r0, [pc, #60]	; (912c <bt_smp_pkey_ready+0x70>)
    90f0:	f7ff fd40 	bl	8b74 <sc_send_public_key>
	if (err) {
    90f4:	b918      	cbnz	r0, 90fe <bt_smp_pkey_ready+0x42>
    90f6:	480d      	ldr	r0, [pc, #52]	; (912c <bt_smp_pkey_ready+0x70>)
    90f8:	f7ff fd9e 	bl	8c38 <smp_public_key_slave.part.10>
		if (err) {
    90fc:	b158      	cbz	r0, 9116 <bt_smp_pkey_ready+0x5a>
			smp_error(smp, err);
    90fe:	4601      	mov	r1, r0
}
    9100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_error(smp, err);
    9104:	4809      	ldr	r0, [pc, #36]	; (912c <bt_smp_pkey_ready+0x70>)
    9106:	f00c b82a 	b.w	1515e <smp_error>
    910a:	4806      	ldr	r0, [pc, #24]	; (9124 <bt_smp_pkey_ready+0x68>)
    910c:	f7ff fd94 	bl	8c38 <smp_public_key_slave.part.10>
		if (err) {
    9110:	2800      	cmp	r0, #0
    9112:	d0e7      	beq.n	90e4 <bt_smp_pkey_ready+0x28>
    9114:	e7e2      	b.n	90dc <bt_smp_pkey_ready+0x20>
}
    9116:	bd08      	pop	{r3, pc}
    9118:	20000b2c 	.word	0x20000b2c
    911c:	200054c4 	.word	0x200054c4
    9120:	2000086c 	.word	0x2000086c
    9124:	200007bc 	.word	0x200007bc
    9128:	20000a24 	.word	0x20000a24
    912c:	20000974 	.word	0x20000974

00009130 <smp_pairing_random>:
{
    9130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9134:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    9136:	f100 05e3 	add.w	r5, r0, #227	; 0xe3
{
    913a:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    913c:	6889      	ldr	r1, [r1, #8]
    913e:	2210      	movs	r2, #16
    9140:	4628      	mov	r0, r5
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9142:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    9146:	f00a f98d 	bl	13464 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    914a:	2105      	movs	r1, #5
    914c:	4630      	mov	r0, r6
    914e:	f00b fe39 	bl	14dc4 <atomic_test_bit>
    9152:	2800      	cmp	r0, #0
    9154:	d13c      	bne.n	91d0 <smp_pairing_random+0xa0>
	struct bt_conn *conn = smp->chan.chan.conn;
    9156:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    9158:	af0a      	add	r7, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    915a:	f858 3bf3 	ldr.w	r3, [r8], #243
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    915e:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    9160:	f103 0256 	add.w	r2, r3, #86	; 0x56
    9164:	334f      	adds	r3, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    9166:	9201      	str	r2, [sp, #4]
    9168:	9300      	str	r3, [sp, #0]
    916a:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
    916e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    9172:	4629      	mov	r1, r5
    9174:	4640      	mov	r0, r8
    9176:	f00c f877 	bl	15268 <smp_c1>
	if (err) {
    917a:	b108      	cbz	r0, 9180 <smp_pairing_random+0x50>
		return BT_SMP_ERR_UNSPECIFIED;
    917c:	2008      	movs	r0, #8
    917e:	e0b1      	b.n	92e4 <smp_pairing_random+0x1b4>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    9180:	2210      	movs	r2, #16
    9182:	4639      	mov	r1, r7
    9184:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9188:	f00a f95c 	bl	13444 <memcmp>
    918c:	2800      	cmp	r0, #0
    918e:	f040 80a8 	bne.w	92e2 <smp_pairing_random+0x1b2>
	memcpy(out, r2, 8);
    9192:	2208      	movs	r2, #8
    9194:	4629      	mov	r1, r5
    9196:	4638      	mov	r0, r7
    9198:	f00a f964 	bl	13464 <memcpy>
	memcpy(out + 8, r1, 8);
    919c:	2208      	movs	r2, #8
    919e:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    91a2:	a80c      	add	r0, sp, #48	; 0x30
    91a4:	f00a f95e 	bl	13464 <memcpy>
	return bt_encrypt_le(k, out, out);
    91a8:	463a      	mov	r2, r7
    91aa:	4639      	mov	r1, r7
    91ac:	4640      	mov	r0, r8
    91ae:	f00c fc5b 	bl	15a68 <bt_encrypt_le>
		if (err) {
    91b2:	2800      	cmp	r0, #0
    91b4:	d1e2      	bne.n	917c <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    91b6:	4639      	mov	r1, r7
    91b8:	2210      	movs	r2, #16
    91ba:	4640      	mov	r0, r8
    91bc:	f00a f952 	bl	13464 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    91c0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    91c2:	4630      	mov	r0, r6
    91c4:	f00b fe07 	bl	14dd6 <atomic_set_bit>
	smp_send_pairing_random(smp);
    91c8:	4620      	mov	r0, r4
    91ca:	f00b ff4e 	bl	1506a <smp_send_pairing_random>
    91ce:	e086      	b.n	92de <smp_pairing_random+0x1ae>
	switch (smp->method) {
    91d0:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    91d4:	2b05      	cmp	r3, #5
    91d6:	d8d1      	bhi.n	917c <smp_pairing_random+0x4c>
    91d8:	a201      	add	r2, pc, #4	; (adr r2, 91e0 <smp_pairing_random+0xb0>)
    91da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    91de:	bf00      	nop
    91e0:	00009267 	.word	0x00009267
    91e4:	00009275 	.word	0x00009275
    91e8:	00009275 	.word	0x00009275
    91ec:	000091f9 	.word	0x000091f9
    91f0:	0000917d 	.word	0x0000917d
    91f4:	000092fb 	.word	0x000092fb
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    91f8:	4b59      	ldr	r3, [pc, #356]	; (9360 <smp_pairing_random+0x230>)
    91fa:	681f      	ldr	r7, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    91fc:	2220      	movs	r2, #32
    91fe:	f204 1103 	addw	r1, r4, #259	; 0x103
    9202:	a80a      	add	r0, sp, #40	; 0x28
    9204:	f00b fdcc 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    9208:	2220      	movs	r2, #32
    920a:	4639      	mov	r1, r7
    920c:	a812      	add	r0, sp, #72	; 0x48
    920e:	f00b fdc7 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    9212:	2210      	movs	r2, #16
    9214:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    9218:	a81a      	add	r0, sp, #104	; 0x68
    921a:	f00b fdc1 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    921e:	2210      	movs	r2, #16
    9220:	4629      	mov	r1, r5
    9222:	a806      	add	r0, sp, #24
    9224:	f00b fdbc 	bl	14da0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    9228:	ab06      	add	r3, sp, #24
    922a:	2250      	movs	r2, #80	; 0x50
    922c:	a90a      	add	r1, sp, #40	; 0x28
    922e:	4618      	mov	r0, r3
    9230:	f00b fdf0 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
    9234:	2800      	cmp	r0, #0
    9236:	d1a1      	bne.n	917c <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    9238:	2204      	movs	r2, #4
    923a:	a909      	add	r1, sp, #36	; 0x24
    923c:	a805      	add	r0, sp, #20
    923e:	f00a f911 	bl	13464 <memcpy>
    9242:	9b05      	ldr	r3, [sp, #20]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9244:	4947      	ldr	r1, [pc, #284]	; (9364 <smp_pairing_random+0x234>)
    9246:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9248:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    924a:	fbb3 f2f1 	udiv	r2, r3, r1
    924e:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9252:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9254:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9256:	f00b fdbe 	bl	14dd6 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    925a:	4b43      	ldr	r3, [pc, #268]	; (9368 <smp_pairing_random+0x238>)
    925c:	9905      	ldr	r1, [sp, #20]
    925e:	681b      	ldr	r3, [r3, #0]
    9260:	6820      	ldr	r0, [r4, #0]
    9262:	689b      	ldr	r3, [r3, #8]
    9264:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    9266:	210d      	movs	r1, #13
    9268:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    926c:	f00b fdb3 	bl	14dd6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    9270:	210f      	movs	r1, #15
    9272:	e7a6      	b.n	91c2 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9274:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
    9278:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    927c:	4938      	ldr	r1, [pc, #224]	; (9360 <smp_pairing_random+0x230>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    927e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9280:	af0a      	add	r7, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9282:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9286:	9700      	str	r7, [sp, #0]
    9288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    928c:	462a      	mov	r2, r5
    928e:	6809      	ldr	r1, [r1, #0]
    9290:	f204 1003 	addw	r0, r4, #259	; 0x103
    9294:	f00b fe9c 	bl	14fd0 <smp_f4>
    9298:	2800      	cmp	r0, #0
    929a:	f47f af6f 	bne.w	917c <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    929e:	2210      	movs	r2, #16
    92a0:	4639      	mov	r1, r7
    92a2:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    92a6:	f00a f8cd 	bl	13444 <memcmp>
    92aa:	b9d0      	cbnz	r0, 92e2 <smp_pairing_random+0x1b2>
		atomic_set_bit(&smp->allowed_cmds,
    92ac:	f104 07ac 	add.w	r7, r4, #172	; 0xac
    92b0:	2103      	movs	r1, #3
    92b2:	4638      	mov	r0, r7
    92b4:	f00b fd8f 	bl	14dd6 <atomic_set_bit>
		smp_send_pairing_random(smp);
    92b8:	4620      	mov	r0, r4
    92ba:	f00b fed6 	bl	1506a <smp_send_pairing_random>
		smp->passkey_round++;
    92be:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
    92c2:	3301      	adds	r3, #1
    92c4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    92c6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    92c8:	f884 3188 	strb.w	r3, [r4, #392]	; 0x188
		if (smp->passkey_round == 20U) {
    92cc:	d10d      	bne.n	92ea <smp_pairing_random+0x1ba>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    92ce:	210d      	movs	r1, #13
    92d0:	4638      	mov	r0, r7
    92d2:	f00b fd80 	bl	14dd6 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    92d6:	210f      	movs	r1, #15
    92d8:	4630      	mov	r0, r6
    92da:	f00b fd7c 	bl	14dd6 <atomic_set_bit>
	return 0;
    92de:	2000      	movs	r0, #0
    92e0:	e000      	b.n	92e4 <smp_pairing_random+0x1b4>
		return BT_SMP_ERR_CONFIRM_FAILED;
    92e2:	2004      	movs	r0, #4
}
    92e4:	b01e      	add	sp, #120	; 0x78
    92e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(smp->prnd, 16)) {
    92ea:	2110      	movs	r1, #16
    92ec:	f104 00d3 	add.w	r0, r4, #211	; 0xd3
    92f0:	f00c fba0 	bl	15a34 <bt_rand>
    92f4:	2800      	cmp	r0, #0
    92f6:	d0f5      	beq.n	92e4 <smp_pairing_random+0x1b4>
    92f8:	e740      	b.n	917c <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    92fa:	2110      	movs	r1, #16
    92fc:	f104 00d3 	add.w	r0, r4, #211	; 0xd3
    9300:	f00c fb98 	bl	15a34 <bt_rand>
    9304:	2800      	cmp	r0, #0
    9306:	f47f af39 	bne.w	917c <smp_pairing_random+0x4c>
		if (bt_auth->oob_data_request) {
    930a:	4f17      	ldr	r7, [pc, #92]	; (9368 <smp_pairing_random+0x238>)
    930c:	683a      	ldr	r2, [r7, #0]
    930e:	68d2      	ldr	r2, [r2, #12]
    9310:	2a00      	cmp	r2, #0
    9312:	f43f af33 	beq.w	917c <smp_pairing_random+0x4c>
			struct bt_conn_oob_info info = {
    9316:	4b15      	ldr	r3, [pc, #84]	; (936c <smp_pairing_random+0x23c>)
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    9318:	f894 20b7 	ldrb.w	r2, [r4, #183]	; 0xb7
			struct bt_conn_oob_info info = {
    931c:	881b      	ldrh	r3, [r3, #0]
    931e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    9322:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    9326:	07d2      	lsls	r2, r2, #31
    9328:	f003 0301 	and.w	r3, r3, #1
    932c:	d404      	bmi.n	9338 <smp_pairing_random+0x208>
    932e:	2b00      	cmp	r3, #0
    9330:	bf14      	ite	ne
    9332:	2001      	movne	r0, #1
    9334:	2003      	moveq	r0, #3
    9336:	e002      	b.n	933e <smp_pairing_random+0x20e>
				     BT_CONN_OOB_BOTH_PEERS :
    9338:	2b00      	cmp	r3, #0
    933a:	bf18      	it	ne
    933c:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    933e:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    9340:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_local = NULL;
    9344:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    9348:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
    934a:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    934e:	210b      	movs	r1, #11
    9350:	f00b fd41 	bl	14dd6 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    9354:	683b      	ldr	r3, [r7, #0]
    9356:	6820      	ldr	r0, [r4, #0]
    9358:	68db      	ldr	r3, [r3, #12]
    935a:	a90a      	add	r1, sp, #40	; 0x28
    935c:	4798      	blx	r3
    935e:	e7be      	b.n	92de <smp_pairing_random+0x1ae>
    9360:	20000b2c 	.word	0x20000b2c
    9364:	000f4240 	.word	0x000f4240
    9368:	200002b4 	.word	0x200002b4
    936c:	0001740e 	.word	0x0001740e

00009370 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    9370:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    9372:	4b07      	ldr	r3, [pc, #28]	; (9390 <bt_smp_init+0x20>)
		return -ENOENT;
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    9374:	4807      	ldr	r0, [pc, #28]	; (9394 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    9376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    937a:	f003 0306 	and.w	r3, r3, #6
    937e:	1f9a      	subs	r2, r3, #6
    9380:	4253      	negs	r3, r2
    9382:	4153      	adcs	r3, r2
    9384:	4a04      	ldr	r2, [pc, #16]	; (9398 <bt_smp_init+0x28>)
    9386:	7013      	strb	r3, [r2, #0]
	bt_pub_key_gen(&pub_key_cb);
    9388:	f7fd fc62 	bl	6c50 <bt_pub_key_gen>

	return smp_self_test();
}
    938c:	2000      	movs	r0, #0
    938e:	bd08      	pop	{r3, pc}
    9390:	20004e98 	.word	0x20004e98
    9394:	200050f8 	.word	0x200050f8
    9398:	20002148 	.word	0x20002148

0000939c <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    939c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    939e:	4d20      	ldr	r5, [pc, #128]	; (9420 <bt_keys_get_addr+0x84>)
    93a0:	782b      	ldrb	r3, [r5, #0]
    93a2:	4283      	cmp	r3, r0
{
    93a4:	4607      	mov	r7, r0
    93a6:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    93a8:	d104      	bne.n	93b4 <bt_keys_get_addr+0x18>
	return memcmp(a, b, sizeof(*a));
    93aa:	2207      	movs	r2, #7
    93ac:	1c68      	adds	r0, r5, #1
    93ae:	f00a f849 	bl	13444 <memcmp>
    93b2:	b380      	cbz	r0, 9416 <bt_keys_get_addr+0x7a>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    93b4:	2300      	movs	r3, #0
    93b6:	2207      	movs	r2, #7
    93b8:	4669      	mov	r1, sp
    93ba:	481a      	ldr	r0, [pc, #104]	; (9424 <bt_keys_get_addr+0x88>)
    93bc:	9300      	str	r3, [sp, #0]
    93be:	f8cd 3003 	str.w	r3, [sp, #3]
    93c2:	f00a f83f 	bl	13444 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    93c6:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    93ca:	2800      	cmp	r0, #0
    93cc:	bf0c      	ite	eq
    93ce:	2400      	moveq	r4, #0
    93d0:	2402      	movne	r4, #2
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    93d2:	42bb      	cmp	r3, r7
    93d4:	d017      	beq.n	9406 <bt_keys_get_addr+0x6a>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    93d6:	2c02      	cmp	r4, #2
    93d8:	d10a      	bne.n	93f0 <bt_keys_get_addr+0x54>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    93da:	2400      	movs	r4, #0
    93dc:	2207      	movs	r2, #7
    93de:	4669      	mov	r1, sp
    93e0:	4811      	ldr	r0, [pc, #68]	; (9428 <bt_keys_get_addr+0x8c>)
    93e2:	9400      	str	r4, [sp, #0]
    93e4:	f8cd 4003 	str.w	r4, [sp, #3]
    93e8:	f00a f82c 	bl	13444 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    93ec:	b9a0      	cbnz	r0, 9418 <bt_keys_get_addr+0x7c>
    93ee:	2401      	movs	r4, #1
    93f0:	2056      	movs	r0, #86	; 0x56
    93f2:	4360      	muls	r0, r4
			first_free_slot = i;
		}
	}

	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
    93f4:	182c      	adds	r4, r5, r0
		keys->id = id;
    93f6:	542f      	strb	r7, [r5, r0]
		bt_addr_le_copy(&keys->addr, addr);
    93f8:	3001      	adds	r0, #1
	memcpy(dst, src, sizeof(*dst));
    93fa:	2207      	movs	r2, #7
    93fc:	4631      	mov	r1, r6
    93fe:	4428      	add	r0, r5
    9400:	f00a f830 	bl	13464 <memcpy>
    9404:	e008      	b.n	9418 <bt_keys_get_addr+0x7c>
	return memcmp(a, b, sizeof(*a));
    9406:	2207      	movs	r2, #7
    9408:	4631      	mov	r1, r6
    940a:	4807      	ldr	r0, [pc, #28]	; (9428 <bt_keys_get_addr+0x8c>)
    940c:	f00a f81a 	bl	13444 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    9410:	2800      	cmp	r0, #0
    9412:	d1e0      	bne.n	93d6 <bt_keys_get_addr+0x3a>
    9414:	2056      	movs	r0, #86	; 0x56
		keys = &key_pool[i];
    9416:	182c      	adds	r4, r5, r0
		return keys;
	}
	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    9418:	4620      	mov	r0, r4
    941a:	b003      	add	sp, #12
    941c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    941e:	bf00      	nop
    9420:	20001fc4 	.word	0x20001fc4
    9424:	20001fc5 	.word	0x20001fc5
    9428:	2000201b 	.word	0x2000201b

0000942c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    9430:	4c0a      	ldr	r4, [pc, #40]	; (945c <bt_keys_foreach+0x30>)
    9432:	8963      	ldrh	r3, [r4, #10]
    9434:	4203      	tst	r3, r0
{
    9436:	4607      	mov	r7, r0
    9438:	460d      	mov	r5, r1
    943a:	4616      	mov	r6, r2
		if ((key_pool[i].keys & type)) {
    943c:	d002      	beq.n	9444 <bt_keys_foreach+0x18>
			func(&key_pool[i], data);
    943e:	4611      	mov	r1, r2
    9440:	4620      	mov	r0, r4
    9442:	47a8      	blx	r5
		if ((key_pool[i].keys & type)) {
    9444:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    9448:	423b      	tst	r3, r7
    944a:	d005      	beq.n	9458 <bt_keys_foreach+0x2c>
			func(&key_pool[i], data);
    944c:	4631      	mov	r1, r6
    944e:	462b      	mov	r3, r5
    9450:	4803      	ldr	r0, [pc, #12]	; (9460 <bt_keys_foreach+0x34>)
		}
	}
}
    9452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			func(&key_pool[i], data);
    9456:	4718      	bx	r3
}
    9458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    945c:	20001fc4 	.word	0x20001fc4
    9460:	2000201a 	.word	0x2000201a

00009464 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, u8_t id, const bt_addr_le_t *addr)
{
    9464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    9466:	4c11      	ldr	r4, [pc, #68]	; (94ac <bt_keys_find+0x48>)
    9468:	8963      	ldrh	r3, [r4, #10]
    946a:	4203      	tst	r3, r0
{
    946c:	4607      	mov	r7, r0
    946e:	460e      	mov	r6, r1
    9470:	4615      	mov	r5, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    9472:	d008      	beq.n	9486 <bt_keys_find+0x22>
    9474:	7823      	ldrb	r3, [r4, #0]
    9476:	428b      	cmp	r3, r1
    9478:	d105      	bne.n	9486 <bt_keys_find+0x22>
    947a:	2207      	movs	r2, #7
    947c:	4629      	mov	r1, r5
    947e:	1c60      	adds	r0, r4, #1
    9480:	f009 ffe0 	bl	13444 <memcmp>
    9484:	b170      	cbz	r0, 94a4 <bt_keys_find+0x40>
    9486:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    948a:	423b      	tst	r3, r7
    948c:	d00c      	beq.n	94a8 <bt_keys_find+0x44>
    948e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    9492:	42b3      	cmp	r3, r6
    9494:	d108      	bne.n	94a8 <bt_keys_find+0x44>
    9496:	2207      	movs	r2, #7
    9498:	4629      	mov	r1, r5
    949a:	4805      	ldr	r0, [pc, #20]	; (94b0 <bt_keys_find+0x4c>)
    949c:	f009 ffd2 	bl	13444 <memcmp>
    94a0:	b910      	cbnz	r0, 94a8 <bt_keys_find+0x44>
    94a2:	2056      	movs	r0, #86	; 0x56
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    94a4:	4420      	add	r0, r4
		}
	}

	return NULL;
}
    94a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
    94a8:	2000      	movs	r0, #0
    94aa:	e7fc      	b.n	94a6 <bt_keys_find+0x42>
    94ac:	20001fc4 	.word	0x20001fc4
    94b0:	2000201b 	.word	0x2000201b

000094b4 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(u8_t id, const bt_addr_le_t *addr)
{
    94b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    94b6:	780b      	ldrb	r3, [r1, #0]
    94b8:	2b01      	cmp	r3, #1
    94ba:	4607      	mov	r7, r0
    94bc:	460e      	mov	r6, r1
    94be:	d149      	bne.n	9554 <bt_keys_find_irk+0xa0>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    94c0:	798b      	ldrb	r3, [r1, #6]
    94c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    94c6:	2b40      	cmp	r3, #64	; 0x40
    94c8:	d144      	bne.n	9554 <bt_keys_find_irk+0xa0>
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    94ca:	4c23      	ldr	r4, [pc, #140]	; (9558 <bt_keys_find_irk+0xa4>)
    94cc:	8963      	ldrh	r3, [r4, #10]
    94ce:	0798      	lsls	r0, r3, #30
    94d0:	d509      	bpl.n	94e6 <bt_keys_find_irk+0x32>
			continue;
		}

		if (key_pool[i].id == id &&
    94d2:	7823      	ldrb	r3, [r4, #0]
    94d4:	42bb      	cmp	r3, r7
    94d6:	d106      	bne.n	94e6 <bt_keys_find_irk+0x32>
	return memcmp(a, b, sizeof(*a));
    94d8:	2206      	movs	r2, #6
    94da:	f104 0136 	add.w	r1, r4, #54	; 0x36
    94de:	1c70      	adds	r0, r6, #1
    94e0:	f009 ffb0 	bl	13444 <memcmp>
    94e4:	b170      	cbz	r0, 9504 <bt_keys_find_irk+0x50>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    94e6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    94ea:	0799      	lsls	r1, r3, #30
    94ec:	d50c      	bpl.n	9508 <bt_keys_find_irk+0x54>
		if (key_pool[i].id == id &&
    94ee:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    94f2:	42bb      	cmp	r3, r7
    94f4:	d108      	bne.n	9508 <bt_keys_find_irk+0x54>
    94f6:	2206      	movs	r2, #6
    94f8:	4918      	ldr	r1, [pc, #96]	; (955c <bt_keys_find_irk+0xa8>)
    94fa:	1c70      	adds	r0, r6, #1
    94fc:	f009 ffa2 	bl	13444 <memcmp>
    9500:	b910      	cbnz	r0, 9508 <bt_keys_find_irk+0x54>
    9502:	2056      	movs	r0, #86	; 0x56
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    9504:	4420      	add	r0, r4
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    9506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    9508:	8963      	ldrh	r3, [r4, #10]
    950a:	079a      	lsls	r2, r3, #30
    950c:	d508      	bpl.n	9520 <bt_keys_find_irk+0x6c>
		if (key_pool[i].id != id) {
    950e:	7823      	ldrb	r3, [r4, #0]
    9510:	42bb      	cmp	r3, r7
    9512:	d105      	bne.n	9520 <bt_keys_find_irk+0x6c>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    9514:	1c75      	adds	r5, r6, #1
    9516:	4629      	mov	r1, r5
    9518:	4811      	ldr	r0, [pc, #68]	; (9560 <bt_keys_find_irk+0xac>)
    951a:	f00a f811 	bl	13540 <bt_rpa_irk_matches>
    951e:	b9b8      	cbnz	r0, 9550 <bt_keys_find_irk+0x9c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    9520:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    9524:	079b      	lsls	r3, r3, #30
    9526:	d515      	bpl.n	9554 <bt_keys_find_irk+0xa0>
		if (key_pool[i].id != id) {
    9528:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    952c:	42bb      	cmp	r3, r7
    952e:	d111      	bne.n	9554 <bt_keys_find_irk+0xa0>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    9530:	1c75      	adds	r5, r6, #1
    9532:	4629      	mov	r1, r5
    9534:	480b      	ldr	r0, [pc, #44]	; (9564 <bt_keys_find_irk+0xb0>)
    9536:	f00a f803 	bl	13540 <bt_rpa_irk_matches>
    953a:	b158      	cbz	r0, 9554 <bt_keys_find_irk+0xa0>
    953c:	2656      	movs	r6, #86	; 0x56
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    953e:	f106 0036 	add.w	r0, r6, #54	; 0x36
	memcpy(dst, src, sizeof(*dst));
    9542:	2206      	movs	r2, #6
    9544:	4629      	mov	r1, r5
    9546:	4420      	add	r0, r4
    9548:	f009 ff8c 	bl	13464 <memcpy>
			return &key_pool[i];
    954c:	19a0      	adds	r0, r4, r6
    954e:	e7da      	b.n	9506 <bt_keys_find_irk+0x52>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    9550:	2600      	movs	r6, #0
    9552:	e7f4      	b.n	953e <bt_keys_find_irk+0x8a>
		return NULL;
    9554:	2000      	movs	r0, #0
    9556:	e7d6      	b.n	9506 <bt_keys_find_irk+0x52>
    9558:	20001fc4 	.word	0x20001fc4
    955c:	20002050 	.word	0x20002050
    9560:	20001fea 	.word	0x20001fea
    9564:	20002040 	.word	0x20002040

00009568 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(u8_t id, const bt_addr_le_t *addr)
{
    9568:	b570      	push	{r4, r5, r6, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    956a:	4c0f      	ldr	r4, [pc, #60]	; (95a8 <bt_keys_find_addr+0x40>)
    956c:	7823      	ldrb	r3, [r4, #0]
    956e:	4283      	cmp	r3, r0
{
    9570:	4605      	mov	r5, r0
    9572:	460e      	mov	r6, r1
		if (key_pool[i].id == id &&
    9574:	d00b      	beq.n	958e <bt_keys_find_addr+0x26>
    9576:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    957a:	42ab      	cmp	r3, r5
    957c:	d111      	bne.n	95a2 <bt_keys_find_addr+0x3a>
	return memcmp(a, b, sizeof(*a));
    957e:	2207      	movs	r2, #7
    9580:	4631      	mov	r1, r6
    9582:	480a      	ldr	r0, [pc, #40]	; (95ac <bt_keys_find_addr+0x44>)
    9584:	f009 ff5e 	bl	13444 <memcmp>
    9588:	b958      	cbnz	r0, 95a2 <bt_keys_find_addr+0x3a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    958a:	2001      	movs	r0, #1
    958c:	e005      	b.n	959a <bt_keys_find_addr+0x32>
    958e:	2207      	movs	r2, #7
    9590:	1c60      	adds	r0, r4, #1
    9592:	f009 ff57 	bl	13444 <memcmp>
		if (key_pool[i].id == id &&
    9596:	2800      	cmp	r0, #0
    9598:	d1ed      	bne.n	9576 <bt_keys_find_addr+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    959a:	2356      	movs	r3, #86	; 0x56
    959c:	fb03 4000 	mla	r0, r3, r0, r4
    95a0:	e000      	b.n	95a4 <bt_keys_find_addr+0x3c>
		}
	}

	return NULL;
    95a2:	2000      	movs	r0, #0
}
    95a4:	bd70      	pop	{r4, r5, r6, pc}
    95a6:	bf00      	nop
    95a8:	20001fc4 	.word	0x20001fc4
    95ac:	2000201b 	.word	0x2000201b

000095b0 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    95b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    95b4:	4f11      	ldr	r7, [pc, #68]	; (95fc <mayfly_init+0x4c>)
    95b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 9600 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    95ba:	2604      	movs	r6, #4
	while (callee_id--) {
    95bc:	3e01      	subs	r6, #1
    95be:	b2f6      	uxtb	r6, r6
    95c0:	2eff      	cmp	r6, #255	; 0xff
    95c2:	d019      	beq.n	95f8 <mayfly_init+0x48>
    95c4:	b233      	sxth	r3, r6
    95c6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    95ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    95ce:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    95d0:	2404      	movs	r4, #4
    95d2:	f04f 0a0c 	mov.w	sl, #12
    95d6:	e00a      	b.n	95ee <mayfly_init+0x3e>
    95d8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    95dc:	1d0a      	adds	r2, r1, #4
    95de:	eb04 0008 	add.w	r0, r4, r8
    95e2:	443a      	add	r2, r7
    95e4:	4439      	add	r1, r7
    95e6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    95ea:	f00c f8d7 	bl	1579c <memq_init>
		while (caller_id--) {
    95ee:	3c01      	subs	r4, #1
    95f0:	b2e4      	uxtb	r4, r4
    95f2:	2cff      	cmp	r4, #255	; 0xff
    95f4:	d1f0      	bne.n	95d8 <mayfly_init+0x28>
    95f6:	e7e1      	b.n	95bc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    95f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95fc:	20000bb0 	.word	0x20000bb0
    9600:	20000b30 	.word	0x20000b30

00009604 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    9604:	b4f0      	push	{r4, r5, r6, r7}
    9606:	4b12      	ldr	r3, [pc, #72]	; (9650 <mayfly_enable+0x4c>)
    9608:	4605      	mov	r5, r0
    960a:	460f      	mov	r7, r1
    960c:	260c      	movs	r6, #12
    960e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    9610:	b172      	cbz	r2, 9630 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    9612:	4361      	muls	r1, r4
    9614:	fb06 1400 	mla	r4, r6, r0, r1
    9618:	4423      	add	r3, r4
    961a:	7a59      	ldrb	r1, [r3, #9]
    961c:	7a18      	ldrb	r0, [r3, #8]
    961e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    9620:	bf04      	itt	eq
    9622:	3101      	addeq	r1, #1
    9624:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    9626:	4628      	mov	r0, r5
    9628:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    962a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    962c:	f00c be3c 	b.w	162a8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    9630:	434c      	muls	r4, r1
    9632:	fb06 4400 	mla	r4, r6, r0, r4
    9636:	4423      	add	r3, r4
    9638:	7a9c      	ldrb	r4, [r3, #10]
    963a:	7ada      	ldrb	r2, [r3, #11]
    963c:	42a2      	cmp	r2, r4
    963e:	d104      	bne.n	964a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    9640:	3201      	adds	r2, #1
    9642:	729a      	strb	r2, [r3, #10]
}
    9644:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    9646:	f006 bb93 	b.w	fd70 <mayfly_pend>
}
    964a:	bcf0      	pop	{r4, r5, r6, r7}
    964c:	4770      	bx	lr
    964e:	bf00      	nop
    9650:	20000bb0 	.word	0x20000bb0

00009654 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    9654:	b570      	push	{r4, r5, r6, lr}
    9656:	4606      	mov	r6, r0
    9658:	460d      	mov	r5, r1
    965a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    965c:	b1a2      	cbz	r2, 9688 <mayfly_enqueue+0x34>
    965e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    9660:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    9662:	7820      	ldrb	r0, [r4, #0]
    9664:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    9666:	f010 0003 	ands.w	r0, r0, #3
    966a:	d02c      	beq.n	96c6 <mayfly_enqueue+0x72>
		if (chain) {
    966c:	b31b      	cbz	r3, 96b6 <mayfly_enqueue+0x62>
			if (state != 1U) {
    966e:	2801      	cmp	r0, #1
    9670:	d028      	beq.n	96c4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    9672:	3201      	adds	r2, #1
    9674:	b2d2      	uxtb	r2, r2
    9676:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    9678:	4b1c      	ldr	r3, [pc, #112]	; (96ec <mayfly_enqueue+0x98>)
    967a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    967c:	4629      	mov	r1, r5
    967e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    9680:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    9682:	f006 fb75 	bl	fd70 <mayfly_pend>
    9686:	e01c      	b.n	96c2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9688:	f00c fe2a 	bl	162e0 <mayfly_prio_is_equal>
    968c:	2800      	cmp	r0, #0
    968e:	d0e6      	beq.n	965e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    9690:	4629      	mov	r1, r5
    9692:	4630      	mov	r0, r6
    9694:	f00c fe16 	bl	162c4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9698:	2800      	cmp	r0, #0
    969a:	d0e0      	beq.n	965e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    969c:	2330      	movs	r3, #48	; 0x30
    969e:	220c      	movs	r2, #12
    96a0:	436b      	muls	r3, r5
    96a2:	fb02 3306 	mla	r3, r2, r6, r3
    96a6:	4a12      	ldr	r2, [pc, #72]	; (96f0 <mayfly_enqueue+0x9c>)
    96a8:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    96aa:	7a93      	ldrb	r3, [r2, #10]
    96ac:	7ad2      	ldrb	r2, [r2, #11]
    96ae:	1a9b      	subs	r3, r3, r2
    96b0:	bf18      	it	ne
    96b2:	2301      	movne	r3, #1
    96b4:	e7d4      	b.n	9660 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    96b6:	3202      	adds	r2, #2
    96b8:	b2d2      	uxtb	r2, r2
    96ba:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    96bc:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    96c0:	4798      	blx	r3

	return 0;
    96c2:	2000      	movs	r0, #0
}
    96c4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    96c6:	2b00      	cmp	r3, #0
    96c8:	d0f8      	beq.n	96bc <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    96ca:	3201      	adds	r2, #1
    96cc:	b2d2      	uxtb	r2, r2
    96ce:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    96d0:	2304      	movs	r3, #4
    96d2:	2230      	movs	r2, #48	; 0x30
    96d4:	fb12 3205 	smlabb	r2, r2, r5, r3
    96d8:	230c      	movs	r3, #12
    96da:	fb13 2306 	smlabb	r3, r3, r6, r2
    96de:	4a04      	ldr	r2, [pc, #16]	; (96f0 <mayfly_enqueue+0x9c>)
    96e0:	6860      	ldr	r0, [r4, #4]
    96e2:	441a      	add	r2, r3
    96e4:	4621      	mov	r1, r4
    96e6:	f00c f85c 	bl	157a2 <memq_enqueue>
    96ea:	e7c5      	b.n	9678 <mayfly_enqueue+0x24>
    96ec:	20002149 	.word	0x20002149
    96f0:	20000bb0 	.word	0x20000bb0

000096f4 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    96f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    96f8:	4b55      	ldr	r3, [pc, #340]	; (9850 <mayfly_run+0x15c>)
    96fa:	5c1a      	ldrb	r2, [r3, r0]
{
    96fc:	b089      	sub	sp, #36	; 0x24
    96fe:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
    9700:	2a00      	cmp	r2, #0
    9702:	f000 809e 	beq.w	9842 <mayfly_run+0x14e>
		return;
	}
	mfp[callee_id] = 1U;
    9706:	2201      	movs	r2, #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9708:	f8df b148 	ldr.w	fp, [pc, #328]	; 9854 <mayfly_run+0x160>
	mfp[callee_id] = 1U;
    970c:	541a      	strb	r2, [r3, r0]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    970e:	2404      	movs	r4, #4
    9710:	233c      	movs	r3, #60	; 0x3c
    9712:	fb13 4300 	smlabb	r3, r3, r0, r4
    9716:	445b      	add	r3, fp
	u8_t enable = 0U;
    9718:	f04f 0800 	mov.w	r8, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    971c:	9304      	str	r3, [sp, #16]
	u8_t disable = 0U;
    971e:	f8cd 8004 	str.w	r8, [sp, #4]
    9722:	46d9      	mov	r9, fp

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    9724:	3c01      	subs	r4, #1
    9726:	b2e4      	uxtb	r4, r4
    9728:	2cff      	cmp	r4, #255	; 0xff
    972a:	d10d      	bne.n	9748 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    972c:	9b01      	ldr	r3, [sp, #4]
    972e:	2b00      	cmp	r3, #0
    9730:	f000 8087 	beq.w	9842 <mayfly_run+0x14e>
    9734:	f1b8 0f00 	cmp.w	r8, #0
    9738:	f040 8083 	bne.w	9842 <mayfly_run+0x14e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    973c:	4642      	mov	r2, r8
    973e:	4629      	mov	r1, r5
    9740:	4628      	mov	r0, r5
    9742:	f00c fdb1 	bl	162a8 <mayfly_enable_cb>
    9746:	e07c      	b.n	9842 <mayfly_run+0x14e>
		struct mayfly *m = 0;
    9748:	aa08      	add	r2, sp, #32
    974a:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    974c:	260c      	movs	r6, #12
		struct mayfly *m = 0;
    974e:	f842 3d04 	str.w	r3, [r2, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    9752:	4366      	muls	r6, r4
    9754:	2330      	movs	r3, #48	; 0x30
    9756:	fb03 6305 	mla	r3, r3, r5, r6
    975a:	eb09 0103 	add.w	r1, r9, r3
    975e:	f859 0003 	ldr.w	r0, [r9, r3]
    9762:	6849      	ldr	r1, [r1, #4]
    9764:	f00c f824 	bl	157b0 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    9768:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    976c:	009b      	lsls	r3, r3, #2
    976e:	2230      	movs	r2, #48	; 0x30
    9770:	fb12 3305 	smlabb	r3, r2, r5, r3
    9774:	444b      	add	r3, r9
    9776:	e9cd 6302 	strd	r6, r3, [sp, #8]
		link = memq_peek(mft[callee_id][caller_id].head,
    977a:	4682      	mov	sl, r0
		while (link) {
    977c:	f1ba 0f00 	cmp.w	sl, #0
    9780:	d043      	beq.n	980a <mayfly_run+0x116>
			state = (m->_req - m->_ack) & 0x03;
    9782:	9b07      	ldr	r3, [sp, #28]
    9784:	781f      	ldrb	r7, [r3, #0]
    9786:	785a      	ldrb	r2, [r3, #1]
    9788:	1abf      	subs	r7, r7, r2
    978a:	f007 0703 	and.w	r7, r7, #3
			if (state == 1U) {
    978e:	2f01      	cmp	r7, #1
    9790:	d104      	bne.n	979c <mayfly_run+0xa8>
				m->_ack--;
    9792:	3a01      	subs	r2, #1
    9794:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    9796:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    979a:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    979c:	9e07      	ldr	r6, [sp, #28]
	req = m->_req;
    979e:	7833      	ldrb	r3, [r6, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    97a0:	7872      	ldrb	r2, [r6, #1]
	req = m->_req;
    97a2:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
    97a4:	1a9a      	subs	r2, r3, r2
    97a6:	f002 0203 	and.w	r2, r2, #3
    97aa:	2a01      	cmp	r2, #1
    97ac:	9305      	str	r3, [sp, #20]
    97ae:	d01b      	beq.n	97e8 <mayfly_run+0xf4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    97b0:	9b02      	ldr	r3, [sp, #8]
    97b2:	9903      	ldr	r1, [sp, #12]
    97b4:	2030      	movs	r0, #48	; 0x30
    97b6:	fb00 3005 	mla	r0, r0, r5, r3
    97ba:	4b26      	ldr	r3, [pc, #152]	; (9854 <mayfly_run+0x160>)
    97bc:	4418      	add	r0, r3
    97be:	2200      	movs	r2, #0
    97c0:	6840      	ldr	r0, [r0, #4]
    97c2:	f00b fffd 	bl	157c0 <memq_dequeue>
		m->_ack = req;
    97c6:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    97c8:	7872      	ldrb	r2, [r6, #1]
		m->_ack = req;
    97ca:	7073      	strb	r3, [r6, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    97cc:	7833      	ldrb	r3, [r6, #0]
		m->_link = link;
    97ce:	f8c6 a004 	str.w	sl, [r6, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    97d2:	1a9b      	subs	r3, r3, r2
    97d4:	f003 0303 	and.w	r3, r3, #3
    97d8:	2b01      	cmp	r3, #1
    97da:	d105      	bne.n	97e8 <mayfly_run+0xf4>
			m->_ack = ack;
    97dc:	7072      	strb	r2, [r6, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    97de:	4631      	mov	r1, r6
    97e0:	9a04      	ldr	r2, [sp, #16]
    97e2:	4650      	mov	r0, sl
    97e4:	f00b ffdd 	bl	157a2 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    97e8:	9a02      	ldr	r2, [sp, #8]
    97ea:	2330      	movs	r3, #48	; 0x30
    97ec:	fb03 2305 	mla	r3, r3, r5, r2
    97f0:	eb09 0103 	add.w	r1, r9, r3
    97f4:	aa07      	add	r2, sp, #28
    97f6:	6849      	ldr	r1, [r1, #4]
    97f8:	f859 0003 	ldr.w	r0, [r9, r3]
    97fc:	f00b ffd8 	bl	157b0 <memq_peek>
			if (state == 1U) {
    9800:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    9802:	4682      	mov	sl, r0
			if (state == 1U) {
    9804:	d1ba      	bne.n	977c <mayfly_run+0x88>
				if (caller_id || link) {
    9806:	b9c4      	cbnz	r4, 983a <mayfly_run+0x146>
    9808:	b9b8      	cbnz	r0, 983a <mayfly_run+0x146>
		if (mft[callee_id][caller_id].disable_req !=
    980a:	2230      	movs	r2, #48	; 0x30
    980c:	4911      	ldr	r1, [pc, #68]	; (9854 <mayfly_run+0x160>)
    980e:	230c      	movs	r3, #12
    9810:	436a      	muls	r2, r5
    9812:	fb03 2204 	mla	r2, r3, r4, r2
    9816:	440a      	add	r2, r1
    9818:	7a91      	ldrb	r1, [r2, #10]
    981a:	7ad0      	ldrb	r0, [r2, #11]
    981c:	4288      	cmp	r0, r1
    981e:	d113      	bne.n	9848 <mayfly_run+0x154>
		if (mft[callee_id][caller_id].enable_req !=
    9820:	2230      	movs	r2, #48	; 0x30
    9822:	436a      	muls	r2, r5
    9824:	fb03 2304 	mla	r3, r3, r4, r2
    9828:	445b      	add	r3, fp
    982a:	7a1a      	ldrb	r2, [r3, #8]
    982c:	7a59      	ldrb	r1, [r3, #9]
    982e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    9830:	bf1c      	itt	ne
    9832:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    9834:	f04f 0801 	movne.w	r8, #1
    9838:	e774      	b.n	9724 <mayfly_run+0x30>
					mayfly_pend(callee_id, callee_id);
    983a:	4629      	mov	r1, r5
    983c:	4628      	mov	r0, r5
    983e:	f006 fa97 	bl	fd70 <mayfly_pend>
	}
}
    9842:	b009      	add	sp, #36	; 0x24
    9844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    9848:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    984a:	2201      	movs	r2, #1
    984c:	9201      	str	r2, [sp, #4]
    984e:	e7e7      	b.n	9820 <mayfly_run+0x12c>
    9850:	20002149 	.word	0x20002149
    9854:	20000bb0 	.word	0x20000bb0

00009858 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    9858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    985c:	7fc2      	ldrb	r2, [r0, #31]
{
    985e:	b093      	sub	sp, #76	; 0x4c
    9860:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    9862:	2a00      	cmp	r2, #0
    9864:	f040 83ae 	bne.w	9fc4 <ticker_job+0x76c>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    9868:	6943      	ldr	r3, [r0, #20]
    986a:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    986c:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    986e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    9870:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    9872:	7ac0      	ldrb	r0, [r0, #11]
    9874:	4298      	cmp	r0, r3
    9876:	f000 808c 	beq.w	9992 <ticker_job+0x13a>
	u8_t idx = *ticks_elapsed_index + 1;
    987a:	440b      	add	r3, r1
    987c:	b2db      	uxtb	r3, r3
		idx = 0U;
    987e:	2b02      	cmp	r3, #2
    9880:	bf08      	it	eq
    9882:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    9884:	f88b 300a 	strb.w	r3, [fp, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
    9888:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
    988c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    988e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    9892:	9b04      	ldr	r3, [sp, #16]
    9894:	4443      	add	r3, r8
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    9896:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    989a:	f8cb 3014 	str.w	r3, [fp, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    989e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    98a2:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    98a4:	f8db 3000 	ldr.w	r3, [fp]
    98a8:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    98aa:	f8db 3004 	ldr.w	r3, [fp, #4]
    98ae:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    98b0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    98b4:	9302      	str	r3, [sp, #8]
	pending = 0U;
    98b6:	2300      	movs	r3, #0
    98b8:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    98ba:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    98be:	9b02      	ldr	r3, [sp, #8]
    98c0:	3b01      	subs	r3, #1
    98c2:	b2db      	uxtb	r3, r3
    98c4:	2bff      	cmp	r3, #255	; 0xff
    98c6:	9302      	str	r3, [sp, #8]
    98c8:	d166      	bne.n	9998 <ticker_job+0x140>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    98ca:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0U;
    98ce:	9a03      	ldr	r2, [sp, #12]
    98d0:	1a9b      	subs	r3, r3, r2
    98d2:	bf18      	it	ne
    98d4:	2301      	movne	r3, #1
    98d6:	9302      	str	r3, [sp, #8]
		flag_compare_update = 1U;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    98d8:	9b01      	ldr	r3, [sp, #4]
    98da:	b1cb      	cbz	r3, 9910 <ticker_job+0xb8>
    98dc:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0U;
    98e0:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    98e2:	f89b 501d 	ldrb.w	r5, [fp, #29]
    98e6:	2dff      	cmp	r5, #255	; 0xff
    98e8:	d00b      	beq.n	9902 <ticker_job+0xaa>
		ticker = &node[id_expired];
    98ea:	b22e      	sxth	r6, r5
    98ec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    98f0:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    98f4:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    98f6:	4543      	cmp	r3, r8
    98f8:	f240 8136 	bls.w	9b68 <ticker_job+0x310>
			ticker->ticks_to_expire -= ticks_elapsed;
    98fc:	eba3 0308 	sub.w	r3, r3, r8
    9900:	60a3      	str	r3, [r4, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
    9902:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    9906:	9903      	ldr	r1, [sp, #12]
    9908:	42a9      	cmp	r1, r5
    990a:	bf18      	it	ne
    990c:	4613      	movne	r3, r2
    990e:	9302      	str	r3, [sp, #8]
	node = &instance->nodes[0];
    9910:	f8db 3000 	ldr.w	r3, [fp]
    9914:	9308      	str	r3, [sp, #32]
	users = &instance->users[0];
    9916:	f8db 3004 	ldr.w	r3, [fp, #4]
    991a:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
    991c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    9920:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    9922:	9b01      	ldr	r3, [sp, #4]
    9924:	3b01      	subs	r3, #1
    9926:	b2db      	uxtb	r3, r3
    9928:	2bff      	cmp	r3, #255	; 0xff
    992a:	9301      	str	r3, [sp, #4]
    992c:	f040 816c 	bne.w	9c08 <ticker_job+0x3b0>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    9930:	f89b 301d 	ldrb.w	r3, [fp, #29]
    9934:	9a03      	ldr	r2, [sp, #12]
    9936:	4293      	cmp	r3, r2
		flag_compare_update = 1U;
	}

	/* Processing any list inquiries */
	if (!pending) {
    9938:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    993a:	f040 8338 	bne.w	9fae <ticker_job+0x756>
	if (!pending) {
    993e:	b94b      	cbnz	r3, 9954 <ticker_job+0xfc>
	users = &instance->users[0];
    9940:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
    9944:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->users[0];
    9948:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    994a:	3c01      	subs	r4, #1
    994c:	b2e4      	uxtb	r4, r4
    994e:	2cff      	cmp	r4, #255	; 0xff
    9950:	f040 82a2 	bne.w	9e98 <ticker_job+0x640>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
    9954:	2300      	movs	r3, #0
    9956:	f88b 301e 	strb.w	r3, [fp, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
    995a:	9b02      	ldr	r3, [sp, #8]
    995c:	b14b      	cbz	r3, 9972 <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
    995e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    9962:	2bff      	cmp	r3, #255	; 0xff
    9964:	f040 82e7 	bne.w	9f36 <ticker_job+0x6de>
		if (cntr_stop() == 0) {
    9968:	f005 fdc4 	bl	f4f4 <cntr_stop>
    996c:	b908      	cbnz	r0, 9972 <ticker_job+0x11a>
			instance->ticks_slot_previous = 0U;
    996e:	f8cb 0018 	str.w	r0, [fp, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    9972:	f89b 301f 	ldrb.w	r3, [fp, #31]
    9976:	2b00      	cmp	r3, #0
    9978:	f000 8324 	beq.w	9fc4 <ticker_job+0x76c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    997c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    9980:	465b      	mov	r3, fp
    9982:	2201      	movs	r2, #1
    9984:	2103      	movs	r1, #3
    9986:	2004      	movs	r0, #4
    9988:	46a4      	mov	ip, r4
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    998a:	b013      	add	sp, #76	; 0x4c
    998c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9990:	4760      	bx	ip
		flag_elapsed = 0U;
    9992:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    9994:	4690      	mov	r8, r2
    9996:	e782      	b.n	989e <ticker_job+0x46>
		user = &users[count_user];
    9998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    999a:	9a02      	ldr	r2, [sp, #8]
    999c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    99a0:	687b      	ldr	r3, [r7, #4]
    99a2:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    99a4:	78f9      	ldrb	r1, [r7, #3]
    99a6:	78be      	ldrb	r6, [r7, #2]
    99a8:	428e      	cmp	r6, r1
    99aa:	d088      	beq.n	98be <ticker_job+0x66>
			user_op = &user_ops[user->middle];
    99ac:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    99ae:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    99b0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    99b4:	0112      	lsls	r2, r2, #4
    99b6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    99b8:	1c73      	adds	r3, r6, #1
    99ba:	b2db      	uxtb	r3, r3
				middle = 0U;
    99bc:	4298      	cmp	r0, r3
    99be:	bf08      	it	eq
    99c0:	2300      	moveq	r3, #0
			user->middle = middle;
    99c2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    99c4:	9b06      	ldr	r3, [sp, #24]
    99c6:	5c9a      	ldrb	r2, [r3, r2]
    99c8:	2a03      	cmp	r2, #3
    99ca:	d9ec      	bls.n	99a6 <ticker_job+0x14e>
			ticker = &node[user_op->id];
    99cc:	7869      	ldrb	r1, [r5, #1]
    99ce:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    99d2:	930a      	str	r3, [sp, #40]	; 0x28
    99d4:	980a      	ldr	r0, [sp, #40]	; 0x28
    99d6:	9b05      	ldr	r3, [sp, #20]
    99d8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    99dc:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
    99de:	7863      	ldrb	r3, [r4, #1]
    99e0:	78a0      	ldrb	r0, [r4, #2]
    99e2:	eba3 0300 	sub.w	r3, r3, r0
    99e6:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    99e8:	d80e      	bhi.n	9a08 <ticker_job+0x1b0>
    99ea:	b16b      	cbz	r3, 9a08 <ticker_job+0x1b0>
			    (state == 0U) ||
    99ec:	2a04      	cmp	r2, #4
    99ee:	d110      	bne.n	9a12 <ticker_job+0x1ba>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    99f0:	686a      	ldr	r2, [r5, #4]
    99f2:	b972      	cbnz	r2, 9a12 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    99f4:	68aa      	ldr	r2, [r5, #8]
    99f6:	b962      	cbnz	r2, 9a12 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    99f8:	68ea      	ldr	r2, [r5, #12]
    99fa:	b952      	cbnz	r2, 9a12 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    99fc:	692a      	ldr	r2, [r5, #16]
    99fe:	b942      	cbnz	r2, 9a12 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0U) &&
    9a00:	696a      	ldr	r2, [r5, #20]
    9a02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    9a06:	d104      	bne.n	9a12 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    9a08:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    9a0a:	4628      	mov	r0, r5
    9a0c:	f00b ff3f 	bl	1588e <ticker_job_op_cb>
    9a10:	e7c8      	b.n	99a4 <ticker_job+0x14c>
			if (state == 1U) {
    9a12:	2b01      	cmp	r3, #1
    9a14:	f040 809d 	bne.w	9b52 <ticker_job+0x2fa>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    9a18:	4658      	mov	r0, fp
    9a1a:	f00b feef 	bl	157fc <ticker_dequeue>
    9a1e:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    9a20:	782b      	ldrb	r3, [r5, #0]
    9a22:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    9a24:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    9a26:	f040 8086 	bne.w	9b36 <ticker_job+0x2de>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    9a2a:	f8db 3014 	ldr.w	r3, [fp, #20]
    9a2e:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    9a30:	f005 fd78 	bl	f524 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a34:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    9a36:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a38:	1ac3      	subs	r3, r0, r3
    9a3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    9a3e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    9a40:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a42:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9a44:	bf9e      	ittt	ls
    9a46:	6962      	ldrls	r2, [r4, #20]
    9a48:	1b92      	subls	r2, r2, r6
    9a4a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0U) &&
    9a4c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9a4e:	bf96      	itet	ls
    9a50:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    9a52:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
    9a54:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
    9a56:	2a00      	cmp	r2, #0
    9a58:	d049      	beq.n	9aee <ticker_job+0x296>
	    (user_op->params.update.lazy != 0U)) {
    9a5a:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    9a5c:	2900      	cmp	r1, #0
    9a5e:	d046      	beq.n	9aee <ticker_job+0x296>
		user_op->params.update.lazy--;
    9a60:	f101 3cff 	add.w	ip, r1, #4294967295
    9a64:	fa1f fc8c 	uxth.w	ip, ip
    9a68:	f8a5 c014 	strh.w	ip, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    9a6c:	429a      	cmp	r2, r3
    9a6e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    9a72:	d201      	bcs.n	9a78 <ticker_job+0x220>
    9a74:	45f4      	cmp	ip, lr
    9a76:	d302      	bcc.n	9a7e <ticker_job+0x226>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9a78:	f8df 9278 	ldr.w	r9, [pc, #632]	; 9cf4 <ticker_job+0x49c>
    9a7c:	e031      	b.n	9ae2 <ticker_job+0x28a>
	if ((ticker->remainder_current >= BIT(31)) ||
    9a7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9a80:	4e9a      	ldr	r6, [pc, #616]	; (9cec <ticker_job+0x494>)
    9a82:	489b      	ldr	r0, [pc, #620]	; (9cf0 <ticker_job+0x498>)
    9a84:	198e      	adds	r6, r1, r6
    9a86:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    9a88:	bf81      	itttt	hi
    9a8a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    9a8e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    9a92:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    9a96:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    9a98:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
    9a9c:	bf8c      	ite	hi
    9a9e:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
    9aa2:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    9aa6:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    9aa8:	4491      	add	r9, r2
			ticker->lazy_current--;
    9aaa:	f10e 3eff 	add.w	lr, lr, #4294967295
	ticker->remainder_current -= ticker->remainder_periodic;
    9aae:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    9ab0:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    9ab4:	f8a4 e01e 	strh.w	lr, [r4, #30]
    9ab8:	e7d8      	b.n	9a6c <ticker_job+0x214>
	ticker->remainder_current += ticker->remainder_periodic;
    9aba:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
    9abe:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    9ac0:	498a      	ldr	r1, [pc, #552]	; (9cec <ticker_job+0x494>)
    9ac2:	488b      	ldr	r0, [pc, #556]	; (9cf0 <ticker_job+0x498>)
    9ac4:	1871      	adds	r1, r6, r1
    9ac6:	4281      	cmp	r1, r0
	return 0;
    9ac8:	bf8e      	itee	hi
    9aca:	2100      	movhi	r1, #0
		return 1;
    9acc:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9ace:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    9ad0:	4411      	add	r1, r2
			ticker->lazy_current++;
    9ad2:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    9ad6:	bf8c      	ite	hi
    9ad8:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9ada:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    9adc:	440b      	add	r3, r1
			ticker->lazy_current++;
    9ade:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9ae2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    9ae6:	45f4      	cmp	ip, lr
    9ae8:	d8e7      	bhi.n	9aba <ticker_job+0x262>
		ticker->lazy_periodic = user_op->params.update.lazy;
    9aea:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    9aee:	686a      	ldr	r2, [r5, #4]
    9af0:	4413      	add	r3, r2
    9af2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    9af4:	68aa      	ldr	r2, [r5, #8]
    9af6:	6963      	ldr	r3, [r4, #20]
    9af8:	4413      	add	r3, r2
    9afa:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    9afc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    9b00:	4620      	mov	r0, r4
    9b02:	f00b fea6 	bl	15852 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    9b06:	68ea      	ldr	r2, [r5, #12]
    9b08:	69a3      	ldr	r3, [r4, #24]
    9b0a:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    9b0c:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    9b0e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    9b10:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    9b12:	bf8c      	ite	hi
    9b14:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    9b16:	2300      	movls	r3, #0
    9b18:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    9b1a:	7dab      	ldrb	r3, [r5, #22]
    9b1c:	b103      	cbz	r3, 9b20 <ticker_job+0x2c8>
		ticker->force = user_op->params.update.force;
    9b1e:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    9b20:	9b05      	ldr	r3, [sp, #20]
    9b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b24:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    9b28:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    9b2a:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    9b2e:	3301      	adds	r3, #1
    9b30:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    9b32:	2100      	movs	r1, #0
    9b34:	e769      	b.n	9a0a <ticker_job+0x1b2>
		ticker->req = ticker->ack;
    9b36:	78a3      	ldrb	r3, [r4, #2]
    9b38:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    9b3a:	786b      	ldrb	r3, [r5, #1]
    9b3c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    9b40:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    9b42:	bf01      	itttt	eq
    9b44:	23ff      	moveq	r3, #255	; 0xff
    9b46:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    9b4a:	2300      	moveq	r3, #0
    9b4c:	f8cb 3018 	streq.w	r3, [fp, #24]
    9b50:	e7ef      	b.n	9b32 <ticker_job+0x2da>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    9b52:	2104      	movs	r1, #4
    9b54:	465b      	mov	r3, fp
    9b56:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    9b5a:	2201      	movs	r2, #1
    9b5c:	4608      	mov	r0, r1
    9b5e:	47a0      	blx	r4
				pending = 1U;
    9b60:	2301      	movs	r3, #1
				user->middle = prev;
    9b62:	70be      	strb	r6, [r7, #2]
				pending = 1U;
    9b64:	9307      	str	r3, [sp, #28]
    9b66:	e6aa      	b.n	98be <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    9b68:	f8db 2018 	ldr.w	r2, [fp, #24]
    9b6c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    9b6e:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
    9b72:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    9b74:	bf29      	itett	cs
    9b76:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    9b78:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    9b7a:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    9b7e:	2300      	movcs	r3, #0
    9b80:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0U) {
    9b84:	69a3      	ldr	r3, [r4, #24]
    9b86:	b11b      	cbz	r3, 9b90 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    9b88:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    9b8c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
    9b90:	2200      	movs	r2, #0
    9b92:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9b94:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
    9b98:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0U) {
    9b9c:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9ba0:	f1bc 0f00 	cmp.w	ip, #0
    9ba4:	d02c      	beq.n	9c00 <ticker_job+0x3a8>
    9ba6:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    9ba8:	f8df e144 	ldr.w	lr, [pc, #324]	; 9cf0 <ticker_job+0x498>
	ticker->remainder_current += ticker->remainder_periodic;
    9bac:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
    9bb0:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    9bb2:	494e      	ldr	r1, [pc, #312]	; (9cec <ticker_job+0x494>)
    9bb4:	1859      	adds	r1, r3, r1
    9bb6:	4571      	cmp	r1, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9bb8:	bf9f      	itttt	ls
    9bba:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    9bbe:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    9bc2:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    9bc6:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    9bc8:	bf92      	itee	ls
    9bca:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    9bcc:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    9bce:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    9bd0:	4463      	add	r3, ip
			while (count--) {
    9bd2:	f110 30ff 	adds.w	r0, r0, #4294967295
				ticks_to_expire += ticker_remainder_inc(ticker);
    9bd6:	441a      	add	r2, r3
			while (count--) {
    9bd8:	d2e8      	bcs.n	9bac <ticker_job+0x354>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9bda:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
    9bdc:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9bde:	f8db 1014 	ldr.w	r1, [fp, #20]
    9be2:	19da      	adds	r2, r3, r7
    9be4:	4620      	mov	r0, r4
    9be6:	f00b fe34 	bl	15852 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    9bea:	8ba3      	ldrh	r3, [r4, #28]
    9bec:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
    9bee:	2300      	movs	r3, #0
    9bf0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    9bf2:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
    9bf6:	7863      	ldrb	r3, [r4, #1]
    9bf8:	3301      	adds	r3, #1
    9bfa:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
    9bfc:	46aa      	mov	sl, r5
    9bfe:	e670      	b.n	98e2 <ticker_job+0x8a>
    9c00:	78a3      	ldrb	r3, [r4, #2]
    9c02:	7063      	strb	r3, [r4, #1]
    9c04:	4655      	mov	r5, sl
    9c06:	e7f9      	b.n	9bfc <ticker_job+0x3a4>
		user = &users[count_user];
    9c08:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c0a:	9a01      	ldr	r2, [sp, #4]
    9c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9c10:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    9c12:	685b      	ldr	r3, [r3, #4]
    9c14:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    9c16:	9b04      	ldr	r3, [sp, #16]
    9c18:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    9c1c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    9c20:	d042      	beq.n	9ca8 <ticker_job+0x450>
				ticker = &node[id_insert];
    9c22:	fa0f f38a 	sxth.w	r3, sl
    9c26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9c2a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    9c2c:	46d0      	mov	r8, sl
    9c2e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    9c32:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    9c36:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->nodes[0];
    9c38:	f8db 3000 	ldr.w	r3, [fp]
    9c3c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    9c3e:	23ff      	movs	r3, #255	; 0xff
    9c40:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    9c42:	8ba2      	ldrh	r2, [r4, #28]
    9c44:	8be3      	ldrh	r3, [r4, #30]
    9c46:	4293      	cmp	r3, r2
    9c48:	f240 8082 	bls.w	9d50 <ticker_job+0x4f8>
		skip = ticker->lazy_current -
    9c4c:	1a9b      	subs	r3, r3, r2
    9c4e:	b29b      	uxth	r3, r3
		skip = 0U;
    9c50:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    9c52:	fa0f f388 	sxth.w	r3, r8
    9c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9c5a:	00db      	lsls	r3, r3, #3
    9c5c:	9311      	str	r3, [sp, #68]	; 0x44
    9c5e:	e0ca      	b.n	9df6 <ticker_job+0x59e>
				user_op = &user_ops[user_ops_first];
    9c60:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    9c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c66:	011b      	lsls	r3, r3, #4
    9c68:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    9c6a:	f109 0201 	add.w	r2, r9, #1
    9c6e:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    9c72:	9a04      	ldr	r2, [sp, #16]
    9c74:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
    9c76:	454a      	cmp	r2, r9
    9c78:	bf08      	it	eq
    9c7a:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c80:	5cd3      	ldrb	r3, [r2, r3]
    9c82:	2b03      	cmp	r3, #3
    9c84:	d110      	bne.n	9ca8 <ticker_job+0x450>
				id_insert = user_op->id;
    9c86:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    9c8a:	9b08      	ldr	r3, [sp, #32]
    9c8c:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    9c90:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req -
    9c94:	7866      	ldrb	r6, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    9c96:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    9c98:	1af6      	subs	r6, r6, r3
    9c9a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    9c9e:	d008      	beq.n	9cb2 <ticker_job+0x45a>
					ticker_job_op_cb(user_op,
    9ca0:	2101      	movs	r1, #1
    9ca2:	4628      	mov	r0, r5
    9ca4:	f00b fdf3 	bl	1588e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    9ca8:	9b04      	ldr	r3, [sp, #16]
    9caa:	789b      	ldrb	r3, [r3, #2]
    9cac:	454b      	cmp	r3, r9
    9cae:	d1d7      	bne.n	9c60 <ticker_job+0x408>
    9cb0:	e637      	b.n	9922 <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
    9cb2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    9cb4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    9cb8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9cba:	692b      	ldr	r3, [r5, #16]
    9cbc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    9cbe:	8aab      	ldrh	r3, [r5, #20]
    9cc0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    9cc2:	69ab      	ldr	r3, [r5, #24]
    9cc4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    9cc6:	69eb      	ldr	r3, [r5, #28]
    9cc8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    9cca:	6a2b      	ldr	r3, [r5, #32]
    9ccc:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    9cce:	68ab      	ldr	r3, [r5, #8]
    9cd0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    9cd2:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    9cd4:	686a      	ldr	r2, [r5, #4]
    9cd6:	4620      	mov	r0, r4
    9cd8:	f00b fdbb 	bl	15852 <ticks_to_expire_prep>
	ticker->force = 1U;
    9cdc:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
    9cde:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    9ce0:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
    9ce2:	70e3      	strb	r3, [r4, #3]
    9ce4:	f04f 0aff 	mov.w	sl, #255	; 0xff
    9ce8:	e7a6      	b.n	9c38 <ticker_job+0x3e0>
    9cea:	bf00      	nop
    9cec:	ff172b5a 	.word	0xff172b5a
    9cf0:	7f172b59 	.word	0x7f172b59
    9cf4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0U) {
    9cf8:	6860      	ldr	r0, [r4, #4]
    9cfa:	2800      	cmp	r0, #0
    9cfc:	f000 80c7 	beq.w	9e8e <ticker_job+0x636>
	ticker->remainder_current += ticker->remainder_periodic;
    9d00:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    9d04:	4bb1      	ldr	r3, [pc, #708]	; (9fcc <ticker_job+0x774>)
	ticker->remainder_current += ticker->remainder_periodic;
    9d06:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    9d08:	49b1      	ldr	r1, [pc, #708]	; (9fd0 <ticker_job+0x778>)
    9d0a:	18d3      	adds	r3, r2, r3
    9d0c:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9d0e:	bf9c      	itt	ls
    9d10:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    9d14:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    9d18:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    9d1a:	bf8b      	itete	hi
    9d1c:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9d1e:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    9d22:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9d24:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    9d26:	4403      	add	r3, r0
		return 1;
    9d28:	bf98      	it	ls
    9d2a:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    9d2c:	4413      	add	r3, r2
			ticker->lazy_current++;
    9d2e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    9d30:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    9d32:	3201      	adds	r2, #1
    9d34:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    9d36:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    9d38:	4293      	cmp	r3, r2
    9d3a:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    9d3e:	bf89      	itett	hi
    9d40:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    9d42:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    9d44:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
    9d46:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    9d48:	bf9c      	itt	ls
    9d4a:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
    9d4c:	60a1      	strls	r1, [r4, #8]
    9d4e:	e052      	b.n	9df6 <ticker_job+0x59e>
		skip = 0U;
    9d50:	2300      	movs	r3, #0
    9d52:	e77d      	b.n	9c50 <ticker_job+0x3f8>
		if (ticker_current->ticks_slot != 0U) {
    9d54:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    9d56:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0U) {
    9d58:	b946      	cbnz	r6, 9d6c <ticker_job+0x514>
			if (ticks_slot_previous > ticks_to_expire_current) {
    9d5a:	9f05      	ldr	r7, [sp, #20]
    9d5c:	42b8      	cmp	r0, r7
    9d5e:	d200      	bcs.n	9d62 <ticker_job+0x50a>
				ticks_slot_previous -= ticks_to_expire_current;
    9d60:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    9d62:	9309      	str	r3, [sp, #36]	; 0x24
    9d64:	9605      	str	r6, [sp, #20]
    9d66:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
    9d6a:	e053      	b.n	9e14 <ticker_job+0x5bc>
		if (ticker_current->ticks_slot != 0U) {
    9d6c:	9306      	str	r3, [sp, #24]
    9d6e:	e7f8      	b.n	9d62 <ticker_job+0x50a>
		ticker = &node[ticker_id_head];
    9d70:	b230      	sxth	r0, r6
    9d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9d76:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    9d7a:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    9d7c:	68bf      	ldr	r7, [r7, #8]
    9d7e:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    9d80:	4577      	cmp	r7, lr
    9d82:	d209      	bcs.n	9d98 <ticker_job+0x540>
		if (ticker->ticks_slot) {
    9d84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    9d86:	69bf      	ldr	r7, [r7, #24]
    9d88:	2f00      	cmp	r7, #0
    9d8a:	d154      	bne.n	9e36 <ticker_job+0x5de>
		ticks_slot -= ticks_to_expire;
    9d8c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    9d8e:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
    9d92:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    9d96:	e04c      	b.n	9e32 <ticker_job+0x5da>
			return TICKER_NULL;
    9d98:	26ff      	movs	r6, #255	; 0xff
    9d9a:	e04c      	b.n	9e36 <ticker_job+0x5de>
	while (id_insert !=
    9d9c:	9b06      	ldr	r3, [sp, #24]
    9d9e:	4598      	cmp	r8, r3
    9da0:	d06a      	beq.n	9e78 <ticker_job+0x620>
		if (id_collide != TICKER_NULL) {
    9da2:	9b06      	ldr	r3, [sp, #24]
    9da4:	2bff      	cmp	r3, #255	; 0xff
    9da6:	d0a7      	beq.n	9cf8 <ticker_job+0x4a0>
    9da8:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    9daa:	b233      	sxth	r3, r6
    9dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9db0:	9305      	str	r3, [sp, #20]
    9db2:	9a05      	ldr	r2, [sp, #20]
    9db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9db6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    9dba:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    9dbc:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    9dbe:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    9dc0:	bf88      	it	hi
    9dc2:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    9dc4:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    9dc6:	bf8c      	ite	hi
    9dc8:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
    9dca:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    9dcc:	2a00      	cmp	r2, #0
    9dce:	d093      	beq.n	9cf8 <ticker_job+0x4a0>
    9dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9dd2:	4293      	cmp	r3, r2
    9dd4:	d890      	bhi.n	9cf8 <ticker_job+0x4a0>
			    skip_collide <= skip &&
    9dd6:	78fa      	ldrb	r2, [r7, #3]
    9dd8:	78e3      	ldrb	r3, [r4, #3]
    9dda:	429a      	cmp	r2, r3
    9ddc:	d28c      	bcs.n	9cf8 <ticker_job+0x4a0>
					ticker_dequeue(instance, id_collide);
    9dde:	4631      	mov	r1, r6
    9de0:	4658      	mov	r0, fp
    9de2:	f00b fd0b 	bl	157fc <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    9de6:	78bb      	ldrb	r3, [r7, #2]
    9de8:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    9dea:	9a05      	ldr	r2, [sp, #20]
    9dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    9dee:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    9df0:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    9df4:	46b2      	mov	sl, r6
	ticker_new = &node[id];
    9df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->nodes[0];
    9df8:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    9dfc:	f8db 0018 	ldr.w	r0, [fp, #24]
    9e00:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    9e02:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    9e06:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    9e08:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    9e0c:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
    9e10:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    9e12:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    9e14:	2bff      	cmp	r3, #255	; 0xff
    9e16:	d006      	beq.n	9e26 <ticker_job+0x5ce>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    9e18:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    9e1c:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
    9e20:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    9e22:	4281      	cmp	r1, r0
    9e24:	d896      	bhi.n	9d54 <ticker_job+0x4fc>
				     ticks_to_expire + ticker_new->ticks_slot);
    9e26:	f8dc 0018 	ldr.w	r0, [ip, #24]
    9e2a:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    9e2c:	eb01 0e00 	add.w	lr, r1, r0
    9e30:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    9e32:	2eff      	cmp	r6, #255	; 0xff
    9e34:	d19c      	bne.n	9d70 <ticker_job+0x518>
	if ((ticker_new->ticks_slot == 0U) ||
    9e36:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e38:	b128      	cbz	r0, 9e46 <ticker_job+0x5ee>
    9e3a:	9805      	ldr	r0, [sp, #20]
    9e3c:	4281      	cmp	r1, r0
    9e3e:	d3ad      	bcc.n	9d9c <ticker_job+0x544>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    9e40:	2eff      	cmp	r6, #255	; 0xff
    9e42:	f040 80bb 	bne.w	9fbc <ticker_job+0x764>
		if (previous == current) {
    9e46:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    9e48:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
    9e4c:	4283      	cmp	r3, r0
			node[previous].next = id;
    9e4e:	bf18      	it	ne
    9e50:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    9e54:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
    9e58:	bf16      	itet	ne
    9e5a:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    9e5e:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    9e62:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    9e66:	2bff      	cmp	r3, #255	; 0xff
    9e68:	d006      	beq.n	9e78 <ticker_job+0x620>
			node[current].ticks_to_expire -= ticks_to_expire;
    9e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9e6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9e72:	689a      	ldr	r2, [r3, #8]
    9e74:	1a51      	subs	r1, r2, r1
    9e76:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    9e78:	78a3      	ldrb	r3, [r4, #2]
    9e7a:	3301      	adds	r3, #1
    9e7c:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    9e7e:	2100      	movs	r1, #0
			if (user_op) {
    9e80:	2d00      	cmp	r5, #0
    9e82:	f43f aecb 	beq.w	9c1c <ticker_job+0x3c4>
				ticker_job_op_cb(user_op, status);
    9e86:	4628      	mov	r0, r5
    9e88:	f00b fd01 	bl	1588e <ticker_job_op_cb>
    9e8c:	e6c6      	b.n	9c1c <ticker_job+0x3c4>
			return TICKER_STATUS_FAILURE;
    9e8e:	2101      	movs	r1, #1
    9e90:	e7f6      	b.n	9e80 <ticker_job+0x628>
		flag_compare_update = 1U;
    9e92:	2301      	movs	r3, #1
    9e94:	9302      	str	r3, [sp, #8]
    9e96:	e553      	b.n	9940 <ticker_job+0xe8>
		user = &users[count_user];
    9e98:	9b01      	ldr	r3, [sp, #4]
    9e9a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    9e9e:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    9ea0:	786b      	ldrb	r3, [r5, #1]
    9ea2:	78ea      	ldrb	r2, [r5, #3]
    9ea4:	429a      	cmp	r2, r3
    9ea6:	f43f ad50 	beq.w	994a <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    9eaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9eae:	011a      	lsls	r2, r3, #4
    9eb0:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
    9eb2:	5cb2      	ldrb	r2, [r6, r2]
    9eb4:	2a01      	cmp	r2, #1
    9eb6:	d024      	beq.n	9f02 <ticker_job+0x6aa>
    9eb8:	2a02      	cmp	r2, #2
    9eba:	d129      	bne.n	9f10 <ticker_job+0x6b8>
		ticker_by_next_slot_get(instance,
    9ebc:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    9ec0:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    9ec4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    9ec8:	f8db c000 	ldr.w	ip, [fp]
    9ecc:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    9ed0:	2aff      	cmp	r2, #255	; 0xff
    9ed2:	d002      	beq.n	9eda <ticker_job+0x682>
    9ed4:	6807      	ldr	r7, [r0, #0]
    9ed6:	428f      	cmp	r7, r1
    9ed8:	d023      	beq.n	9f22 <ticker_job+0x6ca>
		_ticker_id_head = instance->ticker_id_head;
    9eda:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    9ede:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    9ee0:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    9ee2:	2aff      	cmp	r2, #255	; 0xff
    9ee4:	d009      	beq.n	9efa <ticker_job+0x6a2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    9ee6:	eb02 0882 	add.w	r8, r2, r2, lsl #2
    9eea:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
    9eee:	f8da 0008 	ldr.w	r0, [sl, #8]
    9ef2:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    9ef4:	f8da 0018 	ldr.w	r0, [sl, #24]
    9ef8:	b1d0      	cbz	r0, 9f30 <ticker_job+0x6d8>
	*ticker_id_head = _ticker_id_head;
    9efa:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    9efe:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    9f02:	2200      	movs	r2, #0
    9f04:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    9f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    9f08:	b112      	cbz	r2, 9f10 <ticker_job+0x6b8>
		fp_op_func(uop->status, uop->op_context);
    9f0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    9f0c:	2000      	movs	r0, #0
    9f0e:	4790      	blx	r2
			first = user->first + 1;
    9f10:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    9f12:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    9f14:	3301      	adds	r3, #1
    9f16:	b2db      	uxtb	r3, r3
				first = 0U;
    9f18:	429a      	cmp	r2, r3
    9f1a:	bf08      	it	eq
    9f1c:	2300      	moveq	r3, #0
			user->first = first;
    9f1e:	706b      	strb	r3, [r5, #1]
    9f20:	e7be      	b.n	9ea0 <ticker_job+0x648>
		ticker = &node[_ticker_id_head];
    9f22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    9f26:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    9f2a:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
    9f2e:	e7d8      	b.n	9ee2 <ticker_job+0x68a>
		_ticker_id_head = ticker->next;
    9f30:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
    9f34:	e7d5      	b.n	9ee2 <ticker_job+0x68a>
	if (ticker_id_old_head == TICKER_NULL) {
    9f36:	9b03      	ldr	r3, [sp, #12]
    9f38:	2bff      	cmp	r3, #255	; 0xff
    9f3a:	d107      	bne.n	9f4c <ticker_job+0x6f4>
		ticks_current = cntr_cnt_get();
    9f3c:	f005 faf2 	bl	f524 <cntr_cnt_get>
    9f40:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9f42:	f005 fac9 	bl	f4d8 <cntr_start>
    9f46:	b908      	cbnz	r0, 9f4c <ticker_job+0x6f4>
			instance->ticks_current = ticks_current;
    9f48:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    9f4c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    9f50:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->nodes[instance->ticker_id_head];
    9f54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    9f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9f5c:	260a      	movs	r6, #10
    9f5e:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    9f60:	f005 fae0 	bl	f524 <cntr_cnt_get>
		cc = instance->ticks_current;
    9f64:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f68:	1b03      	subs	r3, r0, r4
    9f6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    9f6e:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    9f70:	42ab      	cmp	r3, r5
    9f72:	bf2c      	ite	cs
    9f74:	18e4      	addcs	r4, r4, r3
    9f76:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
    9f78:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    9f7c:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    9f7e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    9f82:	4620      	mov	r0, r4
    9f84:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    9f86:	f005 facd 	bl	f524 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f8a:	1bc0      	subs	r0, r0, r7
    9f8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f90:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    9f92:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f94:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    9f98:	42a0      	cmp	r0, r4
    9f9a:	f67f acea 	bls.w	9972 <ticker_job+0x11a>
		LL_ASSERT(i);
    9f9e:	3e01      	subs	r6, #1
    9fa0:	d1de      	bne.n	9f60 <ticker_job+0x708>
    9fa2:	4040      	eors	r0, r0
    9fa4:	f380 8811 	msr	BASEPRI, r0
    9fa8:	f04f 0003 	mov.w	r0, #3
    9fac:	df02      	svc	2
	if (!pending) {
    9fae:	2b00      	cmp	r3, #0
    9fb0:	f43f af6f 	beq.w	9e92 <ticker_job+0x63a>
	instance->job_guard = 0U;
    9fb4:	2300      	movs	r3, #0
    9fb6:	f88b 301e 	strb.w	r3, [fp, #30]
    9fba:	e4d0      	b.n	995e <ticker_job+0x106>
	while (id_insert !=
    9fbc:	45b0      	cmp	r8, r6
    9fbe:	f47f aef4 	bne.w	9daa <ticker_job+0x552>
    9fc2:	e759      	b.n	9e78 <ticker_job+0x620>
}
    9fc4:	b013      	add	sp, #76	; 0x4c
    9fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fca:	bf00      	nop
    9fcc:	ff172b5a 	.word	0xff172b5a
    9fd0:	7f172b59 	.word	0x7f172b59

00009fd4 <ticker_init>:
{
    9fd4:	b570      	push	{r4, r5, r6, lr}
    9fd6:	9d04      	ldr	r5, [sp, #16]
    9fd8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9fdc:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    9fde:	b108      	cbz	r0, 9fe4 <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
    9fe0:	2001      	movs	r0, #1
}
    9fe2:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
    9fe4:	4813      	ldr	r0, [pc, #76]	; (a034 <ticker_init+0x60>)
	instance->nodes = node;
    9fe6:	6002      	str	r2, [r0, #0]
	instance->count_node = count_node;
    9fe8:	7201      	strb	r1, [r0, #8]
	instance->count_user = count_user;
    9fea:	7243      	strb	r3, [r0, #9]
	instance->users = user;
    9fec:	6045      	str	r5, [r0, #4]
    9fee:	4602      	mov	r2, r0
	while (count_user--) {
    9ff0:	3b01      	subs	r3, #1
    9ff2:	b2db      	uxtb	r3, r3
    9ff4:	2bff      	cmp	r3, #255	; 0xff
    9ff6:	d10f      	bne.n	a018 <ticker_init+0x44>
	if (count_op) {
    9ff8:	2c00      	cmp	r4, #0
    9ffa:	d1f1      	bne.n	9fe0 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
    9ffc:	9b07      	ldr	r3, [sp, #28]
    9ffe:	6213      	str	r3, [r2, #32]
	instance->sched_cb = sched_cb;
    a000:	9b08      	ldr	r3, [sp, #32]
    a002:	6253      	str	r3, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a006:	6293      	str	r3, [r2, #40]	; 0x28
	instance->ticks_slot_previous = 0U;
    a008:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_current = 0U;
    a00c:	e9c2 4405 	strd	r4, r4, [r2, #20]
	instance->ticks_slot_previous = 0U;
    a010:	8393      	strh	r3, [r2, #28]
	instance->ticks_elapsed_first = 0U;
    a012:	8154      	strh	r4, [r2, #10]
	return TICKER_STATUS_SUCCESS;
    a014:	4620      	mov	r0, r4
    a016:	e7e4      	b.n	9fe2 <ticker_init+0xe>
		users[count_user].user_op = user_op_;
    a018:	b219      	sxth	r1, r3
    a01a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    a01e:	6046      	str	r6, [r0, #4]
		user_op_ += users[count_user].count_user_op;
    a020:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
    a024:	eb00 0140 	add.w	r1, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    a028:	1a20      	subs	r0, r4, r0
		user_op_ += users[count_user].count_user_op;
    a02a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
		count_op -= users[count_user].count_user_op;
    a02e:	b2c4      	uxtb	r4, r0
    a030:	e7de      	b.n	9ff0 <ticker_init+0x1c>
    a032:	bf00      	nop
    a034:	20000c70 	.word	0x20000c70

0000a038 <ticker_trigger>:
	instance = &_instance[instance_index];
    a038:	4a07      	ldr	r2, [pc, #28]	; (a058 <ticker_trigger+0x20>)
    a03a:	212c      	movs	r1, #44	; 0x2c
    a03c:	fb00 2301 	mla	r3, r0, r1, r2
{
    a040:	b410      	push	{r4}
	if (instance->sched_cb) {
    a042:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    a044:	b12c      	cbz	r4, a052 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a046:	46a4      	mov	ip, r4
    a048:	2201      	movs	r2, #1
    a04a:	2103      	movs	r1, #3
    a04c:	2002      	movs	r0, #2
}
    a04e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a050:	4760      	bx	ip
}
    a052:	bc10      	pop	{r4}
    a054:	4770      	bx	lr
    a056:	bf00      	nop
    a058:	20000c70 	.word	0x20000c70

0000a05c <ticker_start>:
{
    a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a060:	4c22      	ldr	r4, [pc, #136]	; (a0ec <ticker_start+0x90>)
    a062:	272c      	movs	r7, #44	; 0x2c
    a064:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->users[user_id];
    a068:	b20d      	sxth	r5, r1
    a06a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a06e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    a072:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    a076:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a07a:	1c66      	adds	r6, r4, #1
    a07c:	b2f6      	uxtb	r6, r6
		last = 0U;
    a07e:	42b0      	cmp	r0, r6
    a080:	bf98      	it	ls
    a082:	2600      	movls	r6, #0
	if (last == user->first) {
    a084:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a088:	42b0      	cmp	r0, r6
    a08a:	d02d      	beq.n	a0e8 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    a08c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a090:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a094:	0125      	lsls	r5, r4, #4
    a096:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    a098:	f04f 0e03 	mov.w	lr, #3
    a09c:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    a0a0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    a0a2:	9b06      	ldr	r3, [sp, #24]
    a0a4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    a0a6:	9b07      	ldr	r3, [sp, #28]
    a0a8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    a0aa:	9b08      	ldr	r3, [sp, #32]
    a0ac:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0b0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    a0b2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a0b6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    a0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0ba:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    a0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a0be:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    a0c0:	2302      	movs	r3, #2
    a0c2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    a0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0c6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    a0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    a0ca:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    a0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    a0ce:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a0d2:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    a0d6:	4608      	mov	r0, r1
    a0d8:	4798      	blx	r3
    a0da:	4643      	mov	r3, r8
    a0dc:	2200      	movs	r2, #0
    a0de:	2104      	movs	r1, #4
    a0e0:	47a8      	blx	r5
	return user_op->status;
    a0e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a0e8:	2001      	movs	r0, #1
    a0ea:	e7fb      	b.n	a0e4 <ticker_start+0x88>
    a0ec:	20000c70 	.word	0x20000c70

0000a0f0 <ticker_update>:
{
    a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a0f4:	4c21      	ldr	r4, [pc, #132]	; (a17c <ticker_update+0x8c>)
    a0f6:	272c      	movs	r7, #44	; 0x2c
    a0f8:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->users[user_id];
    a0fc:	b20d      	sxth	r5, r1
    a0fe:	f8d9 0004 	ldr.w	r0, [r9, #4]
    a102:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    a106:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    a10a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a10e:	1c66      	adds	r6, r4, #1
    a110:	b2f6      	uxtb	r6, r6
		last = 0U;
    a112:	42b0      	cmp	r0, r6
    a114:	bf98      	it	ls
    a116:	2600      	movls	r6, #0
	if (last == user->first) {
    a118:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a11c:	42b0      	cmp	r0, r6
    a11e:	d02a      	beq.n	a176 <ticker_update+0x86>
	user_op = &user->user_op[user->last];
    a120:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a124:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a128:	0125      	lsls	r5, r4, #4
    a12a:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    a12c:	f04f 0804 	mov.w	r8, #4
    a130:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    a134:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    a136:	9b08      	ldr	r3, [sp, #32]
    a138:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    a13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a13c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a140:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    a142:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    a146:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    a148:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a14c:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    a14e:	2302      	movs	r3, #2
    a150:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    a152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a154:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    a156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    a158:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    a15a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    a15c:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a160:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    a164:	4608      	mov	r0, r1
    a166:	4798      	blx	r3
    a168:	464b      	mov	r3, r9
    a16a:	2200      	movs	r2, #0
    a16c:	4641      	mov	r1, r8
    a16e:	47a8      	blx	r5
	return user_op->status;
    a170:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    a176:	2001      	movs	r0, #1
    a178:	e7fb      	b.n	a172 <ticker_update+0x82>
    a17a:	bf00      	nop
    a17c:	20000c70 	.word	0x20000c70

0000a180 <ticker_stop>:
{
    a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a184:	4c1a      	ldr	r4, [pc, #104]	; (a1f0 <ticker_stop+0x70>)
    a186:	262c      	movs	r6, #44	; 0x2c
    a188:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
    a18c:	b20f      	sxth	r7, r1
    a18e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a192:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    a196:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    a19a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a19e:	1c65      	adds	r5, r4, #1
    a1a0:	b2ed      	uxtb	r5, r5
		last = 0U;
    a1a2:	42a8      	cmp	r0, r5
    a1a4:	bf98      	it	ls
    a1a6:	2500      	movls	r5, #0
	if (last == user->first) {
    a1a8:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a1ac:	42a8      	cmp	r0, r5
    a1ae:	d01c      	beq.n	a1ea <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    a1b0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a1b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a1b8:	0124      	lsls	r4, r4, #4
    a1ba:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    a1bc:	f04f 0e05 	mov.w	lr, #5
    a1c0:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    a1c4:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    a1c6:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    a1c8:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    a1cc:	9b06      	ldr	r3, [sp, #24]
    a1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    a1d0:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a1d4:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    a1d8:	4608      	mov	r0, r1
    a1da:	4798      	blx	r3
    a1dc:	4643      	mov	r3, r8
    a1de:	2200      	movs	r2, #0
    a1e0:	2104      	movs	r1, #4
    a1e2:	47a0      	blx	r4
	return user_op->status;
    a1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a1ea:	2001      	movs	r0, #1
    a1ec:	e7fb      	b.n	a1e6 <ticker_stop+0x66>
    a1ee:	bf00      	nop
    a1f0:	20000c70 	.word	0x20000c70

0000a1f4 <ticker_next_slot_get>:
{
    a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a1f8:	4c1c      	ldr	r4, [pc, #112]	; (a26c <ticker_next_slot_get+0x78>)
    a1fa:	272c      	movs	r7, #44	; 0x2c
    a1fc:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->users[user_id];
    a200:	b20d      	sxth	r5, r1
    a202:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a206:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    a20a:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    a20e:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a212:	1c66      	adds	r6, r4, #1
    a214:	b2f6      	uxtb	r6, r6
		last = 0U;
    a216:	42b0      	cmp	r0, r6
    a218:	bf98      	it	ls
    a21a:	2600      	movls	r6, #0
	if (last == user->first) {
    a21c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a220:	42b0      	cmp	r0, r6
    a222:	d020      	beq.n	a266 <ticker_next_slot_get+0x72>
	user_op = &user->user_op[user->last];
    a224:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a228:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a22c:	0124      	lsls	r4, r4, #4
    a22e:	1905      	adds	r5, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    a230:	f64f 7e02 	movw	lr, #65282	; 0xff02
    a234:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->params.slot_get.ticks_current = ticks_current;
    a238:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    a23c:	9b06      	ldr	r3, [sp, #24]
    a23e:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
    a240:	2302      	movs	r3, #2
    a242:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    a244:	9b07      	ldr	r3, [sp, #28]
    a246:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->op_context = op_context;
    a248:	9b08      	ldr	r3, [sp, #32]
    a24a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user->last = last;
    a24c:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a250:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    a254:	4608      	mov	r0, r1
    a256:	4798      	blx	r3
    a258:	4643      	mov	r3, r8
    a25a:	2200      	movs	r2, #0
    a25c:	2104      	movs	r1, #4
    a25e:	47a0      	blx	r4
	return user_op->status;
    a260:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
    a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a266:	2001      	movs	r0, #1
    a268:	e7fb      	b.n	a262 <ticker_next_slot_get+0x6e>
    a26a:	bf00      	nop
    a26c:	20000c70 	.word	0x20000c70

0000a270 <ticker_job_idle_get>:
{
    a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a274:	4c19      	ldr	r4, [pc, #100]	; (a2dc <ticker_job_idle_get+0x6c>)
    a276:	262c      	movs	r6, #44	; 0x2c
    a278:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
    a27c:	b20f      	sxth	r7, r1
    a27e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a282:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    a286:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    a28a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a28e:	1c65      	adds	r5, r4, #1
    a290:	b2ed      	uxtb	r5, r5
		last = 0U;
    a292:	42a8      	cmp	r0, r5
    a294:	bf98      	it	ls
    a296:	2500      	movls	r5, #0
	if (last == user->first) {
    a298:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a29c:	42a8      	cmp	r0, r5
    a29e:	d01a      	beq.n	a2d6 <ticker_job_idle_get+0x66>
	user_op = &user->user_op[user->last];
    a2a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a2a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a2a8:	0124      	lsls	r4, r4, #4
    a2aa:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    a2ac:	f64f 7e01 	movw	lr, #65281	; 0xff01
    a2b0:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->status = TICKER_STATUS_BUSY;
    a2b4:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
    a2b6:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    a2bc:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a2c0:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    a2c4:	4608      	mov	r0, r1
    a2c6:	4798      	blx	r3
    a2c8:	4643      	mov	r3, r8
    a2ca:	2200      	movs	r2, #0
    a2cc:	2104      	movs	r1, #4
    a2ce:	47a0      	blx	r4
	return user_op->status;
    a2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    a2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a2d6:	2001      	movs	r0, #1
    a2d8:	e7fb      	b.n	a2d2 <ticker_job_idle_get+0x62>
    a2da:	bf00      	nop
    a2dc:	20000c70 	.word	0x20000c70

0000a2e0 <ticker_job_sched>:
{
    a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a2e4:	4c08      	ldr	r4, [pc, #32]	; (a308 <ticker_job_sched+0x28>)
    a2e6:	252c      	movs	r5, #44	; 0x2c
    a2e8:	fb05 4300 	mla	r3, r5, r0, r4
    a2ec:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
    a2f0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a2f2:	4608      	mov	r0, r1
    a2f4:	4798      	blx	r3
    a2f6:	fb06 4305 	mla	r3, r6, r5, r4
    a2fa:	46bc      	mov	ip, r7
    a2fc:	2200      	movs	r2, #0
    a2fe:	2104      	movs	r1, #4
}
    a300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a304:	4760      	bx	ip
    a306:	bf00      	nop
    a308:	20000c70 	.word	0x20000c70

0000a30c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    a30c:	b508      	push	{r3, lr}
    a30e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    a310:	2b01      	cmp	r3, #1
{
    a312:	4608      	mov	r0, r1
	if (addr_type > 1) {
    a314:	d80e      	bhi.n	a334 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    a316:	b133      	cbz	r3, a326 <ll_addr_get+0x1a>
		if (bdaddr) {
    a318:	b119      	cbz	r1, a322 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    a31a:	2206      	movs	r2, #6
    a31c:	4906      	ldr	r1, [pc, #24]	; (a338 <ll_addr_get+0x2c>)
    a31e:	f009 f8a1 	bl	13464 <memcpy>
		}

		return rnd_addr;
    a322:	4805      	ldr	r0, [pc, #20]	; (a338 <ll_addr_get+0x2c>)
    a324:	e007      	b.n	a336 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    a326:	b119      	cbz	r1, a330 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    a328:	2206      	movs	r2, #6
    a32a:	4904      	ldr	r1, [pc, #16]	; (a33c <ll_addr_get+0x30>)
    a32c:	f009 f89a 	bl	13464 <memcpy>
	}

	return pub_addr;
    a330:	4802      	ldr	r0, [pc, #8]	; (a33c <ll_addr_get+0x30>)
    a332:	e000      	b.n	a336 <ll_addr_get+0x2a>
		return NULL;
    a334:	2000      	movs	r0, #0
}
    a336:	bd08      	pop	{r3, pc}
    a338:	20002153 	.word	0x20002153
    a33c:	2000214d 	.word	0x2000214d

0000a340 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    a340:	b570      	push	{r4, r5, r6, lr}
    a342:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    a344:	2000      	movs	r0, #0
{
    a346:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    a348:	f003 fd8e 	bl	de68 <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    a34c:	4604      	mov	r4, r0
    a34e:	b948      	cbnz	r0, a364 <ll_addr_set+0x24>
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a350:	2206      	movs	r2, #6
    a352:	4629      	mov	r1, r5
	if (addr_type) {
    a354:	b126      	cbz	r6, a360 <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a356:	4804      	ldr	r0, [pc, #16]	; (a368 <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a358:	f009 f884 	bl	13464 <memcpy>
	}

	return 0;
}
    a35c:	4620      	mov	r0, r4
    a35e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a360:	4802      	ldr	r0, [pc, #8]	; (a36c <ll_addr_set+0x2c>)
    a362:	e7f9      	b.n	a358 <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a364:	240c      	movs	r4, #12
    a366:	e7f9      	b.n	a35c <ll_addr_set+0x1c>
    a368:	20002153 	.word	0x20002153
    a36c:	2000214d 	.word	0x2000214d

0000a370 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    a370:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a372:	4802      	ldr	r0, [pc, #8]	; (a37c <hci_driver_init+0xc>)
    a374:	f7fc f9a4 	bl	66c0 <bt_hci_driver_register>

	return 0;
}
    a378:	2000      	movs	r0, #0
    a37a:	bd08      	pop	{r3, pc}
    a37c:	00017910 	.word	0x00017910

0000a380 <hci_driver_send>:
	if (!buf->len) {
    a380:	8983      	ldrh	r3, [r0, #12]
{
    a382:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a384:	4605      	mov	r5, r0
	if (!buf->len) {
    a386:	b31b      	cbz	r3, a3d0 <hci_driver_send+0x50>
	switch (type) {
    a388:	7d03      	ldrb	r3, [r0, #20]
    a38a:	b18b      	cbz	r3, a3b0 <hci_driver_send+0x30>
    a38c:	2b02      	cmp	r3, #2
    a38e:	d11f      	bne.n	a3d0 <hci_driver_send+0x50>
	err = hci_acl_handle(buf, &evt);
    a390:	a901      	add	r1, sp, #4
    a392:	f000 fe75 	bl	b080 <hci_acl_handle>
    a396:	4604      	mov	r4, r0
	if (evt) {
    a398:	9801      	ldr	r0, [sp, #4]
    a39a:	b108      	cbz	r0, a3a0 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    a39c:	f7fc f96a 	bl	6674 <bt_recv_prio>
	if (!err) {
    a3a0:	b91c      	cbnz	r4, a3aa <hci_driver_send+0x2a>
		net_buf_unref(buf);
    a3a2:	4628      	mov	r0, r5
    a3a4:	f005 fde0 	bl	ff68 <net_buf_unref>
    a3a8:	2400      	movs	r4, #0
}
    a3aa:	4620      	mov	r0, r4
    a3ac:	b003      	add	sp, #12
    a3ae:	bd30      	pop	{r4, r5, pc}
	void *node_rx = NULL;
    a3b0:	a902      	add	r1, sp, #8
    a3b2:	f841 3d04 	str.w	r3, [r1, #-4]!
	evt = hci_cmd_handle(buf, &node_rx);
    a3b6:	f000 fa83 	bl	a8c0 <hci_cmd_handle>
	if (evt) {
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d0f1      	beq.n	a3a2 <hci_driver_send+0x22>
		bt_recv_prio(evt);
    a3be:	f7fc f959 	bl	6674 <bt_recv_prio>
		if (node_rx) {
    a3c2:	9901      	ldr	r1, [sp, #4]
    a3c4:	2900      	cmp	r1, #0
    a3c6:	d0ec      	beq.n	a3a2 <hci_driver_send+0x22>
			k_fifo_put(&recv_fifo, node_rx);
    a3c8:	4803      	ldr	r0, [pc, #12]	; (a3d8 <hci_driver_send+0x58>)
    a3ca:	f00c fbc2 	bl	16b52 <k_queue_append>
    a3ce:	e7e8      	b.n	a3a2 <hci_driver_send+0x22>
		return -EINVAL;
    a3d0:	f06f 0415 	mvn.w	r4, #21
    a3d4:	e7e9      	b.n	a3aa <hci_driver_send+0x2a>
    a3d6:	bf00      	nop
    a3d8:	20005548 	.word	0x20005548

0000a3dc <recv_thread>:
{
    a3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    a3de:	4d25      	ldr	r5, [pc, #148]	; (a474 <recv_thread+0x98>)
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    a3e0:	2600      	movs	r6, #0
    a3e2:	f04f 31ff 	mov.w	r1, #4294967295
    a3e6:	4628      	mov	r0, r5
    a3e8:	f00c fbdc 	bl	16ba4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a3ec:	4604      	mov	r4, r0
    a3ee:	b358      	cbz	r0, a448 <recv_thread+0x6c>
	s8_t class = hci_get_class(node_rx);
    a3f0:	f001 f926 	bl	b640 <hci_get_class>
	switch (class) {
    a3f4:	1e01      	subs	r1, r0, #0
    a3f6:	9401      	str	r4, [sp, #4]
    a3f8:	db03      	blt.n	a402 <recv_thread+0x26>
    a3fa:	2902      	cmp	r1, #2
    a3fc:	dd07      	ble.n	a40e <recv_thread+0x32>
    a3fe:	2903      	cmp	r1, #3
    a400:	d02b      	beq.n	a45a <recv_thread+0x7e>
		LL_ASSERT(0);
    a402:	4040      	eors	r0, r0
    a404:	f380 8811 	msr	BASEPRI, r0
    a408:	f04f 0003 	mov.w	r0, #3
    a40c:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a40e:	2901      	cmp	r1, #1
    a410:	d11d      	bne.n	a44e <recv_thread+0x72>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a412:	2200      	movs	r2, #0
    a414:	4610      	mov	r0, r2
    a416:	f7fc fbf3 	bl	6c00 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a41a:	4604      	mov	r4, r0
		if (buf) {
    a41c:	b118      	cbz	r0, a426 <recv_thread+0x4a>
			hci_evt_encode(node_rx, buf);
    a41e:	4601      	mov	r1, r0
    a420:	9801      	ldr	r0, [sp, #4]
    a422:	f000 fe89 	bl	b138 <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    a426:	9b01      	ldr	r3, [sp, #4]
    a428:	2100      	movs	r1, #0
    a42a:	88d8      	ldrh	r0, [r3, #6]
    a42c:	f003 fde0 	bl	dff0 <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
    a430:	a802      	add	r0, sp, #8
    a432:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    a436:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a438:	f003 fda4 	bl	df84 <ll_rx_mem_release>
		if (buf) {
    a43c:	b124      	cbz	r4, a448 <recv_thread+0x6c>
			if (buf->len) {
    a43e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a440:	4620      	mov	r0, r4
			if (buf->len) {
    a442:	b1a3      	cbz	r3, a46e <recv_thread+0x92>
				bt_recv(buf);
    a444:	f7fc f8c6 	bl	65d4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    a448:	f006 fefe 	bl	11248 <z_impl_k_yield>
    a44c:	e7c9      	b.n	a3e2 <recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a44e:	f04f 31ff 	mov.w	r1, #4294967295
    a452:	2001      	movs	r0, #1
    a454:	f7fc fb9e 	bl	6b94 <bt_buf_get_rx>
    a458:	e7df      	b.n	a41a <recv_thread+0x3e>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a45a:	f04f 31ff 	mov.w	r1, #4294967295
    a45e:	f7fc fb99 	bl	6b94 <bt_buf_get_rx>
    a462:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a464:	4601      	mov	r1, r0
    a466:	9801      	ldr	r0, [sp, #4]
    a468:	f00b faa5 	bl	159b6 <hci_acl_encode>
    a46c:	e7db      	b.n	a426 <recv_thread+0x4a>
				net_buf_unref(buf);
    a46e:	f005 fd7b 	bl	ff68 <net_buf_unref>
    a472:	e7e9      	b.n	a448 <recv_thread+0x6c>
    a474:	20005548 	.word	0x20005548

0000a478 <prio_recv_thread>:
{
    a478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    a47a:	4d15      	ldr	r5, [pc, #84]	; (a4d0 <prio_recv_thread+0x58>)
			k_fifo_put(&recv_fifo, node_rx);
    a47c:	4e15      	ldr	r6, [pc, #84]	; (a4d4 <prio_recv_thread+0x5c>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    a47e:	f10d 0102 	add.w	r1, sp, #2
    a482:	a801      	add	r0, sp, #4
    a484:	f003 fd46 	bl	df14 <ll_rx_get>
    a488:	4604      	mov	r4, r0
    a48a:	b940      	cbnz	r0, a49e <prio_recv_thread+0x26>
		if (node_rx) {
    a48c:	9b01      	ldr	r3, [sp, #4]
    a48e:	b1c3      	cbz	r3, a4c2 <prio_recv_thread+0x4a>
			ll_rx_dequeue();
    a490:	f003 fe98 	bl	e1c4 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    a494:	9901      	ldr	r1, [sp, #4]
    a496:	4630      	mov	r0, r6
    a498:	f00c fb5b 	bl	16b52 <k_queue_append>
    a49c:	e7ef      	b.n	a47e <prio_recv_thread+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a49e:	f04f 32ff 	mov.w	r2, #4294967295
    a4a2:	2100      	movs	r1, #0
    a4a4:	2013      	movs	r0, #19
    a4a6:	f7fc fbab 	bl	6c00 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a4aa:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a4ac:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a4ae:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a4b2:	f00b faab 	bl	15a0c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    a4b6:	4638      	mov	r0, r7
    a4b8:	f7fc f8dc 	bl	6674 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    a4bc:	f006 fec4 	bl	11248 <z_impl_k_yield>
    a4c0:	e7dd      	b.n	a47e <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    a4c2:	f04f 31ff 	mov.w	r1, #4294967295
    a4c6:	4628      	mov	r0, r5
    a4c8:	f006 ff3a 	bl	11340 <z_impl_k_sem_take>
    a4cc:	e7d7      	b.n	a47e <prio_recv_thread+0x6>
    a4ce:	bf00      	nop
    a4d0:	200054dc 	.word	0x200054dc
    a4d4:	20005548 	.word	0x20005548

0000a4d8 <hci_driver_open>:
{
    a4d8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    a4da:	4818      	ldr	r0, [pc, #96]	; (a53c <hci_driver_open+0x64>)
{
    a4dc:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    a4de:	f003 fefb 	bl	e2d8 <ll_init>
	if (err) {
    a4e2:	4604      	mov	r4, r0
    a4e4:	bb38      	cbnz	r0, a536 <hci_driver_open+0x5e>
	hci_init(NULL);
    a4e6:	f001 f8c3 	bl	b670 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    a4ea:	f06f 0309 	mvn.w	r3, #9
    a4ee:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    a4f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a4f6:	4912      	ldr	r1, [pc, #72]	; (a540 <hci_driver_open+0x68>)
    a4f8:	4b12      	ldr	r3, [pc, #72]	; (a544 <hci_driver_open+0x6c>)
    a4fa:	4813      	ldr	r0, [pc, #76]	; (a548 <hci_driver_open+0x70>)
    a4fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
    a500:	e9cd 4400 	strd	r4, r4, [sp]
    a504:	f006 ff96 	bl	11434 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    a508:	4910      	ldr	r1, [pc, #64]	; (a54c <hci_driver_open+0x74>)
    a50a:	480f      	ldr	r0, [pc, #60]	; (a548 <hci_driver_open+0x70>)
    a50c:	f00c fccf 	bl	16eae <z_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    a510:	f06f 0307 	mvn.w	r3, #7
    a514:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a518:	490d      	ldr	r1, [pc, #52]	; (a550 <hci_driver_open+0x78>)
    a51a:	4b0e      	ldr	r3, [pc, #56]	; (a554 <hci_driver_open+0x7c>)
    a51c:	480e      	ldr	r0, [pc, #56]	; (a558 <hci_driver_open+0x80>)
    a51e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    a522:	e9cd 4400 	strd	r4, r4, [sp]
    a526:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a52a:	f006 ff83 	bl	11434 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    a52e:	490b      	ldr	r1, [pc, #44]	; (a55c <hci_driver_open+0x84>)
    a530:	4809      	ldr	r0, [pc, #36]	; (a558 <hci_driver_open+0x80>)
    a532:	f00c fcbc 	bl	16eae <z_impl_k_thread_name_set>
}
    a536:	4620      	mov	r0, r4
    a538:	b006      	add	sp, #24
    a53a:	bd10      	pop	{r4, pc}
    a53c:	200054dc 	.word	0x200054dc
    a540:	20003230 	.word	0x20003230
    a544:	0000a479 	.word	0x0000a479
    a548:	20000c9c 	.word	0x20000c9c
    a54c:	00018352 	.word	0x00018352
    a550:	200033f0 	.word	0x200033f0
    a554:	0000a3dd 	.word	0x0000a3dd
    a558:	20000d08 	.word	0x20000d08
    a55c:	0001835c 	.word	0x0001835c

0000a560 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    a560:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a562:	f04f 32ff 	mov.w	r2, #4294967295
{
    a566:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a568:	2100      	movs	r1, #0
    a56a:	200f      	movs	r0, #15
    a56c:	f7fc fb48 	bl	6c00 <bt_buf_get_evt>
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a570:	2204      	movs	r2, #4
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a572:	4604      	mov	r4, r0
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a574:	210f      	movs	r1, #15
    a576:	f00b f9ff 	bl	15978 <hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    a57a:	2104      	movs	r1, #4
    a57c:	f104 0008 	add.w	r0, r4, #8
    a580:	f00b fef8 	bl	16374 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
    a584:	2301      	movs	r3, #1
    a586:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    a588:	4b02      	ldr	r3, [pc, #8]	; (a594 <cmd_status+0x34>)
	cs->status = status;
    a58a:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    a58c:	881b      	ldrh	r3, [r3, #0]
    a58e:	8043      	strh	r3, [r0, #2]

	return buf;
}
    a590:	4620      	mov	r0, r4
    a592:	bd38      	pop	{r3, r4, r5, pc}
    a594:	20002070 	.word	0x20002070

0000a598 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    a598:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    a59c:	4604      	mov	r4, r0
    a59e:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5a0:	4b15      	ldr	r3, [pc, #84]	; (a5f8 <le_remote_feat_complete+0x60>)
{
    a5a2:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5a8:	f04f 0b00 	mov.w	fp, #0
    a5ac:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
    a5b0:	ea5b 030c 	orrs.w	r3, fp, ip
{
    a5b4:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5b6:	d01d      	beq.n	a5f4 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    a5b8:	4b10      	ldr	r3, [pc, #64]	; (a5fc <le_remote_feat_complete+0x64>)
    a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5be:	f04f 0c00 	mov.w	ip, #0
    a5c2:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5c6:	ea5b 030c 	orrs.w	r3, fp, ip
    a5ca:	d013      	beq.n	a5f4 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    a5cc:	220b      	movs	r2, #11
    a5ce:	2104      	movs	r1, #4
    a5d0:	f00b f9dc 	bl	1598c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    a5d4:	2208      	movs	r2, #8
	sep->status = status;
    a5d6:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a5d8:	f8a0 6001 	strh.w	r6, [r0, #1]
    a5dc:	3003      	adds	r0, #3
	if (!status) {
    a5de:	b924      	cbnz	r4, a5ea <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
    a5e0:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    a5e2:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
    a5e6:	f008 bf3d 	b.w	13464 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a5ea:	2100      	movs	r1, #0
}
    a5ec:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a5f0:	f008 bf65 	b.w	134be <memset>
}
    a5f4:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    a5f8:	20004f70 	.word	0x20004f70
    a5fc:	20004f78 	.word	0x20004f78

0000a600 <encrypt_change>:
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a600:	4b0f      	ldr	r3, [pc, #60]	; (a640 <encrypt_change+0x40>)
{
    a602:	b570      	push	{r4, r5, r6, lr}
    a604:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a606:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    a60a:	4604      	mov	r4, r0
    a60c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a60e:	f002 0080 	and.w	r0, r2, #128	; 0x80
    a612:	2100      	movs	r1, #0
    a614:	ea50 0301 	orrs.w	r3, r0, r1
    a618:	d010      	beq.n	a63c <encrypt_change+0x3c>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    a61a:	2204      	movs	r2, #4
    a61c:	2108      	movs	r1, #8
    a61e:	4628      	mov	r0, r5
    a620:	f00b f9aa 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a624:	2104      	movs	r1, #4
    a626:	f105 0008 	add.w	r0, r5, #8
    a62a:	f00b fea3 	bl	16374 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    a62e:	fab4 f384 	clz	r3, r4
    a632:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    a634:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a636:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    a63a:	70c3      	strb	r3, [r0, #3]
}
    a63c:	bd70      	pop	{r4, r5, r6, pc}
    a63e:	bf00      	nop
    a640:	20004f70 	.word	0x20004f70

0000a644 <hci_cmd_complete>:
{
    a644:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a646:	f04f 32ff 	mov.w	r2, #4294967295
{
    a64a:	4604      	mov	r4, r0
    a64c:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a64e:	200e      	movs	r0, #14
    a650:	2100      	movs	r1, #0
    a652:	f7fc fad5 	bl	6c00 <bt_buf_get_evt>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a656:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a658:	6020      	str	r0, [r4, #0]
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a65a:	b2d2      	uxtb	r2, r2
    a65c:	210e      	movs	r1, #14
    a65e:	f00b f98b 	bl	15978 <hci_evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    a662:	6820      	ldr	r0, [r4, #0]
    a664:	2103      	movs	r1, #3
    a666:	3008      	adds	r0, #8
    a668:	f00b fe84 	bl	16374 <net_buf_simple_add>
	cc->ncmd = 1U;
    a66c:	2301      	movs	r3, #1
    a66e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    a670:	4b05      	ldr	r3, [pc, #20]	; (a688 <hci_cmd_complete+0x44>)
    a672:	881b      	ldrh	r3, [r3, #0]
    a674:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    a678:	6820      	ldr	r0, [r4, #0]
    a67a:	4629      	mov	r1, r5
    a67c:	3008      	adds	r0, #8
}
    a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    a682:	f00b be77 	b.w	16374 <net_buf_simple_add>
    a686:	bf00      	nop
    a688:	20002070 	.word	0x20002070

0000a68c <hci_vendor_cmd_handle_common>:
{
    a68c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    a68e:	3801      	subs	r0, #1
{
    a690:	b087      	sub	sp, #28
    a692:	4614      	mov	r4, r2
	switch (ocf) {
    a694:	2809      	cmp	r0, #9
    a696:	f200 810e 	bhi.w	a8b6 <hci_vendor_cmd_handle_common+0x22a>
    a69a:	e8df f010 	tbh	[pc, r0, lsl #1]
    a69e:	000a      	.short	0x000a
    a6a0:	00390022 	.word	0x00390022
    a6a4:	010c010c 	.word	0x010c010c
    a6a8:	010c0062 	.word	0x010c0062
    a6ac:	006d0045 	.word	0x006d0045
    a6b0:	00a3      	.short	0x00a3
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a6b2:	4610      	mov	r0, r2
    a6b4:	210d      	movs	r1, #13
    a6b6:	f7ff ffc5 	bl	a644 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a6ba:	2202      	movs	r2, #2
    a6bc:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a6be:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a6c0:	2201      	movs	r2, #1
    a6c2:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a6c4:	220e      	movs	r2, #14
	rp->status = 0x00;
    a6c6:	2300      	movs	r3, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a6c8:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a6ca:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    a6cc:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a6ce:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a6d0:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0U;
    a6d2:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a6d4:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a6d6:	7242      	strb	r2, [r0, #9]
    a6d8:	7283      	strb	r3, [r0, #10]
    a6da:	72c3      	strb	r3, [r0, #11]
    a6dc:	7303      	strb	r3, [r0, #12]
	return 0;
    a6de:	2400      	movs	r4, #0
    a6e0:	e013      	b.n	a70a <hci_vendor_cmd_handle_common+0x7e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a6e2:	2141      	movs	r1, #65	; 0x41
    a6e4:	4610      	mov	r0, r2
    a6e6:	f7ff ffad 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    a6ea:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a6ec:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a6ee:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a6f0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a6f4:	4621      	mov	r1, r4
    a6f6:	f008 fee2 	bl	134be <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    a6fa:	786b      	ldrb	r3, [r5, #1]
    a6fc:	f063 0358 	orn	r3, r3, #88	; 0x58
    a700:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a702:	78ab      	ldrb	r3, [r5, #2]
    a704:	f043 0303 	orr.w	r3, r3, #3
    a708:	70ab      	strb	r3, [r5, #2]
}
    a70a:	4620      	mov	r0, r4
    a70c:	b007      	add	sp, #28
    a70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a710:	2109      	movs	r1, #9
    a712:	4610      	mov	r0, r2
    a714:	f7ff ff96 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    a718:	2400      	movs	r4, #0
    a71a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a71e:	2208      	movs	r2, #8
    a720:	4621      	mov	r1, r4
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    a722:	f008 fecc 	bl	134be <memset>
    a726:	e7f0      	b.n	a70a <hci_vendor_cmd_handle_common+0x7e>
	const char build_info[] = HCI_VS_BUILD_INFO;
    a728:	4b64      	ldr	r3, [pc, #400]	; (a8bc <hci_vendor_cmd_handle_common+0x230>)
    a72a:	aa01      	add	r2, sp, #4
    a72c:	f103 0710 	add.w	r7, r3, #16
    a730:	4616      	mov	r6, r2
    a732:	6818      	ldr	r0, [r3, #0]
    a734:	6859      	ldr	r1, [r3, #4]
    a736:	4615      	mov	r5, r2
    a738:	c503      	stmia	r5!, {r0, r1}
    a73a:	3308      	adds	r3, #8
    a73c:	42bb      	cmp	r3, r7
    a73e:	462a      	mov	r2, r5
    a740:	d1f7      	bne.n	a732 <hci_vendor_cmd_handle_common+0xa6>
    a742:	8819      	ldrh	r1, [r3, #0]
    a744:	789b      	ldrb	r3, [r3, #2]
    a746:	8029      	strh	r1, [r5, #0]
    a748:	70ab      	strb	r3, [r5, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    a74a:	2114      	movs	r1, #20
    a74c:	4620      	mov	r0, r4
    a74e:	f7ff ff79 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    a752:	2400      	movs	r4, #0
    a754:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    a758:	2213      	movs	r2, #19
    a75a:	4631      	mov	r1, r6
    a75c:	f008 fe82 	bl	13464 <memcpy>
    a760:	e7d3      	b.n	a70a <hci_vendor_cmd_handle_common+0x7e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    a762:	6889      	ldr	r1, [r1, #8]
    a764:	2000      	movs	r0, #0
    a766:	f7ff fdeb 	bl	a340 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    a76a:	2101      	movs	r1, #1
    a76c:	4620      	mov	r0, r4
    a76e:	f7ff ff69 	bl	a644 <hci_cmd_complete>
	ccst->status = 0x00;
    a772:	2300      	movs	r3, #0
    a774:	7003      	strb	r3, [r0, #0]
    a776:	e7b2      	b.n	a6de <hci_vendor_cmd_handle_common+0x52>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a77c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    a780:	3201      	adds	r2, #1
    a782:	d106      	bne.n	a792 <hci_vendor_cmd_handle_common+0x106>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a788:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a78c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a78e:	4293      	cmp	r3, r2
    a790:	d020      	beq.n	a7d4 <hci_vendor_cmd_handle_common+0x148>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    a792:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
    a796:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a79a:	07db      	lsls	r3, r3, #31
    a79c:	d51a      	bpl.n	a7d4 <hci_vendor_cmd_handle_common+0x148>
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a79e:	2118      	movs	r1, #24
    a7a0:	4620      	mov	r0, r4
    a7a2:	f7ff ff4f 	bl	a644 <hci_cmd_complete>
		rp->status = 0x00;
    a7a6:	2400      	movs	r4, #0
		rp->num_addrs = 1U;
    a7a8:	2301      	movs	r3, #1
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a7aa:	4605      	mov	r5, r0
		rp->num_addrs = 1U;
    a7ac:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    a7ae:	7004      	strb	r4, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    a7b0:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    a7b4:	1ca9      	adds	r1, r5, #2
    a7b6:	f00b f8d2 	bl	1595e <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    a7ba:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
	dst[0] = val;
    a7be:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
    a7c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    a7c4:	f063 033f 	orn	r3, r3, #63	; 0x3f
    a7c8:	71eb      	strb	r3, [r5, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    a7ca:	2210      	movs	r2, #16
    a7cc:	4621      	mov	r1, r4
    a7ce:	f105 0008 	add.w	r0, r5, #8
    a7d2:	e7a6      	b.n	a722 <hci_vendor_cmd_handle_common+0x96>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7d4:	2102      	movs	r1, #2
    a7d6:	4620      	mov	r0, r4
    a7d8:	f7ff ff34 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    a7dc:	2300      	movs	r3, #0
    a7de:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0U;
    a7e0:	7043      	strb	r3, [r0, #1]
    a7e2:	e77c      	b.n	a6de <hci_vendor_cmd_handle_common+0x52>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7e4:	2121      	movs	r1, #33	; 0x21
    a7e6:	4610      	mov	r0, r2
    a7e8:	f7ff ff2c 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    a7ec:	4603      	mov	r3, r0
    a7ee:	2200      	movs	r2, #0
    a7f0:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7f8:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a7fa:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a7fe:	3101      	adds	r1, #1
    a800:	d04d      	beq.n	a89e <hci_vendor_cmd_handle_common+0x212>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a802:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a806:	3101      	adds	r1, #1
    a808:	d049      	beq.n	a89e <hci_vendor_cmd_handle_common+0x212>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a80a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a80e:	3101      	adds	r1, #1
    a810:	d045      	beq.n	a89e <hci_vendor_cmd_handle_common+0x212>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    a812:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a816:	3101      	adds	r1, #1
    a818:	d041      	beq.n	a89e <hci_vendor_cmd_handle_common+0x212>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    a81a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    a81e:	4619      	mov	r1, r3
    a820:	f00b f89d 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    a824:	1d61      	adds	r1, r4, #5
    a826:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    a82a:	f00b f898 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    a82e:	f104 0109 	add.w	r1, r4, #9
    a832:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    a836:	f00b f892 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    a83a:	f104 010d 	add.w	r1, r4, #13
    a83e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    a842:	f00b f88c 	bl	1595e <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a84a:	f104 0311 	add.w	r3, r4, #17
    a84e:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
    a852:	3101      	adds	r1, #1
    a854:	d029      	beq.n	a8aa <hci_vendor_cmd_handle_common+0x21e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a856:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a85a:	3101      	adds	r1, #1
    a85c:	d025      	beq.n	a8aa <hci_vendor_cmd_handle_common+0x21e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a85e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a862:	3101      	adds	r1, #1
    a864:	d021      	beq.n	a8aa <hci_vendor_cmd_handle_common+0x21e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    a866:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a86a:	3101      	adds	r1, #1
    a86c:	d01d      	beq.n	a8aa <hci_vendor_cmd_handle_common+0x21e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    a86e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    a872:	4619      	mov	r1, r3
    a874:	f00b f873 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    a878:	f104 0115 	add.w	r1, r4, #21
    a87c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    a880:	f00b f86d 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    a884:	f104 0119 	add.w	r1, r4, #25
    a888:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    a88c:	f00b f867 	bl	1595e <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    a890:	f104 011d 	add.w	r1, r4, #29
    a894:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    a898:	f00b f861 	bl	1595e <sys_put_le32>
    a89c:	e71f      	b.n	a6de <hci_vendor_cmd_handle_common+0x52>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    a89e:	2210      	movs	r2, #16
    a8a0:	2100      	movs	r1, #0
    a8a2:	4618      	mov	r0, r3
    a8a4:	f008 fe0b 	bl	134be <memset>
    a8a8:	e7cd      	b.n	a846 <hci_vendor_cmd_handle_common+0x1ba>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    a8aa:	2210      	movs	r2, #16
    a8ac:	2100      	movs	r1, #0
    a8ae:	4618      	mov	r0, r3
    a8b0:	f008 fe05 	bl	134be <memset>
    a8b4:	e713      	b.n	a6de <hci_vendor_cmd_handle_common+0x52>
		return -EINVAL;
    a8b6:	f06f 0415 	mvn.w	r4, #21
    a8ba:	e726      	b.n	a70a <hci_vendor_cmd_handle_common+0x7e>
    a8bc:	00018375 	.word	0x00018375

0000a8c0 <hci_cmd_handle>:
{
    a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    a8c2:	8983      	ldrh	r3, [r0, #12]
{
    a8c4:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    a8c6:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    a8c8:	2b02      	cmp	r3, #2
{
    a8ca:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    a8cc:	960d      	str	r6, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    a8ce:	d802      	bhi.n	a8d6 <hci_cmd_handle+0x16>
		return NULL;
    a8d0:	2000      	movs	r0, #0
}
    a8d2:	b013      	add	sp, #76	; 0x4c
    a8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    a8d6:	2103      	movs	r1, #3
    a8d8:	3008      	adds	r0, #8
    a8da:	f00b fd72 	bl	163c2 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    a8de:	89a2      	ldrh	r2, [r4, #12]
    a8e0:	7883      	ldrb	r3, [r0, #2]
    a8e2:	429a      	cmp	r2, r3
    a8e4:	d3f4      	bcc.n	a8d0 <hci_cmd_handle+0x10>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a8e6:	8802      	ldrh	r2, [r0, #0]
    a8e8:	49a3      	ldr	r1, [pc, #652]	; (ab78 <hci_cmd_handle+0x2b8>)
    a8ea:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
    a8ec:	f3c3 0509 	ubfx	r5, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    a8f0:	0a9b      	lsrs	r3, r3, #10
    a8f2:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a8f4:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
    a8f6:	f000 8099 	beq.w	aa2c <hci_cmd_handle+0x16c>
    a8fa:	d809      	bhi.n	a910 <hci_cmd_handle+0x50>
    a8fc:	2b01      	cmp	r3, #1
    a8fe:	d014      	beq.n	a92a <hci_cmd_handle+0x6a>
    a900:	2b03      	cmp	r3, #3
    a902:	d024      	beq.n	a94e <hci_cmd_handle+0x8e>
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
    a904:	2101      	movs	r1, #1
    a906:	a80d      	add	r0, sp, #52	; 0x34
    a908:	f7ff fe9c 	bl	a644 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    a90c:	2301      	movs	r3, #1
    a90e:	e03d      	b.n	a98c <hci_cmd_handle+0xcc>
	switch (BT_OGF(_opcode)) {
    a910:	2b08      	cmp	r3, #8
    a912:	f000 8139 	beq.w	ab88 <hci_cmd_handle+0x2c8>
    a916:	2b3f      	cmp	r3, #63	; 0x3f
    a918:	d1f4      	bne.n	a904 <hci_cmd_handle+0x44>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    a91a:	aa0d      	add	r2, sp, #52	; 0x34
    a91c:	4621      	mov	r1, r4
    a91e:	4628      	mov	r0, r5
    a920:	f7ff feb4 	bl	a68c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    a924:	3016      	adds	r0, #22
    a926:	d0ed      	beq.n	a904 <hci_cmd_handle+0x44>
    a928:	e04a      	b.n	a9c0 <hci_cmd_handle+0x100>
	switch (ocf) {
    a92a:	2d06      	cmp	r5, #6
    a92c:	d006      	beq.n	a93c <hci_cmd_handle+0x7c>
    a92e:	2d1d      	cmp	r5, #29
    a930:	d1e8      	bne.n	a904 <hci_cmd_handle+0x44>
	handle = sys_le16_to_cpu(cmd->handle);
    a932:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    a934:	8818      	ldrh	r0, [r3, #0]
    a936:	f00b facd 	bl	15ed4 <ll_version_ind_send>
    a93a:	e004      	b.n	a946 <hci_cmd_handle+0x86>
		disconnect(cmd, evt);
    a93c:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    a93e:	7899      	ldrb	r1, [r3, #2]
    a940:	8818      	ldrh	r0, [r3, #0]
    a942:	f00b fadd 	bl	15f00 <ll_terminate_ind_send>
	*evt = cmd_status(status);
    a946:	f7ff fe0b 	bl	a560 <cmd_status>
    a94a:	900d      	str	r0, [sp, #52]	; 0x34
    a94c:	e038      	b.n	a9c0 <hci_cmd_handle+0x100>
	switch (ocf) {
    a94e:	2d2d      	cmp	r5, #45	; 0x2d
    a950:	d038      	beq.n	a9c4 <hci_cmd_handle+0x104>
    a952:	d81d      	bhi.n	a990 <hci_cmd_handle+0xd0>
    a954:	2d01      	cmp	r5, #1
    a956:	d028      	beq.n	a9aa <hci_cmd_handle+0xea>
    a958:	2d03      	cmp	r5, #3
    a95a:	d1d3      	bne.n	a904 <hci_cmd_handle+0x44>
	event_mask = DEFAULT_EVENT_MASK;
    a95c:	4b87      	ldr	r3, [pc, #540]	; (ab7c <hci_cmd_handle+0x2bc>)
    a95e:	f04f 30ff 	mov.w	r0, #4294967295
    a962:	f641 71ff 	movw	r1, #8191	; 0x1fff
    a966:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a96a:	4b85      	ldr	r3, [pc, #532]	; (ab80 <hci_cmd_handle+0x2c0>)
    a96c:	2000      	movs	r0, #0
    a96e:	2100      	movs	r1, #0
    a970:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a974:	4b83      	ldr	r3, [pc, #524]	; (ab84 <hci_cmd_handle+0x2c4>)
    a976:	201f      	movs	r0, #31
    a978:	2100      	movs	r1, #0
    a97a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    a97e:	f003 fa1d 	bl	ddbc <ll_reset>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    a982:	2101      	movs	r1, #1
    a984:	a80d      	add	r0, sp, #52	; 0x34
    a986:	f7ff fe5d 	bl	a644 <hci_cmd_complete>
	ccst->status = 0x00;
    a98a:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    a98c:	7003      	strb	r3, [r0, #0]
    a98e:	e017      	b.n	a9c0 <hci_cmd_handle+0x100>
	switch (ocf) {
    a990:	2d7b      	cmp	r5, #123	; 0x7b
    a992:	d029      	beq.n	a9e8 <hci_cmd_handle+0x128>
    a994:	2d7c      	cmp	r5, #124	; 0x7c
    a996:	d03a      	beq.n	aa0e <hci_cmd_handle+0x14e>
    a998:	2d63      	cmp	r5, #99	; 0x63
    a99a:	d1b3      	bne.n	a904 <hci_cmd_handle+0x44>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    a99c:	68a0      	ldr	r0, [r4, #8]
    a99e:	f00a ffe7 	bl	15970 <sys_get_le64>
    a9a2:	4b77      	ldr	r3, [pc, #476]	; (ab80 <hci_cmd_handle+0x2c0>)
	le_event_mask = sys_get_le64(cmd->events);
    a9a4:	e9c3 0100 	strd	r0, r1, [r3]
    a9a8:	e7eb      	b.n	a982 <hci_cmd_handle+0xc2>
	event_mask = sys_get_le64(cmd->events);
    a9aa:	68a0      	ldr	r0, [r4, #8]
    a9ac:	f00a ffe0 	bl	15970 <sys_get_le64>
    a9b0:	4b72      	ldr	r3, [pc, #456]	; (ab7c <hci_cmd_handle+0x2bc>)
    a9b2:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    a9b6:	4629      	mov	r1, r5
    a9b8:	a80d      	add	r0, sp, #52	; 0x34
    a9ba:	f7ff fe43 	bl	a644 <hci_cmd_complete>
	ccst->status = 0x00;
    a9be:	7006      	strb	r6, [r0, #0]
	return evt;
    a9c0:	980d      	ldr	r0, [sp, #52]	; 0x34
    a9c2:	e786      	b.n	a8d2 <hci_cmd_handle+0x12>
		read_tx_power_level(cmd, evt);
    a9c4:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9c6:	2104      	movs	r1, #4
    a9c8:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    a9ca:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    a9cc:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9ce:	f7ff fe39 	bl	a644 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    a9d2:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9d4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    a9d6:	1cc2      	adds	r2, r0, #3
    a9d8:	4639      	mov	r1, r7
    a9da:	4630      	mov	r0, r6
    a9dc:	f00b faa6 	bl	15f2c <ll_tx_pwr_lvl_get>
	rp->status = status;
    a9e0:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    a9e2:	f8a4 5001 	strh.w	r5, [r4, #1]
    a9e6:	e7eb      	b.n	a9c0 <hci_cmd_handle+0x100>
	handle = sys_le16_to_cpu(cmd->handle);
    a9e8:	68a3      	ldr	r3, [r4, #8]
    a9ea:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    a9ec:	a90e      	add	r1, sp, #56	; 0x38
    a9ee:	4620      	mov	r0, r4
    a9f0:	f00b faa6 	bl	15f40 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9f4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    a9f6:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9f8:	a80d      	add	r0, sp, #52	; 0x34
    a9fa:	f7ff fe23 	bl	a644 <hci_cmd_complete>
	rp->status = status;
    a9fe:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    aa00:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    aa04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    aa08:	f8a0 3003 	strh.w	r3, [r0, #3]
    aa0c:	e7d8      	b.n	a9c0 <hci_cmd_handle+0x100>
		write_auth_payload_timeout(cmd, evt);
    aa0e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    aa10:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    aa12:	8859      	ldrh	r1, [r3, #2]
    aa14:	4620      	mov	r0, r4
    aa16:	f00b faa7 	bl	15f68 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    aa1a:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa1c:	2103      	movs	r1, #3
    aa1e:	a80d      	add	r0, sp, #52	; 0x34
    aa20:	f7ff fe10 	bl	a644 <hci_cmd_complete>
	rp->status = status;
    aa24:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    aa26:	f8a0 4001 	strh.w	r4, [r0, #1]
    aa2a:	e7c9      	b.n	a9c0 <hci_cmd_handle+0x100>
	switch (ocf) {
    aa2c:	3d01      	subs	r5, #1
    aa2e:	2d08      	cmp	r5, #8
    aa30:	f63f af68 	bhi.w	a904 <hci_cmd_handle+0x44>
    aa34:	a301      	add	r3, pc, #4	; (adr r3, aa3c <hci_cmd_handle+0x17c>)
    aa36:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    aa3a:	bf00      	nop
    aa3c:	0000aa61 	.word	0x0000aa61
    aa40:	0000aa8b 	.word	0x0000aa8b
    aa44:	0000ab43 	.word	0x0000ab43
    aa48:	0000a905 	.word	0x0000a905
    aa4c:	0000a905 	.word	0x0000a905
    aa50:	0000a905 	.word	0x0000a905
    aa54:	0000a905 	.word	0x0000a905
    aa58:	0000a905 	.word	0x0000a905
    aa5c:	0000ab5f 	.word	0x0000ab5f
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa60:	2109      	movs	r1, #9
    aa62:	a80d      	add	r0, sp, #52	; 0x34
    aa64:	f7ff fdee 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    aa68:	2300      	movs	r3, #0
    aa6a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    aa6c:	7083      	strb	r3, [r0, #2]
    aa6e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    aa70:	f06f 030e 	mvn.w	r3, #14
    aa74:	7143      	strb	r3, [r0, #5]
    aa76:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    aa78:	220a      	movs	r2, #10
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    aa7a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    aa7c:	f04f 33ff 	mov.w	r3, #4294967295
	rp->hci_version = LL_VERSION_NUMBER;
    aa80:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    aa82:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    aa84:	71c3      	strb	r3, [r0, #7]
    aa86:	7203      	strb	r3, [r0, #8]
    aa88:	e79a      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa8a:	2141      	movs	r1, #65	; 0x41
    aa8c:	a80d      	add	r0, sp, #52	; 0x34
    aa8e:	f7ff fdd9 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    aa92:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa94:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    aa96:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    aa98:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    aa9c:	f008 fd0f 	bl	134be <memset>
	rp->commands[2] |= BIT(7);
    aaa0:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[28] |= BIT(3);
    aaa2:	7f62      	ldrb	r2, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    aaa4:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    aaa6:	7ea0      	ldrb	r0, [r4, #26]
	rp->commands[2] |= BIT(7);
    aaa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aaac:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    aaae:	79a3      	ldrb	r3, [r4, #6]
    aab0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    aab4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    aab6:	7ae3      	ldrb	r3, [r4, #11]
    aab8:	f043 0304 	orr.w	r3, r3, #4
    aabc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    aabe:	7be3      	ldrb	r3, [r4, #15]
    aac0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    aac4:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    aac6:	7c23      	ldrb	r3, [r4, #16]
    aac8:	f043 0302 	orr.w	r3, r3, #2
    aacc:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    aace:	7de3      	ldrb	r3, [r4, #23]
    aad0:	f043 0304 	orr.w	r3, r3, #4
    aad4:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    aad6:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[28] |= BIT(1) | BIT(2);
    aad8:	f042 020e 	orr.w	r2, r2, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    aadc:	f063 0308 	orn	r3, r3, #8
	rp->commands[28] |= BIT(1) | BIT(2);
    aae0:	7762      	strb	r2, [r4, #29]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    aae2:	7723      	strb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
    aae4:	7862      	ldrb	r2, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    aae6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    aaea:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[33] |= BIT(6) | BIT(7);
    aaee:	f063 030f 	orn	r3, r3, #15
	rp->commands[0] |= BIT(5);
    aaf2:	7062      	strb	r2, [r4, #1]
	rp->commands[33] |= BIT(6) | BIT(7);
    aaf4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    aaf8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(3);
    aafc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    ab00:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ab04:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    ab08:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ab0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ab10:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    ab14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ab18:	f060 0008 	orn	r0, r0, #8
	rp->commands[39] |= BIT(2);
    ab1c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[26] |= BIT(0) | BIT(1);
    ab20:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ab24:	f062 0206 	orn	r2, r2, #6
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ab28:	76a0      	strb	r0, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    ab2a:	76e1      	strb	r1, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ab2c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    ab30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    ab34:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    ab38:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab3c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    ab40:	e73e      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab42:	2109      	movs	r1, #9
    ab44:	a80d      	add	r0, sp, #52	; 0x34
    ab46:	f7ff fd7d 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ab4a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab4c:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ab4e:	2208      	movs	r2, #8
	rp->status = 0x00;
    ab50:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ab54:	f008 fcb3 	bl	134be <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    ab58:	2360      	movs	r3, #96	; 0x60
    ab5a:	7163      	strb	r3, [r4, #5]
    ab5c:	e730      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab5e:	2107      	movs	r1, #7
    ab60:	a80d      	add	r0, sp, #52	; 0x34
    ab62:	f7ff fd6f 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ab66:	4601      	mov	r1, r0
    ab68:	2300      	movs	r3, #0
    ab6a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    ab6e:	4618      	mov	r0, r3
    ab70:	f7ff fbcc 	bl	a30c <ll_addr_get>
    ab74:	e724      	b.n	a9c0 <hci_cmd_handle+0x100>
    ab76:	bf00      	nop
    ab78:	20002070 	.word	0x20002070
    ab7c:	20004f70 	.word	0x20004f70
    ab80:	20000000 	.word	0x20000000
    ab84:	20004f78 	.word	0x20004f78
	switch (ocf) {
    ab88:	3d01      	subs	r5, #1
    ab8a:	2d4d      	cmp	r5, #77	; 0x4d
    ab8c:	f63f aeba 	bhi.w	a904 <hci_cmd_handle+0x44>
    ab90:	a301      	add	r3, pc, #4	; (adr r3, ab98 <hci_cmd_handle+0x2d8>)
    ab92:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    ab96:	bf00      	nop
    ab98:	0000acd1 	.word	0x0000acd1
    ab9c:	0000acdb 	.word	0x0000acdb
    aba0:	0000acf3 	.word	0x0000acf3
    aba4:	0000a905 	.word	0x0000a905
    aba8:	0000ad17 	.word	0x0000ad17
    abac:	0000adc5 	.word	0x0000adc5
    abb0:	0000adf5 	.word	0x0000adf5
    abb4:	0000ae05 	.word	0x0000ae05
    abb8:	0000ae13 	.word	0x0000ae13
    abbc:	0000ae21 	.word	0x0000ae21
    abc0:	0000a905 	.word	0x0000a905
    abc4:	0000a905 	.word	0x0000a905
    abc8:	0000a905 	.word	0x0000a905
    abcc:	0000a905 	.word	0x0000a905
    abd0:	0000ad2d 	.word	0x0000ad2d
    abd4:	0000ad43 	.word	0x0000ad43
    abd8:	0000ad55 	.word	0x0000ad55
    abdc:	0000ad5d 	.word	0x0000ad5d
    abe0:	0000ae6b 	.word	0x0000ae6b
    abe4:	0000a905 	.word	0x0000a905
    abe8:	0000ae47 	.word	0x0000ae47
    abec:	0000ae61 	.word	0x0000ae61
    abf0:	0000ad65 	.word	0x0000ad65
    abf4:	0000ad8b 	.word	0x0000ad8b
    abf8:	0000a905 	.word	0x0000a905
    abfc:	0000ae2d 	.word	0x0000ae2d
    ac00:	0000ae3d 	.word	0x0000ae3d
    ac04:	0000ada1 	.word	0x0000ada1
    ac08:	0000a905 	.word	0x0000a905
    ac0c:	0000a905 	.word	0x0000a905
    ac10:	0000a905 	.word	0x0000a905
    ac14:	0000ae87 	.word	0x0000ae87
    ac18:	0000aea5 	.word	0x0000aea5
    ac1c:	0000aeb5 	.word	0x0000aeb5
    ac20:	0000aec5 	.word	0x0000aec5
    ac24:	0000aedd 	.word	0x0000aedd
    ac28:	0000a905 	.word	0x0000a905
    ac2c:	0000a905 	.word	0x0000a905
    ac30:	0000afc3 	.word	0x0000afc3
    ac34:	0000afd1 	.word	0x0000afd1
    ac38:	0000afe1 	.word	0x0000afe1
    ac3c:	0000aff1 	.word	0x0000aff1
    ac40:	0000b003 	.word	0x0000b003
    ac44:	0000b021 	.word	0x0000b021
    ac48:	0000b03f 	.word	0x0000b03f
    ac4c:	0000b055 	.word	0x0000b055
    ac50:	0000aee9 	.word	0x0000aee9
    ac54:	0000af01 	.word	0x0000af01
    ac58:	0000af4f 	.word	0x0000af4f
    ac5c:	0000af6d 	.word	0x0000af6d
    ac60:	0000a905 	.word	0x0000a905
    ac64:	0000a905 	.word	0x0000a905
    ac68:	0000a905 	.word	0x0000a905
    ac6c:	0000a905 	.word	0x0000a905
    ac70:	0000a905 	.word	0x0000a905
    ac74:	0000a905 	.word	0x0000a905
    ac78:	0000a905 	.word	0x0000a905
    ac7c:	0000a905 	.word	0x0000a905
    ac80:	0000a905 	.word	0x0000a905
    ac84:	0000a905 	.word	0x0000a905
    ac88:	0000a905 	.word	0x0000a905
    ac8c:	0000a905 	.word	0x0000a905
    ac90:	0000a905 	.word	0x0000a905
    ac94:	0000a905 	.word	0x0000a905
    ac98:	0000a905 	.word	0x0000a905
    ac9c:	0000a905 	.word	0x0000a905
    aca0:	0000a905 	.word	0x0000a905
    aca4:	0000a905 	.word	0x0000a905
    aca8:	0000a905 	.word	0x0000a905
    acac:	0000a905 	.word	0x0000a905
    acb0:	0000a905 	.word	0x0000a905
    acb4:	0000a905 	.word	0x0000a905
    acb8:	0000a905 	.word	0x0000a905
    acbc:	0000a905 	.word	0x0000a905
    acc0:	0000b069 	.word	0x0000b069
    acc4:	0000a905 	.word	0x0000a905
    acc8:	0000a905 	.word	0x0000a905
    accc:	0000b05f 	.word	0x0000b05f
	le_event_mask = sys_get_le64(cmd->events);
    acd0:	68a0      	ldr	r0, [r4, #8]
    acd2:	f00a fe4d 	bl	15970 <sys_get_le64>
    acd6:	4bc0      	ldr	r3, [pc, #768]	; (afd8 <hci_cmd_handle+0x718>)
    acd8:	e664      	b.n	a9a4 <hci_cmd_handle+0xe4>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    acda:	2104      	movs	r1, #4
    acdc:	a80d      	add	r0, sp, #52	; 0x34
    acde:	f7ff fcb1 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ace2:	2300      	movs	r3, #0
    ace4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    ace6:	221b      	movs	r2, #27
    ace8:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    acea:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    acec:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    acee:	70c3      	strb	r3, [r0, #3]
    acf0:	e666      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    acf2:	2109      	movs	r1, #9
    acf4:	a80d      	add	r0, sp, #52	; 0x34
    acf6:	f7ff fca5 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    acfa:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    acfc:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    acfe:	2208      	movs	r2, #8
	rp->status = 0x00;
    ad00:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ad04:	f008 fbdb 	bl	134be <memset>
	rp->features[0] = LL_FEAT & 0xFF;
    ad08:	237f      	movs	r3, #127	; 0x7f
    ad0a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
    ad0c:	2341      	movs	r3, #65	; 0x41
    ad0e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    ad10:	2301      	movs	r3, #1
    ad12:	70e3      	strb	r3, [r4, #3]
    ad14:	e654      	b.n	a9c0 <hci_cmd_handle+0x100>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    ad16:	68a1      	ldr	r1, [r4, #8]
    ad18:	2001      	movs	r0, #1
    ad1a:	f7ff fb11 	bl	a340 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    ad1e:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    ad20:	2101      	movs	r1, #1
    ad22:	a80d      	add	r0, sp, #52	; 0x34
    ad24:	f7ff fc8e 	bl	a644 <hci_cmd_complete>
	ccst->status = status;
    ad28:	7004      	strb	r4, [r0, #0]
    ad2a:	e649      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad2c:	2102      	movs	r1, #2
    ad2e:	a80d      	add	r0, sp, #52	; 0x34
    ad30:	f7ff fc88 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ad34:	2300      	movs	r3, #0
    ad36:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad38:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    ad3a:	f00b fa60 	bl	161fe <ll_wl_size_get>
    ad3e:	7060      	strb	r0, [r4, #1]
    ad40:	e63e      	b.n	a9c0 <hci_cmd_handle+0x100>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    ad42:	2101      	movs	r1, #1
    ad44:	a80d      	add	r0, sp, #52	; 0x34
    ad46:	f7ff fc7d 	bl	a644 <hci_cmd_complete>
    ad4a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    ad4c:	f003 fe2a 	bl	e9a4 <ll_wl_clear>
	ccst->status = ll_rl_clear();
    ad50:	7020      	strb	r0, [r4, #0]
    ad52:	e635      	b.n	a9c0 <hci_cmd_handle+0x100>
	status = ll_wl_add(&cmd->addr);
    ad54:	68a0      	ldr	r0, [r4, #8]
    ad56:	f003 fef1 	bl	eb3c <ll_wl_add>
    ad5a:	e7e0      	b.n	ad1e <hci_cmd_handle+0x45e>
	status = ll_wl_remove(&cmd->addr);
    ad5c:	68a0      	ldr	r0, [r4, #8]
    ad5e:	f003 fe5d 	bl	ea1c <ll_wl_remove>
    ad62:	e7dc      	b.n	ad1e <hci_cmd_handle+0x45e>
		le_encrypt(cmd, evt);
    ad64:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    ad66:	aa0e      	add	r2, sp, #56	; 0x38
    ad68:	2300      	movs	r3, #0
    ad6a:	f100 0110 	add.w	r1, r0, #16
    ad6e:	f00b fa4a 	bl	16206 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad72:	2111      	movs	r1, #17
    ad74:	a80d      	add	r0, sp, #52	; 0x34
    ad76:	f7ff fc65 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ad7a:	2300      	movs	r3, #0
    ad7c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    ad80:	2210      	movs	r2, #16
    ad82:	a90e      	add	r1, sp, #56	; 0x38
    ad84:	f008 fb6e 	bl	13464 <memcpy>
    ad88:	e61a      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad8a:	2109      	movs	r1, #9
    ad8c:	a80d      	add	r0, sp, #52	; 0x34
    ad8e:	f7ff fc59 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ad92:	2300      	movs	r3, #0
    ad94:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    ad98:	2108      	movs	r1, #8
    ad9a:	f00a fe4b 	bl	15a34 <bt_rand>
    ad9e:	e60f      	b.n	a9c0 <hci_cmd_handle+0x100>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ada0:	2109      	movs	r1, #9
    ada2:	a80d      	add	r0, sp, #52	; 0x34
    ada4:	f7ff fc4e 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    ada8:	4601      	mov	r1, r0
    adaa:	2300      	movs	r3, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adac:	4602      	mov	r2, r0
	rp->status = 0x00;
    adae:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    adb2:	488a      	ldr	r0, [pc, #552]	; (afdc <hci_cmd_handle+0x71c>)
    adb4:	f00a fdd3 	bl	1595e <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    adb8:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    adbc:	1d51      	adds	r1, r2, #5
    adbe:	f00a fdce 	bl	1595e <sys_put_le32>
    adc2:	e5fd      	b.n	a9c0 <hci_cmd_handle+0x100>
		le_set_adv_param(cmd, evt);
    adc4:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    adc6:	2100      	movs	r1, #0
    adc8:	7903      	ldrb	r3, [r0, #4]
    adca:	8802      	ldrh	r2, [r0, #0]
    adcc:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    add0:	e9cd 1107 	strd	r1, r1, [sp, #28]
    add4:	e9cd 1105 	strd	r1, r1, [sp, #20]
    add8:	7b84      	ldrb	r4, [r0, #14]
    adda:	9404      	str	r4, [sp, #16]
    addc:	7b44      	ldrb	r4, [r0, #13]
    adde:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    ade0:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    ade2:	9402      	str	r4, [sp, #8]
    ade4:	7984      	ldrb	r4, [r0, #6]
    ade6:	9401      	str	r4, [sp, #4]
    ade8:	7940      	ldrb	r0, [r0, #5]
    adea:	9000      	str	r0, [sp, #0]
    adec:	4608      	mov	r0, r1
    adee:	f003 faff 	bl	e3f0 <ll_adv_params_set>
    adf2:	e794      	b.n	ad1e <hci_cmd_handle+0x45e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adf4:	2102      	movs	r1, #2
    adf6:	a80d      	add	r0, sp, #52	; 0x34
    adf8:	f7ff fc24 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    adfc:	2300      	movs	r3, #0
    adfe:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    ae00:	7043      	strb	r3, [r0, #1]
    ae02:	e5dd      	b.n	a9c0 <hci_cmd_handle+0x100>
		le_set_adv_data(cmd, evt);
    ae04:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_data_set(0, cmd->len, &cmd->data[0]);
    ae06:	2000      	movs	r0, #0
    ae08:	1c5a      	adds	r2, r3, #1
    ae0a:	7819      	ldrb	r1, [r3, #0]
    ae0c:	f00b f94a 	bl	160a4 <ll_adv_data_set>
    ae10:	e785      	b.n	ad1e <hci_cmd_handle+0x45e>
		le_set_scan_rsp_data(cmd, evt);
    ae12:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_scan_rsp_set(0, cmd->len, &cmd->data[0]);
    ae14:	2000      	movs	r0, #0
    ae16:	1c5a      	adds	r2, r3, #1
    ae18:	7819      	ldrb	r1, [r3, #0]
    ae1a:	f00b f99c 	bl	16156 <ll_adv_scan_rsp_set>
    ae1e:	e77e      	b.n	ad1e <hci_cmd_handle+0x45e>
	status = ll_adv_enable(0, cmd->enable);
    ae20:	68a3      	ldr	r3, [r4, #8]
    ae22:	2000      	movs	r0, #0
    ae24:	7819      	ldrb	r1, [r3, #0]
    ae26:	f003 fc27 	bl	e678 <ll_adv_enable>
    ae2a:	e778      	b.n	ad1e <hci_cmd_handle+0x45e>
	handle = sys_le16_to_cpu(cmd->handle);
    ae2c:	68a2      	ldr	r2, [r4, #8]
    ae2e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    ae32:	2100      	movs	r1, #0
    ae34:	4620      	mov	r0, r4
    ae36:	f00a fff1 	bl	15e1c <ll_start_enc_req_send>
    ae3a:	e5ee      	b.n	aa1a <hci_cmd_handle+0x15a>
	handle = sys_le16_to_cpu(cmd->handle);
    ae3c:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ae3e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    ae40:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ae42:	2106      	movs	r1, #6
    ae44:	e7f6      	b.n	ae34 <hci_cmd_handle+0x574>
	handle = sys_le16_to_cpu(cmd->handle);
    ae46:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae48:	2108      	movs	r1, #8
    ae4a:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    ae4c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae4e:	f7ff fbf9 	bl	a644 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ae52:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae54:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    ae56:	1cc1      	adds	r1, r0, #3
    ae58:	4630      	mov	r0, r6
    ae5a:	f00a ffca 	bl	15df2 <ll_chm_get>
    ae5e:	e5bf      	b.n	a9e0 <hci_cmd_handle+0x120>
	handle = sys_le16_to_cpu(cmd->handle);
    ae60:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    ae62:	8818      	ldrh	r0, [r3, #0]
    ae64:	f00b f820 	bl	15ea8 <ll_feature_req_send>
    ae68:	e56d      	b.n	a946 <hci_cmd_handle+0x86>
		le_conn_update(cmd, evt);
    ae6a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    ae6c:	8911      	ldrh	r1, [r2, #8]
    ae6e:	8853      	ldrh	r3, [r2, #2]
    ae70:	8810      	ldrh	r0, [r2, #0]
    ae72:	9102      	str	r1, [sp, #8]
    ae74:	88d1      	ldrh	r1, [r2, #6]
    ae76:	9101      	str	r1, [sp, #4]
    ae78:	8892      	ldrh	r2, [r2, #4]
    ae7a:	9200      	str	r2, [sp, #0]
    ae7c:	2200      	movs	r2, #0
    ae7e:	4611      	mov	r1, r2
    ae80:	f00a ff3a 	bl	15cf8 <ll_conn_update>
    ae84:	e55f      	b.n	a946 <hci_cmd_handle+0x86>
		le_conn_param_req_reply(cmd, evt);
    ae86:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    ae88:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ae8a:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    ae8c:	8853      	ldrh	r3, [r2, #2]
    ae8e:	9102      	str	r1, [sp, #8]
    ae90:	88d1      	ldrh	r1, [r2, #6]
    ae92:	9101      	str	r1, [sp, #4]
    ae94:	8892      	ldrh	r2, [r2, #4]
    ae96:	9200      	str	r2, [sp, #0]
    ae98:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    ae9a:	2102      	movs	r1, #2
    ae9c:	4620      	mov	r0, r4
    ae9e:	f00a ff2b 	bl	15cf8 <ll_conn_update>
    aea2:	e5ba      	b.n	aa1a <hci_cmd_handle+0x15a>
		le_conn_param_req_neg_reply(cmd, evt);
    aea4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    aea6:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    aea8:	789a      	ldrb	r2, [r3, #2]
    aeaa:	2300      	movs	r3, #0
    aeac:	e9cd 3301 	strd	r3, r3, [sp, #4]
    aeb0:	9300      	str	r3, [sp, #0]
    aeb2:	e7f2      	b.n	ae9a <hci_cmd_handle+0x5da>
		le_set_data_len(cmd, evt);
    aeb4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    aeb6:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    aeb8:	889a      	ldrh	r2, [r3, #4]
    aeba:	8859      	ldrh	r1, [r3, #2]
    aebc:	4620      	mov	r0, r4
    aebe:	f00b f869 	bl	15f94 <ll_length_req_send>
    aec2:	e5aa      	b.n	aa1a <hci_cmd_handle+0x15a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aec4:	2105      	movs	r1, #5
    aec6:	a80d      	add	r0, sp, #52	; 0x34
    aec8:	f7ff fbbc 	bl	a644 <hci_cmd_complete>
    aecc:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    aece:	1cc1      	adds	r1, r0, #3
    aed0:	3001      	adds	r0, #1
    aed2:	f003 f801 	bl	ded8 <ll_length_default_get>
	rp->status = 0x00;
    aed6:	2300      	movs	r3, #0
    aed8:	7023      	strb	r3, [r4, #0]
    aeda:	e571      	b.n	a9c0 <hci_cmd_handle+0x100>
		le_write_default_data_len(cmd, evt);
    aedc:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    aede:	8859      	ldrh	r1, [r3, #2]
    aee0:	8818      	ldrh	r0, [r3, #0]
    aee2:	f003 f803 	bl	deec <ll_length_default_set>
    aee6:	e71a      	b.n	ad1e <hci_cmd_handle+0x45e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aee8:	2109      	movs	r1, #9
    aeea:	a80d      	add	r0, sp, #52	; 0x34
    aeec:	f7ff fbaa 	bl	a644 <hci_cmd_complete>
    aef0:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    aef2:	1dc3      	adds	r3, r0, #7
    aef4:	1d42      	adds	r2, r0, #5
    aef6:	1cc1      	adds	r1, r0, #3
    aef8:	3001      	adds	r0, #1
    aefa:	f00b f870 	bl	15fde <ll_length_max_get>
    aefe:	e7ea      	b.n	aed6 <hci_cmd_handle+0x616>
	handle = sys_le16_to_cpu(cmd->handle);
    af00:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    af02:	2105      	movs	r1, #5
    af04:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    af06:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    af08:	f7ff fb9c 	bl	a644 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    af0c:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    af0e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    af10:	1d02      	adds	r2, r0, #4
    af12:	1cc1      	adds	r1, r0, #3
    af14:	4630      	mov	r0, r6
    af16:	f00b f86b 	bl	15ff0 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    af1a:	78e2      	ldrb	r2, [r4, #3]
	rp->status = status;
    af1c:	7020      	strb	r0, [r4, #0]
    af1e:	2a00      	cmp	r2, #0
    af20:	fa92 f3a2 	rbit	r3, r2
    af24:	fab3 f383 	clz	r3, r3
    af28:	7922      	ldrb	r2, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
    af2a:	f8a4 5001 	strh.w	r5, [r4, #1]
    af2e:	bf08      	it	eq
    af30:	f04f 33ff 	moveq.w	r3, #4294967295
    af34:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    af36:	70e3      	strb	r3, [r4, #3]
    af38:	2a00      	cmp	r2, #0
    af3a:	fa92 f3a2 	rbit	r3, r2
    af3e:	fab3 f383 	clz	r3, r3
    af42:	bf08      	it	eq
    af44:	f04f 33ff 	moveq.w	r3, #4294967295
    af48:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    af4a:	7123      	strb	r3, [r4, #4]
    af4c:	e538      	b.n	a9c0 <hci_cmd_handle+0x100>
		le_set_default_phy(cmd, evt);
    af4e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    af50:	781a      	ldrb	r2, [r3, #0]
    af52:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    af54:	bf44      	itt	mi
    af56:	2107      	movmi	r1, #7
    af58:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    af5a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    af5c:	bf44      	itt	mi
    af5e:	2207      	movmi	r2, #7
    af60:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    af62:	7899      	ldrb	r1, [r3, #2]
    af64:	7858      	ldrb	r0, [r3, #1]
    af66:	f002 ffcb 	bl	df00 <ll_phy_default_set>
    af6a:	e6d8      	b.n	ad1e <hci_cmd_handle+0x45e>
		le_set_phy(cmd, evt);
    af6c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    af6e:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    af70:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    af72:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    af76:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
    af78:	bf42      	ittt	mi
    af7a:	78da      	ldrbmi	r2, [r3, #3]
    af7c:	f042 0203 	orrmi.w	r2, r2, #3
    af80:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    af82:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
    af84:	bf48      	it	mi
    af86:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    af88:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
    af8a:	bf44      	itt	mi
    af8c:	f042 0203 	orrmi.w	r2, r2, #3
    af90:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    af92:	791b      	ldrb	r3, [r3, #4]
    af94:	ea41 0203 	orr.w	r2, r1, r3
    af98:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    af9c:	d001      	beq.n	afa2 <hci_cmd_handle+0x6e2>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
    af9e:	2011      	movs	r0, #17
    afa0:	e4d1      	b.n	a946 <hci_cmd_handle+0x86>
	if (!(cmd->tx_phys & 0x07) ||
    afa2:	074d      	lsls	r5, r1, #29
    afa4:	d001      	beq.n	afaa <hci_cmd_handle+0x6ea>
    afa6:	075a      	lsls	r2, r3, #29
    afa8:	d101      	bne.n	afae <hci_cmd_handle+0x6ee>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
    afaa:	2012      	movs	r0, #18
    afac:	e4cb      	b.n	a946 <hci_cmd_handle+0x86>
	if (phy_opts & 0x03) {
    afae:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    afb2:	bf1c      	itt	ne
    afb4:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
    afb8:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    afbc:	f00b f82c 	bl	16018 <ll_phy_req_send>
    afc0:	e4c1      	b.n	a946 <hci_cmd_handle+0x86>
		le_add_dev_to_rl(cmd, evt);
    afc2:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    afc4:	f100 0217 	add.w	r2, r0, #23
    afc8:	1dc1      	adds	r1, r0, #7
    afca:	f004 f843 	bl	f054 <ll_rl_add>
    afce:	e6a6      	b.n	ad1e <hci_cmd_handle+0x45e>
	status = ll_rl_remove(&cmd->peer_id_addr);
    afd0:	68a0      	ldr	r0, [r4, #8]
    afd2:	f004 f8df 	bl	f194 <ll_rl_remove>
    afd6:	e6a2      	b.n	ad1e <hci_cmd_handle+0x45e>
    afd8:	20004f78 	.word	0x20004f78
    afdc:	ec30cc8f 	.word	0xec30cc8f
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    afe0:	2101      	movs	r1, #1
    afe2:	a80d      	add	r0, sp, #52	; 0x34
    afe4:	f7ff fb2e 	bl	a644 <hci_cmd_complete>
    afe8:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    afea:	f003 fff5 	bl	efd8 <ll_rl_clear>
    afee:	e6af      	b.n	ad50 <hci_cmd_handle+0x490>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aff0:	2102      	movs	r1, #2
    aff2:	a80d      	add	r0, sp, #52	; 0x34
    aff4:	f7ff fb26 	bl	a644 <hci_cmd_complete>
    aff8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    affa:	f00b f902 	bl	16202 <ll_rl_size_get>
    affe:	7060      	strb	r0, [r4, #1]
    b000:	e769      	b.n	aed6 <hci_cmd_handle+0x616>
	memcpy(dst, src, sizeof(*dst));
    b002:	2207      	movs	r2, #7
    b004:	68a1      	ldr	r1, [r4, #8]
    b006:	a80e      	add	r0, sp, #56	; 0x38
    b008:	f008 fa2c 	bl	13464 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b00c:	2107      	movs	r1, #7
    b00e:	a80d      	add	r0, sp, #52	; 0x34
    b010:	f7ff fb18 	bl	a644 <hci_cmd_complete>
    b014:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    b016:	1c41      	adds	r1, r0, #1
    b018:	a80e      	add	r0, sp, #56	; 0x38
    b01a:	f004 f947 	bl	f2ac <ll_rl_crpa_get>
    b01e:	e697      	b.n	ad50 <hci_cmd_handle+0x490>
    b020:	2207      	movs	r2, #7
    b022:	68a1      	ldr	r1, [r4, #8]
    b024:	a80e      	add	r0, sp, #56	; 0x38
    b026:	f008 fa1d 	bl	13464 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b02a:	2107      	movs	r1, #7
    b02c:	a80d      	add	r0, sp, #52	; 0x34
    b02e:	f7ff fb09 	bl	a644 <hci_cmd_complete>
    b032:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    b034:	1c41      	adds	r1, r0, #1
    b036:	a80e      	add	r0, sp, #56	; 0x38
    b038:	f004 f958 	bl	f2ec <ll_rl_lrpa_get>
    b03c:	e688      	b.n	ad50 <hci_cmd_handle+0x490>
	u8_t enable = cmd->enable;
    b03e:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b040:	2101      	movs	r1, #1
    b042:	a80d      	add	r0, sp, #52	; 0x34
	u8_t enable = cmd->enable;
    b044:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b046:	f7ff fafd 	bl	a644 <hci_cmd_complete>
    b04a:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    b04c:	4628      	mov	r0, r5
    b04e:	f004 f965 	bl	f31c <ll_rl_enable>
    b052:	e67d      	b.n	ad50 <hci_cmd_handle+0x490>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    b054:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    b056:	8818      	ldrh	r0, [r3, #0]
    b058:	f004 f976 	bl	f348 <ll_rl_timeout_set>
    b05c:	e491      	b.n	a982 <hci_cmd_handle+0xc2>
		le_set_privacy_mode(cmd, evt);
    b05e:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    b060:	79c1      	ldrb	r1, [r0, #7]
    b062:	f004 f979 	bl	f358 <ll_priv_mode_set>
    b066:	e65a      	b.n	ad1e <hci_cmd_handle+0x45e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b068:	2103      	movs	r1, #3
    b06a:	a80d      	add	r0, sp, #52	; 0x34
    b06c:	f7ff faea 	bl	a644 <hci_cmd_complete>
	rp->status = 0x00;
    b070:	4601      	mov	r1, r0
    b072:	2300      	movs	r3, #0
    b074:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    b078:	3001      	adds	r0, #1
    b07a:	f00a fc6c 	bl	15956 <ll_tx_pwr_get>
    b07e:	e49f      	b.n	a9c0 <hci_cmd_handle+0x100>

0000b080 <hci_acl_handle>:
{
    b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    b084:	2300      	movs	r3, #0
    b086:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    b088:	8983      	ldrh	r3, [r0, #12]
    b08a:	2b03      	cmp	r3, #3
{
    b08c:	4606      	mov	r6, r0
    b08e:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    b090:	d803      	bhi.n	b09a <hci_acl_handle+0x1a>
		return -EINVAL;
    b092:	f06f 0015 	mvn.w	r0, #21
}
    b096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    b09a:	2104      	movs	r1, #4
    b09c:	3008      	adds	r0, #8
    b09e:	f00b f990 	bl	163c2 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    b0a2:	89b3      	ldrh	r3, [r6, #12]
	len = sys_le16_to_cpu(acl->len);
    b0a4:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b0a6:	8805      	ldrh	r5, [r0, #0]
	if (buf->len < len) {
    b0a8:	42bb      	cmp	r3, r7
    b0aa:	d3f2      	bcc.n	b092 <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    b0ac:	f002 fff2 	bl	e094 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    b0b0:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    b0b4:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    b0b6:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    b0ba:	b9f0      	cbnz	r0, b0fa <hci_acl_handle+0x7a>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    b0bc:	4b1d      	ldr	r3, [pc, #116]	; (b134 <hci_acl_handle+0xb4>)
    b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0c2:	2100      	movs	r1, #0
    b0c4:	f002 7000 	and.w	r0, r2, #33554432	; 0x2000000
    b0c8:	ea50 0301 	orrs.w	r3, r0, r1
    b0cc:	d012      	beq.n	b0f4 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b0ce:	f04f 31ff 	mov.w	r1, #4294967295
    b0d2:	2001      	movs	r0, #1
    b0d4:	f7fb fd5e 	bl	6b94 <bt_buf_get_rx>
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    b0d8:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b0da:	f8c8 0000 	str.w	r0, [r8]
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    b0de:	211a      	movs	r1, #26
    b0e0:	f00a fc4a 	bl	15978 <hci_evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    b0e4:	f8d8 0000 	ldr.w	r0, [r8]
    b0e8:	2101      	movs	r1, #1
    b0ea:	3008      	adds	r0, #8
    b0ec:	f00b f942 	bl	16374 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    b0f0:	2301      	movs	r3, #1
    b0f2:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    b0f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    b0f8:	e7cd      	b.n	b096 <hci_acl_handle+0x16>
    b0fa:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    b0fc:	f1b9 0f00 	cmp.w	r9, #0
    b100:	d002      	beq.n	b108 <hci_acl_handle+0x88>
    b102:	f1b9 0f02 	cmp.w	r9, #2
    b106:	d113      	bne.n	b130 <hci_acl_handle+0xb0>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b108:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b10a:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
    b10e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b110:	68b1      	ldr	r1, [r6, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b112:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b114:	463a      	mov	r2, r7
    b116:	1de0      	adds	r0, r4, #7
    b118:	f008 f9a4 	bl	13464 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    b11c:	4621      	mov	r1, r4
    b11e:	4628      	mov	r0, r5
    b120:	f002 ffc4 	bl	e0ac <ll_tx_mem_enqueue>
    b124:	2800      	cmp	r0, #0
    b126:	d0b6      	beq.n	b096 <hci_acl_handle+0x16>
		ll_tx_mem_release(node_tx);
    b128:	4620      	mov	r0, r4
    b12a:	f002 ffb9 	bl	e0a0 <ll_tx_mem_release>
    b12e:	e7b0      	b.n	b092 <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b130:	2201      	movs	r2, #1
    b132:	e7ea      	b.n	b10a <hci_acl_handle+0x8a>
    b134:	20004f70 	.word	0x20004f70

0000b138 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b138:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	pdu_data = (void *)node_rx->pdu;
#else
	pdu_data = (void *)((struct radio_pdu_node_rx *)node_rx)->pdu_data;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b13c:	7903      	ldrb	r3, [r0, #4]
    b13e:	88c6      	ldrh	r6, [r0, #6]
    b140:	2b02      	cmp	r3, #2
{
    b142:	b086      	sub	sp, #24
    b144:	4604      	mov	r4, r0
    b146:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b148:	f000 817f 	beq.w	b44a <hci_evt_encode+0x312>
	switch (node_rx->hdr.type) {
    b14c:	3b07      	subs	r3, #7
    b14e:	2b07      	cmp	r3, #7
    b150:	f200 8243 	bhi.w	b5da <hci_evt_encode+0x4a2>
    b154:	e8df f013 	tbh	[pc, r3, lsl #1]
    b158:	00390008 	.word	0x00390008
    b15c:	00d200b3 	.word	0x00d200b3
    b160:	011200f9 	.word	0x011200f9
    b164:	01450128 	.word	0x01450128
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b168:	4bc0      	ldr	r3, [pc, #768]	; (b46c <hci_evt_encode+0x334>)
    b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b16e:	f100 060a 	add.w	r6, r0, #10
    b172:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b176:	2000      	movs	r0, #0
    b178:	ea50 0301 	orrs.w	r3, r0, r1
    b17c:	d008      	beq.n	b190 <hci_evt_encode+0x58>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    b17e:	4bbc      	ldr	r3, [pc, #752]	; (b470 <hci_evt_encode+0x338>)
    b180:	e9d3 2300 	ldrd	r2, r3, [r3]
    b184:	2100      	movs	r1, #0
    b186:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b18a:	ea50 0301 	orrs.w	r3, r0, r1
    b18e:	d10d      	bne.n	b1ac <hci_evt_encode+0x74>
		addr.type = adv->tx_addr;
    b190:	7a23      	ldrb	r3, [r4, #8]
    b192:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b196:	f88d 3010 	strb.w	r3, [sp, #16]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    b19a:	2206      	movs	r2, #6
    b19c:	4631      	mov	r1, r6
    b19e:	f10d 0011 	add.w	r0, sp, #17
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    b1a2:	f008 f95f 	bl	13464 <memcpy>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b1a6:	b006      	add	sp, #24
    b1a8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    b1ac:	2208      	movs	r2, #8
    b1ae:	2113      	movs	r1, #19
    b1b0:	4628      	mov	r0, r5
    b1b2:	f00a fbeb 	bl	1598c <meta_evt>
	sep->handle = 0U;
    b1b6:	2300      	movs	r3, #0
    b1b8:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    b1ba:	7a23      	ldrb	r3, [r4, #8]
    b1bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b1c0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    b1c2:	2206      	movs	r2, #6
    b1c4:	4631      	mov	r1, r6
    b1c6:	3002      	adds	r0, #2
    b1c8:	e7eb      	b.n	b1a2 <hci_evt_encode+0x6a>
	u8_t status = node_rx->status;
    b1ca:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
    b1cc:	b93f      	cbnz	r7, b1de <hci_evt_encode+0xa6>
		ll_rl_crpa_set(node_rx->peer_addr_type,
    b1ce:	f100 0311 	add.w	r3, r0, #17
    b1d2:	f100 010b 	add.w	r1, r0, #11
    b1d6:	22ff      	movs	r2, #255	; 0xff
    b1d8:	7a80      	ldrb	r0, [r0, #10]
    b1da:	f004 f845 	bl	f268 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b1de:	4ba3      	ldr	r3, [pc, #652]	; (b46c <hci_evt_encode+0x334>)
    b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1e4:	2000      	movs	r0, #0
    b1e6:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b1ea:	ea50 0301 	orrs.w	r3, r0, r1
    b1ee:	d0da      	beq.n	b1a6 <hci_evt_encode+0x6e>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b1f0:	4b9f      	ldr	r3, [pc, #636]	; (b470 <hci_evt_encode+0x338>)
    b1f2:	e9d3 bc00 	ldrd	fp, ip, [r3]
    b1f6:	f240 2001 	movw	r0, #513	; 0x201
    b1fa:	2100      	movs	r1, #0
    b1fc:	ea0b 0200 	and.w	r2, fp, r0
    b200:	ea0c 0301 	and.w	r3, ip, r1
    b204:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    b206:	f40b 7800 	and.w	r8, fp, #512	; 0x200
    b20a:	f04f 0900 	mov.w	r9, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b20e:	d0ca      	beq.n	b1a6 <hci_evt_encode+0x6e>
	if (!status) {
    b210:	2f00      	cmp	r7, #0
    b212:	f040 81e8 	bne.w	b5e6 <hci_evt_encode+0x4ae>
		conn_count++;
    b216:	4a97      	ldr	r2, [pc, #604]	; (b474 <hci_evt_encode+0x33c>)
    b218:	6813      	ldr	r3, [r2, #0]
    b21a:	3301      	adds	r3, #1
    b21c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b21e:	ea58 0309 	orrs.w	r3, r8, r9
    b222:	f104 080b 	add.w	r8, r4, #11
    b226:	f040 81ea 	bne.w	b5fe <hci_evt_encode+0x4c6>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b22a:	2212      	movs	r2, #18
    b22c:	2101      	movs	r1, #1
    b22e:	4628      	mov	r0, r5
    b230:	f00a fbac 	bl	1598c <meta_evt>
	lecc->status = 0x00;
    b234:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    b236:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
    b23a:	7a63      	ldrb	r3, [r4, #9]
    b23c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
    b23e:	7aa3      	ldrb	r3, [r4, #10]
    b240:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b242:	4605      	mov	r5, r0
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    b244:	2206      	movs	r2, #6
    b246:	4641      	mov	r1, r8
    b248:	3005      	adds	r0, #5
    b24a:	f008 f90b 	bl	13464 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    b24e:	8be3      	ldrh	r3, [r4, #30]
    b250:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
    b254:	8c23      	ldrh	r3, [r4, #32]
    b256:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    b25a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b25c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
    b260:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    b264:	746b      	strb	r3, [r5, #17]
    b266:	e79e      	b.n	b1a6 <hci_evt_encode+0x6e>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b268:	221e      	movs	r2, #30
    b26a:	210a      	movs	r1, #10
    b26c:	4628      	mov	r0, r5
    b26e:	f00a fb8d 	bl	1598c <meta_evt>
			(void)memset(leecc, 0x00, sizeof(*leecc));
    b272:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b274:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b276:	2100      	movs	r1, #0
    b278:	f008 f921 	bl	134be <memset>
		lecc->status = status;
    b27c:	7027      	strb	r7, [r4, #0]
    b27e:	e792      	b.n	b1a6 <hci_evt_encode+0x6e>
		if ((node_rx->own_addr_type) &&
    b280:	7f63      	ldrb	r3, [r4, #29]
    b282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b286:	2b40      	cmp	r3, #64	; 0x40
    b288:	f040 81d1 	bne.w	b62e <hci_evt_encode+0x4f6>
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
    b28c:	2206      	movs	r2, #6
    b28e:	f104 0118 	add.w	r1, r4, #24
    b292:	f008 f8e7 	bl	13464 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
    b296:	2206      	movs	r2, #6
    b298:	f104 0111 	add.w	r1, r4, #17
    b29c:	f105 0011 	add.w	r0, r5, #17
    b2a0:	f008 f8e0 	bl	13464 <memcpy>
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    b2a4:	8be3      	ldrh	r3, [r4, #30]
    b2a6:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
    b2aa:	8c23      	ldrh	r3, [r4, #32]
    b2ac:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    b2b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b2b2:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = node_rx->sca;
    b2b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    b2ba:	776b      	strb	r3, [r5, #29]
    b2bc:	e773      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b2be:	4b6b      	ldr	r3, [pc, #428]	; (b46c <hci_evt_encode+0x334>)
    b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2c4:	2100      	movs	r1, #0
    b2c6:	f002 0010 	and.w	r0, r2, #16
    b2ca:	ea50 0301 	orrs.w	r3, r0, r1
    b2ce:	f43f af6a 	beq.w	b1a6 <hci_evt_encode+0x6e>
	hci_evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    b2d2:	2204      	movs	r2, #4
    b2d4:	2105      	movs	r1, #5
    b2d6:	4628      	mov	r0, r5
    b2d8:	f00a fb4e 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b2dc:	2104      	movs	r1, #4
    b2de:	f105 0008 	add.w	r0, r5, #8
    b2e2:	f00b f847 	bl	16374 <net_buf_simple_add>
	ep->status = 0x00;
    b2e6:	2300      	movs	r3, #0
	conn_count--;
    b2e8:	4a62      	ldr	r2, [pc, #392]	; (b474 <hci_evt_encode+0x33c>)
	ep->status = 0x00;
    b2ea:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b2ec:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    b2f0:	7a23      	ldrb	r3, [r4, #8]
    b2f2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    b2f4:	6813      	ldr	r3, [r2, #0]
    b2f6:	3b01      	subs	r3, #1
    b2f8:	6013      	str	r3, [r2, #0]
    b2fa:	e754      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b2fc:	4b5b      	ldr	r3, [pc, #364]	; (b46c <hci_evt_encode+0x334>)
    b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    b302:	2000      	movs	r0, #0
    b304:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b308:	ea50 0301 	orrs.w	r3, r0, r1
    b30c:	f43f af4b 	beq.w	b1a6 <hci_evt_encode+0x6e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b310:	4b57      	ldr	r3, [pc, #348]	; (b470 <hci_evt_encode+0x338>)
    b312:	e9d3 2300 	ldrd	r2, r3, [r3]
    b316:	2100      	movs	r1, #0
    b318:	f002 0004 	and.w	r0, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b31c:	ea50 0301 	orrs.w	r3, r0, r1
    b320:	f43f af41 	beq.w	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    b324:	2209      	movs	r2, #9
    b326:	2103      	movs	r1, #3
    b328:	4628      	mov	r0, r5
    b32a:	f00a fb2f 	bl	1598c <meta_evt>
	sep->status = cu->status;
    b32e:	7a23      	ldrb	r3, [r4, #8]
    b330:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b332:	8963      	ldrh	r3, [r4, #10]
    b334:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b338:	89a3      	ldrh	r3, [r4, #12]
    b33a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b33e:	89e3      	ldrh	r3, [r4, #14]
	sep->handle = sys_cpu_to_le16(handle);
    b340:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b344:	f8a0 3007 	strh.w	r3, [r0, #7]
    b348:	e72d      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b34a:	4b48      	ldr	r3, [pc, #288]	; (b46c <hci_evt_encode+0x334>)
    b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b350:	2000      	movs	r0, #0
    b352:	f403 4100 	and.w	r1, r3, #32768	; 0x8000
    b356:	ea50 0301 	orrs.w	r3, r0, r1
    b35a:	f43f af24 	beq.w	b1a6 <hci_evt_encode+0x6e>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE,
    b35e:	2203      	movs	r2, #3
    b360:	2130      	movs	r1, #48	; 0x30
    b362:	4628      	mov	r0, r5
    b364:	f00a fb08 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b368:	2103      	movs	r1, #3
    b36a:	f105 0008 	add.w	r0, r5, #8
    b36e:	f00b f801 	bl	16374 <net_buf_simple_add>
	ep->status = 0x00;
    b372:	2300      	movs	r3, #0
    b374:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b376:	f8a0 6001 	strh.w	r6, [r0, #1]
    b37a:	e714      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b37c:	4b3e      	ldr	r3, [pc, #248]	; (b478 <hci_evt_encode+0x340>)
    b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b382:	2100      	movs	r1, #0
    b384:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
    b388:	ea50 0301 	orrs.w	r3, r0, r1
    b38c:	f43f af0b 	beq.w	b1a6 <hci_evt_encode+0x6e>
	hci_evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    b390:	2202      	movs	r2, #2
    b392:	2157      	movs	r1, #87	; 0x57
    b394:	4628      	mov	r0, r5
    b396:	f00a faef 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b39a:	2102      	movs	r1, #2
    b39c:	f105 0008 	add.w	r0, r5, #8
    b3a0:	f00a ffe8 	bl	16374 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b3a4:	8006      	strh	r6, [r0, #0]
    b3a6:	e6fe      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3a8:	4b30      	ldr	r3, [pc, #192]	; (b46c <hci_evt_encode+0x334>)
    b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3ae:	2000      	movs	r0, #0
    b3b0:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b3b4:	ea50 0301 	orrs.w	r3, r0, r1
    b3b8:	f43f aef5 	beq.w	b1a6 <hci_evt_encode+0x6e>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b3bc:	4b2c      	ldr	r3, [pc, #176]	; (b470 <hci_evt_encode+0x338>)
    b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3c2:	2100      	movs	r1, #0
    b3c4:	f402 2000 	and.w	r0, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3c8:	ea50 0301 	orrs.w	r3, r0, r1
    b3cc:	f43f aeeb 	beq.w	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    b3d0:	2203      	movs	r2, #3
    b3d2:	2114      	movs	r1, #20
    b3d4:	4628      	mov	r0, r5
    b3d6:	f00a fad9 	bl	1598c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b3da:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b3dc:	7a23      	ldrb	r3, [r4, #8]
    b3de:	7083      	strb	r3, [r0, #2]
    b3e0:	e6e1      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3e2:	4b22      	ldr	r3, [pc, #136]	; (b46c <hci_evt_encode+0x334>)
    b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3e8:	2000      	movs	r0, #0
    b3ea:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b3ee:	ea50 0301 	orrs.w	r3, r0, r1
    b3f2:	f43f aed8 	beq.w	b1a6 <hci_evt_encode+0x6e>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b3f6:	4b1e      	ldr	r3, [pc, #120]	; (b470 <hci_evt_encode+0x338>)
    b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3fc:	2100      	movs	r1, #0
    b3fe:	f402 6000 	and.w	r0, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b402:	ea50 0301 	orrs.w	r3, r0, r1
    b406:	f43f aece 	beq.w	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    b40a:	2205      	movs	r2, #5
    b40c:	210c      	movs	r1, #12
    b40e:	4628      	mov	r0, r5
    b410:	f00a fabc 	bl	1598c <meta_evt>
	sep->status = pu->status;
    b414:	7a23      	ldrb	r3, [r4, #8]
    b416:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b418:	f8a0 6001 	strh.w	r6, [r0, #1]
    b41c:	7a62      	ldrb	r2, [r4, #9]
    b41e:	2a00      	cmp	r2, #0
    b420:	fa92 f3a2 	rbit	r3, r2
    b424:	fab3 f383 	clz	r3, r3
    b428:	bf08      	it	eq
    b42a:	f04f 33ff 	moveq.w	r3, #4294967295
    b42e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b430:	70c3      	strb	r3, [r0, #3]
    b432:	7aa2      	ldrb	r2, [r4, #10]
    b434:	fa92 f3a2 	rbit	r3, r2
    b438:	2a00      	cmp	r2, #0
    b43a:	fab3 f383 	clz	r3, r3
    b43e:	bf08      	it	eq
    b440:	f04f 33ff 	moveq.w	r3, #4294967295
    b444:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b446:	7103      	strb	r3, [r0, #4]
    b448:	e6ad      	b.n	b1a6 <hci_evt_encode+0x6e>
	switch (pdu_data->llctrl.opcode) {
    b44a:	7ac3      	ldrb	r3, [r0, #11]
    b44c:	3b03      	subs	r3, #3
    b44e:	2b12      	cmp	r3, #18
    b450:	f200 80c3 	bhi.w	b5da <hci_evt_encode+0x4a2>
    b454:	e8df f003 	tbb	[pc, r3]
    b458:	39c1c112 	.word	0x39c1c112
    b45c:	c13fc1b8 	.word	0xc13fc1b8
    b460:	c16747c1 	.word	0xc16747c1
    b464:	c1c1c16b 	.word	0xc1c1c16b
    b468:	96c1      	.short	0x96c1
    b46a:	96          	.byte	0x96
    b46b:	00          	.byte	0x00
    b46c:	20004f70 	.word	0x20004f70
    b470:	20004f78 	.word	0x20004f78
    b474:	20000d74 	.word	0x20000d74
    b478:	20000000 	.word	0x20000000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b47c:	4b6e      	ldr	r3, [pc, #440]	; (b638 <hci_evt_encode+0x500>)
    b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b482:	2000      	movs	r0, #0
    b484:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b488:	ea50 0301 	orrs.w	r3, r0, r1
    b48c:	f43f ae8b 	beq.w	b1a6 <hci_evt_encode+0x6e>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    b490:	4b6a      	ldr	r3, [pc, #424]	; (b63c <hci_evt_encode+0x504>)
    b492:	e9d3 2300 	ldrd	r2, r3, [r3]
    b496:	2100      	movs	r1, #0
    b498:	f002 0010 	and.w	r0, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b49c:	ea50 0301 	orrs.w	r3, r0, r1
    b4a0:	f43f ae81 	beq.w	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b4a4:	220c      	movs	r2, #12
    b4a6:	2105      	movs	r1, #5
    b4a8:	4628      	mov	r0, r5
    b4aa:	f00a fa6f 	bl	1598c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b4ae:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b4b0:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b4b2:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    b4b6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b4ba:	f007 ffd3 	bl	13464 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    b4be:	2202      	movs	r2, #2
    b4c0:	f104 0114 	add.w	r1, r4, #20
    b4c4:	f105 000a 	add.w	r0, r5, #10
    b4c8:	e66b      	b.n	b1a2 <hci_evt_encode+0x6a>
		encrypt_change(0x00, handle, buf);
    b4ca:	460a      	mov	r2, r1
    b4cc:	2000      	movs	r0, #0
    b4ce:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b4d0:	f7ff f896 	bl	a600 <encrypt_change>
    b4d4:	e667      	b.n	b1a6 <hci_evt_encode+0x6e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b4d6:	460b      	mov	r3, r1
    b4d8:	4632      	mov	r2, r6
    b4da:	f100 0108 	add.w	r1, r0, #8
    b4de:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b4e0:	f7ff f85a 	bl	a598 <le_remote_feat_complete>
    b4e4:	e65f      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    b4e6:	4b54      	ldr	r3, [pc, #336]	; (b638 <hci_evt_encode+0x500>)
    b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4ec:	2100      	movs	r1, #0
    b4ee:	f402 6000 	and.w	r0, r2, #2048	; 0x800
    b4f2:	ea50 0301 	orrs.w	r3, r0, r1
    b4f6:	f43f ae56 	beq.w	b1a6 <hci_evt_encode+0x6e>
	hci_evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    b4fa:	2208      	movs	r2, #8
    b4fc:	210c      	movs	r1, #12
    b4fe:	4628      	mov	r0, r5
    b500:	f00a fa3a 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b504:	2108      	movs	r1, #8
    b506:	1868      	adds	r0, r5, r1
    b508:	f00a ff34 	bl	16374 <net_buf_simple_add>
	ep->status = 0x00;
    b50c:	2300      	movs	r3, #0
    b50e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b510:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    b514:	7b23      	ldrb	r3, [r4, #12]
    b516:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
    b518:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    b51c:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
    b51e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    b522:	80c3      	strh	r3, [r0, #6]
    b524:	e63f      	b.n	b1a6 <hci_evt_encode+0x6e>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b526:	460a      	mov	r2, r1
    b528:	7b00      	ldrb	r0, [r0, #12]
    b52a:	4631      	mov	r1, r6
    b52c:	e7d0      	b.n	b4d0 <hci_evt_encode+0x398>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b52e:	4b42      	ldr	r3, [pc, #264]	; (b638 <hci_evt_encode+0x500>)
    b530:	e9d3 2300 	ldrd	r2, r3, [r3]
    b534:	2000      	movs	r0, #0
    b536:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b53a:	ea50 0301 	orrs.w	r3, r0, r1
    b53e:	d008      	beq.n	b552 <hci_evt_encode+0x41a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b540:	4b3e      	ldr	r3, [pc, #248]	; (b63c <hci_evt_encode+0x504>)
    b542:	e9d3 2300 	ldrd	r2, r3, [r3]
    b546:	2100      	movs	r1, #0
    b548:	f002 0020 	and.w	r0, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b54c:	ea50 0301 	orrs.w	r3, r0, r1
    b550:	d109      	bne.n	b566 <hci_evt_encode+0x42e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    b552:	2300      	movs	r3, #0
    b554:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b558:	9300      	str	r3, [sp, #0]
    b55a:	221a      	movs	r2, #26
    b55c:	2102      	movs	r1, #2
    b55e:	4630      	mov	r0, r6
    b560:	f00a fbca 	bl	15cf8 <ll_conn_update>
    b564:	e61f      	b.n	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    b566:	220a      	movs	r2, #10
    b568:	2106      	movs	r1, #6
    b56a:	4628      	mov	r0, r5
    b56c:	f00a fa0e 	bl	1598c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b570:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    b572:	89a3      	ldrh	r3, [r4, #12]
    b574:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    b576:	89e3      	ldrh	r3, [r4, #14]
    b578:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    b57a:	8a23      	ldrh	r3, [r4, #16]
    b57c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    b57e:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b580:	8103      	strh	r3, [r0, #8]
    b582:	e610      	b.n	b1a6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b584:	4b2c      	ldr	r3, [pc, #176]	; (b638 <hci_evt_encode+0x500>)
    b586:	e9d3 2300 	ldrd	r2, r3, [r3]
    b58a:	2000      	movs	r0, #0
    b58c:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    b590:	ea50 0301 	orrs.w	r3, r0, r1
    b594:	f43f ae07 	beq.w	b1a6 <hci_evt_encode+0x6e>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    b598:	4b28      	ldr	r3, [pc, #160]	; (b63c <hci_evt_encode+0x504>)
    b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b59e:	2100      	movs	r1, #0
    b5a0:	f002 0040 	and.w	r0, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5a4:	ea50 0301 	orrs.w	r3, r0, r1
    b5a8:	f43f adfd 	beq.w	b1a6 <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    b5ac:	220a      	movs	r2, #10
    b5ae:	2107      	movs	r1, #7
    b5b0:	4628      	mov	r0, r5
    b5b2:	f00a f9eb 	bl	1598c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b5b6:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    b5b8:	8a23      	ldrh	r3, [r4, #16]
    b5ba:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    b5bc:	8a63      	ldrh	r3, [r4, #18]
    b5be:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    b5c0:	89a3      	ldrh	r3, [r4, #12]
    b5c2:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b5c4:	89e3      	ldrh	r3, [r4, #14]
    b5c6:	e7db      	b.n	b580 <hci_evt_encode+0x448>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    b5c8:	7b03      	ldrb	r3, [r0, #12]
    b5ca:	2b0e      	cmp	r3, #14
    b5cc:	f47f adeb 	bne.w	b1a6 <hci_evt_encode+0x6e>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b5d0:	460b      	mov	r3, r1
    b5d2:	4632      	mov	r2, r6
    b5d4:	2100      	movs	r1, #0
    b5d6:	201a      	movs	r0, #26
    b5d8:	e782      	b.n	b4e0 <hci_evt_encode+0x3a8>
		LL_ASSERT(0);
    b5da:	4040      	eors	r0, r0
    b5dc:	f380 8811 	msr	BASEPRI, r0
    b5e0:	f04f 0003 	mov.w	r0, #3
    b5e4:	df02      	svc	2
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b5e6:	ea58 0309 	orrs.w	r3, r8, r9
    b5ea:	f47f ae3d 	bne.w	b268 <hci_evt_encode+0x130>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b5ee:	2212      	movs	r2, #18
    b5f0:	2101      	movs	r1, #1
    b5f2:	4628      	mov	r0, r5
    b5f4:	f00a f9ca 	bl	1598c <meta_evt>
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b5f8:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b5fa:	4604      	mov	r4, r0
    b5fc:	e63b      	b.n	b276 <hci_evt_encode+0x13e>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b5fe:	221e      	movs	r2, #30
    b600:	210a      	movs	r1, #10
    b602:	4628      	mov	r0, r5
    b604:	f00a f9c2 	bl	1598c <meta_evt>
		leecc->status = 0x00;
    b608:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    b60a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = node_rx->role;
    b60e:	7a63      	ldrb	r3, [r4, #9]
    b610:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
    b612:	7aa3      	ldrb	r3, [r4, #10]
    b614:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b616:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    b618:	2206      	movs	r2, #6
    b61a:	4641      	mov	r1, r8
    b61c:	3005      	adds	r0, #5
    b61e:	f007 ff21 	bl	13464 <memcpy>
		if ((node_rx->own_addr_type) &&
    b622:	7de3      	ldrb	r3, [r4, #23]
    b624:	f105 000b 	add.w	r0, r5, #11
    b628:	2b00      	cmp	r3, #0
    b62a:	f47f ae29 	bne.w	b280 <hci_evt_encode+0x148>
			(void)memset(&leecc->local_rpa.val[0], 0x0,
    b62e:	2206      	movs	r2, #6
    b630:	2100      	movs	r1, #0
    b632:	f007 ff44 	bl	134be <memset>
    b636:	e62e      	b.n	b296 <hci_evt_encode+0x15e>
    b638:	20004f70 	.word	0x20004f70
    b63c:	20004f78 	.word	0x20004f78

0000b640 <hci_get_class>:
	pdu_data = (void *)node_rx->pdu;
#else
	pdu_data = (void *)((struct radio_pdu_node_rx *)node_rx)->pdu_data;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b640:	7903      	ldrb	r3, [r0, #4]
    b642:	2b02      	cmp	r3, #2
    b644:	d006      	beq.n	b654 <hci_get_class+0x14>
    b646:	3b07      	subs	r3, #7
    b648:	b2db      	uxtb	r3, r3
    b64a:	2b07      	cmp	r3, #7
    b64c:	d80a      	bhi.n	b664 <hci_get_class+0x24>
    b64e:	4a07      	ldr	r2, [pc, #28]	; (b66c <hci_get_class+0x2c>)
    b650:	56d0      	ldrsb	r0, [r2, r3]
    b652:	4770      	bx	lr

		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    b654:	7a03      	ldrb	r3, [r0, #8]
    b656:	f003 0303 	and.w	r3, r3, #3
    b65a:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    b65c:	bf0c      	ite	eq
    b65e:	2002      	moveq	r0, #2
    b660:	2003      	movne	r0, #3
    b662:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b664:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
    b668:	4770      	bx	lr
    b66a:	bf00      	nop
    b66c:	0001836d 	.word	0x0001836d

0000b670 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    b670:	4b08      	ldr	r3, [pc, #32]	; (b694 <hci_init+0x24>)
    b672:	f04f 30ff 	mov.w	r0, #4294967295
    b676:	f641 71ff 	movw	r1, #8191	; 0x1fff
    b67a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b67e:	4b06      	ldr	r3, [pc, #24]	; (b698 <hci_init+0x28>)
    b680:	2000      	movs	r0, #0
    b682:	2100      	movs	r1, #0
    b684:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b688:	4b04      	ldr	r3, [pc, #16]	; (b69c <hci_init+0x2c>)
    b68a:	201f      	movs	r0, #31
    b68c:	2100      	movs	r1, #0
    b68e:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    b692:	4770      	bx	lr
    b694:	20004f70 	.word	0x20004f70
    b698:	20000000 	.word	0x20000000
    b69c:	20004f78 	.word	0x20004f78

0000b6a0 <pdu_len_cmp>:
{
    b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    b6a2:	4b0d      	ldr	r3, [pc, #52]	; (b6d8 <pdu_len_cmp+0x38>)
{
    b6a4:	b089      	sub	sp, #36	; 0x24
    b6a6:	4605      	mov	r5, r0
    b6a8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    b6aa:	aa01      	add	r2, sp, #4
    b6ac:	f103 0718 	add.w	r7, r3, #24
    b6b0:	6818      	ldr	r0, [r3, #0]
    b6b2:	6859      	ldr	r1, [r3, #4]
    b6b4:	4614      	mov	r4, r2
    b6b6:	c403      	stmia	r4!, {r0, r1}
    b6b8:	3308      	adds	r3, #8
    b6ba:	42bb      	cmp	r3, r7
    b6bc:	4622      	mov	r2, r4
    b6be:	d1f7      	bne.n	b6b0 <pdu_len_cmp+0x10>
    b6c0:	881b      	ldrh	r3, [r3, #0]
    b6c2:	8023      	strh	r3, [r4, #0]
	return ctrl_len_lut[opcode] == len;
    b6c4:	ab08      	add	r3, sp, #32
    b6c6:	441d      	add	r5, r3
    b6c8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    b6cc:	1b83      	subs	r3, r0, r6
    b6ce:	4258      	negs	r0, r3
    b6d0:	4158      	adcs	r0, r3
    b6d2:	b009      	add	sp, #36	; 0x24
    b6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6d6:	bf00      	nop
    b6d8:	00017410 	.word	0x00017410

0000b6dc <packet_rx_acquired_count_get>:
	if (_radio.packet_rx_acquire >=
    b6dc:	4b09      	ldr	r3, [pc, #36]	; (b704 <packet_rx_acquired_count_get+0x28>)
    b6de:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    b6e2:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    b6e6:	4290      	cmp	r0, r2
			_radio.packet_rx_last +
    b6e8:	bf3b      	ittet	cc
    b6ea:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    b6ee:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    b6f2:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    b6f6:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    b6f8:	bf2c      	ite	cs
    b6fa:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    b6fc:	1a80      	subcc	r0, r0, r2
    b6fe:	b2c0      	uxtb	r0, r0
}
    b700:	4770      	bx	lr
    b702:	bf00      	nop
    b704:	20000d78 	.word	0x20000d78

0000b708 <packet_rx_reserve_get>:
{
    b708:	b508      	push	{r3, lr}
    b70a:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    b70c:	f7ff ffe6 	bl	b6dc <packet_rx_acquired_count_get>
    b710:	4288      	cmp	r0, r1
	return _radio.packet_rx[_radio.packet_rx_last];
    b712:	bf23      	ittte	cs
    b714:	4b04      	ldrcs	r3, [pc, #16]	; (b728 <packet_rx_reserve_get+0x20>)
    b716:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    b71a:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
		return 0;
    b71e:	2000      	movcc	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
    b720:	bf28      	it	cs
    b722:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
}
    b726:	bd08      	pop	{r3, pc}
    b728:	20000d78 	.word	0x20000d78

0000b72c <packet_rx_allocate>:
{
    b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    b730:	4d22      	ldr	r5, [pc, #136]	; (b7bc <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    b732:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    b736:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    b73a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    b73e:	3401      	adds	r4, #1
    b740:	4581      	cmp	r9, r0
    b742:	b2e4      	uxtb	r4, r4
    b744:	bf28      	it	cs
    b746:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    b748:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0U;
    b74c:	42a3      	cmp	r3, r4
    b74e:	bf08      	it	eq
    b750:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b752:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    b756:	f1b9 0f00 	cmp.w	r9, #0
    b75a:	d003      	beq.n	b764 <packet_rx_allocate+0x38>
    b75c:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    b760:	42a3      	cmp	r3, r4
    b762:	d101      	bne.n	b768 <packet_rx_allocate+0x3c>
}
    b764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    b768:	4638      	mov	r0, r7
    b76a:	f009 ffc1 	bl	156f0 <mem_acquire>
		if (!link) {
    b76e:	4606      	mov	r6, r0
    b770:	2800      	cmp	r0, #0
    b772:	d0f7      	beq.n	b764 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b774:	4640      	mov	r0, r8
    b776:	f009 ffbb 	bl	156f0 <mem_acquire>
		if (!node_rx) {
    b77a:	b928      	cbnz	r0, b788 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    b77c:	4630      	mov	r0, r6
    b77e:	4910      	ldr	r1, [pc, #64]	; (b7c0 <packet_rx_allocate+0x94>)
}
    b780:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    b784:	f009 bfcd 	b.w	15722 <mem_release>
		node_rx->hdr.link = link;
    b788:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    b78a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    b78e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    b792:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    b796:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    b79a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    b79e:	3401      	adds	r4, #1
    b7a0:	b2e4      	uxtb	r4, r4
			acquire = 0U;
    b7a2:	42a3      	cmp	r3, r4
    b7a4:	bf08      	it	eq
    b7a6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    b7a8:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    b7ac:	f109 39ff 	add.w	r9, r9, #4294967295
    b7b0:	3b01      	subs	r3, #1
    b7b2:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    b7b6:	fa5f f989 	uxtb.w	r9, r9
    b7ba:	e7cc      	b.n	b756 <packet_rx_allocate+0x2a>
    b7bc:	20000d78 	.word	0x20000d78
    b7c0:	20000ec0 	.word	0x20000ec0

0000b7c4 <common_init>:
{
    b7c4:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    b7c6:	4c32      	ldr	r4, [pc, #200]	; (b890 <common_init+0xcc>)
    b7c8:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    b7cc:	2a00      	cmp	r2, #0
    b7ce:	d037      	beq.n	b840 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    b7d0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    b7d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
    b7d8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b7dc:	f009 ff64 	bl	156a8 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    b7e0:	4b2c      	ldr	r3, [pc, #176]	; (b894 <common_init+0xd0>)
    b7e2:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    b7e6:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    b7ea:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    b7ee:	f009 ff5b 	bl	156a8 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    b7f2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    b7f6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    b7fa:	4b27      	ldr	r3, [pc, #156]	; (b898 <common_init+0xd4>)
    b7fc:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    b800:	440a      	add	r2, r1
    b802:	2108      	movs	r1, #8
    b804:	f009 ff50 	bl	156a8 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    b808:	4b24      	ldr	r3, [pc, #144]	; (b89c <common_init+0xd8>)
    b80a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    b80e:	2202      	movs	r2, #2
    b810:	2124      	movs	r1, #36	; 0x24
    b812:	f009 ff49 	bl	156a8 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    b816:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    b81a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    b81e:	4b20      	ldr	r3, [pc, #128]	; (b8a0 <common_init+0xdc>)
    b820:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    b824:	3a01      	subs	r2, #1
    b826:	b292      	uxth	r2, r2
    b828:	f009 ff3e 	bl	156a8 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    b82c:	481a      	ldr	r0, [pc, #104]	; (b898 <common_init+0xd4>)
    b82e:	f009 ff5f 	bl	156f0 <mem_acquire>
	LL_ASSERT(link);
    b832:	b940      	cbnz	r0, b846 <common_init+0x82>
    b834:	4040      	eors	r0, r0
    b836:	f380 8811 	msr	BASEPRI, r0
    b83a:	f04f 0003 	mov.w	r0, #3
    b83e:	df02      	svc	2
		_radio.conn_free = NULL;
    b840:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    b844:	e7cc      	b.n	b7e0 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    b846:	4a17      	ldr	r2, [pc, #92]	; (b8a4 <common_init+0xe0>)
    b848:	1f11      	subs	r1, r2, #4
    b84a:	f009 ffa7 	bl	1579c <memq_init>
	_radio.advertiser.chan_map = 0x07;
    b84e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    b852:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    b856:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    b85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b85e:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    b862:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    b866:	f242 531f 	movw	r3, #9503	; 0x251f
    b86a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    b86e:	231b      	movs	r3, #27
    b870:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    b874:	f44f 73a4 	mov.w	r3, #328	; 0x148
    b878:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    b87c:	2303      	movs	r3, #3
    b87e:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    b882:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
	packet_rx_allocate(0xFF);
    b886:	20ff      	movs	r0, #255	; 0xff
}
    b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    b88c:	f7ff bf4e 	b.w	b72c <packet_rx_allocate>
    b890:	20000d78 	.word	0x20000d78
    b894:	20000ea8 	.word	0x20000ea8
    b898:	20000ec0 	.word	0x20000ec0
    b89c:	20000ed4 	.word	0x20000ed4
    b8a0:	20000edc 	.word	0x20000edc
    b8a4:	20000ec8 	.word	0x20000ec8

0000b8a8 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    b8ac:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    b8ae:	4294      	cmp	r4, r2
{
    b8b0:	4681      	mov	r9, r0
    b8b2:	460f      	mov	r7, r1
    b8b4:	4690      	mov	r8, r2
	if (_first == last) {
    b8b6:	d03d      	beq.n	b934 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
    b8b8:	4e1f      	ldr	r6, [pc, #124]	; (b938 <tx_cmplt_get+0x90>)
    b8ba:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    b8be:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    b8c2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    b8c4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    b8c6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b8ca:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    b8ce:	b222      	sxth	r2, r4
    b8d0:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    b8d4:	f8b9 c000 	ldrh.w	ip, [r9]
    b8d8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    b8dc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    b8e0:	4594      	cmp	ip, r2
    b8e2:	d120      	bne.n	b926 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    b8e4:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    b8e6:	2801      	cmp	r0, #1
    b8e8:	f020 0303 	bic.w	r3, r0, #3
    b8ec:	d90a      	bls.n	b904 <tx_cmplt_get+0x5c>
    b8ee:	b1f3      	cbz	r3, b92e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    b8f0:	1d02      	adds	r2, r0, #4
    b8f2:	d01c      	beq.n	b92e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b8f4:	7942      	ldrb	r2, [r0, #5]
    b8f6:	b1d2      	cbz	r2, b92e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    b8f8:	7902      	ldrb	r2, [r0, #4]
    b8fa:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b8fe:	3a01      	subs	r2, #1
    b900:	2a01      	cmp	r2, #1
    b902:	d814      	bhi.n	b92e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    b904:	2201      	movs	r2, #1
			cmplt++;
    b906:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    b908:	604a      	str	r2, [r1, #4]
			cmplt++;
    b90a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    b90c:	b113      	cbz	r3, b914 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b90e:	4651      	mov	r1, sl
    b910:	f009 ff07 	bl	15722 <mem_release>
		}

		_first = _first + 1;
    b914:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    b916:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    b91a:	b2e4      	uxtb	r4, r4
			_first = 0U;
    b91c:	42a2      	cmp	r2, r4
    b91e:	bf08      	it	eq
    b920:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    b922:	4544      	cmp	r4, r8
    b924:	d1d3      	bne.n	b8ce <tx_cmplt_get+0x26>

	*first = _first;
    b926:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    b928:	4628      	mov	r0, r5
    b92a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    b92e:	f8c1 b004 	str.w	fp, [r1, #4]
    b932:	e7eb      	b.n	b90c <tx_cmplt_get+0x64>
		return 0;
    b934:	2500      	movs	r5, #0
    b936:	e7f7      	b.n	b928 <tx_cmplt_get+0x80>
    b938:	20000d78 	.word	0x20000d78

0000b93c <connection_get>:
{
    b93c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    b93e:	4b09      	ldr	r3, [pc, #36]	; (b964 <connection_get+0x28>)
    b940:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    b944:	4282      	cmp	r2, r0
{
    b946:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    b948:	d90a      	bls.n	b960 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    b94a:	4602      	mov	r2, r0
    b94c:	f44f 71b0 	mov.w	r1, #352	; 0x160
    b950:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b954:	f009 ff00 	bl	15758 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    b958:	b110      	cbz	r0, b960 <connection_get+0x24>
    b95a:	8c03      	ldrh	r3, [r0, #32]
    b95c:	42a3      	cmp	r3, r4
    b95e:	d000      	beq.n	b962 <connection_get+0x26>
	return 0;
    b960:	2000      	movs	r0, #0
}
    b962:	bd10      	pop	{r4, pc}
    b964:	20000d78 	.word	0x20000d78

0000b968 <role_disable>:
{
    b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b96c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b96e:	2402      	movs	r4, #2
	switch (ticker_id_primary) {
    b970:	2805      	cmp	r0, #5
{
    b972:	4605      	mov	r5, r0
    b974:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b976:	9402      	str	r4, [sp, #8]
	switch (ticker_id_primary) {
    b978:	d00e      	beq.n	b998 <role_disable+0x30>
    b97a:	2806      	cmp	r0, #6
    b97c:	f000 8091 	beq.w	baa2 <role_disable+0x13a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b980:	f240 8089 	bls.w	ba96 <role_disable+0x12e>
			conn_handle = ticker_id_primary -
    b984:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    b986:	b280      	uxth	r0, r0
    b988:	f7ff ffd8 	bl	b93c <connection_get>
			if (!conn) {
    b98c:	2800      	cmp	r0, #0
    b98e:	f000 80f0 	beq.w	bb72 <role_disable+0x20a>
			ticks_active_to_start =
    b992:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
    b996:	e00f      	b.n	b9b8 <role_disable+0x50>
		ticks_xtal_to_start =
    b998:	4b77      	ldr	r3, [pc, #476]	; (bb78 <role_disable+0x210>)
		ticks_active_to_start =
    b99a:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b99e:	ab02      	add	r3, sp, #8
    b9a0:	9300      	str	r3, [sp, #0]
    b9a2:	460a      	mov	r2, r1
    b9a4:	4b75      	ldr	r3, [pc, #468]	; (bb7c <role_disable+0x214>)
    b9a6:	2103      	movs	r1, #3
    b9a8:	2000      	movs	r0, #0
    b9aa:	f7fe fbe9 	bl	a180 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b9ae:	2802      	cmp	r0, #2
    b9b0:	d06a      	beq.n	ba88 <role_disable+0x120>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b9b2:	9b02      	ldr	r3, [sp, #8]
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d16b      	bne.n	ba90 <role_disable+0x128>
	LL_ASSERT(!_radio.ticker_id_stop);
    b9b8:	4c6f      	ldr	r4, [pc, #444]	; (bb78 <role_disable+0x210>)
    b9ba:	7ca3      	ldrb	r3, [r4, #18]
    b9bc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	d168      	bne.n	ba96 <role_disable+0x12e>
	ret_cb = TICKER_STATUS_BUSY;
    b9c4:	ab06      	add	r3, sp, #24
    b9c6:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    b9c8:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    b9ca:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b9ce:	2103      	movs	r1, #3
    b9d0:	9300      	str	r3, [sp, #0]
    b9d2:	462a      	mov	r2, r5
    b9d4:	4b69      	ldr	r3, [pc, #420]	; (bb7c <role_disable+0x214>)
    b9d6:	f7fe fbd3 	bl	a180 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b9da:	2802      	cmp	r0, #2
    b9dc:	d065      	beq.n	baaa <role_disable+0x142>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    b9de:	9b02      	ldr	r3, [sp, #8]
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d145      	bne.n	ba70 <role_disable+0x108>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    b9e4:	7c23      	ldrb	r3, [r4, #16]
    b9e6:	42ab      	cmp	r3, r5
    b9e8:	d002      	beq.n	b9f0 <role_disable+0x88>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    b9ea:	7c63      	ldrb	r3, [r4, #17]
    b9ec:	42ab      	cmp	r3, r5
    b9ee:	d13b      	bne.n	ba68 <role_disable+0x100>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    b9f0:	ab06      	add	r3, sp, #24
    b9f2:	2202      	movs	r2, #2
    b9f4:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b9f8:	2200      	movs	r2, #0
    b9fa:	9300      	str	r3, [sp, #0]
    b9fc:	2103      	movs	r1, #3
    b9fe:	4b5f      	ldr	r3, [pc, #380]	; (bb7c <role_disable+0x214>)
    ba00:	4610      	mov	r0, r2
    ba02:	f7fe fbbd 	bl	a180 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ba06:	2802      	cmp	r0, #2
    ba08:	d107      	bne.n	ba1a <role_disable+0xb2>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ba0a:	2201      	movs	r2, #1
    ba0c:	4611      	mov	r1, r2
    ba0e:	2003      	movs	r0, #3
    ba10:	f7fd fdf8 	bl	9604 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    ba14:	9b03      	ldr	r3, [sp, #12]
    ba16:	2b02      	cmp	r3, #2
    ba18:	d03d      	beq.n	ba96 <role_disable+0x12e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    ba1a:	9803      	ldr	r0, [sp, #12]
    ba1c:	2800      	cmp	r0, #0
    ba1e:	d16b      	bne.n	baf8 <role_disable+0x190>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    ba20:	2302      	movs	r3, #2
    ba22:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    ba24:	7c23      	ldrb	r3, [r4, #16]
    ba26:	2b00      	cmp	r3, #0
    ba28:	d035      	beq.n	ba96 <role_disable+0x12e>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba2a:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0U;
    ba2c:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba2e:	2201      	movs	r2, #1
    ba30:	9300      	str	r3, [sp, #0]
    ba32:	2103      	movs	r1, #3
    ba34:	4b51      	ldr	r3, [pc, #324]	; (bb7c <role_disable+0x214>)
    ba36:	f7fe fba3 	bl	a180 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    ba3a:	2802      	cmp	r0, #2
    ba3c:	d107      	bne.n	ba4e <role_disable+0xe6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ba3e:	2201      	movs	r2, #1
    ba40:	4611      	mov	r1, r2
    ba42:	2003      	movs	r0, #3
    ba44:	f7fd fdde 	bl	9604 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    ba48:	9b04      	ldr	r3, [sp, #16]
    ba4a:	2b02      	cmp	r3, #2
    ba4c:	d023      	beq.n	ba96 <role_disable+0x12e>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    ba4e:	9a04      	ldr	r2, [sp, #16]
    ba50:	2a00      	cmp	r2, #0
    ba52:	d138      	bne.n	bac6 <role_disable+0x15e>
			ticks_xtal_to_start &= ~XON_BITMASK;
    ba54:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    ba58:	45b0      	cmp	r8, r6
    ba5a:	d940      	bls.n	bade <role_disable+0x176>
				ret = mayfly_enqueue(
    ba5c:	4b48      	ldr	r3, [pc, #288]	; (bb80 <role_disable+0x218>)
    ba5e:	4611      	mov	r1, r2
				ret = mayfly_enqueue(
    ba60:	2003      	movs	r0, #3
    ba62:	f7fd fdf7 	bl	9654 <mayfly_enqueue>
				LL_ASSERT(!ret);
    ba66:	b9b0      	cbnz	r0, ba96 <role_disable+0x12e>
	if (!_radio.ticker_id_stop) {
    ba68:	7ca3      	ldrb	r3, [r4, #18]
    ba6a:	b90b      	cbnz	r3, ba70 <role_disable+0x108>
		ret_cb = TICKER_STATUS_FAILURE;
    ba6c:	2301      	movs	r3, #1
    ba6e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0U;
    ba70:	2300      	movs	r3, #0
    ba72:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    ba74:	9b02      	ldr	r3, [sp, #8]
    ba76:	2b00      	cmp	r3, #0
    ba78:	bf14      	ite	ne
    ba7a:	200c      	movne	r0, #12
    ba7c:	2000      	moveq	r0, #0
}
    ba7e:	b006      	add	sp, #24
    ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    ba84:	f009 fff6 	bl	15a74 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    ba88:	9b02      	ldr	r3, [sp, #8]
    ba8a:	2b02      	cmp	r3, #2
    ba8c:	d0fa      	beq.n	ba84 <role_disable+0x11c>
    ba8e:	e790      	b.n	b9b2 <role_disable+0x4a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    ba90:	9b02      	ldr	r3, [sp, #8]
    ba92:	2b01      	cmp	r3, #1
    ba94:	d090      	beq.n	b9b8 <role_disable+0x50>
		LL_ASSERT(0);
    ba96:	4040      	eors	r0, r0
    ba98:	f380 8811 	msr	BASEPRI, r0
    ba9c:	f04f 0003 	mov.w	r0, #3
    baa0:	df02      	svc	2
		ticks_xtal_to_start =
    baa2:	4b35      	ldr	r3, [pc, #212]	; (bb78 <role_disable+0x210>)
		ticks_active_to_start =
    baa4:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
    baa8:	e786      	b.n	b9b8 <role_disable+0x50>
		if (_radio.ticker_id_event == ticker_id_primary) {
    baaa:	7c63      	ldrb	r3, [r4, #17]
    baac:	42ab      	cmp	r3, r5
    baae:	d104      	bne.n	baba <role_disable+0x152>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bab0:	2201      	movs	r2, #1
    bab2:	4611      	mov	r1, r2
    bab4:	2003      	movs	r0, #3
    bab6:	f7fd fda5 	bl	9604 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    baba:	9b02      	ldr	r3, [sp, #8]
    babc:	2b02      	cmp	r3, #2
    babe:	d18e      	bne.n	b9de <role_disable+0x76>
			cpu_sleep();
    bac0:	f009 ffd8 	bl	15a74 <cpu_sleep>
    bac4:	e7f9      	b.n	baba <role_disable+0x152>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    bac6:	9d04      	ldr	r5, [sp, #16]
    bac8:	2d01      	cmp	r5, #1
    baca:	d1e4      	bne.n	ba96 <role_disable+0x12e>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bacc:	2200      	movs	r2, #0
    bace:	4611      	mov	r1, r2
    bad0:	4b2b      	ldr	r3, [pc, #172]	; (bb80 <role_disable+0x218>)
    bad2:	2003      	movs	r0, #3
    bad4:	f7fd fdbe 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bad8:	4602      	mov	r2, r0
    bada:	2800      	cmp	r0, #0
    badc:	d1db      	bne.n	ba96 <role_disable+0x12e>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bade:	4611      	mov	r1, r2
    bae0:	4b28      	ldr	r3, [pc, #160]	; (bb84 <role_disable+0x21c>)
    bae2:	2003      	movs	r0, #3
    bae4:	f7fd fdb6 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bae8:	4602      	mov	r2, r0
    baea:	2800      	cmp	r0, #0
    baec:	d1d3      	bne.n	ba96 <role_disable+0x12e>
				s_mfy_xtal_calc.param =
    baee:	4b26      	ldr	r3, [pc, #152]	; (bb88 <role_disable+0x220>)
					(void *)(u32_t)_radio.ticker_id_stop;
    baf0:	7ca1      	ldrb	r1, [r4, #18]
    baf2:	6099      	str	r1, [r3, #8]
				ret = mayfly_enqueue(
    baf4:	2101      	movs	r1, #1
    baf6:	e7b3      	b.n	ba60 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    baf8:	9d03      	ldr	r5, [sp, #12]
    bafa:	2d01      	cmp	r5, #1
    bafc:	d1cb      	bne.n	ba96 <role_disable+0x12e>
		if (ticker_id_stop != TICKER_NULL) {
    bafe:	2fff      	cmp	r7, #255	; 0xff
    bb00:	d019      	beq.n	bb36 <role_disable+0x1ce>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    bb02:	ab06      	add	r3, sp, #24
    bb04:	2202      	movs	r2, #2
    bb06:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bb0a:	2103      	movs	r1, #3
    bb0c:	9300      	str	r3, [sp, #0]
    bb0e:	463a      	mov	r2, r7
    bb10:	4b1a      	ldr	r3, [pc, #104]	; (bb7c <role_disable+0x214>)
    bb12:	2000      	movs	r0, #0
    bb14:	f7fe fb34 	bl	a180 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    bb18:	2802      	cmp	r0, #2
    bb1a:	d107      	bne.n	bb2c <role_disable+0x1c4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bb1c:	462a      	mov	r2, r5
    bb1e:	4629      	mov	r1, r5
    bb20:	2003      	movs	r0, #3
    bb22:	f7fd fd6f 	bl	9604 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    bb26:	9b05      	ldr	r3, [sp, #20]
    bb28:	2b02      	cmp	r3, #2
    bb2a:	d0b4      	beq.n	ba96 <role_disable+0x12e>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    bb2c:	9b05      	ldr	r3, [sp, #20]
    bb2e:	b113      	cbz	r3, bb36 <role_disable+0x1ce>
    bb30:	9b05      	ldr	r3, [sp, #20]
    bb32:	2b01      	cmp	r3, #1
    bb34:	d1af      	bne.n	ba96 <role_disable+0x12e>
		if (_radio.role != ROLE_NONE) {
    bb36:	7d23      	ldrb	r3, [r4, #20]
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d095      	beq.n	ba68 <role_disable+0x100>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    bb3c:	4b13      	ldr	r3, [pc, #76]	; (bb8c <role_disable+0x224>)
    bb3e:	2204      	movs	r2, #4
    bb40:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bb42:	2200      	movs	r2, #0
    bb44:	4611      	mov	r1, r2
    bb46:	2003      	movs	r0, #3
    bb48:	f7fd fd84 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bb4c:	4602      	mov	r2, r0
    bb4e:	2800      	cmp	r0, #0
    bb50:	d1a1      	bne.n	ba96 <role_disable+0x12e>
			s_mfy_xtal_calc.param =
    bb52:	4b0d      	ldr	r3, [pc, #52]	; (bb88 <role_disable+0x220>)
				(void *)(u32_t)_radio.ticker_id_stop;
    bb54:	7ca1      	ldrb	r1, [r4, #18]
    bb56:	6099      	str	r1, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bb58:	2003      	movs	r0, #3
    bb5a:	2101      	movs	r1, #1
    bb5c:	f7fd fd7a 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bb60:	2800      	cmp	r0, #0
    bb62:	d198      	bne.n	ba96 <role_disable+0x12e>
			while (_radio.role != ROLE_NONE) {
    bb64:	7d23      	ldrb	r3, [r4, #20]
    bb66:	2b00      	cmp	r3, #0
    bb68:	f43f af7e 	beq.w	ba68 <role_disable+0x100>
				cpu_sleep();
    bb6c:	f009 ff82 	bl	15a74 <cpu_sleep>
    bb70:	e7f8      	b.n	bb64 <role_disable+0x1fc>
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    bb72:	4620      	mov	r0, r4
    bb74:	e783      	b.n	ba7e <role_disable+0x116>
    bb76:	bf00      	nop
    bb78:	20000d78 	.word	0x20000d78
    bb7c:	00015a7d 	.word	0x00015a7d
    bb80:	20005140 	.word	0x20005140
    bb84:	200051f0 	.word	0x200051f0
    bb88:	20005190 	.word	0x20005190
    bb8c:	20005170 	.word	0x20005170

0000bb90 <adv_scan_conn_configure>:
{
    bb90:	b508      	push	{r3, lr}
	radio_reset();
    bb92:	f003 fdab 	bl	f6ec <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    bb96:	2000      	movs	r0, #0
    bb98:	f003 fdc6 	bl	f728 <radio_tx_power_set>
	radio_isr_set(isr, NULL);
    bb9c:	2100      	movs	r1, #0
    bb9e:	4802      	ldr	r0, [pc, #8]	; (bba8 <adv_scan_conn_configure+0x18>)
}
    bba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_isr_set(isr, NULL);
    bba4:	f003 bd82 	b.w	f6ac <radio_isr_set>
    bba8:	00001ee1 	.word	0x00001ee1

0000bbac <rx_fc_lock>:
}

#if defined(CONFIG_BT_CONN)
static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    bbac:	4a0b      	ldr	r2, [pc, #44]	; (bbdc <rx_fc_lock+0x30>)
    bbae:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bbb2:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    bbb6:	4299      	cmp	r1, r3
    bbb8:	d10e      	bne.n	bbd8 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    bbba:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bbbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    bbc2:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    bbc6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bbca:	3301      	adds	r3, #1
    bbcc:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0U;
    bbce:	2b03      	cmp	r3, #3
    bbd0:	bf08      	it	eq
    bbd2:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    bbd4:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
	}
}
    bbd8:	4770      	bx	lr
    bbda:	bf00      	nop
    bbdc:	20000d78 	.word	0x20000d78

0000bbe0 <mayfly_xtal_start>:
{
    bbe0:	b508      	push	{r3, lr}
	err = clock_control_on(_radio.hf_clock, NULL);
    bbe2:	4b06      	ldr	r3, [pc, #24]	; (bbfc <mayfly_xtal_start+0x1c>)
    bbe4:	6818      	ldr	r0, [r3, #0]
    bbe6:	6843      	ldr	r3, [r0, #4]
    bbe8:	2100      	movs	r1, #0
    bbea:	681b      	ldr	r3, [r3, #0]
    bbec:	4798      	blx	r3
	LL_ASSERT(!err || (err == -EINPROGRESS));
    bbee:	b118      	cbz	r0, bbf8 <mayfly_xtal_start+0x18>
    bbf0:	3044      	adds	r0, #68	; 0x44
    bbf2:	d001      	beq.n	bbf8 <mayfly_xtal_start+0x18>
    bbf4:	f009 ffb7 	bl	15b66 <chan_set.part.28>
}
    bbf8:	bd08      	pop	{r3, pc}
    bbfa:	bf00      	nop
    bbfc:	20000d78 	.word	0x20000d78

0000bc00 <ticker_start_conn_assert>:
{
    bc00:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bc02:	b108      	cbz	r0, bc08 <ticker_start_conn_assert+0x8>
    bc04:	f009 ffaf 	bl	15b66 <chan_set.part.28>
	_radio.ticker_id_upd = 0;
    bc08:	4b01      	ldr	r3, [pc, #4]	; (bc10 <ticker_start_conn_assert+0x10>)
    bc0a:	74d8      	strb	r0, [r3, #19]
}
    bc0c:	bd08      	pop	{r3, pc}
    bc0e:	bf00      	nop
    bc10:	20000d78 	.word	0x20000d78

0000bc14 <ticker_stop_conn_assert>:
{
    bc14:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bc16:	b108      	cbz	r0, bc1c <ticker_stop_conn_assert+0x8>
    bc18:	f009 ffa5 	bl	15b66 <chan_set.part.28>
	_radio.ticker_id_upd = (u8_t)((u32_t)params & 0xFF);
    bc1c:	4b01      	ldr	r3, [pc, #4]	; (bc24 <ticker_stop_conn_assert+0x10>)
    bc1e:	b2c9      	uxtb	r1, r1
    bc20:	74d9      	strb	r1, [r3, #19]
}
    bc22:	bd08      	pop	{r3, pc}
    bc24:	20000d78 	.word	0x20000d78

0000bc28 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    bc28:	2801      	cmp	r0, #1
{
    bc2a:	b508      	push	{r3, lr}
    bc2c:	4b09      	ldr	r3, [pc, #36]	; (bc54 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    bc2e:	d107      	bne.n	bc40 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    bc30:	7c9a      	ldrb	r2, [r3, #18]
    bc32:	2a05      	cmp	r2, #5
    bc34:	d102      	bne.n	bc3c <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0U;
    bc36:	2200      	movs	r2, #0
    bc38:	749a      	strb	r2, [r3, #18]
}
    bc3a:	bd08      	pop	{r3, pc}
    bc3c:	f009 ff93 	bl	15b66 <chan_set.part.28>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    bc40:	7c1b      	ldrb	r3, [r3, #16]
    bc42:	2b05      	cmp	r3, #5
    bc44:	d1f9      	bne.n	bc3a <ticker_stop_adv_assert+0x12>
    bc46:	4040      	eors	r0, r0
    bc48:	f380 8811 	msr	BASEPRI, r0
    bc4c:	f04f 0003 	mov.w	r0, #3
    bc50:	df02      	svc	2
    bc52:	bf00      	nop
    bc54:	20000d78 	.word	0x20000d78

0000bc58 <ticker_update_adv_assert>:
{
    bc58:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bc5a:	b128      	cbz	r0, bc68 <ticker_update_adv_assert+0x10>
    bc5c:	4b03      	ldr	r3, [pc, #12]	; (bc6c <ticker_update_adv_assert+0x14>)
    bc5e:	7c9b      	ldrb	r3, [r3, #18]
    bc60:	2b05      	cmp	r3, #5
    bc62:	d001      	beq.n	bc68 <ticker_update_adv_assert+0x10>
    bc64:	f009 ff7f 	bl	15b66 <chan_set.part.28>
}
    bc68:	bd08      	pop	{r3, pc}
    bc6a:	bf00      	nop
    bc6c:	20000d78 	.word	0x20000d78

0000bc70 <ticker_update_conn_assert>:
{
    bc70:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bc72:	b148      	cbz	r0, bc88 <ticker_update_conn_assert+0x18>
    bc74:	4b05      	ldr	r3, [pc, #20]	; (bc8c <ticker_update_conn_assert+0x1c>)
    bc76:	7c9a      	ldrb	r2, [r3, #18]
	u8_t ticker_id = (u32_t)params & 0xFF;
    bc78:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bc7a:	428a      	cmp	r2, r1
    bc7c:	d004      	beq.n	bc88 <ticker_update_conn_assert+0x18>
    bc7e:	7cdb      	ldrb	r3, [r3, #19]
    bc80:	428b      	cmp	r3, r1
    bc82:	d001      	beq.n	bc88 <ticker_update_conn_assert+0x18>
    bc84:	f009 ff6f 	bl	15b66 <chan_set.part.28>
}
    bc88:	bd08      	pop	{r3, pc}
    bc8a:	bf00      	nop
    bc8c:	20000d78 	.word	0x20000d78

0000bc90 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    bc90:	4b04      	ldr	r3, [pc, #16]	; (bca4 <ticker_job_disable+0x14>)
    bc92:	7d5b      	ldrb	r3, [r3, #21]
    bc94:	b123      	cbz	r3, bca0 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    bc96:	2101      	movs	r1, #1
    bc98:	2200      	movs	r2, #0
    bc9a:	4608      	mov	r0, r1
    bc9c:	f7fd bcb2 	b.w	9604 <mayfly_enable>
}
    bca0:	4770      	bx	lr
    bca2:	bf00      	nop
    bca4:	20000d78 	.word	0x20000d78

0000bca8 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    bca8:	2806      	cmp	r0, #6
{
    bcaa:	b510      	push	{r4, lr}
    bcac:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    bcae:	d90a      	bls.n	bcc6 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bcb0:	4b09      	ldr	r3, [pc, #36]	; (bcd8 <hdr_conn_get+0x30>)
    bcb2:	1fc2      	subs	r2, r0, #7
    bcb4:	b292      	uxth	r2, r2
    bcb6:	f44f 71b0 	mov.w	r1, #352	; 0x160
    bcba:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    bcbe:	f009 fd4b 	bl	15758 <mem_get>
    bcc2:	6020      	str	r0, [r4, #0]
}
    bcc4:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    bcc6:	2805      	cmp	r0, #5
    bcc8:	d004      	beq.n	bcd4 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    bcca:	2806      	cmp	r0, #6
	return NULL;
    bccc:	4803      	ldr	r0, [pc, #12]	; (bcdc <hdr_conn_get+0x34>)
    bcce:	bf18      	it	ne
    bcd0:	2000      	movne	r0, #0
    bcd2:	e7f7      	b.n	bcc4 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    bcd4:	4802      	ldr	r0, [pc, #8]	; (bce0 <hdr_conn_get+0x38>)
    bcd6:	e7f5      	b.n	bcc4 <hdr_conn_get+0x1c>
    bcd8:	20000d78 	.word	0x20000d78
    bcdc:	20000e48 	.word	0x20000e48
    bce0:	20000d90 	.word	0x20000d90

0000bce4 <mayfly_xtal_retain.part.15>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    bce4:	b508      	push	{r3, lr}
			s_xtal_retained = 0U;
    bce6:	4b0a      	ldr	r3, [pc, #40]	; (bd10 <mayfly_xtal_retain.part.15+0x2c>)
    bce8:	2200      	movs	r2, #0
    bcea:	701a      	strb	r2, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    bcec:	4b09      	ldr	r3, [pc, #36]	; (bd14 <mayfly_xtal_retain.part.15+0x30>)
    bcee:	f1a3 0110 	sub.w	r1, r3, #16
			retval = mayfly_enqueue(caller_id,
    bcf2:	2801      	cmp	r0, #1
    bcf4:	bf18      	it	ne
    bcf6:	460b      	movne	r3, r1
    bcf8:	4611      	mov	r1, r2
    bcfa:	f7fd fcab 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!retval);
    bcfe:	b128      	cbz	r0, bd0c <mayfly_xtal_retain.part.15+0x28>
    bd00:	4040      	eors	r0, r0
    bd02:	f380 8811 	msr	BASEPRI, r0
    bd06:	f04f 0003 	mov.w	r0, #3
    bd0a:	df02      	svc	2
}
    bd0c:	bd08      	pop	{r3, pc}
    bd0e:	bf00      	nop
    bd10:	2000215b 	.word	0x2000215b
    bd14:	200051d0 	.word	0x200051d0

0000bd18 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd18:	2200      	movs	r2, #0
{
    bd1a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd1c:	4611      	mov	r1, r2
    bd1e:	4b04      	ldr	r3, [pc, #16]	; (bd30 <event_active+0x18>)
    bd20:	4610      	mov	r0, r2
    bd22:	f7fd fc97 	bl	9654 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bd26:	b108      	cbz	r0, bd2c <event_active+0x14>
    bd28:	f009 ff1d 	bl	15b66 <chan_set.part.28>
}
    bd2c:	bd08      	pop	{r3, pc}
    bd2e:	bf00      	nop
    bd30:	20005110 	.word	0x20005110

0000bd34 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd34:	2200      	movs	r2, #0
{
    bd36:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd38:	4611      	mov	r1, r2
    bd3a:	4b04      	ldr	r3, [pc, #16]	; (bd4c <event_xtal+0x18>)
    bd3c:	4610      	mov	r0, r2
    bd3e:	f7fd fc89 	bl	9654 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bd42:	b108      	cbz	r0, bd48 <event_xtal+0x14>
    bd44:	f009 ff0f 	bl	15b66 <chan_set.part.28>
}
    bd48:	bd08      	pop	{r3, pc}
    bd4a:	bf00      	nop
    bd4c:	200051a0 	.word	0x200051a0

0000bd50 <ticker_stop_adv_stop>:
{
    bd50:	b530      	push	{r4, r5, lr}
    bd52:	4c43      	ldr	r4, [pc, #268]	; (be60 <ticker_stop_adv_stop+0x110>)
    bd54:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
    bd56:	b120      	cbz	r0, bd62 <ticker_stop_adv_stop+0x12>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    bd58:	7ca3      	ldrb	r3, [r4, #18]
    bd5a:	2b05      	cmp	r3, #5
    bd5c:	d07d      	beq.n	be5a <ticker_stop_adv_stop+0x10a>
    bd5e:	f009 ff02 	bl	15b66 <chan_set.part.28>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    bd62:	7c23      	ldrb	r3, [r4, #16]
    bd64:	2b05      	cmp	r3, #5
    bd66:	d002      	beq.n	bd6e <ticker_stop_adv_stop+0x1e>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    bd68:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    bd6a:	2b05      	cmp	r3, #5
    bd6c:	d16d      	bne.n	be4a <ticker_stop_adv_stop+0xfa>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    bd6e:	ab04      	add	r3, sp, #16
    bd70:	2202      	movs	r2, #2
    bd72:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bd76:	2200      	movs	r2, #0
    bd78:	9300      	str	r3, [sp, #0]
    bd7a:	2101      	movs	r1, #1
    bd7c:	4b39      	ldr	r3, [pc, #228]	; (be64 <ticker_stop_adv_stop+0x114>)
    bd7e:	4610      	mov	r0, r2
    bd80:	f7fe f9fe 	bl	a180 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    bd84:	2802      	cmp	r0, #2
    bd86:	d00c      	beq.n	bda2 <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    bd88:	9802      	ldr	r0, [sp, #8]
    bd8a:	b1b8      	cbz	r0, bdbc <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    bd8c:	9d02      	ldr	r5, [sp, #8]
    bd8e:	2d01      	cmp	r5, #1
    bd90:	d118      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    bd92:	7d23      	ldrb	r3, [r4, #20]
    bd94:	2b00      	cmp	r3, #0
    bd96:	d058      	beq.n	be4a <ticker_stop_adv_stop+0xfa>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    bd98:	4b33      	ldr	r3, [pc, #204]	; (be68 <ticker_stop_adv_stop+0x118>)
    bd9a:	2204      	movs	r2, #4
    bd9c:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    bd9e:	2200      	movs	r2, #0
    bda0:	e02f      	b.n	be02 <ticker_stop_adv_stop+0xb2>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    bda2:	2201      	movs	r2, #1
    bda4:	4611      	mov	r1, r2
    bda6:	4610      	mov	r0, r2
    bda8:	f7fd fc2c 	bl	9604 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    bdac:	9b02      	ldr	r3, [sp, #8]
    bdae:	2b02      	cmp	r3, #2
    bdb0:	d1ea      	bne.n	bd88 <ticker_stop_adv_stop+0x38>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    bdb2:	2101      	movs	r1, #1
    bdb4:	2000      	movs	r0, #0
    bdb6:	f7fe fa93 	bl	a2e0 <ticker_job_sched>
    bdba:	e7f7      	b.n	bdac <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    bdbc:	2302      	movs	r3, #2
    bdbe:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    bdc0:	7c23      	ldrb	r3, [r4, #16]
    bdc2:	b92b      	cbnz	r3, bdd0 <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    bdc4:	4040      	eors	r0, r0
    bdc6:	f380 8811 	msr	BASEPRI, r0
    bdca:	f04f 0003 	mov.w	r0, #3
    bdce:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bdd0:	ab03      	add	r3, sp, #12
    bdd2:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0U;
    bdd4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bdd6:	4611      	mov	r1, r2
    bdd8:	9300      	str	r3, [sp, #0]
    bdda:	4b22      	ldr	r3, [pc, #136]	; (be64 <ticker_stop_adv_stop+0x114>)
    bddc:	f7fe f9d0 	bl	a180 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    bde0:	2802      	cmp	r0, #2
    bde2:	d018      	beq.n	be16 <ticker_stop_adv_stop+0xc6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    bde4:	9a03      	ldr	r2, [sp, #12]
    bde6:	b31a      	cbz	r2, be30 <ticker_stop_adv_stop+0xe0>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    bde8:	9c03      	ldr	r4, [sp, #12]
    bdea:	2c01      	cmp	r4, #1
    bdec:	d1ea      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    bdee:	2200      	movs	r2, #0
    bdf0:	4611      	mov	r1, r2
    bdf2:	4b1e      	ldr	r3, [pc, #120]	; (be6c <ticker_stop_adv_stop+0x11c>)
    bdf4:	4620      	mov	r0, r4
    bdf6:	f7fd fc2d 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bdfa:	4602      	mov	r2, r0
    bdfc:	2800      	cmp	r0, #0
    bdfe:	d1e1      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
				ret = mayfly_enqueue(
    be00:	4b1b      	ldr	r3, [pc, #108]	; (be70 <ticker_stop_adv_stop+0x120>)
    be02:	4611      	mov	r1, r2
    be04:	2001      	movs	r0, #1
    be06:	f7fd fc25 	bl	9654 <mayfly_enqueue>
				LL_ASSERT(!ret);
    be0a:	4602      	mov	r2, r0
    be0c:	2800      	cmp	r0, #0
    be0e:	d1d9      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
				ret = mayfly_enqueue(
    be10:	4b18      	ldr	r3, [pc, #96]	; (be74 <ticker_stop_adv_stop+0x124>)
    be12:	2101      	movs	r1, #1
    be14:	e014      	b.n	be40 <ticker_stop_adv_stop+0xf0>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    be16:	2201      	movs	r2, #1
    be18:	4611      	mov	r1, r2
    be1a:	4610      	mov	r0, r2
    be1c:	f7fd fbf2 	bl	9604 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    be20:	9b03      	ldr	r3, [sp, #12]
    be22:	2b02      	cmp	r3, #2
    be24:	d1de      	bne.n	bde4 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    be26:	2101      	movs	r1, #1
    be28:	2000      	movs	r0, #0
    be2a:	f7fe fa59 	bl	a2e0 <ticker_job_sched>
    be2e:	e7f7      	b.n	be20 <ticker_stop_adv_stop+0xd0>
			u32_t ticks_xtal_to_start =
    be30:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    be32:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    be34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    be38:	428b      	cmp	r3, r1
    be3a:	d2e1      	bcs.n	be00 <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    be3c:	4b0b      	ldr	r3, [pc, #44]	; (be6c <ticker_stop_adv_stop+0x11c>)
    be3e:	4611      	mov	r1, r2
    be40:	2001      	movs	r0, #1
    be42:	f7fd fc07 	bl	9654 <mayfly_enqueue>
				LL_ASSERT(!ret);
    be46:	2800      	cmp	r0, #0
    be48:	d1bc      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    be4a:	2200      	movs	r2, #0
    be4c:	4b0a      	ldr	r3, [pc, #40]	; (be78 <ticker_stop_adv_stop+0x128>)
    be4e:	4611      	mov	r1, r2
    be50:	2001      	movs	r0, #1
    be52:	f7fd fbff 	bl	9654 <mayfly_enqueue>
	LL_ASSERT(!retval);
    be56:	2800      	cmp	r0, #0
    be58:	d1b4      	bne.n	bdc4 <ticker_stop_adv_stop+0x74>
}
    be5a:	b005      	add	sp, #20
    be5c:	bd30      	pop	{r4, r5, pc}
    be5e:	bf00      	nop
    be60:	20000d78 	.word	0x20000d78
    be64:	00015a7d 	.word	0x00015a7d
    be68:	20005160 	.word	0x20005160
    be6c:	20005130 	.word	0x20005130
    be70:	200051e0 	.word	0x200051e0
    be74:	20005180 	.word	0x20005180
    be78:	20005100 	.word	0x20005100

0000be7c <prepare_normal_set>:
{
    be7c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    be7e:	6804      	ldr	r4, [r0, #0]
    be80:	2c00      	cmp	r4, #0
{
    be82:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    be84:	da19      	bge.n	beba <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    be86:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    be8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    be8e:	429d      	cmp	r5, r3
    be90:	bf38      	it	cc
    be92:	1ae4      	subcc	r4, r4, r3
		ticker_status =
    be94:	4b0a      	ldr	r3, [pc, #40]	; (bec0 <prepare_normal_set+0x44>)
    be96:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    be98:	bf28      	it	cs
    be9a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    be9c:	2300      	movs	r3, #0
    be9e:	9006      	str	r0, [sp, #24]
    bea0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    bea4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bea8:	4618      	mov	r0, r3
    beaa:	9400      	str	r4, [sp, #0]
    beac:	f7fe f920 	bl	a0f0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    beb0:	f030 0302 	bics.w	r3, r0, #2
    beb4:	d001      	beq.n	beba <prepare_normal_set+0x3e>
    beb6:	f009 fe56 	bl	15b66 <chan_set.part.28>
}
    beba:	b009      	add	sp, #36	; 0x24
    bebc:	bd30      	pop	{r4, r5, pc}
    bebe:	bf00      	nop
    bec0:	00015a8d 	.word	0x00015a8d

0000bec4 <mayfly_radio_active>:
{
    bec4:	b508      	push	{r3, lr}
    bec6:	4a0a      	ldr	r2, [pc, #40]	; (bef0 <mayfly_radio_active+0x2c>)
    bec8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    beca:	b138      	cbz	r0, bedc <mayfly_radio_active+0x18>
		if (s_active++) {
    becc:	1c59      	adds	r1, r3, #1
    bece:	7011      	strb	r1, [r2, #0]
    bed0:	b963      	cbnz	r3, beec <mayfly_radio_active+0x28>
		radio_active_callback(1);
    bed2:	2001      	movs	r0, #1
}
    bed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    bed8:	f00a b8e3 	b.w	160a2 <radio_active_callback>
		LL_ASSERT(s_active);
    bedc:	b90b      	cbnz	r3, bee2 <mayfly_radio_active+0x1e>
    bede:	f009 fe42 	bl	15b66 <chan_set.part.28>
		if (--s_active) {
    bee2:	3b01      	subs	r3, #1
    bee4:	b2db      	uxtb	r3, r3
    bee6:	7013      	strb	r3, [r2, #0]
    bee8:	2b00      	cmp	r3, #0
    beea:	d0f3      	beq.n	bed4 <mayfly_radio_active+0x10>
}
    beec:	bd08      	pop	{r3, pc}
    beee:	bf00      	nop
    bef0:	2000215a 	.word	0x2000215a

0000bef4 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    bef4:	b2c0      	uxtb	r0, r0
{
    bef6:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    bef8:	1f03      	subs	r3, r0, #4
    befa:	2b01      	cmp	r3, #1
    befc:	d901      	bls.n	bf02 <mayfly_radio_stop+0xe>
    befe:	f009 fe32 	bl	15b66 <chan_set.part.28>
	radio_used = ((_radio.state != STATE_NONE) &&
    bf02:	4a08      	ldr	r2, [pc, #32]	; (bf24 <mayfly_radio_stop+0x30>)
    bf04:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
    bf06:	b113      	cbz	r3, bf0e <mayfly_radio_stop+0x1a>
	radio_used = ((_radio.state != STATE_NONE) &&
    bf08:	3b04      	subs	r3, #4
    bf0a:	2b01      	cmp	r3, #1
    bf0c:	d806      	bhi.n	bf1c <mayfly_radio_stop+0x28>
	if (radio_used || !radio_is_idle()) {
    bf0e:	f003 fcb9 	bl	f884 <radio_is_idle>
    bf12:	b928      	cbnz	r0, bf20 <mayfly_radio_stop+0x2c>
}
    bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    bf18:	f003 bc82 	b.w	f820 <radio_disable>
			_radio.state = state;
    bf1c:	7550      	strb	r0, [r2, #21]
    bf1e:	e7f9      	b.n	bf14 <mayfly_radio_stop+0x20>
}
    bf20:	bd08      	pop	{r3, pc}
    bf22:	bf00      	nop
    bf24:	20000d78 	.word	0x20000d78

0000bf28 <pdu_node_tx_release>:
{
    bf28:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    bf2a:	4a10      	ldr	r2, [pc, #64]	; (bf6c <pdu_node_tx_release+0x44>)
    bf2c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    bf30:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    bf34:	3301      	adds	r3, #1
    bf36:	b2db      	uxtb	r3, r3
		last = 0U;
    bf38:	429c      	cmp	r4, r3
    bf3a:	bf08      	it	eq
    bf3c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    bf3e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    bf42:	429c      	cmp	r4, r3
    bf44:	d101      	bne.n	bf4a <pdu_node_tx_release+0x22>
    bf46:	f009 fe0e 	bl	15b66 <chan_set.part.28>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    bf4a:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    bf4e:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    bf52:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    bf56:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    bf5a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    bf5e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    bf60:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    bf64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    bf68:	f002 b9b0 	b.w	e2cc <radio_event_callback>
    bf6c:	20000d78 	.word	0x20000d78

0000bf70 <packet_tx_enqueue>:
{
    bf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bf74:	4d25      	ldr	r5, [pc, #148]	; (c00c <packet_tx_enqueue+0x9c>)
{
    bf76:	4606      	mov	r6, r0
    bf78:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
    bf7a:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bf7c:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
    bf80:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
    bf84:	429a      	cmp	r2, r3
    bf86:	d036      	beq.n	bff6 <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bf88:	f895 9175 	ldrb.w	r9, [r5, #373]	; 0x175
    bf8c:	f8d5 a16c 	ldr.w	sl, [r5, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bf90:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
    bf94:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bf98:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bf9c:	f44f 71b0 	mov.w	r1, #352	; 0x160
		node_tx_new = pdu_data_q_tx->node_tx;
    bfa0:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    bfa2:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bfa4:	f009 fbd8 	bl	15758 <mem_get>
    bfa8:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    bfaa:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
    bfae:	8c1a      	ldrh	r2, [r3, #32]
    bfb0:	4282      	cmp	r2, r0
    bfb2:	d122      	bne.n	bffa <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    bfb4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    bfb8:	b942      	cbnz	r2, bfcc <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
    bfba:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
				conn->pkt_tx_data = node_tx_new;
    bfbe:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
				if (conn->pkt_tx_head == 0) {
    bfc2:	b91a      	cbnz	r2, bfcc <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
    bfc4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
					conn->pkt_tx_last = NULL;
    bfc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			if (conn->pkt_tx_last) {
    bfcc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
    bfd0:	b102      	cbz	r2, bfd4 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
    bfd2:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    bfd4:	f8c3 4158 	str.w	r4, [r3, #344]	; 0x158
		first = _radio.packet_tx_first + 1;
    bfd8:	f898 3175 	ldrb.w	r3, [r8, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    bfdc:	f898 2174 	ldrb.w	r2, [r8, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    bfe0:	3301      	adds	r3, #1
    bfe2:	b2db      	uxtb	r3, r3
    bfe4:	3e01      	subs	r6, #1
			first = 0U;
    bfe6:	429a      	cmp	r2, r3
    bfe8:	bf08      	it	eq
    bfea:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bfec:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
    bff0:	f888 3175 	strb.w	r3, [r8, #373]	; 0x175
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bff4:	d1c2      	bne.n	bf7c <packet_tx_enqueue+0xc>
}
    bff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bffa:	7923      	ldrb	r3, [r4, #4]
    bffc:	f367 0301 	bfi	r3, r7, #0, #2
    c000:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    c002:	4621      	mov	r1, r4
    c004:	f7ff ff90 	bl	bf28 <pdu_node_tx_release>
    c008:	e7e6      	b.n	bfd8 <packet_tx_enqueue+0x68>
    c00a:	bf00      	nop
    c00c:	20000d78 	.word	0x20000d78

0000c010 <connection_release>:
{
    c010:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c012:	2201      	movs	r2, #1
{
    c014:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c016:	4611      	mov	r1, r2
    c018:	2000      	movs	r0, #0
    c01a:	f7fd faf3 	bl	9604 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c01e:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    c022:	2100      	movs	r1, #0
    c024:	f242 63f2 	movw	r3, #9970	; 0x26f2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c028:	3207      	adds	r2, #7
	ticker_status =
    c02a:	9300      	str	r3, [sp, #0]
    c02c:	4608      	mov	r0, r1
    c02e:	4b3a      	ldr	r3, [pc, #232]	; (c118 <connection_release+0x108>)
    c030:	b2d2      	uxtb	r2, r2
    c032:	f7fe f8a5 	bl	a180 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c036:	f030 0102 	bics.w	r1, r0, #2
    c03a:	d005      	beq.n	c048 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c03c:	4040      	eors	r0, r0
    c03e:	f380 8811 	msr	BASEPRI, r0
    c042:	f04f 0003 	mov.w	r0, #3
    c046:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    c048:	4b34      	ldr	r3, [pc, #208]	; (c11c <connection_release+0x10c>)
    c04a:	7d5a      	ldrb	r2, [r3, #21]
    c04c:	2a05      	cmp	r2, #5
    c04e:	461d      	mov	r5, r3
    c050:	d11b      	bne.n	c08a <connection_release+0x7a>
					  conn->handle))) {
    c052:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    c054:	7c18      	ldrb	r0, [r3, #16]
    c056:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    c058:	4290      	cmp	r0, r2
    c05a:	d116      	bne.n	c08a <connection_release+0x7a>
		_radio.ticker_id_prepare = 0U;
    c05c:	7419      	strb	r1, [r3, #16]
		ticker_status =
    c05e:	f242 7303 	movw	r3, #9987	; 0x2703
    c062:	9300      	str	r3, [sp, #0]
    c064:	2201      	movs	r2, #1
    c066:	4b2c      	ldr	r3, [pc, #176]	; (c118 <connection_release+0x108>)
    c068:	4608      	mov	r0, r1
    c06a:	f7fe f889 	bl	a180 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c06e:	f030 0202 	bics.w	r2, r0, #2
    c072:	d1e3      	bne.n	c03c <connection_release+0x2c>
		ticker_status =
    c074:	f242 730a 	movw	r3, #9994	; 0x270a
    c078:	9300      	str	r3, [sp, #0]
    c07a:	4611      	mov	r1, r2
    c07c:	4b26      	ldr	r3, [pc, #152]	; (c118 <connection_release+0x108>)
    c07e:	4610      	mov	r0, r2
    c080:	f7fe f87e 	bl	a180 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c084:	f030 0302 	bics.w	r3, r0, #2
    c088:	d1d8      	bne.n	c03c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c08a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    c08e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    c092:	4299      	cmp	r1, r3
    c094:	d003      	beq.n	c09e <connection_release+0x8e>
    c096:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    c09a:	4299      	cmp	r1, r3
    c09c:	d101      	bne.n	c0a2 <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c09e:	4e20      	ldr	r6, [pc, #128]	; (c120 <connection_release+0x110>)
    c0a0:	e012      	b.n	c0c8 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c0a2:	790b      	ldrb	r3, [r1, #4]
    c0a4:	f36f 0301 	bfc	r3, #0, #2
    c0a8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c0aa:	680b      	ldr	r3, [r1, #0]
    c0ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    c0b0:	8c20      	ldrh	r0, [r4, #32]
    c0b2:	f7ff ff39 	bl	bf28 <pdu_node_tx_release>
    c0b6:	e7e8      	b.n	c08a <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c0b8:	6803      	ldr	r3, [r0, #0]
    c0ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    c0be:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c0c2:	4631      	mov	r1, r6
    c0c4:	f009 fb2d 	bl	15722 <mem_release>
	while ((conn->pkt_tx_head) &&
    c0c8:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    c0cc:	b118      	cbz	r0, c0d6 <connection_release+0xc6>
    c0ce:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    c0d2:	4298      	cmp	r0, r3
    c0d4:	d1f0      	bne.n	c0b8 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    c0d6:	2300      	movs	r3, #0
    c0d8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
	conn->pkt_tx_ctrl_last = NULL;
    c0dc:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	while (conn->pkt_tx_head) {
    c0e0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    c0e4:	b951      	cbnz	r1, c0fc <connection_release+0xec>
	conn->handle = 0xffff;
    c0e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0ea:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    c0ec:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c0f0:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
    c0f2:	bf08      	it	eq
    c0f4:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    c0f8:	b002      	add	sp, #8
    c0fa:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c0fc:	790b      	ldrb	r3, [r1, #4]
    c0fe:	f36f 0301 	bfc	r3, #0, #2
    c102:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c104:	680b      	ldr	r3, [r1, #0]
    c106:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		conn->pkt_tx_data = conn->pkt_tx_head;
    c10a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		pdu_node_tx_release(conn->handle, node_tx);
    c10e:	8c20      	ldrh	r0, [r4, #32]
    c110:	f7ff ff0a 	bl	bf28 <pdu_node_tx_release>
    c114:	e7e4      	b.n	c0e0 <connection_release+0xd0>
    c116:	bf00      	nop
    c118:	00015b73 	.word	0x00015b73
    c11c:	20000d78 	.word	0x20000d78
    c120:	20000ed4 	.word	0x20000ed4

0000c124 <adv_setup>:
{
    c124:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    c126:	4c33      	ldr	r4, [pc, #204]	; (c1f4 <adv_setup+0xd0>)
    c128:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    c12c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    c130:	429a      	cmp	r2, r3
    c132:	d027      	beq.n	c184 <adv_setup+0x60>
		first = _radio.advertiser.adv_data.first + 1;
    c134:	3301      	adds	r3, #1
    c136:	b2db      	uxtb	r3, r3
			first = 0U;
    c138:	2b02      	cmp	r3, #2
    c13a:	bf08      	it	eq
    c13c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    c13e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1U;
    c142:	2201      	movs	r2, #1
    c144:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
	if (_radio.advertiser.scan_data.first != _radio.
    c148:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    c14c:	212b      	movs	r1, #43	; 0x2b
    c14e:	2527      	movs	r5, #39	; 0x27
    c150:	fb15 1500 	smlabb	r5, r5, r0, r1
    c154:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    c158:	4299      	cmp	r1, r3
    c15a:	eb04 0605 	add.w	r6, r4, r5
    c15e:	d013      	beq.n	c188 <adv_setup+0x64>
		first = _radio.advertiser.scan_data.first + 1;
    c160:	3301      	adds	r3, #1
    c162:	b2db      	uxtb	r3, r3
			first = 0U;
    c164:	2b02      	cmp	r3, #2
    c166:	bf08      	it	eq
    c168:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    c16a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		struct pdu_adv *scan_pdu = (void *)
    c16e:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    c172:	2327      	movs	r3, #39	; 0x27
    c174:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    c178:	2206      	movs	r2, #6
    c17a:	1cb1      	adds	r1, r6, #2
    c17c:	307d      	adds	r0, #125	; 0x7d
    c17e:	f007 f971 	bl	13464 <memcpy>
    c182:	e003      	b.n	c18c <adv_setup+0x68>
	u8_t upd = 0U;
    c184:	2200      	movs	r2, #0
    c186:	e7dd      	b.n	c144 <adv_setup+0x20>
	if (upd) {
    c188:	2a00      	cmp	r2, #0
    c18a:	d1f0      	bne.n	c16e <adv_setup+0x4a>
	radio_pkt_tx_set(pdu);
    c18c:	4630      	mov	r0, r6
    c18e:	f003 fb35 	bl	f7fc <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c192:	5d63      	ldrb	r3, [r4, r5]
    c194:	f003 030f 	and.w	r3, r3, #15
    c198:	2b02      	cmp	r3, #2
    c19a:	d022      	beq.n	c1e2 <adv_setup+0xbe>
    c19c:	2b07      	cmp	r3, #7
    c19e:	d020      	beq.n	c1e2 <adv_setup+0xbe>
		_radio.state = STATE_TX;
    c1a0:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c1a2:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    c1a4:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    c1a6:	f003 fc33 	bl	fa10 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c1aa:	2000      	movs	r0, #0
    c1ac:	f003 fb92 	bl	f8d4 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    c1b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c1b4:	f3c3 0202 	ubfx	r2, r3, #0, #3
    c1b8:	b2d3      	uxtb	r3, r2
    c1ba:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    c1bc:	2000      	movs	r0, #0
    c1be:	07ce      	lsls	r6, r1, #31
    c1c0:	f100 0501 	add.w	r5, r0, #1
    c1c4:	d512      	bpl.n	c1ec <adv_setup+0xc8>
		(_radio.advertiser.chan_map_current - 1);
    c1c6:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    c1c8:	4013      	ands	r3, r2
    c1ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c1ce:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    c1d0:	f363 0202 	bfi	r2, r3, #0, #3
    c1d4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c1d8:	3025      	adds	r0, #37	; 0x25
}
    c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    c1de:	f009 bcdb 	b.w	15b98 <chan_set>
		_radio.state = STATE_CLOSE;
    c1e2:	2303      	movs	r3, #3
    c1e4:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    c1e6:	f003 fb8b 	bl	f900 <radio_switch_complete_and_disable>
    c1ea:	e7e1      	b.n	c1b0 <adv_setup+0x8c>
		bitmap >>= 1;
    c1ec:	0849      	lsrs	r1, r1, #1
    c1ee:	4628      	mov	r0, r5
    c1f0:	e7e5      	b.n	c1be <adv_setup+0x9a>
    c1f2:	bf00      	nop
    c1f4:	20000d78 	.word	0x20000d78

0000c1f8 <packet_rx_enqueue_commit>:
{
    c1f8:	b508      	push	{r3, lr}
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    c1fa:	4a07      	ldr	r2, [pc, #28]	; (c218 <packet_rx_enqueue_commit+0x20>)
{
    c1fc:	4601      	mov	r1, r0
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    c1fe:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.link;
    c202:	6800      	ldr	r0, [r0, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    c204:	700b      	strb	r3, [r1, #0]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    c206:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    c20a:	f009 faca 	bl	157a2 <memq_enqueue>
	LL_ASSERT(link);
    c20e:	b908      	cbnz	r0, c214 <packet_rx_enqueue_commit+0x1c>
    c210:	f009 fca9 	bl	15b66 <chan_set.part.28>
}
    c214:	bd08      	pop	{r3, pc}
    c216:	bf00      	nop
    c218:	20000d78 	.word	0x20000d78

0000c21c <packet_rx_enqueue>:
{
    c21c:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    c21e:	4a12      	ldr	r2, [pc, #72]	; (c268 <packet_rx_enqueue+0x4c>)
    c220:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    c224:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    c228:	4299      	cmp	r1, r3
    c22a:	d105      	bne.n	c238 <packet_rx_enqueue+0x1c>
    c22c:	4040      	eors	r0, r0
    c22e:	f380 8811 	msr	BASEPRI, r0
    c232:	f04f 0003 	mov.w	r0, #3
    c236:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    c238:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    c23c:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    c240:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	last = _radio.packet_rx_last + 1;
    c244:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    c248:	f892 1140 	ldrb.w	r1, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    c24c:	3301      	adds	r3, #1
    c24e:	b2db      	uxtb	r3, r3
		last = 0U;
    c250:	4299      	cmp	r1, r3
    c252:	bf08      	it	eq
    c254:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    c256:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	packet_rx_enqueue_commit(node_rx);
    c25a:	f7ff ffcd 	bl	c1f8 <packet_rx_enqueue_commit>
}
    c25e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_event_callback();
    c262:	f002 b833 	b.w	e2cc <radio_event_callback>
    c266:	bf00      	nop
    c268:	20000d78 	.word	0x20000d78

0000c26c <isr_rx_scan_report.isra.34>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c270:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
    c272:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    c274:	460e      	mov	r6, r1
	node_rx = packet_rx_reserve_get(3);
    c276:	f7ff fa47 	bl	b708 <packet_rx_reserve_get>
	if (node_rx == 0) {
    c27a:	b360      	cbz	r0, c2d6 <isr_rx_scan_report.isra.34+0x6a>
	node_rx->hdr.handle = 0xffff;
    c27c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c280:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    c282:	4b16      	ldr	r3, [pc, #88]	; (c2dc <isr_rx_scan_report.isra.34+0x70>)
    c284:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    c288:	075a      	lsls	r2, r3, #29
    c28a:	d00d      	beq.n	c2a8 <isr_rx_scan_report.isra.34+0x3c>
		switch (_radio.scanner.phy) {
    c28c:	f003 0307 	and.w	r3, r3, #7
    c290:	2b01      	cmp	r3, #1
    c292:	d007      	beq.n	c2a4 <isr_rx_scan_report.isra.34+0x38>
    c294:	2b04      	cmp	r3, #4
    c296:	d01a      	beq.n	c2ce <isr_rx_scan_report.isra.34+0x62>
			LL_ASSERT(0);
    c298:	4040      	eors	r0, r0
    c29a:	f380 8811 	msr	BASEPRI, r0
    c29e:	f04f 0003 	mov.w	r0, #3
    c2a2:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    c2a4:	2305      	movs	r3, #5
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    c2a6:	7103      	strb	r3, [r0, #4]
				      pdu_adv_rx->len];
    c2a8:	7a44      	ldrb	r4, [r0, #9]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    c2aa:	f100 0508 	add.w	r5, r0, #8
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    c2ae:	3402      	adds	r4, #2
    c2b0:	192f      	adds	r7, r5, r4
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    c2b2:	f1b8 0f00 	cmp.w	r8, #0
    c2b6:	d00c      	beq.n	c2d2 <isr_rx_scan_report.isra.34+0x66>
    c2b8:	f003 fb3a 	bl	f930 <radio_rssi_get>
    c2bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c2c0:	5528      	strb	r0, [r5, r4]
	*extra = rl_idx;
    c2c2:	707e      	strb	r6, [r7, #1]
	packet_rx_enqueue();
    c2c4:	f7ff ffaa 	bl	c21c <packet_rx_enqueue>
	return 0;
    c2c8:	2000      	movs	r0, #0
}
    c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    c2ce:	2306      	movs	r3, #6
    c2d0:	e7e9      	b.n	c2a6 <isr_rx_scan_report.isra.34+0x3a>
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    c2d2:	207f      	movs	r0, #127	; 0x7f
    c2d4:	e7f4      	b.n	c2c0 <isr_rx_scan_report.isra.34+0x54>
		return 1;
    c2d6:	2001      	movs	r0, #1
    c2d8:	e7f7      	b.n	c2ca <isr_rx_scan_report.isra.34+0x5e>
    c2da:	bf00      	nop
    c2dc:	20000d78 	.word	0x20000d78

0000c2e0 <adv_scan_configure.constprop.40>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    c2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    c2e2:	ad02      	add	r5, sp, #8
    c2e4:	4b0d      	ldr	r3, [pc, #52]	; (c31c <adv_scan_configure.constprop.40+0x3c>)
    c2e6:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    c2ea:	4604      	mov	r4, r0
	adv_scan_conn_configure();
    c2ec:	f7ff fc50 	bl	bb90 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
    c2f0:	2101      	movs	r1, #1
    c2f2:	4620      	mov	r0, r4
    c2f4:	f003 fa08 	bl	f708 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    c2f8:	4628      	mov	r0, r5
    c2fa:	f003 fa33 	bl	f764 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    c2fe:	0062      	lsls	r2, r4, #1
    c300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c304:	2125      	movs	r1, #37	; 0x25
    c306:	2008      	movs	r0, #8
    c308:	f003 fa44 	bl	f794 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c30c:	4904      	ldr	r1, [pc, #16]	; (c320 <adv_scan_configure.constprop.40+0x40>)
    c30e:	f240 605b 	movw	r0, #1627	; 0x65b
    c312:	f003 fac1 	bl	f898 <radio_crc_configure>
}
    c316:	b003      	add	sp, #12
    c318:	bd30      	pop	{r4, r5, pc}
    c31a:	bf00      	nop
    c31c:	8e89bed6 	.word	0x8e89bed6
    c320:	00555555 	.word	0x00555555

0000c324 <event_stop.constprop.41>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c324:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c326:	4b05      	ldr	r3, [pc, #20]	; (c33c <event_stop.constprop.41+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c328:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c32a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c32c:	4611      	mov	r1, r2
    c32e:	4610      	mov	r0, r2
    c330:	f7fd f990 	bl	9654 <mayfly_enqueue>
	LL_ASSERT(!retval);
    c334:	b108      	cbz	r0, c33a <event_stop.constprop.41+0x16>
    c336:	f009 fc16 	bl	15b66 <chan_set.part.28>
}
    c33a:	bd08      	pop	{r3, pc}
    c33c:	20005150 	.word	0x20005150

0000c340 <event_common_prepare>:
{
    c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c344:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c346:	681d      	ldr	r5, [r3, #0]
{
    c348:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c34a:	2c00      	cmp	r4, #0
{
    c34c:	4681      	mov	r9, r0
    c34e:	910b      	str	r1, [sp, #44]	; 0x2c
    c350:	4690      	mov	r8, r2
    c352:	469b      	mov	fp, r3
    c354:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c358:	da03      	bge.n	c362 <event_common_prepare+0x22>
		_ticks_xtal_to_start = MAX(_ticks_active_to_start,
    c35a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c35c:	42ac      	cmp	r4, r5
    c35e:	bf38      	it	cc
    c360:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c362:	42ac      	cmp	r4, r5
    c364:	4f4e      	ldr	r7, [pc, #312]	; (c4a0 <event_common_prepare+0x160>)
    c366:	d91b      	bls.n	c3a0 <event_common_prepare+0x60>
		ticker_status =
    c368:	f241 7396 	movw	r3, #6038	; 0x1796
    c36c:	e9cd 7307 	strd	r7, r3, [sp, #28]
    c370:	4b4c      	ldr	r3, [pc, #304]	; (c4a4 <event_common_prepare+0x164>)
    c372:	2100      	movs	r1, #0
    c374:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    c378:	1b63      	subs	r3, r4, r5
		ticker_status =
    c37a:	9300      	str	r3, [sp, #0]
    c37c:	9106      	str	r1, [sp, #24]
    c37e:	464b      	mov	r3, r9
    c380:	e9cd 1102 	strd	r1, r1, [sp, #8]
    c384:	9101      	str	r1, [sp, #4]
    c386:	2201      	movs	r2, #1
    c388:	4608      	mov	r0, r1
    c38a:	f7fd fe67 	bl	a05c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c38e:	f030 0302 	bics.w	r3, r0, #2
    c392:	d02b      	beq.n	c3ec <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    c394:	4040      	eors	r0, r0
    c396:	f380 8811 	msr	BASEPRI, r0
    c39a:	f04f 0003 	mov.w	r0, #3
    c39e:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c3a0:	d21d      	bcs.n	c3de <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    c3a2:	2300      	movs	r3, #0
    c3a4:	461a      	mov	r2, r3
    c3a6:	4619      	mov	r1, r3
    c3a8:	4618      	mov	r0, r3
    c3aa:	f7ff fcb5 	bl	bd18 <event_active>
		ticker_status =
    c3ae:	f241 73ab 	movw	r3, #6059	; 0x17ab
    c3b2:	e9cd 7307 	strd	r7, r3, [sp, #28]
    c3b6:	4b3c      	ldr	r3, [pc, #240]	; (c4a8 <event_common_prepare+0x168>)
    c3b8:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c3ba:	1b2c      	subs	r4, r5, r4
		ticker_status =
    c3bc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    c3c0:	9106      	str	r1, [sp, #24]
    c3c2:	464b      	mov	r3, r9
    c3c4:	e9cd 1102 	strd	r1, r1, [sp, #8]
    c3c8:	e9cd 4100 	strd	r4, r1, [sp]
    c3cc:	2201      	movs	r2, #1
    c3ce:	4608      	mov	r0, r1
    c3d0:	f7fd fe44 	bl	a05c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3d4:	f030 0302 	bics.w	r3, r0, #2
    c3d8:	d1dc      	bne.n	c394 <event_common_prepare+0x54>
    c3da:	462c      	mov	r4, r5
    c3dc:	e00b      	b.n	c3f6 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    c3de:	2300      	movs	r3, #0
    c3e0:	461a      	mov	r2, r3
    c3e2:	4619      	mov	r1, r3
    c3e4:	4618      	mov	r0, r3
    c3e6:	f7ff fc97 	bl	bd18 <event_active>
		event_xtal(0, 0, 0, NULL);
    c3ea:	2300      	movs	r3, #0
    c3ec:	461a      	mov	r2, r3
    c3ee:	4619      	mov	r1, r3
    c3f0:	4618      	mov	r0, r3
    c3f2:	f7ff fc9f 	bl	bd34 <event_xtal>
	_radio.remainder_anchor = remainder;
    c3f6:	4e2d      	ldr	r6, [pc, #180]	; (c4ac <event_common_prepare+0x16c>)
    c3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3fa:	60f3      	str	r3, [r6, #12]
	ticker_status =
    c3fc:	f241 73c3 	movw	r3, #6083	; 0x17c3
    c400:	e9cd 7307 	strd	r7, r3, [sp, #28]
    c404:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c406:	9306      	str	r3, [sp, #24]
    c408:	2200      	movs	r2, #0
    c40a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c40c:	9305      	str	r3, [sp, #20]
    c40e:	e9cd 2203 	strd	r2, r2, [sp, #12]
    c412:	464b      	mov	r3, r9
    c414:	e9cd 2201 	strd	r2, r2, [sp, #4]
    c418:	9400      	str	r4, [sp, #0]
    c41a:	4611      	mov	r1, r2
    c41c:	4610      	mov	r0, r2
    c41e:	f7fd fe1d 	bl	a05c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c422:	f030 0302 	bics.w	r3, r0, #2
    c426:	d1b5      	bne.n	c394 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c428:	2005      	movs	r0, #5
    c42a:	f7ff ff7b 	bl	c324 <event_stop.constprop.41>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c42e:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    c432:	42ab      	cmp	r3, r5
    c434:	d022      	beq.n	c47c <event_common_prepare+0x13c>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    c436:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c43a:	f8d8 3000 	ldr.w	r3, [r8]
    c43e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    c440:	bfbc      	itt	lt
    c442:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    c446:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = MAX(_radio.ticks_active_to_start,
    c44a:	f8d8 3000 	ldr.w	r3, [r8]
    c44e:	f8d6 2184 	ldr.w	r2, [r6, #388]	; 0x184
    c452:	4293      	cmp	r3, r2
    c454:	bf38      	it	cc
    c456:	4613      	movcc	r3, r2
		ticker_status =
    c458:	2100      	movs	r1, #0
    c45a:	f241 72f1 	movw	r2, #6129	; 0x17f1
    c45e:	e9cd 7205 	strd	r7, r2, [sp, #20]
    c462:	e9cd 3401 	strd	r3, r4, [sp, #4]
    c466:	9300      	str	r3, [sp, #0]
    c468:	e9cd 1103 	strd	r1, r1, [sp, #12]
    c46c:	4623      	mov	r3, r4
    c46e:	4652      	mov	r2, sl
    c470:	4608      	mov	r0, r1
    c472:	f7fd fe3d 	bl	a0f0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c476:	f030 0302 	bics.w	r3, r0, #2
    c47a:	d18b      	bne.n	c394 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    c47c:	20ff      	movs	r0, #255	; 0xff
    c47e:	f7ff fd77 	bl	bf70 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c482:	4b0b      	ldr	r3, [pc, #44]	; (c4b0 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c484:	2201      	movs	r2, #1
    c486:	4611      	mov	r1, r2
    c488:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c48a:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c48e:	f7fd f8e1 	bl	9654 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c492:	2800      	cmp	r0, #0
    c494:	f47f af7e 	bne.w	c394 <event_common_prepare+0x54>
}
    c498:	b00d      	add	sp, #52	; 0x34
    c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c49e:	bf00      	nop
    c4a0:	00015b73 	.word	0x00015b73
    c4a4:	0000bd19 	.word	0x0000bd19
    c4a8:	0000bd35 	.word	0x0000bd35
    c4ac:	20000d78 	.word	0x20000d78
    c4b0:	20005200 	.word	0x20005200

0000c4b4 <radio_event_adv_prepare>:
{
    c4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c4b6:	4a0b      	ldr	r2, [pc, #44]	; (c4e4 <radio_event_adv_prepare+0x30>)
    c4b8:	7c13      	ldrb	r3, [r2, #16]
    c4ba:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    c4be:	b10b      	cbz	r3, c4c4 <radio_event_adv_prepare+0x10>
    c4c0:	f009 fb51 	bl	15b66 <chan_set.part.28>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    c4c4:	2305      	movs	r3, #5
    c4c6:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    c4c8:	9403      	str	r4, [sp, #12]
    c4ca:	4c07      	ldr	r4, [pc, #28]	; (c4e8 <radio_event_adv_prepare+0x34>)
    c4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
    c4d0:	6a13      	ldr	r3, [r2, #32]
    c4d2:	9300      	str	r3, [sp, #0]
    c4d4:	f102 031c 	add.w	r3, r2, #28
    c4d8:	3218      	adds	r2, #24
    c4da:	f7ff ff31 	bl	c340 <event_common_prepare>
}
    c4de:	b004      	add	sp, #16
    c4e0:	bd10      	pop	{r4, pc}
    c4e2:	bf00      	nop
    c4e4:	20000d78 	.word	0x20000d78
    c4e8:	0000c5a5 	.word	0x0000c5a5

0000c4ec <event_adv_stop>:
{
    c4ec:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c4ee:	2005      	movs	r0, #5
    c4f0:	f7ff ff18 	bl	c324 <event_stop.constprop.41>
	ticker_status =
    c4f4:	2100      	movs	r1, #0
    c4f6:	4b07      	ldr	r3, [pc, #28]	; (c514 <event_adv_stop+0x28>)
    c4f8:	9100      	str	r1, [sp, #0]
    c4fa:	2205      	movs	r2, #5
    c4fc:	4608      	mov	r0, r1
    c4fe:	f7fd fe3f 	bl	a180 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c502:	f030 0302 	bics.w	r3, r0, #2
    c506:	d001      	beq.n	c50c <event_adv_stop+0x20>
    c508:	f009 fb2d 	bl	15b66 <chan_set.part.28>
}
    c50c:	b003      	add	sp, #12
    c50e:	f85d fb04 	ldr.w	pc, [sp], #4
    c512:	bf00      	nop
    c514:	0000bd51 	.word	0x0000bd51

0000c518 <k32src_wait>:
	if (done) {
    c518:	4b0b      	ldr	r3, [pc, #44]	; (c548 <k32src_wait+0x30>)
    c51a:	781a      	ldrb	r2, [r3, #0]
{
    c51c:	b510      	push	{r4, lr}
	if (done) {
    c51e:	b98a      	cbnz	r2, c544 <k32src_wait+0x2c>
	done = true;
    c520:	2201      	movs	r2, #1
    c522:	480a      	ldr	r0, [pc, #40]	; (c54c <k32src_wait+0x34>)
    c524:	701a      	strb	r2, [r3, #0]
    c526:	f004 fa35 	bl	10994 <z_impl_device_get_binding>
	LL_ASSERT(lf_clock);
    c52a:	4604      	mov	r4, r0
    c52c:	b918      	cbnz	r0, c536 <k32src_wait+0x1e>
    c52e:	f009 fb1a 	bl	15b66 <chan_set.part.28>
		cpu_sleep();
    c532:	f009 fa9f 	bl	15a74 <cpu_sleep>
    c536:	6863      	ldr	r3, [r4, #4]
    c538:	2101      	movs	r1, #1
    c53a:	681b      	ldr	r3, [r3, #0]
    c53c:	4620      	mov	r0, r4
    c53e:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
    c540:	2800      	cmp	r0, #0
    c542:	d1f6      	bne.n	c532 <k32src_wait+0x1a>
}
    c544:	bd10      	pop	{r4, pc}
    c546:	bf00      	nop
    c548:	20002159 	.word	0x20002159
    c54c:	00017f2d 	.word	0x00017f2d

0000c550 <mayfly_xtal_stop>:
	err = clock_control_off(_radio.hf_clock, NULL);
    c550:	4b02      	ldr	r3, [pc, #8]	; (c55c <mayfly_xtal_stop+0xc>)
    c552:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
    c554:	6843      	ldr	r3, [r0, #4]
    c556:	2100      	movs	r1, #0
    c558:	685b      	ldr	r3, [r3, #4]
    c55a:	4718      	bx	r3
    c55c:	20000d78 	.word	0x20000d78

0000c560 <preempt_calc>:
{
    c560:	b570      	push	{r4, r5, r6, lr}
    c562:	4614      	mov	r4, r2
    c564:	460e      	mov	r6, r1
    c566:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    c568:	f009 f9ef 	bl	1594a <ticker_ticks_now_get>
	u32_t diff =
    c56c:	4621      	mov	r1, r4
    c56e:	f009 f9ee 	bl	1594e <ticker_ticks_diff_get>
	diff += 3;
    c572:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    c574:	2c09      	cmp	r4, #9
    c576:	d911      	bls.n	c59c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    c578:	4b09      	ldr	r3, [pc, #36]	; (c5a0 <preempt_calc+0x40>)
    c57a:	781b      	ldrb	r3, [r3, #0]
    c57c:	b113      	cbz	r3, c584 <preempt_calc+0x24>
    c57e:	2000      	movs	r0, #0
    c580:	f7ff fbb0 	bl	bce4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    c584:	4632      	mov	r2, r6
    c586:	2100      	movs	r1, #0
    c588:	4628      	mov	r0, r5
    c58a:	f7ff fc77 	bl	be7c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    c58e:	68ab      	ldr	r3, [r5, #8]
    c590:	441c      	add	r4, r3
		if (diff <
    c592:	2c26      	cmp	r4, #38	; 0x26
    c594:	d800      	bhi.n	c598 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    c596:	60ac      	str	r4, [r5, #8]
		return 1;
    c598:	2001      	movs	r0, #1
    c59a:	e000      	b.n	c59e <preempt_calc+0x3e>
	return 0;
    c59c:	2000      	movs	r0, #0
}
    c59e:	bd70      	pop	{r4, r5, r6, pc}
    c5a0:	2000215b 	.word	0x2000215b

0000c5a4 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    c5a4:	4b2d      	ldr	r3, [pc, #180]	; (c65c <event_adv+0xb8>)
    c5a6:	7d1a      	ldrb	r2, [r3, #20]
{
    c5a8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    c5aa:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    c5ae:	4605      	mov	r5, r0
    c5b0:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    c5b2:	b12a      	cbz	r2, c5c0 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5b4:	4040      	eors	r0, r0
    c5b6:	f380 8811 	msr	BASEPRI, r0
    c5ba:	f04f 0003 	mov.w	r0, #3
    c5be:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    c5c0:	7c1b      	ldrb	r3, [r3, #16]
    c5c2:	b2db      	uxtb	r3, r3
    c5c4:	2b05      	cmp	r3, #5
    c5c6:	d1f5      	bne.n	c5b4 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    c5c8:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    c5ca:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    c5ce:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    c5d0:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    c5d4:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0U;
    c5d6:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    c5d8:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    c5da:	f7ff fe81 	bl	c2e0 <adv_scan_configure.constprop.40>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    c5de:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    c5e2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    c5e6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c5ea:	f363 0202 	bfi	r2, r3, #0, #3
    c5ee:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    c5f2:	f7ff fd97 	bl	c124 <adv_setup>
	if (IS_ENABLED(CONFIG_BT_CTLR_PRIVACY) && ctrl_rl_enabled()) {
    c5f6:	f002 fb95 	bl	ed24 <ctrl_rl_enabled>
    c5fa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    c5fe:	b300      	cbz	r0, c642 <event_adv+0x9e>
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
    c600:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
    c604:	bf14      	ite	ne
    c606:	4630      	movne	r0, r6
    c608:	2000      	moveq	r0, #0
		struct ll_filter *wl = ctrl_filter_get(true);
    c60a:	f002 f9bf 	bl	e98c <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c60e:	1c82      	adds	r2, r0, #2
    c610:	7841      	ldrb	r1, [r0, #1]
    c612:	7800      	ldrb	r0, [r0, #0]
    c614:	f003 f9a4 	bl	f960 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    c618:	68e2      	ldr	r2, [r4, #12]
    c61a:	f105 0109 	add.w	r1, r5, #9
    c61e:	2001      	movs	r0, #1
    c620:	f003 fa02 	bl	fa28 <radio_tmr_start>
	radio_tmr_end_capture();
    c624:	f003 fabc 	bl	fba0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    c628:	462a      	mov	r2, r5
    c62a:	2105      	movs	r1, #5
    c62c:	480c      	ldr	r0, [pc, #48]	; (c660 <event_adv+0xbc>)
    c62e:	f7ff ff97 	bl	c560 <preempt_calc>
    c632:	4603      	mov	r3, r0
    c634:	b150      	cbz	r0, c64c <event_adv+0xa8>
		_radio.state = STATE_STOP;
    c636:	2304      	movs	r3, #4
    c638:	7563      	strb	r3, [r4, #21]
}
    c63a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    c63e:	f003 b8ef 	b.w	f820 <radio_disable>
	} else if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) &&
    c642:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c646:	d0e7      	beq.n	c618 <event_adv+0x74>
		struct ll_filter *wl = ctrl_filter_get(true);
    c648:	4630      	mov	r0, r6
    c64a:	e7de      	b.n	c60a <event_adv+0x66>
		ticker_status =
    c64c:	4a05      	ldr	r2, [pc, #20]	; (c664 <event_adv+0xc0>)
    c64e:	4601      	mov	r1, r0
    c650:	f7fd fe0e 	bl	a270 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c654:	f030 0302 	bics.w	r3, r0, #2
    c658:	d1ac      	bne.n	c5b4 <event_adv+0x10>
}
    c65a:	bd70      	pop	{r4, r5, r6, pc}
    c65c:	20000d78 	.word	0x20000d78
    c660:	20000d90 	.word	0x20000d90
    c664:	0000bc91 	.word	0x0000bc91

0000c668 <event_slave>:
{
    c668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c66c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    c66e:	4b8c      	ldr	r3, [pc, #560]	; (c8a0 <event_slave+0x238>)
    c670:	7d1a      	ldrb	r2, [r3, #20]
{
    c672:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c674:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    c678:	461d      	mov	r5, r3
    c67a:	b12a      	cbz	r2, c688 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c67c:	4040      	eors	r0, r0
    c67e:	f380 8811 	msr	BASEPRI, r0
    c682:	f04f 0003 	mov.w	r0, #3
    c686:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    c688:	7c1b      	ldrb	r3, [r3, #16]
    c68a:	8c22      	ldrh	r2, [r4, #32]
    c68c:	b2db      	uxtb	r3, r3
    c68e:	3207      	adds	r2, #7
    c690:	4293      	cmp	r3, r2
    c692:	d1f3      	bne.n	c67c <event_slave+0x14>
	_radio.packet_counter = 0U;
    c694:	f8a5 8118 	strh.w	r8, [r5, #280]	; 0x118
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    c698:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    c69a:	2603      	movs	r6, #3
    c69c:	752e      	strb	r6, [r5, #20]
	_radio.ticker_id_prepare = 0U;
    c69e:	f885 8010 	strb.w	r8, [r5, #16]
	_radio.ticker_id_event =
    c6a2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    c6a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    c6a6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    c6aa:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    c6ac:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0U;
    c6ae:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	_radio.state = STATE_RX;
    c6b2:	756a      	strb	r2, [r5, #21]
	_radio.ticks_anchor = ticks_at_expire;
    c6b4:	60a8      	str	r0, [r5, #8]
	adv_scan_conn_configure();
    c6b6:	f7ff fa6b 	bl	bb90 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
    c6ba:	f104 0010 	add.w	r0, r4, #16
    c6be:	f003 f851 	bl	f764 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    c6c2:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    c6c4:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    c6c6:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    c6c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    c6cc:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c6ce:	f240 605b 	movw	r0, #1627	; 0x65b
    c6d2:	4319      	orrs	r1, r3
    c6d4:	f003 f8e0 	bl	f898 <radio_crc_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    c6d8:	2096      	movs	r0, #150	; 0x96
    c6da:	f003 f999 	bl	fa10 <radio_tmr_tifs_set>
				     conn->phy_flags);
    c6de:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    c6e2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    c6e6:	09d3      	lsrs	r3, r2, #7
    c6e8:	4641      	mov	r1, r8
    c6ea:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c6ee:	f000 0007 	and.w	r0, r0, #7
    c6f2:	f003 f8fb 	bl	f8ec <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c6f6:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    c6fa:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    c6fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    c702:	4620      	mov	r0, r4
    c704:	3108      	adds	r1, #8
    c706:	f009 f9e2 	bl	15ace <rx_packet_set>
	if (conn->data_chan_sel) {
    c70a:	7f62      	ldrb	r2, [r4, #29]
    c70c:	0653      	lsls	r3, r2, #25
    c70e:	f104 0c17 	add.w	ip, r4, #23
    c712:	f140 809b 	bpl.w	c84c <event_slave+0x1e4>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    c716:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    c718:	8be0      	ldrh	r0, [r4, #30]
    c71a:	3901      	subs	r1, #1
	prn_e = counter ^ chan_id;
    c71c:	4041      	eors	r1, r0
    c71e:	b289      	uxth	r1, r1
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c720:	ea4f 2811 	mov.w	r8, r1, lsr #8
    c724:	2308      	movs	r3, #8
	o = 0U;
    c726:	f04f 0e00 	mov.w	lr, #0
		o |= (i & 1);
    c72a:	f008 0901 	and.w	r9, r8, #1
    c72e:	3b01      	subs	r3, #1
    c730:	ea49 0e4e 	orr.w	lr, r9, lr, lsl #1
	for (iterate = 0U; iterate < 8; iterate++) {
    c734:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		o |= (i & 1);
    c738:	fa5f fe8e 	uxtb.w	lr, lr
		i >>= 1;
    c73c:	ea4f 0858 	mov.w	r8, r8, lsr #1
	for (iterate = 0U; iterate < 8; iterate++) {
    c740:	d1f3      	bne.n	c72a <event_slave+0xc2>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c742:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
    c746:	fa0f fe8e 	sxth.w	lr, lr
    c74a:	b2c9      	uxtb	r1, r1
    c74c:	f04f 0808 	mov.w	r8, #8
		o |= (i & 1);
    c750:	f001 0901 	and.w	r9, r1, #1
    c754:	f108 38ff 	add.w	r8, r8, #4294967295
    c758:	ea49 0343 	orr.w	r3, r9, r3, lsl #1
	for (iterate = 0U; iterate < 8; iterate++) {
    c75c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
		o |= (i & 1);
    c760:	b2db      	uxtb	r3, r3
		i >>= 1;
    c762:	ea4f 0151 	mov.w	r1, r1, lsr #1
	for (iterate = 0U; iterate < 8; iterate++) {
    c766:	d1f3      	bne.n	c750 <event_slave+0xe8>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c768:	ea4e 0303 	orr.w	r3, lr, r3
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c76c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    c770:	3e01      	subs	r6, #1
    c772:	18c1      	adds	r1, r0, r3
	for (iterate = 0U; iterate < 3; iterate++) {
    c774:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c778:	b289      	uxth	r1, r1
	for (iterate = 0U; iterate < 3; iterate++) {
    c77a:	d1d1      	bne.n	c720 <event_slave+0xb8>
	chan_next = prn_e % 37;
    c77c:	2325      	movs	r3, #37	; 0x25
	prn_e ^= chan_id;
    c77e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    c780:	fbb1 f0f3 	udiv	r0, r1, r3
    c784:	fb03 1010 	mls	r0, r3, r0, r1
    c788:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c78a:	08c3      	lsrs	r3, r0, #3
    c78c:	f000 0607 	and.w	r6, r0, #7
    c790:	f81c 3003 	ldrb.w	r3, [ip, r3]
    c794:	4133      	asrs	r3, r6
    c796:	07de      	lsls	r6, r3, #31
    c798:	d406      	bmi.n	c7a8 <event_slave+0x140>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    c79a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    c79e:	4351      	muls	r1, r2
		chan_next = chan_sel_remap(chan_map, chan_index);
    c7a0:	0c09      	lsrs	r1, r1, #16
		chan_next = chan_sel_remap(chan_map, chan_index);
    c7a2:	4660      	mov	r0, ip
    c7a4:	f009 f978 	bl	15a98 <chan_sel_remap>
	chan_set(data_chan_use);
    c7a8:	f009 f9f6 	bl	15b98 <chan_set>
	conn->slave.window_widening_event_us +=
    c7ac:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
    c7b0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0U;
    c7b2:	2200      	movs	r2, #0
    c7b4:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    c7b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    c7b8:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    c7ba:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    c7bc:	bf88      	it	hi
    c7be:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    c7c0:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0U;
    c7c4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    c7c6:	4413      	add	r3, r2
    c7c8:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c7ca:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0U;
    c7cc:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c7ce:	f107 0109 	add.w	r1, r7, #9
    c7d2:	4630      	mov	r0, r6
    c7d4:	f003 f928 	bl	fa28 <radio_tmr_start>
    c7d8:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    c7da:	f003 f9b5 	bl	fb48 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    c7de:	4630      	mov	r0, r6
    c7e0:	f003 f9cc 	bl	fb7c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c7e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    c7e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c7e8:	f103 0650 	add.w	r6, r3, #80	; 0x50
    c7ec:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    c7f0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    c7f4:	2101      	movs	r1, #1
    c7f6:	f000 0007 	and.w	r0, r0, #7
    c7fa:	f009 fd4e 	bl	1629a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c7fe:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    c800:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    c802:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    c806:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    c80a:	2802      	cmp	r0, #2
    c80c:	d03c      	beq.n	c888 <event_slave+0x220>
		return 40;
    c80e:	2804      	cmp	r0, #4
    c810:	bf0c      	ite	eq
    c812:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    c816:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    c818:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    c81a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    c81c:	f009 fd3f 	bl	1629e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    c820:	4430      	add	r0, r6
    c822:	f003 f985 	bl	fb30 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    c826:	f894 1020 	ldrb.w	r1, [r4, #32]
    c82a:	3107      	adds	r1, #7
    c82c:	463a      	mov	r2, r7
    c82e:	b2c9      	uxtb	r1, r1
    c830:	4620      	mov	r0, r4
    c832:	f7ff fe95 	bl	c560 <preempt_calc>
    c836:	4603      	mov	r3, r0
    c838:	b340      	cbz	r0, c88c <event_slave+0x224>
		_radio.state = STATE_STOP;
    c83a:	2304      	movs	r3, #4
    c83c:	756b      	strb	r3, [r5, #21]
		radio_disable();
    c83e:	f002 ffef 	bl	f820 <radio_disable>
	packet_tx_enqueue(2);
    c842:	2002      	movs	r0, #2
}
    c844:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    c848:	f7ff bb92 	b.w	bf70 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    c84c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    c84e:	7fa3      	ldrb	r3, [r4, #30]
    c850:	fb01 3303 	mla	r3, r1, r3, r3
    c854:	7fe1      	ldrb	r1, [r4, #31]
    c856:	440b      	add	r3, r1
    c858:	2125      	movs	r1, #37	; 0x25
    c85a:	fb93 f6f1 	sdiv	r6, r3, r1
    c85e:	fb01 3316 	mls	r3, r1, r6, r3
    c862:	b2d8      	uxtb	r0, r3
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c864:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    c866:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c868:	f81c 1001 	ldrb.w	r1, [ip, r1]
    c86c:	f003 0307 	and.w	r3, r3, #7
    c870:	fa41 f303 	asr.w	r3, r1, r3
    c874:	07db      	lsls	r3, r3, #31
					   conn->data_chan_count);
    c876:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c87a:	d495      	bmi.n	c7a8 <event_slave+0x140>
		chan_index = chan_next % chan_count;
    c87c:	fbb0 f1f2 	udiv	r1, r0, r2
    c880:	fb02 0111 	mls	r1, r2, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    c884:	b2c9      	uxtb	r1, r1
    c886:	e78c      	b.n	c7a2 <event_slave+0x13a>
		return 24;
    c888:	2318      	movs	r3, #24
    c88a:	e7c5      	b.n	c818 <event_slave+0x1b0>
		ticker_status =
    c88c:	4a05      	ldr	r2, [pc, #20]	; (c8a4 <event_slave+0x23c>)
    c88e:	4601      	mov	r1, r0
    c890:	f7fd fcee 	bl	a270 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c894:	f030 0302 	bics.w	r3, r0, #2
    c898:	f47f aef0 	bne.w	c67c <event_slave+0x14>
    c89c:	e7d1      	b.n	c842 <event_slave+0x1da>
    c89e:	bf00      	nop
    c8a0:	20000d78 	.word	0x20000d78
    c8a4:	0000bc91 	.word	0x0000bc91

0000c8a8 <feature_rsp_send>:
{
    c8a8:	b570      	push	{r4, r5, r6, lr}
    c8aa:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8ac:	481e      	ldr	r0, [pc, #120]	; (c928 <feature_rsp_send+0x80>)
{
    c8ae:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8b0:	f008 ff1e 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    c8b4:	4604      	mov	r4, r0
    c8b6:	b3a0      	cbz	r0, c922 <feature_rsp_send+0x7a>
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    c8b8:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c8ba:	7972      	ldrb	r2, [r6, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    c8bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c8c0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c8c4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c8c8:	f043 0310 	orr.w	r3, r3, #16
    c8cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c8d0:	79b2      	ldrb	r2, [r6, #6]
    c8d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	conn->llcp_features &= feat_get(&req->features[0]);
    c8d6:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
    c8da:	f3c2 0210 	ubfx	r2, r2, #0, #17
    c8de:	4013      	ands	r3, r2
    c8e0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	conn->common.fex_valid = 1U;
    c8e4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
    c8e8:	f043 0320 	orr.w	r3, r3, #32
    c8ec:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c8f0:	7903      	ldrb	r3, [r0, #4]
    c8f2:	f043 0303 	orr.w	r3, r3, #3
    c8f6:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c8f8:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c8fa:	2309      	movs	r3, #9
    c8fc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c8fe:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c900:	2100      	movs	r1, #0
    c902:	4410      	add	r0, r2
    c904:	f006 fddb 	bl	134be <memset>
		conn->llcp_features & 0xFF;
    c908:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c90c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c90e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c910:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c912:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c914:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c916:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c918:	4621      	mov	r1, r4
    c91a:	f009 f9c4 	bl	15ca6 <ctrl_tx_sec_enqueue>
	return 0;
    c91e:	2000      	movs	r0, #0
}
    c920:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c922:	2001      	movs	r0, #1
    c924:	e7fc      	b.n	c920 <feature_rsp_send+0x78>
    c926:	bf00      	nop
    c928:	20000ed4 	.word	0x20000ed4

0000c92c <reject_ext_ind_send>:
{
    c92c:	b570      	push	{r4, r5, r6, lr}
    c92e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c930:	480b      	ldr	r0, [pc, #44]	; (c960 <reject_ext_ind_send+0x34>)
{
    c932:	460e      	mov	r6, r1
    c934:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c936:	f008 fedb 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    c93a:	b178      	cbz	r0, c95c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c93c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c93e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c940:	f043 0303 	orr.w	r3, r3, #3
    c944:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c946:	2303      	movs	r3, #3
    c948:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c94a:	2311      	movs	r3, #17
    c94c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c94e:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c950:	4601      	mov	r1, r0
    c952:	4620      	mov	r0, r4
    c954:	f009 f979 	bl	15c4a <ctrl_tx_enqueue>
	return 0;
    c958:	2000      	movs	r0, #0
}
    c95a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c95c:	2001      	movs	r0, #1
    c95e:	e7fc      	b.n	c95a <reject_ext_ind_send+0x2e>
    c960:	20000ed4 	.word	0x20000ed4

0000c964 <mayfly_xtal_stop_calc>:
{
    c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c968:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c96a:	2302      	movs	r3, #2
    c96c:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
    c96e:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
    c970:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
    c974:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c976:	4e4e      	ldr	r6, [pc, #312]	; (cab0 <mayfly_xtal_stop_calc+0x14c>)
				    _radio.connection_count));
    c978:	4d4e      	ldr	r5, [pc, #312]	; (cab4 <mayfly_xtal_stop_calc+0x150>)
	ticker_id_next = 0xff;
    c97a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
    c97e:	4604      	mov	r4, r0
	ticks_to_expire = 0U;
    c980:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c982:	ab09      	add	r3, sp, #36	; 0x24
    c984:	e9cd 6301 	strd	r6, r3, [sp, #4]
    c988:	ab0c      	add	r3, sp, #48	; 0x30
    c98a:	9300      	str	r3, [sp, #0]
    c98c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    c990:	ab0d      	add	r3, sp, #52	; 0x34
    c992:	2101      	movs	r1, #1
    c994:	2000      	movs	r0, #0
    c996:	f7fd fc2d 	bl	a1f4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    c99a:	2802      	cmp	r0, #2
    c99c:	d00b      	beq.n	c9b6 <mayfly_xtal_stop_calc+0x52>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    c99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9a0:	b16b      	cbz	r3, c9be <mayfly_xtal_stop_calc+0x5a>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c9a2:	4040      	eors	r0, r0
    c9a4:	f380 8811 	msr	BASEPRI, r0
    c9a8:	f04f 0003 	mov.w	r0, #3
    c9ac:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    c9ae:	2101      	movs	r1, #1
    c9b0:	2000      	movs	r0, #0
    c9b2:	f7fd fc95 	bl	a2e0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9b8:	2b02      	cmp	r3, #2
    c9ba:	d0f8      	beq.n	c9ae <mayfly_xtal_stop_calc+0x4a>
    c9bc:	e7ef      	b.n	c99e <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    c9be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    c9c2:	2bff      	cmp	r3, #255	; 0xff
    c9c4:	d004      	beq.n	c9d0 <mayfly_xtal_stop_calc+0x6c>
    c9c6:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c9ca:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    c9cc:	4293      	cmp	r3, r2
    c9ce:	dad8      	bge.n	c982 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    c9d0:	1f5a      	subs	r2, r3, #5
    c9d2:	b2d2      	uxtb	r2, r2
    c9d4:	2af9      	cmp	r2, #249	; 0xf9
    c9d6:	4f38      	ldr	r7, [pc, #224]	; (cab8 <mayfly_xtal_stop_calc+0x154>)
    c9d8:	d805      	bhi.n	c9e6 <mayfly_xtal_stop_calc+0x82>
				_radio.connection_count))) {
    c9da:	4a36      	ldr	r2, [pc, #216]	; (cab4 <mayfly_xtal_stop_calc+0x150>)
    c9dc:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c9e0:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    c9e2:	4293      	cmp	r3, r2
    c9e4:	db07      	blt.n	c9f6 <mayfly_xtal_stop_calc+0x92>
		if (s_xtal_retained) {
    c9e6:	783b      	ldrb	r3, [r7, #0]
    c9e8:	b113      	cbz	r3, c9f0 <mayfly_xtal_stop_calc+0x8c>
    c9ea:	2001      	movs	r0, #1
    c9ec:	f7ff f97a 	bl	bce4 <mayfly_xtal_retain.part.15>
}
    c9f0:	b00e      	add	sp, #56	; 0x38
    c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    c9f6:	a90a      	add	r1, sp, #40	; 0x28
    c9f8:	b2e0      	uxtb	r0, r4
    c9fa:	f7ff f955 	bl	bca8 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    c9fe:	2800      	cmp	r0, #0
    ca00:	d0cf      	beq.n	c9a2 <mayfly_xtal_stop_calc+0x3e>
    ca02:	e9d0 3500 	ldrd	r3, r5, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    ca06:	2b00      	cmp	r3, #0
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
    ca08:	bfb8      	it	lt
    ca0a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
    ca0c:	429d      	cmp	r5, r3
    ca0e:	bf38      	it	cc
    ca10:	461d      	movcc	r5, r3
    ca12:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    ca14:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    ca18:	a90b      	add	r1, sp, #44	; 0x2c
    ca1a:	f103 0831 	add.w	r8, r3, #49	; 0x31
    ca1e:	f7ff f943 	bl	bca8 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    ca22:	4604      	mov	r4, r0
    ca24:	2800      	cmp	r0, #0
    ca26:	d0bc      	beq.n	c9a2 <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next =
    ca28:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    ca2c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    ca2e:	429e      	cmp	r6, r3
    ca30:	bf38      	it	cc
    ca32:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    ca34:	2a00      	cmp	r2, #0
    ca36:	da09      	bge.n	ca4c <mayfly_xtal_stop_calc+0xe8>
    ca38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		u32_t ticks_reduced = (hdr_next->ticks_xtal_to_start &
    ca3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    ca3e:	1b92      	subs	r2, r2, r6
		if (ticks_to_expire > ticks_reduced) {
    ca40:	429a      	cmp	r2, r3
			ticks_to_expire -= ticks_reduced;
    ca42:	bf35      	itete	cc
    ca44:	1a9a      	subcc	r2, r3, r2
			ticks_to_expire = 0U;
    ca46:	2300      	movcs	r3, #0
			ticks_to_expire -= ticks_reduced;
    ca48:	920c      	strcc	r2, [sp, #48]	; 0x30
			ticks_to_expire = 0U;
    ca4a:	930c      	strcs	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    ca4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca4e:	783a      	ldrb	r2, [r7, #0]
	    (ticks_slot_abs +
    ca50:	4445      	add	r5, r8
	if (ticks_to_expire >
    ca52:	429d      	cmp	r5, r3
    ca54:	d20a      	bcs.n	ca6c <mayfly_xtal_stop_calc+0x108>
		if (s_xtal_retained) {
    ca56:	b112      	cbz	r2, ca5e <mayfly_xtal_stop_calc+0xfa>
    ca58:	2001      	movs	r0, #1
    ca5a:	f7ff f943 	bl	bce4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    ca5e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ca62:	2101      	movs	r1, #1
    ca64:	4620      	mov	r0, r4
    ca66:	f7ff fa09 	bl	be7c <prepare_normal_set>
    ca6a:	e7c1      	b.n	c9f0 <mayfly_xtal_stop_calc+0x8c>
		if (!s_xtal_retained) {
    ca6c:	b93a      	cbnz	r2, ca7e <mayfly_xtal_stop_calc+0x11a>
			s_xtal_retained = 1U;
    ca6e:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    ca70:	4b12      	ldr	r3, [pc, #72]	; (cabc <mayfly_xtal_stop_calc+0x158>)
			s_xtal_retained = 1U;
    ca72:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    ca74:	4611      	mov	r1, r2
    ca76:	f7fc fded 	bl	9654 <mayfly_enqueue>
			LL_ASSERT(!retval);
    ca7a:	2800      	cmp	r0, #0
    ca7c:	d191      	bne.n	c9a2 <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    ca7e:	6823      	ldr	r3, [r4, #0]
    ca80:	2b00      	cmp	r3, #0
    ca82:	dbb5      	blt.n	c9f0 <mayfly_xtal_stop_calc+0x8c>
    ca84:	42b3      	cmp	r3, r6
    ca86:	d9b3      	bls.n	c9f0 <mayfly_xtal_stop_calc+0x8c>
			ticker_status =
    ca88:	2000      	movs	r0, #0
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    ca8a:	1b9b      	subs	r3, r3, r6
			ticker_status =
    ca8c:	490c      	ldr	r1, [pc, #48]	; (cac0 <mayfly_xtal_stop_calc+0x15c>)
    ca8e:	9105      	str	r1, [sp, #20]
    ca90:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ca94:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ca98:	9406      	str	r4, [sp, #24]
    ca9a:	e9cd 0003 	strd	r0, r0, [sp, #12]
    ca9e:	9000      	str	r0, [sp, #0]
    caa0:	2101      	movs	r1, #1
    caa2:	f7fd fb25 	bl	a0f0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    caa6:	f030 0302 	bics.w	r3, r0, #2
    caaa:	d0a1      	beq.n	c9f0 <mayfly_xtal_stop_calc+0x8c>
    caac:	e779      	b.n	c9a2 <mayfly_xtal_stop_calc+0x3e>
    caae:	bf00      	nop
    cab0:	00015a7d 	.word	0x00015a7d
    cab4:	20000d78 	.word	0x20000d78
    cab8:	2000215b 	.word	0x2000215b
    cabc:	200051b0 	.word	0x200051b0
    cac0:	00015a81 	.word	0x00015a81

0000cac4 <isr_rx_conn_pkt_ctrl>:
{
    cac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    cac8:	7ac7      	ldrb	r7, [r0, #11]
{
    caca:	4604      	mov	r4, r0
    cacc:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    cace:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    cad2:	2f19      	cmp	r7, #25
    cad4:	f201 80b6 	bhi.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    cad8:	e8df f017 	tbh	[pc, r7, lsl #1]
    cadc:	0078001a 	.word	0x0078001a
    cae0:	00c200b4 	.word	0x00c200b4
    cae4:	011800f0 	.word	0x011800f0
    cae8:	0582013c 	.word	0x0582013c
    caec:	01950175 	.word	0x01950175
    caf0:	01f001c6 	.word	0x01f001c6
    caf4:	028a0221 	.word	0x028a0221
    caf8:	02a2018a 	.word	0x02a2018a
    cafc:	0493040b 	.word	0x0493040b
    cb00:	0575055b 	.word	0x0575055b
    cb04:	05f405f4 	.word	0x05f405f4
    cb08:	07a906df 	.word	0x07a906df
    cb0c:	088007f0 	.word	0x088007f0
		if (!_radio.conn_curr->role ||
    cb10:	4ed4      	ldr	r6, [pc, #848]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cb12:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    cb16:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cb1a:	2b00      	cmp	r3, #0
    cb1c:	f281 8092 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    cb20:	7a41      	ldrb	r1, [r0, #9]
    cb22:	2000      	movs	r0, #0
    cb24:	f7fe fdbc 	bl	b6a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cb28:	2800      	cmp	r0, #0
    cb2a:	f001 808b 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cb2e:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    cb32:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    cb34:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cb36:	041b      	lsls	r3, r3, #16
    cb38:	d47d      	bmi.n	cc36 <isr_rx_conn_pkt_ctrl+0x172>
	if (conn->llcp_req != conn->llcp_ack) {
    cb3a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    cb3e:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    cb42:	429a      	cmp	r2, r3
    cb44:	d17c      	bne.n	cc40 <isr_rx_conn_pkt_ctrl+0x17c>
	if (_radio.conn_upd == 0) {
    cb46:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    cb4a:	b90a      	cbnz	r2, cb50 <isr_rx_conn_pkt_ctrl+0x8c>
		_radio.conn_upd = conn;
    cb4c:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    cb50:	7b22      	ldrb	r2, [r4, #12]
    cb52:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    cb56:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    cb5a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cb5e:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    cb60:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    cb64:	7c20      	ldrb	r0, [r4, #16]
    cb66:	7be2      	ldrb	r2, [r4, #15]
    cb68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    cb6c:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    cb70:	7ca0      	ldrb	r0, [r4, #18]
    cb72:	7c62      	ldrb	r2, [r4, #17]
    cb74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    cb78:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    cb7c:	7ce2      	ldrb	r2, [r4, #19]
    cb7e:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    cb80:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    cb84:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    cb88:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    cb8c:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0U;
    cb90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    cb94:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    cb98:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0U;
    cb9a:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    cb9e:	2201      	movs	r2, #1
    cba0:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    cba4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cba8:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    cbac:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    cbb0:	4293      	cmp	r3, r2
    cbb2:	d007      	beq.n	cbc4 <isr_rx_conn_pkt_ctrl+0x100>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    cbb4:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cbb8:	f003 0307 	and.w	r3, r3, #7
    cbbc:	2b04      	cmp	r3, #4
    cbbe:	d101      	bne.n	cbc4 <isr_rx_conn_pkt_ctrl+0x100>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cbc0:	f885 20cd 	strb.w	r2, [r5, #205]	; 0xcd
			_radio.conn_curr->procedure_expire = 0U;
    cbc4:	2000      	movs	r0, #0
    cbc6:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    cbca:	e032      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		if (!_radio.conn_curr->role ||
    cbcc:	4ba5      	ldr	r3, [pc, #660]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cbce:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    cbd2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	f281 8034 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    cbdc:	7a41      	ldrb	r1, [r0, #9]
    cbde:	2001      	movs	r0, #1
    cbe0:	f7fe fd5e 	bl	b6a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cbe4:	2800      	cmp	r0, #0
    cbe6:	f001 802d 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    cbea:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    cbee:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    cbf0:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    cbf2:	041f      	lsls	r7, r3, #16
    cbf4:	d41f      	bmi.n	cc36 <isr_rx_conn_pkt_ctrl+0x172>
	if (conn->llcp_req != conn->llcp_ack) {
    cbf6:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    cbfa:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    cbfe:	429a      	cmp	r2, r3
    cc00:	d11e      	bne.n	cc40 <isr_rx_conn_pkt_ctrl+0x17c>
	memcpy(&conn->llcp.chan_map.chm[0],
    cc02:	2205      	movs	r2, #5
    cc04:	f104 010c 	add.w	r1, r4, #12
    cc08:	f105 0079 	add.w	r0, r5, #121	; 0x79
    cc0c:	f006 fc2a 	bl	13464 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    cc10:	7c63      	ldrb	r3, [r4, #17]
    cc12:	7ca2      	ldrb	r2, [r4, #18]
    cc14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    cc18:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    cc1c:	2302      	movs	r3, #2
    cc1e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    cc22:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0U;
    cc26:	2000      	movs	r0, #0
	conn->llcp_ack--;
    cc28:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0U;
    cc2a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    cc2e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    cc32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INSTANT_PASSED;
    cc36:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    cc38:	f885 30a3 	strb.w	r3, [r5, #163]	; 0xa3
	return 0;
    cc3c:	2000      	movs	r0, #0
    cc3e:	e7f8      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    cc40:	232a      	movs	r3, #42	; 0x2a
    cc42:	e7f9      	b.n	cc38 <isr_rx_conn_pkt_ctrl+0x174>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    cc44:	7a41      	ldrb	r1, [r0, #9]
    cc46:	2002      	movs	r0, #2
    cc48:	f7fe fd2a 	bl	b6a0 <pdu_len_cmp>
    cc4c:	2800      	cmp	r0, #0
    cc4e:	f000 87f9 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		_radio.conn_curr->llcp_terminate.reason_peer =
    cc52:	4b84      	ldr	r3, [pc, #528]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cc54:	7b22      	ldrb	r2, [r4, #12]
    cc56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    cc5a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    cc5e:	e7ed      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		if (!_radio.conn_curr->role ||
    cc60:	4e80      	ldr	r6, [pc, #512]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cc62:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    cc66:	f998 301d 	ldrsb.w	r3, [r8, #29]
    cc6a:	2b00      	cmp	r3, #0
    cc6c:	f280 87ea 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    cc70:	7a41      	ldrb	r1, [r0, #9]
    cc72:	2003      	movs	r0, #3
    cc74:	f7fe fd14 	bl	b6a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cc78:	2800      	cmp	r0, #0
    cc7a:	f000 87e3 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    cc7e:	2208      	movs	r2, #8
    cc80:	f104 0116 	add.w	r1, r4, #22
    cc84:	f108 007a 	add.w	r0, r8, #122	; 0x7a
    cc88:	f006 fbec 	bl	13464 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    cc8c:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    cc90:	2204      	movs	r2, #4
    cc92:	f104 011e 	add.w	r1, r4, #30
    cc96:	f200 101d 	addw	r0, r0, #285	; 0x11d
    cc9a:	f006 fbe3 	bl	13464 <memcpy>
		_radio.conn_curr->pause_rx = 1U;
    cc9e:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    cca2:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
    cca6:	f042 0204 	orr.w	r2, r2, #4
    ccaa:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		_radio.conn_curr->procedure_expire =
    ccae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    ccb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1U;
    ccb6:	2301      	movs	r3, #1
    ccb8:	702b      	strb	r3, [r5, #0]
    ccba:	e7bf      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		if (_radio.conn_curr->role ||
    ccbc:	4d69      	ldr	r5, [pc, #420]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    ccbe:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    ccc2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	f2c0 87bc 	blt.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    cccc:	7a41      	ldrb	r1, [r0, #9]
    ccce:	2004      	movs	r0, #4
    ccd0:	f7fe fce6 	bl	b6a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ccd4:	2800      	cmp	r0, #0
    ccd6:	f000 87b5 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    ccda:	2208      	movs	r2, #8
    ccdc:	f104 010c 	add.w	r1, r4, #12
    cce0:	f106 0082 	add.w	r0, r6, #130	; 0x82
    cce4:	f006 fbbe 	bl	13464 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    cce8:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    ccec:	2204      	movs	r2, #4
    ccee:	f104 0114 	add.w	r1, r4, #20
    ccf2:	f200 1021 	addw	r0, r0, #289	; 0x121
    ccf6:	f006 fbb5 	bl	13464 <memcpy>
		_radio.conn_curr->pause_rx = 1U;
    ccfa:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    ccfe:	f892 315e 	ldrb.w	r3, [r2, #350]	; 0x15e
    cd02:	f043 0304 	orr.w	r3, r3, #4
    cd06:	f882 315e 	strb.w	r3, [r2, #350]	; 0x15e
    cd0a:	e797      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		if (_radio.conn_curr->role ||
    cd0c:	4b55      	ldr	r3, [pc, #340]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cd0e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    cd12:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cd16:	2b00      	cmp	r3, #0
    cd18:	f2c0 8794 	blt.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		      _radio.conn_curr->llcp_ack) &&
    cd1c:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
		if (_radio.conn_curr->role ||
    cd20:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    cd24:	42b3      	cmp	r3, r6
    cd26:	d004      	beq.n	cd32 <isr_rx_conn_pkt_ctrl+0x26e>
		      _radio.conn_curr->llcp_ack) &&
    cd28:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    cd2c:	2b03      	cmp	r3, #3
    cd2e:	f040 8789 	bne.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    cd32:	7a61      	ldrb	r1, [r4, #9]
    cd34:	2005      	movs	r0, #5
    cd36:	f7fe fcb3 	bl	b6a0 <pdu_len_cmp>
		     (_radio.conn_curr->llcp_type != LLCP_ENCRYPTION)) ||
    cd3a:	2800      	cmp	r0, #0
    cd3c:	f000 8782 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		_radio.conn_curr->llcp.encryption.initiate = 0U;
    cd40:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    cd42:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    cd44:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0U;
    cd46:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    cd4a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    cd4e:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    cd52:	e76e      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    cd54:	7a41      	ldrb	r1, [r0, #9]
    cd56:	2006      	movs	r0, #6
    cd58:	f7fe fca2 	bl	b6a0 <pdu_len_cmp>
    cd5c:	2800      	cmp	r0, #0
    cd5e:	f000 8771 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    cd62:	4a40      	ldr	r2, [pc, #256]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
		if (_radio.role == ROLE_SLAVE) {
    cd64:	7d11      	ldrb	r1, [r2, #20]
    cd66:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    cd6a:	2903      	cmp	r1, #3
    cd6c:	4611      	mov	r1, r2
    cd6e:	d121      	bne.n	cdb4 <isr_rx_conn_pkt_ctrl+0x2f0>
			     _radio.conn_curr->llcp_ack) &&
    cd70:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->llcp_req !=
    cd74:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    cd78:	4290      	cmp	r0, r2
    cd7a:	d004      	beq.n	cd86 <isr_rx_conn_pkt_ctrl+0x2c2>
			     _radio.conn_curr->llcp_ack) &&
    cd7c:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    cd80:	2803      	cmp	r0, #3
    cd82:	f040 875f 	bne.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
			_radio.conn_curr->llcp.encryption.initiate = 0U;
    cd86:	2000      	movs	r0, #0
    cd88:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    cd8c:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    cd8e:	2003      	movs	r0, #3
    cd90:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    cd94:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    cd98:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
    cd9c:	0656      	lsls	r6, r2, #25
    cd9e:	d505      	bpl.n	cdac <isr_rx_conn_pkt_ctrl+0x2e8>
			_radio.conn_curr->refresh = 0U;
    cda0:	f36f 1286 	bfc	r2, #6, #1
    cda4:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    cda8:	230b      	movs	r3, #11
    cdaa:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1U;
    cdac:	2301      	movs	r3, #1
    cdae:	702b      	strb	r3, [r5, #0]
				break;
    cdb0:	f000 bc84 	b.w	d6bc <isr_rx_conn_pkt_ctrl+0xbf8>
			_radio.conn_curr->pause_rx = 0U;
    cdb4:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
			_radio.conn_curr->pause_tx = 0U;
    cdb8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    cdbc:	f36f 02c3 	bfc	r2, #3, #1
    cdc0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    cdc4:	e7e8      	b.n	cd98 <isr_rx_conn_pkt_ctrl+0x2d4>
		if (!_radio.conn_curr->role ||
    cdc6:	4b27      	ldr	r3, [pc, #156]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cdc8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    cdcc:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	f280 8737 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    cdd6:	7a41      	ldrb	r1, [r0, #9]
    cdd8:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    cdda:	f7fe fc61 	bl	b6a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    cdde:	2800      	cmp	r0, #0
    cde0:	f000 8730 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    cde4:	4631      	mov	r1, r6
    cde6:	4628      	mov	r0, r5
}
    cde8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    cdec:	f7ff bd5c 	b.w	c8a8 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    cdf0:	4b1c      	ldr	r3, [pc, #112]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
    cdf2:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    cdf6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	f2c0 8722 	blt.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    ce00:	7a41      	ldrb	r1, [r0, #9]
    ce02:	200e      	movs	r0, #14
    ce04:	e7e9      	b.n	cdda <isr_rx_conn_pkt_ctrl+0x316>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    ce06:	7a41      	ldrb	r1, [r0, #9]
    ce08:	2009      	movs	r0, #9
    ce0a:	f7fe fc49 	bl	b6a0 <pdu_len_cmp>
    ce0e:	2800      	cmp	r0, #0
    ce10:	f000 8718 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    ce14:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    ce16:	7b62      	ldrb	r2, [r4, #13]
    ce18:	4812      	ldr	r0, [pc, #72]	; (ce64 <isr_rx_conn_pkt_ctrl+0x3a0>)
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    ce1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    ce1e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    ce22:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    ce26:	f043 0310 	orr.w	r3, r3, #16
    ce2a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
    ce2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    ce32:	7ba2      	ldrb	r2, [r4, #14]
    ce34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    ce38:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
    ce3c:	f3c2 0210 	ubfx	r2, r2, #0, #17
    ce40:	4013      	ands	r3, r2
    ce42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
		_radio.conn_curr->common.fex_valid = 1U;
    ce46:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ce4a:	f043 0320 	orr.w	r3, r3, #32
    ce4e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1U;
    ce52:	2301      	movs	r3, #1
    ce54:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0U;
    ce56:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0U;
    ce5a:	2000      	movs	r0, #0
    ce5c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    ce60:	e6e7      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
    ce62:	bf00      	nop
    ce64:	20000d78 	.word	0x20000d78
		if (!_radio.conn_curr->role ||
    ce68:	4ea1      	ldr	r6, [pc, #644]	; (d0f0 <isr_rx_conn_pkt_ctrl+0x62c>)
    ce6a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    ce6e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ce72:	2b00      	cmp	r3, #0
    ce74:	f280 86e6 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    ce78:	7a41      	ldrb	r1, [r0, #9]
    ce7a:	200a      	movs	r0, #10
    ce7c:	f7fe fc10 	bl	b6a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ce80:	2800      	cmp	r0, #0
    ce82:	f000 86df 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce86:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    ce8a:	f008 fc31 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    ce8e:	4601      	mov	r1, r0
    ce90:	b908      	cbnz	r0, ce96 <isr_rx_conn_pkt_ctrl+0x3d2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ce92:	2001      	movs	r0, #1
    ce94:	e6cd      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		conn->refresh = 1U;
    ce96:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	conn->enc_rx = 0U;
    ce9a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    ce9e:	f36f 1304 	bfc	r3, #4, #1
    cea2:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cea6:	7903      	ldrb	r3, [r0, #4]
    cea8:	f043 0303 	orr.w	r3, r3, #3
    ceac:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ceae:	2301      	movs	r3, #1
    ceb0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    ceb2:	230b      	movs	r3, #11
    ceb4:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    ceb6:	4628      	mov	r0, r5
    ceb8:	f000 bc93 	b.w	d7e2 <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    cebc:	7a41      	ldrb	r1, [r0, #9]
    cebe:	200b      	movs	r0, #11
    cec0:	f7fe fbee 	bl	b6a0 <pdu_len_cmp>
    cec4:	2800      	cmp	r0, #0
    cec6:	f000 86bd 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    ceca:	4889      	ldr	r0, [pc, #548]	; (d0f0 <isr_rx_conn_pkt_ctrl+0x62c>)
    cecc:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    ced0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ced4:	2b00      	cmp	r3, #0
    ced6:	db1b      	blt.n	cf10 <isr_rx_conn_pkt_ctrl+0x44c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ced8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    cedc:	f008 fc08 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    cee0:	4601      	mov	r1, r0
    cee2:	2800      	cmp	r0, #0
    cee4:	d0d5      	beq.n	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
		conn->enc_tx = 0U;
    cee6:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->pause_rx = 1U;
    ceea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0U;
    ceee:	f043 0304 	orr.w	r3, r3, #4
    cef2:	f36f 1304 	bfc	r3, #4, #1
    cef6:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cefa:	7903      	ldrb	r3, [r0, #4]
    cefc:	f043 0303 	orr.w	r3, r3, #3
    cf00:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    cf02:	2301      	movs	r3, #1
    cf04:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    cf06:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    cf08:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    cf0a:	4620      	mov	r0, r4
    cf0c:	f000 bc69 	b.w	d7e2 <isr_rx_conn_pkt_ctrl+0xd1e>
		conn->enc_tx = 0U;
    cf10:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    cf14:	f36f 1345 	bfc	r3, #5, #1
    cf18:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    cf1c:	e68e      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    cf1e:	7a41      	ldrb	r1, [r0, #9]
    cf20:	200c      	movs	r0, #12
    cf22:	f7fe fbbd 	bl	b6a0 <pdu_len_cmp>
    cf26:	2800      	cmp	r0, #0
    cf28:	f000 868c 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    cf2c:	4870      	ldr	r0, [pc, #448]	; (d0f0 <isr_rx_conn_pkt_ctrl+0x62c>)
    cf2e:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    cf32:	f896 3098 	ldrb.w	r3, [r6, #152]	; 0x98
    cf36:	f013 0701 	ands.w	r7, r3, #1
    cf3a:	d150      	bne.n	cfde <isr_rx_conn_pkt_ctrl+0x51a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf3c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    cf40:	f008 fbd6 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    cf44:	4601      	mov	r1, r0
    cf46:	2800      	cmp	r0, #0
    cf48:	d0a3      	beq.n	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
		conn->llcp_version.tx = 1U;
    cf4a:	f896 3098 	ldrb.w	r3, [r6, #152]	; 0x98
    cf4e:	f043 0301 	orr.w	r3, r3, #1
    cf52:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf56:	7903      	ldrb	r3, [r0, #4]
    cf58:	f043 0303 	orr.w	r3, r3, #3
    cf5c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    cf5e:	2306      	movs	r3, #6
    cf60:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    cf62:	230c      	movs	r3, #12
    cf64:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    cf66:	230a      	movs	r3, #10
    cf68:	7203      	strb	r3, [r0, #8]
		v->company_id =	CONFIG_BT_CTLR_COMPANY_ID;
    cf6a:	f06f 030e 	mvn.w	r3, #14
    cf6e:	7243      	strb	r3, [r0, #9]
    cf70:	2305      	movs	r3, #5
    cf72:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	CONFIG_BT_CTLR_SUBVERSION_NUMBER;
    cf74:	f04f 33ff 	mov.w	r3, #4294967295
    cf78:	72c3      	strb	r3, [r0, #11]
    cf7a:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    cf7c:	4630      	mov	r0, r6
    cf7e:	f008 fe92 	bl	15ca6 <ctrl_tx_sec_enqueue>
	conn->empty = 1U;
    cf82:	f896 315e 	ldrb.w	r3, [r6, #350]	; 0x15e
    cf86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf8a:	f886 315e 	strb.w	r3, [r6, #350]	; 0x15e
	pdu_data_tx = (void *)radio_pkt_empty_get();
    cf8e:	f002 fc99 	bl	f8c4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf92:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0U;
    cf94:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf96:	2201      	movs	r2, #1
    cf98:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    cf9c:	f8d6 2148 	ldr.w	r2, [r6, #328]	; 0x148
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cfa0:	7003      	strb	r3, [r0, #0]
    cfa2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    cfa4:	b1c2      	cbz	r2, cfd8 <isr_rx_conn_pkt_ctrl+0x514>
		pdu_data_tx->md = 1U;
    cfa6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    cfaa:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    cfac:	7b23      	ldrb	r3, [r4, #12]
    cfae:	f886 3099 	strb.w	r3, [r6, #153]	; 0x99
	conn->llcp_version.company_id = v->company_id;
    cfb2:	7ba2      	ldrb	r2, [r4, #14]
    cfb4:	7b63      	ldrb	r3, [r4, #13]
    cfb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cfba:	f8a6 309a 	strh.w	r3, [r6, #154]	; 0x9a
	conn->llcp_version.sub_version_number = v->sub_version_number;
    cfbe:	7be3      	ldrb	r3, [r4, #15]
    cfc0:	7c22      	ldrb	r2, [r4, #16]
    cfc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cfc6:	f8a6 309c 	strh.w	r3, [r6, #156]	; 0x9c
	conn->llcp_version.rx = 1U;
    cfca:	f896 3098 	ldrb.w	r3, [r6, #152]	; 0x98
    cfce:	f043 0302 	orr.w	r3, r3, #2
    cfd2:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
    cfd6:	e631      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		pdu_data_tx->md = 0U;
    cfd8:	f362 1304 	bfi	r3, r2, #4, #1
    cfdc:	e7e5      	b.n	cfaa <isr_rx_conn_pkt_ctrl+0x4e6>
	} else if (!conn->llcp_version.rx) {
    cfde:	f013 0302 	ands.w	r3, r3, #2
    cfe2:	f47f ae2b 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		conn->procedure_expire = 0U;
    cfe6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1U;
    cfea:	2301      	movs	r3, #1
    cfec:	702b      	strb	r3, [r5, #0]
    cfee:	e7dd      	b.n	cfac <isr_rx_conn_pkt_ctrl+0x4e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    cff0:	7a41      	ldrb	r1, [r0, #9]
    cff2:	200d      	movs	r0, #13
    cff4:	f7fe fb54 	bl	b6a0 <pdu_len_cmp>
    cff8:	2800      	cmp	r0, #0
    cffa:	f000 8623 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    cffe:	4b3c      	ldr	r3, [pc, #240]	; (d0f0 <isr_rx_conn_pkt_ctrl+0x62c>)
    d000:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
		_radio.conn_curr->pause_rx = 0U;
    d004:	f892 315e 	ldrb.w	r3, [r2, #350]	; 0x15e
		_radio.conn_curr->pause_tx = 0U;
    d008:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d00c:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0U;
    d010:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0U;
    d012:	f882 315e 	strb.w	r3, [r2, #350]	; 0x15e
		_radio.conn_curr->procedure_expire = 0U;
    d016:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1U;
    d01a:	2301      	movs	r3, #1
    d01c:	702b      	strb	r3, [r5, #0]
    d01e:	e608      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d020:	7a41      	ldrb	r1, [r0, #9]
    d022:	200f      	movs	r0, #15
    d024:	f7fe fb3c 	bl	b6a0 <pdu_len_cmp>
    d028:	2800      	cmp	r0, #0
    d02a:	f000 860b 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    d02e:	4a30      	ldr	r2, [pc, #192]	; (d0f0 <isr_rx_conn_pkt_ctrl+0x62c>)
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d030:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d034:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d038:	b13b      	cbz	r3, d04a <isr_rx_conn_pkt_ctrl+0x586>
    d03a:	4283      	cmp	r3, r0
    d03c:	d005      	beq.n	d04a <isr_rx_conn_pkt_ctrl+0x586>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d03e:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d040:	210f      	movs	r1, #15
}
    d042:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d046:	f7ff bc71 	b.w	c92c <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d04a:	f990 601d 	ldrsb.w	r6, [r0, #29]
    d04e:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
    d052:	f890 10cd 	ldrb.w	r1, [r0, #205]	; 0xcd
    d056:	2e00      	cmp	r6, #0
    d058:	f2c0 80b6 	blt.w	d1c8 <isr_rx_conn_pkt_ctrl+0x704>
			if ((conn->llcp_conn_param.req !=
    d05c:	4299      	cmp	r1, r3
    d05e:	d009      	beq.n	d074 <isr_rx_conn_pkt_ctrl+0x5b0>
			    ((conn->llcp_conn_param.state ==
    d060:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
					conn->llcp_conn_param.ack) &&
    d064:	f013 0307 	ands.w	r3, r3, #7
    d068:	d002      	beq.n	d070 <isr_rx_conn_pkt_ctrl+0x5ac>
			      LLCP_CPR_STATE_REQ) ||
    d06a:	3b04      	subs	r3, #4
    d06c:	2b01      	cmp	r3, #1
    d06e:	d801      	bhi.n	d074 <isr_rx_conn_pkt_ctrl+0x5b0>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d070:	2223      	movs	r2, #35	; 0x23
    d072:	e7e5      	b.n	d040 <isr_rx_conn_pkt_ctrl+0x57c>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d074:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d078:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d07c:	4299      	cmp	r1, r3
    d07e:	d003      	beq.n	d088 <isr_rx_conn_pkt_ctrl+0x5c4>
    d080:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d084:	2b03      	cmp	r3, #3
    d086:	d105      	bne.n	d094 <isr_rx_conn_pkt_ctrl+0x5d0>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d088:	f890 1100 	ldrb.w	r1, [r0, #256]	; 0x100
    d08c:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    d090:	4299      	cmp	r1, r3
    d092:	d001      	beq.n	d098 <isr_rx_conn_pkt_ctrl+0x5d4>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d094:	222a      	movs	r2, #42	; 0x2a
    d096:	e7d3      	b.n	d040 <isr_rx_conn_pkt_ctrl+0x57c>
				if ((cpr->interval_min < 6) ||
    d098:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    d09c:	fa1f f389 	uxth.w	r3, r9
    d0a0:	2b05      	cmp	r3, #5
    d0a2:	d922      	bls.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				    (cpr->interval_max > 3200) ||
    d0a4:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    d0a8:	fa1f f188 	uxth.w	r1, r8
				if ((cpr->interval_min < 6) ||
    d0ac:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    d0b0:	d81b      	bhi.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				    (cpr->interval_max > 3200) ||
    d0b2:	428b      	cmp	r3, r1
    d0b4:	d819      	bhi.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				    (cpr->latency > 499) ||
    d0b6:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    d0ba:	fa1f f68e 	uxth.w	r6, lr
				    (cpr->interval_min > cpr->interval_max) ||
    d0be:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    d0c2:	d212      	bcs.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				    (cpr->timeout < 10) ||
    d0c4:	f8b4 c012 	ldrh.w	ip, [r4, #18]
    d0c8:	fa1f f38c 	uxth.w	r3, ip
				    (cpr->latency > 499) ||
    d0cc:	f1a3 070a 	sub.w	r7, r3, #10
    d0d0:	b2bf      	uxth	r7, r7
    d0d2:	f640 4a76 	movw	sl, #3190	; 0xc76
    d0d6:	4557      	cmp	r7, sl
    d0d8:	d807      	bhi.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				     ((cpr->latency + 1) *
    d0da:	fb06 1701 	mla	r7, r6, r1, r1
				    (cpr->timeout > 3200) ||
    d0de:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
    d0e2:	da02      	bge.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
				    (cpr->preferred_periodicity >
    d0e4:	7d27      	ldrb	r7, [r4, #20]
				      cpr->interval_max)) ||
    d0e6:	42b9      	cmp	r1, r7
    d0e8:	d204      	bcs.n	d0f4 <isr_rx_conn_pkt_ctrl+0x630>
				nack = reject_ext_ind_send(conn,
    d0ea:	221e      	movs	r2, #30
    d0ec:	e7a8      	b.n	d040 <isr_rx_conn_pkt_ctrl+0x57c>
    d0ee:	bf00      	nop
    d0f0:	20000d78 	.word	0x20000d78
				conn->llcp_conn_param.interval_min =
    d0f4:	f8a0 90d0 	strh.w	r9, [r0, #208]	; 0xd0
				conn->llcp_conn_param.interval_max =
    d0f8:	f8a0 80d2 	strh.w	r8, [r0, #210]	; 0xd2
				conn->llcp_conn_param.latency =	cpr->latency;
    d0fc:	f8a0 e0d4 	strh.w	lr, [r0, #212]	; 0xd4
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d100:	f8a0 c0d6 	strh.w	ip, [r0, #214]	; 0xd6
				conn->llcp_conn_param.preferred_periodicity =
    d104:	f880 70d8 	strb.w	r7, [r0, #216]	; 0xd8
					cpr->reference_conn_event_count;
    d108:	f894 c016 	ldrb.w	ip, [r4, #22]
    d10c:	7d67      	ldrb	r7, [r4, #21]
    d10e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d112:	f8a0 70da 	strh.w	r7, [r0, #218]	; 0xda
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d116:	f894 c018 	ldrb.w	ip, [r4, #24]
    d11a:	7de7      	ldrb	r7, [r4, #23]
    d11c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d120:	f8a0 70dc 	strh.w	r7, [r0, #220]	; 0xdc
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d124:	f894 c01a 	ldrb.w	ip, [r4, #26]
    d128:	7e67      	ldrb	r7, [r4, #25]
    d12a:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d12e:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d132:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d136:	7ee7      	ldrb	r7, [r4, #27]
    d138:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d13c:	f8a0 70e0 	strh.w	r7, [r0, #224]	; 0xe0
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d140:	f894 c01e 	ldrb.w	ip, [r4, #30]
    d144:	7f67      	ldrb	r7, [r4, #29]
    d146:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d14a:	f8a0 70e2 	strh.w	r7, [r0, #226]	; 0xe2
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d14e:	7fe7      	ldrb	r7, [r4, #31]
    d150:	f894 c020 	ldrb.w	ip, [r4, #32]
    d154:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d158:	f8a0 70e4 	strh.w	r7, [r0, #228]	; 0xe4
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d15c:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
    d160:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d164:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
    d168:	f8a0 40e6 	strh.w	r4, [r0, #230]	; 0xe6
				if ((conn->llcp_conn_param.interval_max !=
    d16c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d16e:	428c      	cmp	r4, r1
    d170:	d111      	bne.n	d196 <isr_rx_conn_pkt_ctrl+0x6d2>
				     conn->conn_interval) ||
    d172:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
    d174:	42b4      	cmp	r4, r6
    d176:	d10e      	bne.n	d196 <isr_rx_conn_pkt_ctrl+0x6d2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d178:	f240 44e2 	movw	r4, #1250	; 0x4e2
    d17c:	4361      	muls	r1, r4
    d17e:	f242 7410 	movw	r4, #10000	; 0x2710
    d182:	fb04 1303 	mla	r3, r4, r3, r1
    d186:	3b01      	subs	r3, #1
    d188:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d18c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d18e:	b29b      	uxth	r3, r3
    d190:	4299      	cmp	r1, r3
    d192:	f000 80a5 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x81c>
					if (conn->pause_tx) {
    d196:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
    d19a:	071c      	lsls	r4, r3, #28
    d19c:	f140 809a 	bpl.w	d2d4 <isr_rx_conn_pkt_ctrl+0x810>
						conn->llcp_conn_param.state =
    d1a0:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
    d1a4:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d1a6:	f361 0302 	bfi	r3, r1, #0, #3
    d1aa:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
			conn->llcp_conn_param.ack--;
    d1ae:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
    d1b2:	3b01      	subs	r3, #1
    d1b4:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
			if (_radio.conn_upd == 0) {
    d1b8:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d1bc:	2b00      	cmp	r3, #0
    d1be:	f47f ad3d 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
				_radio.conn_upd = conn;
    d1c2:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d1c6:	e539      	b.n	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d1c8:	4299      	cmp	r1, r3
    d1ca:	d004      	beq.n	d1d6 <isr_rx_conn_pkt_ctrl+0x712>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d1cc:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
    d1d0:	0799      	lsls	r1, r3, #30
    d1d2:	f040 8567 	bne.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
			if ((cpr->interval_min < 6) ||
    d1d6:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    d1da:	fa1f f389 	uxth.w	r3, r9
    d1de:	2b05      	cmp	r3, #5
    d1e0:	d983      	bls.n	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    (cpr->interval_max > 3200) ||
    d1e2:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    d1e6:	fa1f f188 	uxth.w	r1, r8
			if ((cpr->interval_min < 6) ||
    d1ea:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    d1ee:	f63f af7c 	bhi.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    (cpr->interval_max > 3200) ||
    d1f2:	428b      	cmp	r3, r1
    d1f4:	f63f af79 	bhi.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    (cpr->latency > 499) ||
    d1f8:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    d1fc:	fa1f f68e 	uxth.w	r6, lr
			    (cpr->interval_min > cpr->interval_max) ||
    d200:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    d204:	f4bf af71 	bcs.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d208:	f8b4 c012 	ldrh.w	ip, [r4, #18]
    d20c:	fa1f f38c 	uxth.w	r3, ip
			    (cpr->latency > 499) ||
    d210:	f1a3 070a 	sub.w	r7, r3, #10
    d214:	b2bf      	uxth	r7, r7
    d216:	f640 4a76 	movw	sl, #3190	; 0xc76
    d21a:	4557      	cmp	r7, sl
    d21c:	f63f af65 	bhi.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d220:	fb06 1701 	mla	r7, r6, r1, r1
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d224:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
    d228:	f6bf af5f 	bge.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d22c:	7d27      	ldrb	r7, [r4, #20]
						    cpr->interval_max)) ||
    d22e:	42b9      	cmp	r1, r7
    d230:	f4ff af5b 	bcc.w	d0ea <isr_rx_conn_pkt_ctrl+0x626>
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    d234:	f8a0 90d0 	strh.w	r9, [r0, #208]	; 0xd0
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    d238:	f8a0 80d2 	strh.w	r8, [r0, #210]	; 0xd2
			conn->llcp_conn_param.latency =	cpr->latency;
    d23c:	f8a0 e0d4 	strh.w	lr, [r0, #212]	; 0xd4
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d240:	f8a0 c0d6 	strh.w	ip, [r0, #214]	; 0xd6
			conn->llcp_conn_param.preferred_periodicity =
    d244:	f880 70d8 	strb.w	r7, [r0, #216]	; 0xd8
				cpr->reference_conn_event_count;
    d248:	f894 c016 	ldrb.w	ip, [r4, #22]
    d24c:	7d67      	ldrb	r7, [r4, #21]
    d24e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d252:	f8a0 70da 	strh.w	r7, [r0, #218]	; 0xda
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d256:	f894 c018 	ldrb.w	ip, [r4, #24]
    d25a:	7de7      	ldrb	r7, [r4, #23]
    d25c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d260:	f8a0 70dc 	strh.w	r7, [r0, #220]	; 0xdc
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d264:	f894 c01a 	ldrb.w	ip, [r4, #26]
    d268:	7e67      	ldrb	r7, [r4, #25]
    d26a:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d26e:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d272:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d276:	7ee7      	ldrb	r7, [r4, #27]
    d278:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d27c:	f8a0 70e0 	strh.w	r7, [r0, #224]	; 0xe0
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d280:	f894 c01e 	ldrb.w	ip, [r4, #30]
    d284:	7f67      	ldrb	r7, [r4, #29]
    d286:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d28a:	f8a0 70e2 	strh.w	r7, [r0, #226]	; 0xe2
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d28e:	7fe7      	ldrb	r7, [r4, #31]
    d290:	f894 c020 	ldrb.w	ip, [r4, #32]
    d294:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    d298:	f8a0 70e4 	strh.w	r7, [r0, #228]	; 0xe4
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d29c:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
    d2a0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d2a4:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
    d2a8:	f8a0 40e6 	strh.w	r4, [r0, #230]	; 0xe6
			if ((conn->llcp_conn_param.interval_max !=
    d2ac:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d2ae:	428c      	cmp	r4, r1
    d2b0:	d110      	bne.n	d2d4 <isr_rx_conn_pkt_ctrl+0x810>
			     conn->conn_interval) ||
    d2b2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    d2b4:	42b1      	cmp	r1, r6
    d2b6:	d10d      	bne.n	d2d4 <isr_rx_conn_pkt_ctrl+0x810>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d2b8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d2bc:	4361      	muls	r1, r4
    d2be:	f242 7410 	movw	r4, #10000	; 0x2710
    d2c2:	fb04 1303 	mla	r3, r4, r3, r1
    d2c6:	3b01      	subs	r3, #1
    d2c8:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d2cc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d2ce:	b29b      	uxth	r3, r3
    d2d0:	4299      	cmp	r1, r3
    d2d2:	d005      	beq.n	d2e0 <isr_rx_conn_pkt_ctrl+0x81c>
				*rx_enqueue = 1U;
    d2d4:	2301      	movs	r3, #1
    d2d6:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d2d8:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
    d2dc:	2103      	movs	r1, #3
    d2de:	e762      	b.n	d1a6 <isr_rx_conn_pkt_ctrl+0x6e2>
				conn->llcp_conn_param.status = 0U;
    d2e0:	2300      	movs	r3, #0
    d2e2:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
				conn->llcp_conn_param.cmd = 0U;
    d2e6:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
				conn->llcp_conn_param.state =
    d2ea:	2101      	movs	r1, #1
    d2ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d2f0:	e759      	b.n	d1a6 <isr_rx_conn_pkt_ctrl+0x6e2>
		if (_radio.conn_curr->role ||
    d2f2:	4bba      	ldr	r3, [pc, #744]	; (d5dc <isr_rx_conn_pkt_ctrl+0xb18>)
    d2f4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d2f8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	f2c0 84a1 	blt.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d302:	7a41      	ldrb	r1, [r0, #9]
    d304:	2010      	movs	r0, #16
    d306:	f7fe f9cb 	bl	b6a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d30a:	2800      	cmp	r0, #0
    d30c:	f000 849a 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		if (!_radio.conn_curr->role &&
    d310:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    d314:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    d318:	429a      	cmp	r2, r3
    d31a:	f43f ac8f 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d31e:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d322:	f003 0307 	and.w	r3, r3, #7
    d326:	2b04      	cmp	r3, #4
    d328:	f47f ac88 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
			if ((cpr->interval_min < 6) ||
    d32c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d330:	fa1f f28e 	uxth.w	r2, lr
    d334:	2a05      	cmp	r2, #5
    d336:	d91e      	bls.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    (cpr->interval_max > 3200) ||
    d338:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    d33c:	fa1f f38c 	uxth.w	r3, ip
			if ((cpr->interval_min < 6) ||
    d340:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d344:	d817      	bhi.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    (cpr->interval_max > 3200) ||
    d346:	429a      	cmp	r2, r3
    d348:	d815      	bhi.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    (cpr->latency > 499) ||
    d34a:	8a27      	ldrh	r7, [r4, #16]
    d34c:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d34e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d352:	d210      	bcs.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d354:	8a66      	ldrh	r6, [r4, #18]
    d356:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d358:	f1a0 010a 	sub.w	r1, r0, #10
    d35c:	b289      	uxth	r1, r1
    d35e:	f640 4876 	movw	r8, #3190	; 0xc76
    d362:	4541      	cmp	r1, r8
    d364:	d807      	bhi.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d366:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d36a:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d36e:	da02      	bge.n	d376 <isr_rx_conn_pkt_ctrl+0x8b2>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d370:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d372:	4293      	cmp	r3, r2
    d374:	d203      	bcs.n	d37e <isr_rx_conn_pkt_ctrl+0x8ba>
				nack = reject_ext_ind_send(conn,
    d376:	221e      	movs	r2, #30
    d378:	2110      	movs	r1, #16
				nack = reject_ext_ind_send(_radio.conn_curr,
    d37a:	4628      	mov	r0, r5
    d37c:	e661      	b.n	d042 <isr_rx_conn_pkt_ctrl+0x57e>
			_radio.conn_curr->procedure_expire = 0U;
    d37e:	2000      	movs	r0, #0
    d380:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    d384:	f8a5 e0d0 	strh.w	lr, [r5, #208]	; 0xd0
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    d388:	f8a5 c0d2 	strh.w	ip, [r5, #210]	; 0xd2
			conn->llcp_conn_param.latency =	cpr->latency;
    d38c:	f8a5 70d4 	strh.w	r7, [r5, #212]	; 0xd4
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d390:	f8a5 60d6 	strh.w	r6, [r5, #214]	; 0xd6
			conn->llcp_conn_param.preferred_periodicity =
    d394:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
				cpr->reference_conn_event_count;
    d398:	7da2      	ldrb	r2, [r4, #22]
    d39a:	7d63      	ldrb	r3, [r4, #21]
    d39c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d3a0:	f8a5 30da 	strh.w	r3, [r5, #218]	; 0xda
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d3a4:	7e22      	ldrb	r2, [r4, #24]
    d3a6:	7de3      	ldrb	r3, [r4, #23]
    d3a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3ac:	f8a5 30dc 	strh.w	r3, [r5, #220]	; 0xdc
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d3b0:	7ea2      	ldrb	r2, [r4, #26]
    d3b2:	7e63      	ldrb	r3, [r4, #25]
    d3b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3b8:	f8a5 30de 	strh.w	r3, [r5, #222]	; 0xde
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d3bc:	7f22      	ldrb	r2, [r4, #28]
    d3be:	7ee3      	ldrb	r3, [r4, #27]
    d3c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3c4:	f8a5 30e0 	strh.w	r3, [r5, #224]	; 0xe0
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d3c8:	7fa2      	ldrb	r2, [r4, #30]
    d3ca:	7f63      	ldrb	r3, [r4, #29]
    d3cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3d0:	f8a5 30e2 	strh.w	r3, [r5, #226]	; 0xe2
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d3d4:	f894 2020 	ldrb.w	r2, [r4, #32]
    d3d8:	7fe3      	ldrb	r3, [r4, #31]
    d3da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3de:	f8a5 30e4 	strh.w	r3, [r5, #228]	; 0xe4
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d3e2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    d3e6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d3ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3ee:	f8a5 30e6 	strh.w	r3, [r5, #230]	; 0xe6
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d3f2:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
    d3f6:	2201      	movs	r2, #1
    d3f8:	f362 0302 	bfi	r3, r2, #0, #3
    d3fc:	f885 30ce 	strb.w	r3, [r5, #206]	; 0xce
    d400:	e417      	b.n	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    d402:	7a41      	ldrb	r1, [r0, #9]
    d404:	2011      	movs	r0, #17
    d406:	f7fe f94b 	bl	b6a0 <pdu_len_cmp>
    d40a:	2800      	cmp	r0, #0
    d40c:	f000 841a 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    d410:	4a72      	ldr	r2, [pc, #456]	; (d5dc <isr_rx_conn_pkt_ctrl+0xb18>)
    d412:	7b21      	ldrb	r1, [r4, #12]
    d414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		   _radio.conn_curr->llcp_phy.req) {
    d418:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d41c:	f893 6101 	ldrb.w	r6, [r3, #257]	; 0x101
    d420:	4286      	cmp	r6, r0
    d422:	d027      	beq.n	d474 <isr_rx_conn_pkt_ctrl+0x9b0>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    d424:	2916      	cmp	r1, #22
    d426:	f47f ac09 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    d42a:	7b61      	ldrb	r1, [r4, #13]
    d42c:	2923      	cmp	r1, #35	; 0x23
    d42e:	d00e      	beq.n	d44e <isr_rx_conn_pkt_ctrl+0x98a>
				_radio.conn_curr->phy_tx;
    d430:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    d434:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
			_radio.conn_curr->phy_tx_time =
    d438:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    d43c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    d440:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0U;
    d444:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    d446:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0U;
    d44a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    d44e:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
    d452:	0792      	lsls	r2, r2, #30
    d454:	f57f abf2 	bpl.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d458:	220e      	movs	r2, #14
		p->status = rej_ext_ind->error_code;
    d45a:	7221      	strb	r1, [r4, #8]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d45c:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    d45e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    d462:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d466:	7262      	strb	r2, [r4, #9]
		p->rx = _radio.conn_curr->phy_rx;
    d468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d46c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d470:	72a3      	strb	r3, [r4, #10]
    d472:	e420      	b.n	ccb6 <isr_rx_conn_pkt_ctrl+0x1f2>
		   _radio.conn_curr->llcp_conn_param.req) {
    d474:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d478:	f893 60cd 	ldrb.w	r6, [r3, #205]	; 0xcd
    d47c:	4286      	cmp	r6, r0
    d47e:	d05a      	beq.n	d536 <isr_rx_conn_pkt_ctrl+0xa72>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    d480:	290f      	cmp	r1, #15
    d482:	f47f abdb 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
	if (!conn->role && (rej_ext_ind->error_code ==
    d486:	f993 601d 	ldrsb.w	r6, [r3, #29]
    d48a:	7b61      	ldrb	r1, [r4, #13]
    d48c:	2e00      	cmp	r6, #0
    d48e:	f2c0 83f8 	blt.w	dc82 <isr_rx_conn_pkt_ctrl+0x11be>
    d492:	291a      	cmp	r1, #26
    d494:	f040 83fa 	bne.w	dc8c <isr_rx_conn_pkt_ctrl+0x11c8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d498:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    d49c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    d4a0:	4294      	cmp	r4, r2
    d4a2:	f040 83ff 	bne.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
				conn->llcp_conn_param.state =
    d4a6:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
    d4aa:	2105      	movs	r1, #5
    d4ac:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    d4b0:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	; 0xd2
    d4b4:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    d4b8:	f8b3 10d4 	ldrh.w	r1, [r3, #212]	; 0xd4
    d4bc:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    d4c0:	f8b3 10d6 	ldrh.w	r1, [r3, #214]	; 0xd6
    d4c4:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d4c8:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    d4cc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
				conn->llcp.conn_upd.win_size = 1U;
    d4d0:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    d4d2:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d4d6:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    d4da:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0U;
    d4de:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    d4e0:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    d4e4:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1U;
    d4e6:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0U;
    d4ea:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    d4ee:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    d4f2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    d4f6:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    d4fa:	f7ff bb9a 	b.w	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
		_radio.conn_upd = NULL;
    d4fe:	2700      	movs	r7, #0
    d500:	f8c2 7188 	str.w	r7, [r2, #392]	; 0x188
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d504:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
		conn->procedure_expire = 0U;
    d508:	f8a3 7044 	strh.w	r7, [r3, #68]	; 0x44
	if (!conn->llcp_conn_param.cmd) {
    d50c:	0737      	lsls	r7, r6, #28
    d50e:	f57f ab95 	bpl.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
	cp->status = rej_ext_ind->error_code;
    d512:	7221      	strb	r1, [r4, #8]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d514:	220a      	movs	r2, #10
	cp->latency = conn->latency;
    d516:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d518:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    d51a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    d51c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    d51e:	8162      	strh	r2, [r4, #10]
	cp->timeout = conn->supervision_reload *
    d520:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    d522:	237d      	movs	r3, #125	; 0x7d
    d524:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    d526:	81a1      	strh	r1, [r4, #12]
		      conn->conn_interval * 125 / 1000;
    d528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d52c:	fb93 f3f2 	sdiv	r3, r3, r2
	cp->timeout = conn->supervision_reload *
    d530:	81e3      	strh	r3, [r4, #14]
    d532:	f7ff bbc0 	b.w	ccb6 <isr_rx_conn_pkt_ctrl+0x1f2>
	} else if (_radio.conn_curr->llcp_length.ack !=
    d536:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_length.req) {
    d53a:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_length.ack !=
    d53e:	4290      	cmp	r0, r2
    d540:	f04f 0000 	mov.w	r0, #0
    d544:	d013      	beq.n	d56e <isr_rx_conn_pkt_ctrl+0xaaa>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d546:	2914      	cmp	r1, #20
    d548:	f47f ab78 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		conn->llcp_length.ack = conn->llcp_length.req;
    d54c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d550:	2209      	movs	r2, #9
		conn->procedure_expire = 0U;
    d552:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d556:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d558:	2215      	movs	r2, #21
    d55a:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d55c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    d55e:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d560:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    d562:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    d564:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    d566:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    d568:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    d56a:	8263      	strh	r3, [r4, #18]
    d56c:	e555      	b.n	d01a <isr_rx_conn_pkt_ctrl+0x556>
		switch (rej_ext_ind->reject_opcode) {
    d56e:	2903      	cmp	r1, #3
    d570:	f47f ab5f 	bne.w	cc32 <isr_rx_conn_pkt_ctrl+0x16e>
			_radio.conn_curr->pause_rx = 0U;
    d574:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
			_radio.conn_curr->procedure_expire = 0U;
    d578:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0U;
    d57c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    d580:	f360 02c3 	bfi	r2, r0, #3, #1
    d584:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d588:	230d      	movs	r3, #13
    d58a:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    d58c:	7b63      	ldrb	r3, [r4, #13]
    d58e:	7323      	strb	r3, [r4, #12]
    d590:	e543      	b.n	d01a <isr_rx_conn_pkt_ctrl+0x556>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    d592:	7a41      	ldrb	r1, [r0, #9]
    d594:	2012      	movs	r0, #18
    d596:	f7fe f883 	bl	b6a0 <pdu_len_cmp>
    d59a:	2800      	cmp	r0, #0
    d59c:	f000 8352 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    d5a0:	480e      	ldr	r0, [pc, #56]	; (d5dc <isr_rx_conn_pkt_ctrl+0xb18>)
    d5a2:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5a6:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d5aa:	f008 f8a1 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    d5ae:	4601      	mov	r1, r0
    d5b0:	2800      	cmp	r0, #0
    d5b2:	f43f ac6e 	beq.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5b6:	7903      	ldrb	r3, [r0, #4]
    d5b8:	f043 0303 	orr.w	r3, r3, #3
    d5bc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    d5be:	2301      	movs	r3, #1
    d5c0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d5c2:	2313      	movs	r3, #19
    d5c4:	e4a0      	b.n	cf08 <isr_rx_conn_pkt_ctrl+0x444>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    d5c6:	7a41      	ldrb	r1, [r0, #9]
    d5c8:	2013      	movs	r0, #19
    d5ca:	f7fe f869 	bl	b6a0 <pdu_len_cmp>
    d5ce:	2800      	cmp	r0, #0
    d5d0:	f000 8338 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		_radio.conn_curr->procedure_expire = 0U;
    d5d4:	4b01      	ldr	r3, [pc, #4]	; (d5dc <isr_rx_conn_pkt_ctrl+0xb18>)
    d5d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d5da:	e43e      	b.n	ce5a <isr_rx_conn_pkt_ctrl+0x396>
    d5dc:	20000d78 	.word	0x20000d78
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    d5e0:	7a41      	ldrb	r1, [r0, #9]
    d5e2:	2007      	movs	r0, #7
    d5e4:	f7fe f85c 	bl	b6a0 <pdu_len_cmp>
    d5e8:	2800      	cmp	r0, #0
    d5ea:	f000 832b 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    d5ee:	4ac2      	ldr	r2, [pc, #776]	; (d8f8 <isr_rx_conn_pkt_ctrl+0xe34>)
    d5f0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d5f4:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
			   _radio.conn_curr->llcp_conn_param.req) {
    d5f8:	f893 60cc 	ldrb.w	r6, [r3, #204]	; 0xcc
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d5fc:	42b1      	cmp	r1, r6
    d5fe:	4611      	mov	r1, r2
    d600:	d02c      	beq.n	d65c <isr_rx_conn_pkt_ctrl+0xb98>
			conn->llcp_conn_param.disabled = 1U;
    d602:	f893 00ce 	ldrb.w	r0, [r3, #206]	; 0xce
    d606:	f040 0010 	orr.w	r0, r0, #16
    d60a:	f883 00ce 	strb.w	r0, [r3, #206]	; 0xce
			if (!conn->role) {
    d60e:	f993 001d 	ldrsb.w	r0, [r3, #29]
    d612:	2800      	cmp	r0, #0
    d614:	f6bf af40 	bge.w	d498 <isr_rx_conn_pkt_ctrl+0x9d4>
			LL_ASSERT(_radio.conn_upd == conn);
    d618:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    d61c:	429a      	cmp	r2, r3
    d61e:	f040 8341 	bne.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
			_radio.conn_upd = NULL;
    d622:	2300      	movs	r3, #0
    d624:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    d628:	f892 30ce 	ldrb.w	r3, [r2, #206]	; 0xce
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d62c:	f882 60cd 	strb.w	r6, [r2, #205]	; 0xcd
			if (!conn->llcp_conn_param.cmd) {
    d630:	071e      	lsls	r6, r3, #28
    d632:	f57f ab03 	bpl.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d636:	230a      	movs	r3, #10
    d638:	7123      	strb	r3, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d63a:	231a      	movs	r3, #26
    d63c:	7223      	strb	r3, [r4, #8]
			cp->interval = conn->conn_interval;
    d63e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
			cp->latency = conn->latency;
    d640:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    d642:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    d644:	8163      	strh	r3, [r4, #10]
			cp->timeout = conn->supervision_reload *
    d646:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    d648:	237d      	movs	r3, #125	; 0x7d
    d64a:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    d64c:	81a0      	strh	r0, [r4, #12]
				      conn->conn_interval * 125 / 1000;
    d64e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d652:	fb93 f3f2 	sdiv	r3, r3, r2
			cp->timeout = conn->supervision_reload *
    d656:	81e3      	strh	r3, [r4, #14]
    d658:	f7ff bba8 	b.w	cdac <isr_rx_conn_pkt_ctrl+0x2e8>
		} else if (_radio.conn_curr->llcp_length.req !=
    d65c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    d660:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    d664:	4290      	cmp	r0, r2
    d666:	d003      	beq.n	d670 <isr_rx_conn_pkt_ctrl+0xbac>
			_radio.conn_curr->llcp_length.ack =
    d668:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    d66c:	f7ff bb9e 	b.w	cdac <isr_rx_conn_pkt_ctrl+0x2e8>
		} else if (_radio.conn_curr->llcp_phy.req !=
    d670:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    d674:	f893 0101 	ldrb.w	r0, [r3, #257]	; 0x101
    d678:	4290      	cmp	r0, r2
    d67a:	d01b      	beq.n	d6b4 <isr_rx_conn_pkt_ctrl+0xbf0>
			_radio.conn_curr->llcp_phy.ack =
    d67c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
				_radio.conn_curr->phy_tx;
    d680:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    d684:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    d688:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    d68c:	f362 0002 	bfi	r0, r2, #0, #3
    d690:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    d694:	f893 0103 	ldrb.w	r0, [r3, #259]	; 0x103
    d698:	0780      	lsls	r0, r0, #30
    d69a:	d50f      	bpl.n	d6bc <isr_rx_conn_pkt_ctrl+0xbf8>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d69c:	200e      	movs	r0, #14
    d69e:	7120      	strb	r0, [r4, #4]
				p->status = 0U;
    d6a0:	2000      	movs	r0, #0
    d6a2:	7220      	strb	r0, [r4, #8]
				p->tx = _radio.conn_curr->phy_tx;
    d6a4:	7262      	strb	r2, [r4, #9]
				p->rx = _radio.conn_curr->phy_rx;
    d6a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d6aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6ae:	72a3      	strb	r3, [r4, #10]
    d6b0:	f7ff bb7c 	b.w	cdac <isr_rx_conn_pkt_ctrl+0x2e8>
			switch (llctrl->unknown_rsp.type) {
    d6b4:	7b23      	ldrb	r3, [r4, #12]
    d6b6:	2b12      	cmp	r3, #18
    d6b8:	f47f ab78 	bne.w	cdac <isr_rx_conn_pkt_ctrl+0x2e8>
		_radio.conn_curr->procedure_expire = 0U;
    d6bc:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    d6c0:	f7ff bbcb 	b.w	ce5a <isr_rx_conn_pkt_ctrl+0x396>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    d6c4:	7a41      	ldrb	r1, [r0, #9]
    d6c6:	2014      	movs	r0, #20
    d6c8:	f7fd ffea 	bl	b6a0 <pdu_len_cmp>
    d6cc:	2800      	cmp	r0, #0
    d6ce:	f000 82b9 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d6d2:	2f14      	cmp	r7, #20
    d6d4:	f040 8089 	bne.w	d7ea <isr_rx_conn_pkt_ctrl+0xd26>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d6d8:	4888      	ldr	r0, [pc, #544]	; (d8fc <isr_rx_conn_pkt_ctrl+0xe38>)
    d6da:	f008 f809 	bl	156f0 <mem_acquire>
		if (!node_tx) {
    d6de:	4606      	mov	r6, r0
    d6e0:	2800      	cmp	r0, #0
    d6e2:	f43f abd6 	beq.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d6e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; d8f8 <isr_rx_conn_pkt_ctrl+0xe34>
    d6ea:	7ae7      	ldrb	r7, [r4, #11]
    d6ec:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
	    ((_radio.conn_curr->llcp_length.req ==
    d6f0:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	if (/* Local idle, and Peer request then complete the Peer procedure
    d6f4:	f893 80f5 	ldrb.w	r8, [r3, #245]	; 0xf5
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d6f8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    d6fa:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    d6fc:	f8b3 c036 	ldrh.w	ip, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    d700:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    d704:	4590      	cmp	r8, r2
    d706:	d172      	bne.n	d7ee <isr_rx_conn_pkt_ctrl+0xd2a>
		 LLCP_LENGTH_STATE_REQ_ACK_WAIT)) &&
    d708:	2f14      	cmp	r7, #20
    d70a:	f040 80be 	bne.w	d88a <isr_rx_conn_pkt_ctrl+0xdc6>
		if (lr->max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    d70e:	89a7      	ldrh	r7, [r4, #12]
    d710:	2f1a      	cmp	r7, #26
    d712:	d97b      	bls.n	d80c <isr_rx_conn_pkt_ctrl+0xd48>
			eff_tx_octets = MIN(lr->max_rx_octets,
    d714:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    d718:	4547      	cmp	r7, r8
    d71a:	bf28      	it	cs
    d71c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    d71e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d722:	f1b8 0f1a 	cmp.w	r8, #26
		if (lr->max_rx_time >=
    d726:	f8b4 800e 	ldrh.w	r8, [r4, #14]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d72a:	bf94      	ite	ls
    d72c:	468b      	movls	fp, r1
    d72e:	f04f 0b1b 	movhi.w	fp, #27
		if (lr->max_rx_time >=
    d732:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    d736:	d36b      	bcc.n	d810 <isr_rx_conn_pkt_ctrl+0xd4c>
			eff_tx_time =
    d738:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    d73c:	45d0      	cmp	r8, sl
    d73e:	bf28      	it	cs
    d740:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    d742:	f8b4 a012 	ldrh.w	sl, [r4, #18]
	eff_rx_time = _radio.conn_curr->max_rx_time;
    d746:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    d74a:	bf34      	ite	cc
    d74c:	46e2      	movcc	sl, ip
    d74e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    d752:	4559      	cmp	r1, fp
    d754:	d063      	beq.n	d81e <isr_rx_conn_pkt_ctrl+0xd5a>
			free_count_rx = packet_rx_acquired_count_get() +
    d756:	f7fd ffc1 	bl	b6dc <packet_rx_acquired_count_get>
    d75a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    d75c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    d760:	f007 fff4 	bl	1574c <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    d764:	4420      	add	r0, r4
    d766:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    d768:	28ff      	cmp	r0, #255	; 0xff
    d76a:	f200 829b 	bhi.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
			if (_radio.packet_rx_data_count == free_count_rx) {
    d76e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    d772:	4283      	cmp	r3, r0
    d774:	f040 827c 	bne.w	dc70 <isr_rx_conn_pkt_ctrl+0x11ac>
				_radio.conn_curr->llcp_length.rx_octets =
    d778:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
				_radio.conn_curr->evt_len_upd = 1U;
    d77c:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
				_radio.conn_curr->llcp_length.rx_octets =
    d780:	f8a3 b0f8 	strh.w	fp, [r3, #248]	; 0xf8
				_radio.conn_curr->evt_len_adv = 1U;
    d784:	f042 0206 	orr.w	r2, r2, #6
    d788:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
					(_radio.conn_curr->llcp_length.req - 1);
    d78c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
				_radio.conn_curr->llcp_length.tx_octets =
    d790:	f8a3 70fa 	strh.w	r7, [r3, #250]	; 0xfa
					(_radio.conn_curr->llcp_length.req - 1);
    d794:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    d796:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_length.rx_time =
    d79a:	f8a3 a0fc 	strh.w	sl, [r3, #252]	; 0xfc
				_radio.conn_curr->llcp_length.tx_time =
    d79e:	f8a3 80fe 	strh.w	r8, [r3, #254]	; 0xfe
    d7a2:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
				if (node_tx) {
    d7a6:	b3ae      	cbz	r6, d814 <isr_rx_conn_pkt_ctrl+0xd50>
					_radio.conn_curr->llcp_length.state =
    d7a8:	2105      	movs	r1, #5
					_radio.conn_curr->llcp_length.state =
    d7aa:	f361 0202 	bfi	r2, r1, #0, #3
    d7ae:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
				_radio.state = STATE_CLOSE;
    d7b2:	2303      	movs	r3, #3
    d7b4:	f889 3015 	strb.w	r3, [r9, #21]
	if (node_tx) {
    d7b8:	2e00      	cmp	r6, #0
    d7ba:	f43f aa3f 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7be:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    d7c0:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    d7c4:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7c8:	f043 0303 	orr.w	r3, r3, #3
    d7cc:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    d7ce:	2309      	movs	r3, #9
    d7d0:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d7d2:	2315      	movs	r3, #21
    d7d4:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    d7d6:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    d7d8:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    d7dc:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    d7e0:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    d7e2:	f008 fa32 	bl	15c4a <ctrl_tx_enqueue>
    d7e6:	f7ff ba29 	b.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
	struct radio_pdu_node_tx *node_tx = NULL;
    d7ea:	2600      	movs	r6, #0
    d7ec:	e77b      	b.n	d6e6 <isr_rx_conn_pkt_ctrl+0xc22>
		 LLCP_LENGTH_STATE_REQ) ||
    d7ee:	f893 80f6 	ldrb.w	r8, [r3, #246]	; 0xf6
    d7f2:	f008 0807 	and.w	r8, r8, #7
	      _radio.conn_curr->llcp_length.ack) &&
    d7f6:	f1b8 0f01 	cmp.w	r8, #1
    d7fa:	d985      	bls.n	d708 <isr_rx_conn_pkt_ctrl+0xc44>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    d7fc:	f1b8 0f02 	cmp.w	r8, #2
    d800:	d143      	bne.n	d88a <isr_rx_conn_pkt_ctrl+0xdc6>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    d802:	3f14      	subs	r7, #20
    d804:	2f01      	cmp	r7, #1
    d806:	f200 824d 	bhi.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
    d80a:	e780      	b.n	d70e <isr_rx_conn_pkt_ctrl+0xc4a>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    d80c:	4607      	mov	r7, r0
    d80e:	e786      	b.n	d71e <isr_rx_conn_pkt_ctrl+0xc5a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    d810:	46f0      	mov	r8, lr
    d812:	e796      	b.n	d742 <isr_rx_conn_pkt_ctrl+0xc7e>
					_radio.conn_curr->max_tx_octets =
    d814:	85df      	strh	r7, [r3, #46]	; 0x2e
					_radio.conn_curr->max_tx_time =
    d816:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
					_radio.conn_curr->llcp_length.state =
    d81a:	2104      	movs	r1, #4
    d81c:	e7c5      	b.n	d7aa <isr_rx_conn_pkt_ctrl+0xce6>
			_radio.conn_curr->procedure_expire = 0U;
    d81e:	2100      	movs	r1, #0
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    d820:	42b8      	cmp	r0, r7
			_radio.conn_curr->llcp_length.ack =
    d822:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
			_radio.conn_curr->procedure_expire = 0U;
    d826:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    d82a:	d103      	bne.n	d834 <isr_rx_conn_pkt_ctrl+0xd70>
    d82c:	45c6      	cmp	lr, r8
    d82e:	d101      	bne.n	d834 <isr_rx_conn_pkt_ctrl+0xd70>
			    eff_rx_time == _radio.conn_curr->max_rx_time &&
    d830:	45d4      	cmp	ip, sl
    d832:	d0c1      	beq.n	d7b8 <isr_rx_conn_pkt_ctrl+0xcf4>
			_radio.conn_curr->max_rx_time = eff_rx_time;
    d834:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			if (node_tx) {
    d838:	b31e      	cbz	r6, d882 <isr_rx_conn_pkt_ctrl+0xdbe>
					(_radio.conn_curr->llcp_length.req - 1);
    d83a:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    d83c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_length.state =
    d840:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
				_radio.conn_curr->llcp_length.rx_octets =
    d844:	f8a3 b0f8 	strh.w	fp, [r3, #248]	; 0xf8
				_radio.conn_curr->llcp_length.state =
    d848:	2103      	movs	r1, #3
    d84a:	f361 0202 	bfi	r2, r1, #0, #3
				_radio.conn_curr->llcp_length.tx_octets =
    d84e:	f8a3 70fa 	strh.w	r7, [r3, #250]	; 0xfa
				_radio.conn_curr->llcp_length.rx_time =
    d852:	f8a3 a0fc 	strh.w	sl, [r3, #252]	; 0xfc
				_radio.conn_curr->llcp_length.tx_time =
    d856:	f8a3 80fe 	strh.w	r8, [r3, #254]	; 0xfe
				_radio.conn_curr->llcp_length.state =
    d85a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
			_radio.conn_curr->evt_len_upd = 1U;
    d85e:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
			_radio.conn_curr->evt_len_adv = 0U;
    d862:	f042 0202 	orr.w	r2, r2, #2
    d866:	f36f 0282 	bfc	r2, #2, #1
    d86a:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
			*rx_enqueue = 1U;
    d86e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    d870:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    d874:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    d876:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    d87a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1U;
    d87e:	702b      	strb	r3, [r5, #0]
    d880:	e79a      	b.n	d7b8 <isr_rx_conn_pkt_ctrl+0xcf4>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    d882:	85df      	strh	r7, [r3, #46]	; 0x2e
				_radio.conn_curr->max_tx_time = eff_tx_time;
    d884:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
    d888:	e7e9      	b.n	d85e <isr_rx_conn_pkt_ctrl+0xd9a>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    d88a:	2f15      	cmp	r7, #21
    d88c:	f040 820a 	bne.w	dca4 <isr_rx_conn_pkt_ctrl+0x11e0>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    d890:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    d892:	46e2      	mov	sl, ip
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    d894:	4607      	mov	r7, r0
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d896:	468b      	mov	fp, r1
    d898:	e78e      	b.n	d7b8 <isr_rx_conn_pkt_ctrl+0xcf4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    d89a:	7a41      	ldrb	r1, [r0, #9]
    d89c:	2016      	movs	r0, #22
    d89e:	f7fd feff 	bl	b6a0 <pdu_len_cmp>
    d8a2:	2800      	cmp	r0, #0
    d8a4:	f000 81ce 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
    d8a8:	4813      	ldr	r0, [pc, #76]	; (d8f8 <isr_rx_conn_pkt_ctrl+0xe34>)
		if (_radio.role == ROLE_MASTER) {
    d8aa:	7d03      	ldrb	r3, [r0, #20]
    d8ac:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
    d8b0:	2b04      	cmp	r3, #4
    d8b2:	d16a      	bne.n	d98a <isr_rx_conn_pkt_ctrl+0xec6>
			if ((_radio.conn_curr->llcp_phy.ack !=
    d8b4:	f895 3101 	ldrb.w	r3, [r5, #257]	; 0x101
			     _radio.conn_curr->llcp_phy.req) &&
    d8b8:	f895 1100 	ldrb.w	r1, [r5, #256]	; 0x100
			if ((_radio.conn_curr->llcp_phy.ack !=
    d8bc:	428b      	cmp	r3, r1
    d8be:	d009      	beq.n	d8d4 <isr_rx_conn_pkt_ctrl+0xe10>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    d8c0:	f895 2102 	ldrb.w	r2, [r5, #258]	; 0x102
    d8c4:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    d8c8:	3a01      	subs	r2, #1
    d8ca:	2a02      	cmp	r2, #2
    d8cc:	d802      	bhi.n	d8d4 <isr_rx_conn_pkt_ctrl+0xe10>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d8ce:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    d8d0:	2116      	movs	r1, #22
    d8d2:	e552      	b.n	d37a <isr_rx_conn_pkt_ctrl+0x8b6>
			} else if (((_radio.conn_curr->llcp_req !=
    d8d4:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    d8d8:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d8dc:	4290      	cmp	r0, r2
    d8de:	d003      	beq.n	d8e8 <isr_rx_conn_pkt_ctrl+0xe24>
				     _radio.conn_curr->llcp_ack) &&
    d8e0:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    d8e4:	2a03      	cmp	r2, #3
    d8e6:	d105      	bne.n	d8f4 <isr_rx_conn_pkt_ctrl+0xe30>
				     LLCP_ENCRYPTION)) ||
    d8e8:	f895 00cc 	ldrb.w	r0, [r5, #204]	; 0xcc
    d8ec:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    d8f0:	4290      	cmp	r0, r2
    d8f2:	d005      	beq.n	d900 <isr_rx_conn_pkt_ctrl+0xe3c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d8f4:	222a      	movs	r2, #42	; 0x2a
    d8f6:	e7eb      	b.n	d8d0 <isr_rx_conn_pkt_ctrl+0xe0c>
    d8f8:	20000d78 	.word	0x20000d78
    d8fc:	20000ed4 	.word	0x20000ed4
				_radio.conn_curr->llcp_phy.state =
    d900:	f895 2102 	ldrb.w	r2, [r5, #258]	; 0x102
				if (_radio.conn_curr->llcp_phy.ack ==
    d904:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    d906:	f042 0203 	orr.w	r2, r2, #3
    d90a:	f885 2102 	strb.w	r2, [r5, #258]	; 0x102
				if (_radio.conn_curr->llcp_phy.ack ==
    d90e:	d118      	bne.n	d942 <isr_rx_conn_pkt_ctrl+0xe7e>
					_radio.conn_curr->llcp_phy.ack--;
    d910:	3b01      	subs	r3, #1
    d912:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
					_radio.conn_curr->llcp_phy.cmd = 0U;
    d916:	f895 3103 	ldrb.w	r3, [r5, #259]	; 0x103
						_radio.conn_curr->phy_pref_tx;
    d91a:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0U;
    d91e:	f36f 0341 	bfc	r3, #1, #1
    d922:	f885 3103 	strb.w	r3, [r5, #259]	; 0x103
					_radio.conn_curr->llcp_phy.tx =
    d926:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
						_radio.conn_curr->phy_pref_tx;
    d92a:	f3c2 0202 	ubfx	r2, r2, #0, #3
					_radio.conn_curr->llcp_phy.tx =
    d92e:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    d932:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d936:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
    d93a:	f362 1347 	bfi	r3, r2, #5, #3
    d93e:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    d942:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
    d946:	7b62      	ldrb	r2, [r4, #13]
    d948:	f3c3 0182 	ubfx	r1, r3, #2, #3
    d94c:	400a      	ands	r2, r1
    d94e:	f362 0384 	bfi	r3, r2, #2, #3
    d952:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    d956:	7b22      	ldrb	r2, [r4, #12]
    d958:	b2db      	uxtb	r3, r3
    d95a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    d95e:	f362 1347 	bfi	r3, r2, #5, #3
    d962:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
				if (!_radio.conn_curr->llcp_phy.tx ||
    d966:	b2db      	uxtb	r3, r3
    d968:	f013 0f1c 	tst.w	r3, #28
    d96c:	d003      	beq.n	d976 <isr_rx_conn_pkt_ctrl+0xeb2>
    d96e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    d972:	f47f a963 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
					_radio.conn_curr->llcp_phy.tx = 0;
    d976:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
					_radio.conn_curr->llcp_phy.rx = 0;
    d97a:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    d97e:	f36f 1347 	bfc	r3, #5, #3
    d982:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
    d986:	f7ff b959 	b.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d98a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d98e:	f007 feaf 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    d992:	4601      	mov	r1, r0
    d994:	2800      	cmp	r0, #0
    d996:	f43f aa7c 	beq.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d99a:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
	if (conn->llcp_phy.ack ==
    d99e:	f895 c101 	ldrb.w	ip, [r5, #257]	; 0x101
    d9a2:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d9a6:	2202      	movs	r2, #2
    d9a8:	f362 0301 	bfi	r3, r2, #0, #2
    d9ac:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
    d9b0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	if (conn->llcp_phy.ack ==
    d9b4:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
    d9b8:	f3c0 0002 	ubfx	r0, r0, #0, #3
    d9bc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d9c0:	4563      	cmp	r3, ip
    d9c2:	b2c7      	uxtb	r7, r0
    d9c4:	b2d6      	uxtb	r6, r2
    d9c6:	d114      	bne.n	d9f2 <isr_rx_conn_pkt_ctrl+0xf2e>
		conn->llcp_phy.ack--;
    d9c8:	3b01      	subs	r3, #1
    d9ca:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
		conn->llcp_phy.cmd = 0U;
    d9ce:	f895 3103 	ldrb.w	r3, [r5, #259]	; 0x103
    d9d2:	f36f 0341 	bfc	r3, #1, #1
    d9d6:	f885 3103 	strb.w	r3, [r5, #259]	; 0x103
		conn->llcp_phy.tx =
    d9da:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
    d9de:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
    d9e2:	f366 1347 	bfi	r3, r6, #5, #3
    d9e6:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
		conn->procedure_expire =
    d9ea:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    d9ee:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    d9f2:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
    d9f6:	7b66      	ldrb	r6, [r4, #13]
    d9f8:	f3c3 0782 	ubfx	r7, r3, #2, #3
    d9fc:	403e      	ands	r6, r7
    d9fe:	f366 0384 	bfi	r3, r6, #2, #3
    da02:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
	conn->llcp_phy.rx &= p->tx_phys;
    da06:	7b24      	ldrb	r4, [r4, #12]
    da08:	b2db      	uxtb	r3, r3
    da0a:	ea04 1453 	and.w	r4, r4, r3, lsr #5
    da0e:	f364 1347 	bfi	r3, r4, #5, #3
    da12:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da16:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    da18:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da1a:	f043 0303 	orr.w	r3, r3, #3
    da1e:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    da20:	2303      	movs	r3, #3
    da22:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    da24:	2317      	movs	r3, #23
    da26:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    da28:	724a      	strb	r2, [r1, #9]
    da2a:	f7ff ba44 	b.w	ceb6 <isr_rx_conn_pkt_ctrl+0x3f2>
		if (_radio.conn_curr->role ||
    da2e:	4ea0      	ldr	r6, [pc, #640]	; (dcb0 <isr_rx_conn_pkt_ctrl+0x11ec>)
    da30:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    da34:	f995 301d 	ldrsb.w	r3, [r5, #29]
    da38:	2b00      	cmp	r3, #0
    da3a:	f2c0 8103 	blt.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    da3e:	7a41      	ldrb	r1, [r0, #9]
    da40:	2017      	movs	r0, #23
    da42:	f7fd fe2d 	bl	b6a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    da46:	2800      	cmp	r0, #0
    da48:	f000 80fc 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		if ((_radio.role == ROLE_MASTER) &&
    da4c:	7d33      	ldrb	r3, [r6, #20]
    da4e:	2b04      	cmp	r3, #4
    da50:	f47f a8f4 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
    da54:	f895 2101 	ldrb.w	r2, [r5, #257]	; 0x101
    da58:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
    da5c:	429a      	cmp	r2, r3
    da5e:	f43f a8ed 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		    (_radio.conn_curr->llcp_phy.state ==
    da62:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
		     _radio.conn_curr->llcp_phy.req) &&
    da66:	f003 0203 	and.w	r2, r3, #3
    da6a:	2a02      	cmp	r2, #2
    da6c:	f47f a8e6 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    da70:	f043 0303 	orr.w	r3, r3, #3
    da74:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    da78:	7b62      	ldrb	r2, [r4, #13]
    da7a:	f3c3 0182 	ubfx	r1, r3, #2, #3
    da7e:	400a      	ands	r2, r1
    da80:	f362 0384 	bfi	r3, r2, #2, #3
    da84:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    da88:	7b22      	ldrb	r2, [r4, #12]
    da8a:	b2db      	uxtb	r3, r3
    da8c:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    da90:	f362 1347 	bfi	r3, r2, #5, #3
    da94:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
			if (!_radio.conn_curr->llcp_phy.tx ||
    da98:	b2db      	uxtb	r3, r3
    da9a:	f013 0f1c 	tst.w	r3, #28
    da9e:	d003      	beq.n	daa8 <isr_rx_conn_pkt_ctrl+0xfe4>
    daa0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    daa4:	f47f a88e 	bne.w	cbc4 <isr_rx_conn_pkt_ctrl+0x100>
				_radio.conn_curr->llcp_phy.tx = 0;
    daa8:	f895 3102 	ldrb.w	r3, [r5, #258]	; 0x102
				_radio.conn_curr->llcp_phy.rx = 0;
    daac:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    dab0:	f36f 1347 	bfc	r3, #5, #3
    dab4:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
    dab8:	f7ff b884 	b.w	cbc4 <isr_rx_conn_pkt_ctrl+0x100>
		if (!_radio.conn_curr->role ||
    dabc:	4b7c      	ldr	r3, [pc, #496]	; (dcb0 <isr_rx_conn_pkt_ctrl+0x11ec>)
    dabe:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    dac2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    dac6:	2b00      	cmp	r3, #0
    dac8:	f280 80bc 	bge.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    dacc:	7a41      	ldrb	r1, [r0, #9]
    dace:	2018      	movs	r0, #24
    dad0:	f7fd fde6 	bl	b6a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    dad4:	2800      	cmp	r0, #0
    dad6:	f000 80b5 	beq.w	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    dada:	7b27      	ldrb	r7, [r4, #12]
    dadc:	7b62      	ldrb	r2, [r4, #13]
    dade:	ea47 0002 	orr.w	r0, r7, r2
    dae2:	f010 0007 	ands.w	r0, r0, #7
    dae6:	d12b      	bne.n	db40 <isr_rx_conn_pkt_ctrl+0x107c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    dae8:	f896 2100 	ldrb.w	r2, [r6, #256]	; 0x100
    daec:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    daf0:	4293      	cmp	r3, r2
    daf2:	f43f a8a3 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    daf6:	f896 3102 	ldrb.w	r3, [r6, #258]	; 0x102
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    dafa:	f003 0303 	and.w	r3, r3, #3
    dafe:	2b02      	cmp	r3, #2
    db00:	f47f a89c 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		conn->phy_tx_time = conn->phy_tx;
    db04:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
		conn->llcp_phy.ack = conn->llcp_phy.req;
    db08:	f886 2101 	strb.w	r2, [r6, #257]	; 0x101
		conn->phy_tx_time = conn->phy_tx;
    db0c:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
		conn->procedure_expire = 0U;
    db10:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		conn->phy_tx_time = conn->phy_tx;
    db14:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    db18:	f363 0202 	bfi	r2, r3, #0, #3
    db1c:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		if (!conn->llcp_phy.cmd) {
    db20:	f896 2103 	ldrb.w	r2, [r6, #259]	; 0x103
    db24:	0792      	lsls	r2, r2, #30
    db26:	f57f a889 	bpl.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		upd->status = 0U;
    db2a:	7220      	strb	r0, [r4, #8]
		upd->tx = conn->phy_tx;
    db2c:	7263      	strb	r3, [r4, #9]
		upd->rx = conn->phy_rx;
    db2e:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db32:	220e      	movs	r2, #14
		upd->rx = conn->phy_rx;
    db34:	f3c3 0302 	ubfx	r3, r3, #0, #3
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db38:	7122      	strb	r2, [r4, #4]
		upd->rx = conn->phy_rx;
    db3a:	72a3      	strb	r3, [r4, #10]
    db3c:	f7ff ba6d 	b.w	d01a <isr_rx_conn_pkt_ctrl+0x556>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    db40:	89e0      	ldrh	r0, [r4, #14]
    db42:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    db44:	1ac3      	subs	r3, r0, r3
    db46:	041b      	lsls	r3, r3, #16
    db48:	d441      	bmi.n	dbce <isr_rx_conn_pkt_ctrl+0x110a>
	if (conn->llcp_req != conn->llcp_ack) {
    db4a:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    db4e:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    db52:	428b      	cmp	r3, r1
    db54:	d140      	bne.n	dbd8 <isr_rx_conn_pkt_ctrl+0x1114>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    db56:	f896 4100 	ldrb.w	r4, [r6, #256]	; 0x100
    db5a:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    db5e:	42a3      	cmp	r3, r4
    db60:	d014      	beq.n	db8c <isr_rx_conn_pkt_ctrl+0x10c8>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    db62:	f896 3102 	ldrb.w	r3, [r6, #258]	; 0x102
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    db66:	f003 0303 	and.w	r3, r3, #3
    db6a:	2b02      	cmp	r3, #2
    db6c:	d10e      	bne.n	db8c <isr_rx_conn_pkt_ctrl+0x10c8>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    db6e:	f896 3103 	ldrb.w	r3, [r6, #259]	; 0x103
		conn->llcp_phy.ack = conn->llcp_phy.req;
    db72:	f886 4101 	strb.w	r4, [r6, #257]	; 0x101
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    db76:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    db7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    db7e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0U;
    db82:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    db84:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0U;
    db88:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    db8c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    db90:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    db94:	f002 0207 	and.w	r2, r2, #7
    db98:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    db9c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0U;
    dba0:	f36f 0300 	bfc	r3, #0, #1
    dba4:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    dba8:	2008      	movs	r0, #8
	conn->llcp_ack--;
    dbaa:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    dbac:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    dbb0:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    dbb4:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    dbb8:	2b00      	cmp	r3, #0
    dbba:	f43f a83f 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    dbbe:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    dbc2:	f362 0302 	bfi	r3, r2, #0, #3
    dbc6:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    dbca:	f7ff b837 	b.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		return BT_HCI_ERR_INSTANT_PASSED;
    dbce:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    dbd0:	f886 30a3 	strb.w	r3, [r6, #163]	; 0xa3
    dbd4:	f7ff b832 	b.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    dbd8:	232a      	movs	r3, #42	; 0x2a
    dbda:	e7f9      	b.n	dbd0 <isr_rx_conn_pkt_ctrl+0x110c>
		if (_radio.conn_curr->role ||
    dbdc:	4e34      	ldr	r6, [pc, #208]	; (dcb0 <isr_rx_conn_pkt_ctrl+0x11ec>)
    dbde:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dbe2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	db2c      	blt.n	dc44 <isr_rx_conn_pkt_ctrl+0x1180>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    dbea:	7a41      	ldrb	r1, [r0, #9]
    dbec:	2019      	movs	r0, #25
    dbee:	f7fd fd57 	bl	b6a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dbf2:	b338      	cbz	r0, dc44 <isr_rx_conn_pkt_ctrl+0x1180>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    dbf4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    dbf8:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
    dbfc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    dc00:	f3c2 0202 	ubfx	r2, r2, #0, #3
    dc04:	4313      	orrs	r3, r2
    dc06:	7b22      	ldrb	r2, [r4, #12]
    dc08:	4213      	tst	r3, r2
    dc0a:	f43f a817 	beq.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
			if (conn->llcp_req != conn->llcp_ack) {
    dc0e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    dc12:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    dc16:	429a      	cmp	r2, r3
    dc18:	f47f a810 	bne.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
			memcpy(&conn->llcp.chan_map.chm[0],
    dc1c:	2205      	movs	r2, #5
    dc1e:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    dc22:	f105 0079 	add.w	r0, r5, #121	; 0x79
    dc26:	f005 fc1d 	bl	13464 <memcpy>
			conn->llcp.chan_map.initiate = 1U;
    dc2a:	2301      	movs	r3, #1
    dc2c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    dc30:	2302      	movs	r3, #2
    dc32:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    dc36:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    dc3a:	3b01      	subs	r3, #1
    dc3c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    dc40:	f7fe bffc 	b.w	cc3c <isr_rx_conn_pkt_ctrl+0x178>
		nack = unknown_rsp_send(_radio.conn_curr,
    dc44:	481a      	ldr	r0, [pc, #104]	; (dcb0 <isr_rx_conn_pkt_ctrl+0x11ec>)
    dc46:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc4a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc4e:	f007 fd4f 	bl	156f0 <mem_acquire>
	if (!node_tx) {
    dc52:	4601      	mov	r1, r0
    dc54:	2800      	cmp	r0, #0
    dc56:	f43f a91c 	beq.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc5a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    dc5c:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc5e:	f043 0303 	orr.w	r3, r3, #3
    dc62:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    dc64:	2302      	movs	r3, #2
    dc66:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    dc68:	2307      	movs	r3, #7
    dc6a:	71c3      	strb	r3, [r0, #7]
    dc6c:	f7ff b94d 	b.w	cf0a <isr_rx_conn_pkt_ctrl+0x446>
	if (node_tx) {
    dc70:	2e00      	cmp	r6, #0
    dc72:	f43f a90e 	beq.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    dc76:	490f      	ldr	r1, [pc, #60]	; (dcb4 <isr_rx_conn_pkt_ctrl+0x11f0>)
    dc78:	4630      	mov	r0, r6
    dc7a:	f007 fd52 	bl	15722 <mem_release>
    dc7e:	f7ff b908 	b.w	ce92 <isr_rx_conn_pkt_ctrl+0x3ce>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    dc82:	2923      	cmp	r1, #35	; 0x23
    dc84:	d002      	beq.n	dc8c <isr_rx_conn_pkt_ctrl+0x11c8>
			conn->slave.ticks_to_offset =
    dc86:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
    dc8a:	671e      	str	r6, [r3, #112]	; 0x70
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    dc8c:	f893 60ce 	ldrb.w	r6, [r3, #206]	; 0xce
    dc90:	f006 0707 	and.w	r7, r6, #7
    dc94:	2f04      	cmp	r7, #4
    dc96:	f47f ac39 	bne.w	d50c <isr_rx_conn_pkt_ctrl+0xa48>
		LL_ASSERT(_radio.conn_upd == conn);
    dc9a:	f8d2 7188 	ldr.w	r7, [r2, #392]	; 0x188
    dc9e:	429f      	cmp	r7, r3
    dca0:	f43f ac2d 	beq.w	d4fe <isr_rx_conn_pkt_ctrl+0xa3a>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    dca4:	4040      	eors	r0, r0
    dca6:	f380 8811 	msr	BASEPRI, r0
    dcaa:	f04f 0003 	mov.w	r0, #3
    dcae:	df02      	svc	2
    dcb0:	20000d78 	.word	0x20000d78
    dcb4:	20000ed4 	.word	0x20000ed4

0000dcb8 <radio_init>:
{
    dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    dcbc:	4c3e      	ldr	r4, [pc, #248]	; (ddb8 <radio_init+0x100>)
{
    dcbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    dcc0:	f89d c018 	ldrb.w	ip, [sp, #24]
    dcc4:	f89d 801c 	ldrb.w	r8, [sp, #28]
    dcc8:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
	_radio.hf_clock = hf_clock;
    dccc:	6020      	str	r0, [r4, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    dcce:	f44f 70b0 	mov.w	r0, #352	; 0x160
{
    dcd2:	f8bd e020 	ldrh.w	lr, [sp, #32]
	_radio.sca = sca;
    dcd6:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    dcda:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    dcde:	fb00 7003 	mla	r0, r0, r3, r7
	mem_radio_end = mem_radio + mem_size;
    dce2:	197e      	adds	r6, r7, r5
	rx_count_max += 3;
    dce4:	f10c 0103 	add.w	r1, ip, #3
	tx_count_max += 1;
    dce8:	f108 0701 	add.w	r7, r8, #1
	_radio.packet_rx_count = (rx_count_max + 1);
    dcec:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    dcf0:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    dcf4:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.packet_tx_count = (tx_count_max + 1);
    dcf8:	fa5f f888 	uxtb.w	r8, r8
	_radio.entropy = entropy;
    dcfc:	6062      	str	r2, [r4, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
    dcfe:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
	    (offsetof(struct pdu_data, lldata) +
    dd02:	f10e 0203 	add.w	r2, lr, #3
	_radio.packet_rx = (void *)mem_radio;
    dd06:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	rx_count_max += 3;
    dd0a:	b2c9      	uxtb	r1, r1
	mem_radio +=
    dd0c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    dd10:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    dd14:	2a29      	cmp	r2, #41	; 0x29
	_radio.link_rx_data_quota = rx_count_max;
    dd16:	f884 1154 	strb.w	r1, [r4, #340]	; 0x154
	_radio.pkt_tx = (void *)mem_radio;
    dd1a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    dd1e:	b289      	uxth	r1, r1
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    dd20:	4440      	add	r0, r8
    dd22:	4622      	mov	r2, r4
	_radio.packet_data_octets_max = packet_data_octets_max;
    dd24:	f8a4 e134 	strh.w	lr, [r4, #308]	; 0x134
	_radio.pkt_release = (void *)mem_radio;
    dd28:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
		_radio.packet_rx_data_pool_size =
    dd2c:	bf88      	it	hi
    dd2e:	f10e 0e0e 	addhi.w	lr, lr, #14
	_radio.connection_count = connection_count_max;
    dd32:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    dd36:	f884 c140 	strb.w	ip, [r4, #320]	; 0x140
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dd3a:	bf99      	ittee	ls
    dd3c:	eb01 0441 	addls.w	r4, r1, r1, lsl #1
    dd40:	eb01 0184 	addls.w	r1, r1, r4, lsl #2
		_radio.packet_rx_data_pool_size =
    dd44:	f02e 0e03 	bichi.w	lr, lr, #3
    dd48:	fb1e f101 	smulbbhi	r1, lr, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dd4c:	bf98      	it	ls
    dd4e:	0089      	lslls	r1, r1, #2
		_radio.packet_rx_data_pool_size =
    dd50:	f8a2 1136 	strh.w	r1, [r2, #310]	; 0x136
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    dd54:	f8b2 4136 	ldrh.w	r4, [r2, #310]	; 0x136
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    dd58:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    dd5a:	2134      	movs	r1, #52	; 0x34
    dd5c:	f8a2 1138 	strh.w	r1, [r2, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    dd60:	f8c2 012c 	str.w	r0, [r2, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    dd64:	fbb4 f1f1 	udiv	r1, r4, r1
	mem_radio += _radio.packet_rx_data_pool_size;
    dd68:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    dd6a:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
    dd6e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    dd72:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    dd76:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    dd7a:	f8c2 0158 	str.w	r0, [r2, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    dd7e:	340a      	adds	r4, #10
    dd80:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    dd84:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    dd86:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
    dd88:	b2ff      	uxtb	r7, r7
	_radio.packet_tx_data_size =
    dd8a:	f8a2 4168 	strh.w	r4, [r2, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    dd8e:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    dd92:	1ba4      	subs	r4, r4, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    dd94:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    dd98:	f8c2 0160 	str.w	r0, [r2, #352]	; 0x160
	if (retcode) {
    dd9c:	d003      	beq.n	dda6 <radio_init+0xee>
		return (retcode + mem_size);
    dd9e:	442c      	add	r4, r5
}
    dda0:	4620      	mov	r0, r4
    dda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1U;
    dda6:	2301      	movs	r3, #1
    dda8:	f882 3182 	strb.w	r3, [r2, #386]	; 0x182
	common_init();
    ddac:	f7fd fd0a 	bl	b7c4 <common_init>
	radio_setup();
    ddb0:	f008 fa4a 	bl	16248 <radio_setup>
	return retcode;
    ddb4:	e7f4      	b.n	dda0 <radio_init+0xe8>
    ddb6:	bf00      	nop
    ddb8:	20000d78 	.word	0x20000d78

0000ddbc <ll_reset>:
{
    ddbc:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    ddbe:	2103      	movs	r1, #3
    ddc0:	2005      	movs	r0, #5
    ddc2:	f7fd fdd1 	bl	b968 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    ddc6:	2104      	movs	r1, #4
    ddc8:	2006      	movs	r0, #6
    ddca:	f7fd fdcd 	bl	b968 <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
    ddce:	4c21      	ldr	r4, [pc, #132]	; (de54 <ll_reset+0x98>)
    ddd0:	2500      	movs	r5, #0
    ddd2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    ddd6:	b2ab      	uxth	r3, r5
    ddd8:	429a      	cmp	r2, r3
    ddda:	f105 0501 	add.w	r5, r5, #1
    ddde:	d832      	bhi.n	de46 <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0U;
    dde0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    dde4:	f36f 13c7 	bfc	r3, #7, #1
    dde8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
    ddec:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    ddf0:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
    ddf2:	f360 0300 	bfi	r3, r0, #0, #1
    ddf6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    ddfa:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    ddfc:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    de00:	fbb3 f3f2 	udiv	r3, r3, r2
    de04:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de08:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0U;
    de0c:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de10:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
    de12:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0U;
    de16:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de1a:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    de1e:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    de22:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    de26:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    de2a:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0U;
    de2e:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0U;
    de32:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
	_radio.fc_ack = _radio.fc_req;
    de36:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
		ll_filter_reset(false);
    de3a:	f001 fab7 	bl	f3ac <ll_filter_reset>
}
    de3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    de42:	f7fd bcbf 	b.w	b7c4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    de46:	1da8      	adds	r0, r5, #6
    de48:	21ff      	movs	r1, #255	; 0xff
    de4a:	b2c0      	uxtb	r0, r0
    de4c:	f7fd fd8c 	bl	b968 <role_disable>
    de50:	e7bf      	b.n	ddd2 <ll_reset+0x16>
    de52:	bf00      	nop
    de54:	20000d78 	.word	0x20000d78

0000de58 <radio_adv_data_get>:
}
    de58:	4800      	ldr	r0, [pc, #0]	; (de5c <radio_adv_data_get+0x4>)
    de5a:	4770      	bx	lr
    de5c:	20000da3 	.word	0x20000da3

0000de60 <radio_scan_data_get>:
}
    de60:	4800      	ldr	r0, [pc, #0]	; (de64 <radio_scan_data_get+0x4>)
    de62:	4770      	bx	lr
    de64:	20000df3 	.word	0x20000df3

0000de68 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    de68:	4b02      	ldr	r3, [pc, #8]	; (de74 <ll_adv_is_enabled+0xc>)
    de6a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    de6e:	09c0      	lsrs	r0, r0, #7
    de70:	4770      	bx	lr
    de72:	bf00      	nop
    de74:	20000d78 	.word	0x20000d78

0000de78 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    de78:	4b04      	ldr	r3, [pc, #16]	; (de8c <radio_adv_filter_pol_get+0x14>)
    de7a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    de7e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    de80:	bfba      	itte	lt
    de82:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    de86:	0980      	lsrlt	r0, r0, #6
	return 0;
    de88:	2000      	movge	r0, #0
}
    de8a:	4770      	bx	lr
    de8c:	20000d78 	.word	0x20000d78

0000de90 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    de90:	4a09      	ldr	r2, [pc, #36]	; (deb8 <ll_scan_is_enabled+0x28>)
    de92:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    de96:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    de9a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    de9e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    dea2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    dea4:	f003 0301 	and.w	r3, r3, #1
    dea8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    deac:	bf14      	ite	ne
    deae:	2004      	movne	r0, #4
    deb0:	2000      	moveq	r0, #0
}
    deb2:	4318      	orrs	r0, r3
    deb4:	4770      	bx	lr
    deb6:	bf00      	nop
    deb8:	20000d78 	.word	0x20000d78

0000debc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    debc:	4b05      	ldr	r3, [pc, #20]	; (ded4 <radio_scan_filter_pol_get+0x18>)
    debe:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    dec2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    dec6:	bf1c      	itt	ne
    dec8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    decc:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    ded0:	4770      	bx	lr
    ded2:	bf00      	nop
    ded4:	20000d78 	.word	0x20000d78

0000ded8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    ded8:	4b03      	ldr	r3, [pc, #12]	; (dee8 <ll_length_default_get+0x10>)
    deda:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
    dede:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    dee0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
    dee4:	800b      	strh	r3, [r1, #0]
}
    dee6:	4770      	bx	lr
    dee8:	20000d78 	.word	0x20000d78

0000deec <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    deec:	4b03      	ldr	r3, [pc, #12]	; (defc <ll_length_default_set+0x10>)
    deee:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
    def2:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
    def6:	2000      	movs	r0, #0
    def8:	4770      	bx	lr
    defa:	bf00      	nop
    defc:	20000d78 	.word	0x20000d78

0000df00 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    df00:	4b03      	ldr	r3, [pc, #12]	; (df10 <ll_phy_default_set+0x10>)
    df02:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
    df06:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
    df0a:	2000      	movs	r0, #0
    df0c:	4770      	bx	lr
    df0e:	bf00      	nop
    df10:	20000d78 	.word	0x20000d78

0000df14 <ll_rx_get>:
{
    df14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    df18:	4605      	mov	r5, r0
    df1a:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    df1c:	4918      	ldr	r1, [pc, #96]	; (df80 <ll_rx_get+0x6c>)
    df1e:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    df22:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
    df26:	4293      	cmp	r3, r2
    df28:	460f      	mov	r7, r1
    df2a:	d01f      	beq.n	df6c <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    df2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    df30:	f201 1177 	addw	r1, r1, #375	; 0x177
    df34:	f898 2000 	ldrb.w	r2, [r8]
    df38:	f7fd fcb6 	bl	b8a8 <tx_cmplt_get>
		if (!cmplt) {
    df3c:	4604      	mov	r4, r0
    df3e:	b9e0      	cbnz	r0, df7a <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    df40:	ae02      	add	r6, sp, #8
    df42:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
    df46:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    df4a:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
    df4e:	4631      	mov	r1, r6
    df50:	f10d 0006 	add.w	r0, sp, #6
    df54:	f7fd fca8 	bl	b8a8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    df58:	b934      	cbnz	r4, df68 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    df5a:	b928      	cbnz	r0, df68 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    df5c:	f8c5 8000 	str.w	r8, [r5]
}
    df60:	4620      	mov	r0, r4
    df62:	b002      	add	sp, #8
    df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    df68:	4604      	mov	r4, r0
    df6a:	e7ee      	b.n	df4a <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    df6c:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
    df70:	f201 1177 	addw	r1, r1, #375	; 0x177
    df74:	f7fd fc98 	bl	b8a8 <tx_cmplt_get>
    df78:	4604      	mov	r4, r0
		*node_rx = NULL;
    df7a:	2300      	movs	r3, #0
    df7c:	602b      	str	r3, [r5, #0]
    df7e:	e7ef      	b.n	df60 <ll_rx_get+0x4c>
    df80:	20000d78 	.word	0x20000d78

0000df84 <ll_rx_mem_release>:
{
    df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    df88:	f8df 8060 	ldr.w	r8, [pc, #96]	; dfec <ll_rx_mem_release+0x68>
{
    df8c:	4604      	mov	r4, r0
	_node_rx = *node_rx;
    df8e:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    df90:	f5a8 7598 	sub.w	r5, r8, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
    df94:	f1a8 0624 	sub.w	r6, r8, #36	; 0x24
	while (_node_rx) {
    df98:	b928      	cbnz	r0, dfa6 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
    df9a:	6020      	str	r0, [r4, #0]
	packet_rx_allocate(0xff);
    df9c:	20ff      	movs	r0, #255	; 0xff
}
    df9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    dfa2:	f7fd bbc3 	b.w	b72c <packet_rx_allocate>
    dfa6:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.next;
    dfa8:	6807      	ldr	r7, [r0, #0]
    dfaa:	3b02      	subs	r3, #2
    dfac:	b2db      	uxtb	r3, r3
    dfae:	2b0c      	cmp	r3, #12
    dfb0:	d808      	bhi.n	dfc4 <ll_rx_mem_release+0x40>
    dfb2:	2201      	movs	r2, #1
    dfb4:	fa02 f303 	lsl.w	r3, r2, r3
    dfb8:	f641 7279 	movw	r2, #8057	; 0x1f79
    dfbc:	4213      	tst	r3, r2
    dfbe:	d107      	bne.n	dfd0 <ll_rx_mem_release+0x4c>
    dfc0:	061b      	lsls	r3, r3, #24
    dfc2:	d40a      	bmi.n	dfda <ll_rx_mem_release+0x56>
			LL_ASSERT(0);
    dfc4:	4040      	eors	r0, r0
    dfc6:	f380 8811 	msr	BASEPRI, r0
    dfca:	f04f 0003 	mov.w	r0, #3
    dfce:	df02      	svc	2
			mem_release(_node_rx_free,
    dfd0:	4641      	mov	r1, r8
			mem_release(conn, &_radio.conn_free);
    dfd2:	f007 fba6 	bl	15722 <mem_release>
{
    dfd6:	4638      	mov	r0, r7
    dfd8:	e7de      	b.n	df98 <ll_rx_mem_release+0x14>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    dfda:	88c2      	ldrh	r2, [r0, #6]
    dfdc:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
    dfe0:	f44f 71b0 	mov.w	r1, #352	; 0x160
    dfe4:	f007 fbb8 	bl	15758 <mem_get>
			mem_release(conn, &_radio.conn_free);
    dfe8:	4631      	mov	r1, r6
    dfea:	e7f2      	b.n	dfd2 <ll_rx_mem_release+0x4e>
    dfec:	20000ea8 	.word	0x20000ea8

0000dff0 <radio_rx_fc_set>:

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    dff0:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
    dff2:	4b27      	ldr	r3, [pc, #156]	; (e090 <radio_rx_fc_set+0xa0>)
    dff4:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
    dff8:	b912      	cbnz	r2, e000 <radio_rx_fc_set+0x10>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    dffa:	2100      	movs	r1, #0
}
    dffc:	4608      	mov	r0, r1
    dffe:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
    e000:	f893 5180 	ldrb.w	r5, [r3, #384]	; 0x180
		u8_t ack = _radio.fc_ack;
    e004:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		u8_t req = _radio.fc_req;
    e008:	b2ed      	uxtb	r5, r5
		if (fc) {
    e00a:	b359      	cbz	r1, e064 <radio_rx_fc_set+0x74>
			if (handle != 0xffff) {
    e00c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e010:	4288      	cmp	r0, r1
    e012:	d0f2      	beq.n	dffa <radio_rx_fc_set+0xa>
	if (req == ack) {
    e014:	4295      	cmp	r5, r2
    e016:	d119      	bne.n	e04c <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    e018:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    e01c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    e020:	4291      	cmp	r1, r2
    e022:	d111      	bne.n	e048 <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
    e024:	2d00      	cmp	r5, #0
    e026:	bf14      	ite	ne
    e028:	462a      	movne	r2, r5
    e02a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    e02c:	3a01      	subs	r2, #1
    e02e:	b2d2      	uxtb	r2, r2
    e030:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    e034:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
    e038:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
    e03c:	f8a1 017a 	strh.w	r0, [r1, #378]	; 0x17a
			if (req != _radio.fc_req) {
    e040:	4295      	cmp	r5, r2
    e042:	d0da      	beq.n	dffa <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    e044:	f883 5181 	strb.w	r5, [r3, #385]	; 0x181
			return 1;
    e048:	2101      	movs	r1, #1
    e04a:	e7d7      	b.n	dffc <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
    e04c:	b92d      	cbnz	r5, e05a <radio_rx_fc_set+0x6a>
    e04e:	f8b3 117e 	ldrh.w	r1, [r3, #382]	; 0x17e
	return 0;
    e052:	1a09      	subs	r1, r1, r0
    e054:	bf18      	it	ne
    e056:	2101      	movne	r1, #1
    e058:	e7d0      	b.n	dffc <radio_rx_fc_set+0xc>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    e05a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e05e:	f8b3 1178 	ldrh.w	r1, [r3, #376]	; 0x178
    e062:	e7f6      	b.n	e052 <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    e064:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
    e068:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
    e06c:	42a0      	cmp	r0, r4
    e06e:	d1c4      	bne.n	dffa <radio_rx_fc_set+0xa>
    e070:	4295      	cmp	r5, r2
    e072:	d0c2      	beq.n	dffa <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e074:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
    e078:	f883 5181 	strb.w	r5, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e07c:	42a0      	cmp	r0, r4
    e07e:	d0bc      	beq.n	dffa <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
    e080:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e084:	42a8      	cmp	r0, r5
    e086:	d1b8      	bne.n	dffa <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    e088:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    e08c:	e7b6      	b.n	dffc <radio_rx_fc_set+0xc>
    e08e:	bf00      	nop
    e090:	20000d78 	.word	0x20000d78

0000e094 <ll_tx_mem_acquire>:
	return 0;
}

void *ll_tx_mem_acquire(void)
{
	return mem_acquire(&_radio.pkt_tx_data_free);
    e094:	4801      	ldr	r0, [pc, #4]	; (e09c <ll_tx_mem_acquire+0x8>)
    e096:	f007 bb2b 	b.w	156f0 <mem_acquire>
    e09a:	bf00      	nop
    e09c:	20000edc 	.word	0x20000edc

0000e0a0 <ll_tx_mem_release>:
}

void ll_tx_mem_release(void *node_tx)
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    e0a0:	4901      	ldr	r1, [pc, #4]	; (e0a8 <ll_tx_mem_release+0x8>)
    e0a2:	f007 bb3e 	b.w	15722 <mem_release>
    e0a6:	bf00      	nop
    e0a8:	20000edc 	.word	0x20000edc

0000e0ac <ll_tx_mem_enqueue>:

	conn->slave.latency_cancel = 0U;
}

int ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
    e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    e0ae:	4d2d      	ldr	r5, [pc, #180]	; (e164 <ll_tx_mem_enqueue+0xb8>)
    e0b0:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
    e0b4:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
    e0b8:	3401      	adds	r4, #1
{
    e0ba:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
    e0bc:	b2e4      	uxtb	r4, r4
{
    e0be:	4607      	mov	r7, r0
    e0c0:	460e      	mov	r6, r1
		last = 0U;
    e0c2:	42a3      	cmp	r3, r4
    e0c4:	bf08      	it	eq
    e0c6:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
    e0c8:	f7fd fc38 	bl	b93c <connection_get>
	if (!conn) {
    e0cc:	2800      	cmp	r0, #0
    e0ce:	d042      	beq.n	e156 <ll_tx_mem_enqueue+0xaa>
		return -EINVAL;
	}

	if (last == _radio.packet_tx_first) {
    e0d0:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
    e0d4:	42a3      	cmp	r3, r4
    e0d6:	d041      	beq.n	e15c <ll_tx_mem_enqueue+0xb0>
		return -ENOBUFS;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    e0d8:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    e0dc:	7972      	ldrb	r2, [r6, #5]
    e0de:	3b07      	subs	r3, #7
    e0e0:	429a      	cmp	r2, r3
    e0e2:	d905      	bls.n	e0f0 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e0e4:	4040      	eors	r0, r0
    e0e6:	f380 8811 	msr	BASEPRI, r0
    e0ea:	f04f 0003 	mov.w	r0, #3
    e0ee:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    e0f0:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
    e0f4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    e0f8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    e0fc:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
    e100:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
    e102:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e106:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e10a:	2b00      	cmp	r3, #0
    e10c:	db02      	blt.n	e114 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    e10e:	2000      	movs	r0, #0
}
    e110:	b009      	add	sp, #36	; 0x24
    e112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e114:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e116:	2b00      	cmp	r3, #0
    e118:	d0f9      	beq.n	e10e <ll_tx_mem_enqueue+0x62>
    e11a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e11e:	f012 0302 	ands.w	r3, r2, #2
    e122:	d1f4      	bne.n	e10e <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1U;
    e124:	f042 0202 	orr.w	r2, r2, #2
    e128:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    e12c:	490e      	ldr	r1, [pc, #56]	; (e168 <ll_tx_mem_enqueue+0xbc>)
    e12e:	f890 2020 	ldrb.w	r2, [r0, #32]
    e132:	9006      	str	r0, [sp, #24]
    e134:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e138:	3207      	adds	r2, #7
    e13a:	2101      	movs	r1, #1
    e13c:	e9cd 3102 	strd	r3, r1, [sp, #8]
    e140:	e9cd 3300 	strd	r3, r3, [sp]
    e144:	4618      	mov	r0, r3
    e146:	b2d2      	uxtb	r2, r2
    e148:	2103      	movs	r1, #3
    e14a:	f7fb ffd1 	bl	a0f0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e14e:	f030 0302 	bics.w	r3, r0, #2
    e152:	d1c7      	bne.n	e0e4 <ll_tx_mem_enqueue+0x38>
    e154:	e7db      	b.n	e10e <ll_tx_mem_enqueue+0x62>
		return -EINVAL;
    e156:	f06f 0015 	mvn.w	r0, #21
    e15a:	e7d9      	b.n	e110 <ll_tx_mem_enqueue+0x64>
		return -ENOBUFS;
    e15c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e160:	e7d6      	b.n	e110 <ll_tx_mem_enqueue+0x64>
    e162:	bf00      	nop
    e164:	20000d78 	.word	0x20000d78
    e168:	00015b7d 	.word	0x00015b7d

0000e16c <radio_adv_disable>:
{
    e16c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    e16e:	2103      	movs	r1, #3
    e170:	2005      	movs	r0, #5
    e172:	f7fd fbf9 	bl	b968 <role_disable>
	if (!status) {
    e176:	4606      	mov	r6, r0
    e178:	b9d8      	cbnz	r0, e1b2 <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
    e17a:	4c0f      	ldr	r4, [pc, #60]	; (e1b8 <radio_adv_disable+0x4c>)
    e17c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    e180:	f360 12c7 	bfi	r2, r0, #7, #1
    e184:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    e188:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    e18c:	07d3      	lsls	r3, r2, #31
    e18e:	d401      	bmi.n	e194 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    e190:	f000 ff12 	bl	efb8 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    e194:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
    e198:	b15d      	cbz	r5, e1b2 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    e19a:	2300      	movs	r3, #0
			mem_release(hdr->link, &_radio.link_rx_free);
    e19c:	4907      	ldr	r1, [pc, #28]	; (e1bc <radio_adv_disable+0x50>)
    e19e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
			_radio.advertiser.conn = NULL;
    e1a2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
    e1a6:	f007 fabc 	bl	15722 <mem_release>
			mem_release(conn, &_radio.conn_free);
    e1aa:	4905      	ldr	r1, [pc, #20]	; (e1c0 <radio_adv_disable+0x54>)
    e1ac:	4628      	mov	r0, r5
    e1ae:	f007 fab8 	bl	15722 <mem_release>
}
    e1b2:	4630      	mov	r0, r6
    e1b4:	bd70      	pop	{r4, r5, r6, pc}
    e1b6:	bf00      	nop
    e1b8:	20000d78 	.word	0x20000d78
    e1bc:	20000ec0 	.word	0x20000ec0
    e1c0:	20000e84 	.word	0x20000e84

0000e1c4 <ll_rx_dequeue>:
{
    e1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    e1c6:	4d35      	ldr	r5, [pc, #212]	; (e29c <ll_rx_dequeue+0xd8>)
	struct radio_pdu_node_rx *node_rx = NULL;
    e1c8:	aa02      	add	r2, sp, #8
    e1ca:	2300      	movs	r3, #0
    e1cc:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    e1d0:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
    e1d4:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
    e1d8:	f007 faf2 	bl	157c0 <memq_dequeue>
    e1dc:	462c      	mov	r4, r5
	LL_ASSERT(link);
    e1de:	b928      	cbnz	r0, e1ec <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    e1e0:	4040      	eors	r0, r0
    e1e2:	f380 8811 	msr	BASEPRI, r0
    e1e6:	f04f 0003 	mov.w	r0, #3
    e1ea:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    e1ec:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    e1f0:	f007 fa97 	bl	15722 <mem_release>
	switch (node_rx->hdr.type) {
    e1f4:	9901      	ldr	r1, [sp, #4]
    e1f6:	7908      	ldrb	r0, [r1, #4]
    e1f8:	1e83      	subs	r3, r0, #2
    e1fa:	b2da      	uxtb	r2, r3
    e1fc:	2a0c      	cmp	r2, #12
    e1fe:	d8ef      	bhi.n	e1e0 <ll_rx_dequeue+0x1c>
    e200:	2301      	movs	r3, #1
    e202:	4093      	lsls	r3, r2
    e204:	f641 7279 	movw	r2, #8057	; 0x1f79
    e208:	4213      	tst	r3, r2
    e20a:	d111      	bne.n	e230 <ll_rx_dequeue+0x6c>
    e20c:	061d      	lsls	r5, r3, #24
    e20e:	d5e7      	bpl.n	e1e0 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    e210:	2808      	cmp	r0, #8
    e212:	d135      	bne.n	e280 <ll_rx_dequeue+0xbc>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
    e214:	7a0b      	ldrb	r3, [r1, #8]
    e216:	2b3c      	cmp	r3, #60	; 0x3c
    e218:	d015      	beq.n	e246 <ll_rx_dequeue+0x82>
    e21a:	7a4a      	ldrb	r2, [r1, #9]
    e21c:	bb92      	cbnz	r2, e284 <ll_rx_dequeue+0xc0>
			LL_ASSERT(_radio.scanner.is_enabled);
    e21e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    e222:	07d9      	lsls	r1, r3, #31
    e224:	d5dc      	bpl.n	e1e0 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0U;
    e226:	f362 0300 	bfi	r3, r2, #0, #1
    e22a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    e22e:	e01a      	b.n	e266 <ll_rx_dequeue+0xa2>
		LL_ASSERT(_radio.link_rx_data_quota <
    e230:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    e234:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    e238:	3a01      	subs	r2, #1
    e23a:	4293      	cmp	r3, r2
    e23c:	dad0      	bge.n	e1e0 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    e23e:	3301      	adds	r3, #1
    e240:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		break;
    e244:	e7e4      	b.n	e210 <ll_rx_dequeue+0x4c>
				_radio.advertiser.conn = NULL;
    e246:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    e248:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    e24c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    e250:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    e254:	2b00      	cmp	r3, #0
    e256:	dac3      	bge.n	e1e0 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0U;
    e258:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e25c:	f36f 13c7 	bfc	r3, #7, #1
    e260:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    e264:	b985      	cbnz	r5, e288 <ll_rx_dequeue+0xc4>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    e266:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    e26a:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
    e26e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    e272:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
    e276:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
    e27a:	d101      	bne.n	e280 <ll_rx_dequeue+0xbc>
			ll_adv_scan_state_cb(0);
    e27c:	f000 fe9c 	bl	efb8 <ll_adv_scan_state_cb>
}
    e280:	b003      	add	sp, #12
    e282:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    e284:	2500      	movs	r5, #0
    e286:	e7e3      	b.n	e250 <ll_rx_dequeue+0x8c>
			mem_release(node_rx->hdr.link,
    e288:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e28c:	4904      	ldr	r1, [pc, #16]	; (e2a0 <ll_rx_dequeue+0xdc>)
    e28e:	f007 fa48 	bl	15722 <mem_release>
			mem_release(conn, &_radio.conn_free);
    e292:	4904      	ldr	r1, [pc, #16]	; (e2a4 <ll_rx_dequeue+0xe0>)
    e294:	4628      	mov	r0, r5
    e296:	f007 fa44 	bl	15722 <mem_release>
    e29a:	e7e4      	b.n	e266 <ll_rx_dequeue+0xa2>
    e29c:	20000d78 	.word	0x20000d78
    e2a0:	20000ec0 	.word	0x20000ec0
    e2a4:	20000e84 	.word	0x20000e84

0000e2a8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    e2a8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    e2aa:	4b07      	ldr	r3, [pc, #28]	; (e2c8 <rtc0_nrf5_isr+0x20>)
    e2ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    e2b0:	b122      	cbz	r2, e2bc <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    e2b2:	2000      	movs	r0, #0
    e2b4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    e2b8:	f7fb febe 	bl	a038 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    e2bc:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
    e2be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    e2c2:	f7fb ba17 	b.w	96f4 <mayfly_run>
    e2c6:	bf00      	nop
    e2c8:	4000b000 	.word	0x4000b000

0000e2cc <radio_event_callback>:
	k_sem_give(sem_recv);
    e2cc:	4b01      	ldr	r3, [pc, #4]	; (e2d4 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    e2ce:	6818      	ldr	r0, [r3, #0]
    e2d0:	f003 b80a 	b.w	112e8 <z_impl_k_sem_give>
    e2d4:	20001888 	.word	0x20001888

0000e2d8 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
    e2d8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    e2da:	4b38      	ldr	r3, [pc, #224]	; (e3bc <ll_init+0xe4>)
{
    e2dc:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    e2de:	6018      	str	r0, [r3, #0]
    e2e0:	4837      	ldr	r0, [pc, #220]	; (e3c0 <ll_init+0xe8>)
    e2e2:	f002 fb57 	bl	10994 <z_impl_device_get_binding>

	clk_k32 = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clk_k32) {
    e2e6:	b918      	cbnz	r0, e2f0 <ll_init+0x18>
		return -ENODEV;
    e2e8:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
    e2ec:	b006      	add	sp, #24
    e2ee:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    e2f0:	6843      	ldr	r3, [r0, #4]
    e2f2:	2101      	movs	r1, #1
    e2f4:	681b      	ldr	r3, [r3, #0]
    e2f6:	4798      	blx	r3
    e2f8:	4832      	ldr	r0, [pc, #200]	; (e3c4 <ll_init+0xec>)
    e2fa:	f002 fb4b 	bl	10994 <z_impl_device_get_binding>
	if (!entropy) {
    e2fe:	4604      	mov	r4, r0
    e300:	2800      	cmp	r0, #0
    e302:	d0f1      	beq.n	e2e8 <ll_init+0x10>
	cntr_init();
    e304:	f001 f8da 	bl	f4bc <cntr_init>
	mayfly_init();
    e308:	f7fb f952 	bl	95b0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    e30c:	4b2e      	ldr	r3, [pc, #184]	; (e3c8 <ll_init+0xf0>)
    e30e:	2208      	movs	r2, #8
    e310:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    e312:	2503      	movs	r5, #3
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    e314:	4a2d      	ldr	r2, [pc, #180]	; (e3cc <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    e316:	721d      	strb	r5, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    e318:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    e31a:	2602      	movs	r6, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    e31c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    e31e:	761e      	strb	r6, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    e320:	9205      	str	r2, [sp, #20]
    e322:	4a2b      	ldr	r2, [pc, #172]	; (e3d0 <ll_init+0xf8>)
    e324:	9204      	str	r2, [sp, #16]
    e326:	4a2b      	ldr	r2, [pc, #172]	; (e3d4 <ll_init+0xfc>)
    e328:	9203      	str	r2, [sp, #12]
    e32a:	4a2b      	ldr	r2, [pc, #172]	; (e3d8 <ll_init+0x100>)
    e32c:	9202      	str	r2, [sp, #8]
    e32e:	220d      	movs	r2, #13
    e330:	e9cd 3200 	strd	r3, r2, [sp]
    e334:	2109      	movs	r1, #9
    e336:	2304      	movs	r3, #4
    e338:	4a28      	ldr	r2, [pc, #160]	; (e3dc <ll_init+0x104>)
    e33a:	f7fb fe4b 	bl	9fd4 <ticker_init>
	LL_ASSERT(!err);
    e33e:	b128      	cbz	r0, e34c <ll_init+0x74>
    e340:	4040      	eors	r0, r0
    e342:	f380 8811 	msr	BASEPRI, r0
    e346:	f04f 0003 	mov.w	r0, #3
    e34a:	df02      	svc	2
    e34c:	4824      	ldr	r0, [pc, #144]	; (e3e0 <ll_init+0x108>)
    e34e:	f002 fb21 	bl	10994 <z_impl_device_get_binding>
	if (!clk_m16) {
    e352:	2800      	cmp	r0, #0
    e354:	d0c8      	beq.n	e2e8 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF_K32SRC_ACCURACY, entropy,
    e356:	f240 5304 	movw	r3, #1284	; 0x504
    e35a:	9305      	str	r3, [sp, #20]
    e35c:	4b21      	ldr	r3, [pc, #132]	; (e3e4 <ll_init+0x10c>)
    e35e:	9304      	str	r3, [sp, #16]
    e360:	9501      	str	r5, [sp, #4]
    e362:	231b      	movs	r3, #27
    e364:	2501      	movs	r5, #1
    e366:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e36a:	4622      	mov	r2, r4
    e36c:	9500      	str	r5, [sp, #0]
    e36e:	4633      	mov	r3, r6
    e370:	2107      	movs	r1, #7
    e372:	f7ff fca1 	bl	dcb8 <radio_init>
	if (err) {
    e376:	4604      	mov	r4, r0
    e378:	b9e0      	cbnz	r0, e3b4 <ll_init+0xdc>
		ll_filter_reset(true);
    e37a:	4628      	mov	r0, r5
    e37c:	f001 f816 	bl	f3ac <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    e380:	4622      	mov	r2, r4
    e382:	4621      	mov	r1, r4
    e384:	4628      	mov	r0, r5
    e386:	f7f6 ff47 	bl	5218 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    e38a:	4622      	mov	r2, r4
    e38c:	4621      	mov	r1, r4
    e38e:	200b      	movs	r0, #11
    e390:	f7f6 ff42 	bl	5218 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
    e394:	4622      	mov	r2, r4
    e396:	4621      	mov	r1, r4
    e398:	2019      	movs	r0, #25
    e39a:	f7f6 ff3d 	bl	5218 <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    e39e:	4628      	mov	r0, r5
    e3a0:	f7f6 ff08 	bl	51b4 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    e3a4:	200b      	movs	r0, #11
    e3a6:	f7f6 ff05 	bl	51b4 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
    e3aa:	2019      	movs	r0, #25
    e3ac:	f7f6 ff02 	bl	51b4 <z_arch_irq_enable>
	return 0;
    e3b0:	4620      	mov	r0, r4
    e3b2:	e79b      	b.n	e2ec <ll_init+0x14>
		return -ENOMEM;
    e3b4:	f06f 000b 	mvn.w	r0, #11
    e3b8:	e798      	b.n	e2ec <ll_init+0x14>
    e3ba:	bf00      	nop
    e3bc:	20001888 	.word	0x20001888
    e3c0:	00017f2d 	.word	0x00017f2d
    e3c4:	00017f23 	.word	0x00017f23
    e3c8:	20001868 	.word	0x20001868
    e3cc:	00016303 	.word	0x00016303
    e3d0:	0000fdb9 	.word	0x0000fdb9
    e3d4:	0000fd99 	.word	0x0000fd99
    e3d8:	200015f8 	.word	0x200015f8
    e3dc:	20001490 	.word	0x20001490
    e3e0:	00017f37 	.word	0x00017f37
    e3e4:	20000f8c 	.word	0x20000f8c

0000e3e8 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
    e3e8:	4800      	ldr	r0, [pc, #0]	; (e3ec <ll_adv_set_get+0x4>)
    e3ea:	4770      	bx	lr
    e3ec:	2000188c 	.word	0x2000188c

0000e3f0 <ll_adv_params_set>:
u8_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
		       u8_t adv_type, u8_t own_addr_type,
		       u8_t direct_addr_type, u8_t const *const direct_addr,
		       u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
		       u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f4:	b087      	sub	sp, #28
    e3f6:	461f      	mov	r7, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e3f8:	4b9b      	ldr	r3, [pc, #620]	; (e668 <ll_adv_params_set+0x278>)
    e3fa:	9304      	str	r3, [sp, #16]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
    e3fc:	2000      	movs	r0, #0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e3fe:	f240 7301 	movw	r3, #1793	; 0x701
{
    e402:	460e      	mov	r6, r1
    e404:	4614      	mov	r4, r2
    e406:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    e40a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    e40e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    e412:	f89d 9060 	ldrb.w	r9, [sp, #96]	; 0x60
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e416:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (ll_adv_is_enabled(0)) {
    e41a:	f7ff fd25 	bl	de68 <ll_adv_is_enabled>
    e41e:	2800      	cmp	r0, #0
    e420:	f040 811c 	bne.w	e65c <ll_adv_params_set+0x26c>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    e424:	4991      	ldr	r1, [pc, #580]	; (e66c <ll_adv_params_set+0x27c>)
    e426:	7a0b      	ldrb	r3, [r1, #8]
    e428:	2001      	movs	r0, #1
    e42a:	f360 0302 	bfi	r3, r0, #0, #3

	/* extended */
	if (adv_type > 0x04) {
    e42e:	2f04      	cmp	r7, #4
	ll_adv.phy_p = BIT(0);
    e430:	720b      	strb	r3, [r1, #8]
	if (adv_type > 0x04) {
    e432:	d90b      	bls.n	e44c <ll_adv_params_set+0x5c>
		/* legacy */
		if (evt_prop & BIT(4)) {
    e434:	06f7      	lsls	r7, r6, #27
    e436:	f006 0303 	and.w	r3, r6, #3
    e43a:	d50d      	bpl.n	e458 <ll_adv_params_set+0x68>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    e43c:	4a8c      	ldr	r2, [pc, #560]	; (e670 <ll_adv_params_set+0x280>)
    e43e:	9203      	str	r2, [sp, #12]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    e440:	0735      	lsls	r5, r6, #28
    e442:	d405      	bmi.n	e450 <ll_adv_params_set+0x60>
			adv_type = leg_adv_type[evt_prop & 0x03];
    e444:	aa06      	add	r2, sp, #24
    e446:	4413      	add	r3, r2
    e448:	f813 7c0c 	ldrb.w	r7, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    e44c:	2f01      	cmp	r7, #1
    e44e:	d110      	bne.n	e472 <ll_adv_params_set+0x82>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    e450:	2300      	movs	r3, #0
    e452:	60cb      	str	r3, [r1, #12]
    e454:	2701      	movs	r7, #1
    e456:	e00d      	b.n	e474 <ll_adv_params_set+0x84>
			if (((evt_prop & 0x03) == 0x03) ||
    e458:	2b03      	cmp	r3, #3
    e45a:	f000 8101 	beq.w	e660 <ll_adv_params_set+0x270>
    e45e:	f006 030c 	and.w	r3, r6, #12
    e462:	2b0c      	cmp	r3, #12
    e464:	f000 80fc 	beq.w	e660 <ll_adv_params_set+0x270>
			ll_adv.phy_p = phy_p;
    e468:	7a0b      	ldrb	r3, [r1, #8]
    e46a:	f368 0302 	bfi	r3, r8, #0, #3
    e46e:	720b      	strb	r3, [r1, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    e470:	2705      	movs	r7, #5
		ll_adv.interval = interval;
    e472:	60cc      	str	r4, [r1, #12]
	}
	ll_adv.chan_map = chan_map;
    e474:	780b      	ldrb	r3, [r1, #0]
    e476:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
	ll_adv.filter_policy = filter_policy;
    e47a:	9101      	str	r1, [sp, #4]
	ll_adv.chan_map = chan_map;
    e47c:	f360 0302 	bfi	r3, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
    e480:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    e484:	f360 03c4 	bfi	r3, r0, #3, #2
    e488:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    e48a:	f7ff fce5 	bl	de58 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e48e:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	pdu->type = pdu_adv_type[adv_type];
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    e492:	9901      	ldr	r1, [sp, #4]
	radio_adv_data = radio_adv_data_get();
    e494:	4603      	mov	r3, r0
	pdu->type = pdu_adv_type[adv_type];
    e496:	aa06      	add	r2, sp, #24
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e498:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    e49c:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    e4a0:	19d0      	adds	r0, r2, r7
    e4a2:	5d5a      	ldrb	r2, [r3, r5]
    e4a4:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    e4a8:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
    e4ac:	f36f 1204 	bfc	r2, #4, #1
    e4b0:	555a      	strb	r2, [r3, r5]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    e4b2:	b2d2      	uxtb	r2, r2
    e4b4:	f002 000f 	and.w	r0, r2, #15
    e4b8:	2801      	cmp	r0, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    e4ba:	bf94      	ite	ls
    e4bc:	f042 0220 	orrls.w	r2, r2, #32
	} else {
		pdu->chan_sel = 0;
    e4c0:	f36f 1245 	bfchi	r2, #5, #1
    e4c4:	555a      	strb	r2, [r3, r5]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
    e4c6:	780a      	ldrb	r2, [r1, #0]
    e4c8:	f36b 1246 	bfi	r2, fp, #5, #2
    e4cc:	700a      	strb	r2, [r1, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e4ce:	b2d2      	uxtb	r2, r2
    e4d0:	0650      	lsls	r0, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e4d2:	eb03 0405 	add.w	r4, r3, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e4d6:	d509      	bpl.n	e4ec <ll_adv_params_set+0xfc>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
    e4d8:	f36a 12c7 	bfi	r2, sl, #7, #1
    e4dc:	700a      	strb	r2, [r1, #0]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    e4de:	4865      	ldr	r0, [pc, #404]	; (e674 <ll_adv_params_set+0x284>)
    e4e0:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4e2:	9301      	str	r3, [sp, #4]
    e4e4:	2206      	movs	r2, #6
    e4e6:	f004 ffbd 	bl	13464 <memcpy>
    e4ea:	9b01      	ldr	r3, [sp, #4]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    e4ec:	5d5a      	ldrb	r2, [r3, r5]
    e4ee:	f00b 0b01 	and.w	fp, fp, #1
    e4f2:	f36b 1286 	bfi	r2, fp, #6, #1
	pdu->rx_addr = 0;
    e4f6:	f36f 12c7 	bfc	r2, #7, #1
    e4fa:	555a      	strb	r2, [r3, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e4fc:	b2d2      	uxtb	r2, r2
    e4fe:	f002 010f 	and.w	r1, r2, #15
    e502:	2901      	cmp	r1, #1
    e504:	d10b      	bne.n	e51e <ll_adv_params_set+0x12e>
		pdu->rx_addr = direct_addr_type;
    e506:	f36a 12c7 	bfi	r2, sl, #7, #1
    e50a:	555a      	strb	r2, [r3, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    e50c:	9912      	ldr	r1, [sp, #72]	; 0x48
    e50e:	2206      	movs	r2, #6
    e510:	f104 0008 	add.w	r0, r4, #8
    e514:	f004 ffa6 	bl	13464 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    e518:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    e51a:	7063      	strb	r3, [r4, #1]
    e51c:	e07c      	b.n	e618 <ll_adv_params_set+0x228>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    e51e:	2907      	cmp	r1, #7
    e520:	f040 8097 	bne.w	e652 <ll_adv_params_set+0x262>
		p->ext_hdr_len = 0;
    e524:	78a2      	ldrb	r2, [r4, #2]
		*(u8_t *)&_h = *(u8_t *)h;
    e526:	78e0      	ldrb	r0, [r4, #3]
		p->adv_mode = evt_prop & 0x03;
    e528:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    e52c:	f366 1287 	bfi	r2, r6, #6, #2
    e530:	70a2      	strb	r2, [r4, #2]
		if (!p->adv_mode &&
    e532:	f894 c002 	ldrb.w	ip, [r4, #2]
		*(u8_t *)h = 0;
    e536:	2200      	movs	r2, #0
    e538:	70e2      	strb	r2, [r4, #3]
		ptr = (u8_t *)h + sizeof(*h);
    e53a:	1d25      	adds	r5, r4, #4
		if (_h.adv_addr) {
    e53c:	07c2      	lsls	r2, r0, #31
			_ptr += BDADDR_SIZE;
    e53e:	bf4c      	ite	mi
    e540:	f104 010a 	addmi.w	r1, r4, #10
		_ptr = ptr;
    e544:	4629      	movpl	r1, r5
		if (!p->adv_mode &&
    e546:	f01c 0fc0 	tst.w	ip, #192	; 0xc0
		p = (void *)&pdu->adv_ext_ind;
    e54a:	f104 0302 	add.w	r3, r4, #2
    e54e:	f000 0210 	and.w	r2, r0, #16
		if (!p->adv_mode &&
    e552:	d10b      	bne.n	e56c <ll_adv_params_set+0x17c>
    e554:	b122      	cbz	r2, e560 <ll_adv_params_set+0x170>
		    (!_h.aux_ptr ||
    e556:	06b7      	lsls	r7, r6, #26
    e558:	d408      	bmi.n	e56c <ll_adv_params_set+0x17c>
		     (!(evt_prop & BIT(5)) && (phy_p != BIT(2))))) {
    e55a:	f1b8 0f04 	cmp.w	r8, #4
    e55e:	d005      	beq.n	e56c <ll_adv_params_set+0x17c>
			h->adv_addr = 1;
    e560:	78e5      	ldrb	r5, [r4, #3]
    e562:	f045 0501 	orr.w	r5, r5, #1
    e566:	70e5      	strb	r5, [r4, #3]
			ptr += BDADDR_SIZE;
    e568:	f104 050a 	add.w	r5, r4, #10
		if (_h.adi) {
    e56c:	0700      	lsls	r0, r0, #28
			h->adi = 1;
    e56e:	bf41      	itttt	mi
    e570:	78e0      	ldrbmi	r0, [r4, #3]
    e572:	f040 0008 	orrmi.w	r0, r0, #8
    e576:	70e0      	strbmi	r0, [r4, #3]
			ptr += sizeof(struct ext_adv_adi);
    e578:	3502      	addmi	r5, #2
		if (_h.aux_ptr) {
    e57a:	b122      	cbz	r2, e586 <ll_adv_params_set+0x196>
			h->aux_ptr = 1;
    e57c:	78e0      	ldrb	r0, [r4, #3]
    e57e:	f040 0010 	orr.w	r0, r0, #16
    e582:	70e0      	strb	r0, [r4, #3]
			ptr += sizeof(struct ext_adv_aux_ptr);
    e584:	3503      	adds	r5, #3
		if (evt_prop & BIT(6) &&
    e586:	0677      	lsls	r7, r6, #25
    e588:	d508      	bpl.n	e59c <ll_adv_params_set+0x1ac>
    e58a:	b112      	cbz	r2, e592 <ll_adv_params_set+0x1a2>
		    (!_h.aux_ptr || (phy_p != BIT(2)))) {
    e58c:	f1b8 0f04 	cmp.w	r8, #4
    e590:	d004      	beq.n	e59c <ll_adv_params_set+0x1ac>
			h->tx_pwr = 1;
    e592:	78e2      	ldrb	r2, [r4, #3]
    e594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e598:	70e2      	strb	r2, [r4, #3]
			ptr++;
    e59a:	3501      	adds	r5, #1
		len = ptr - (u8_t *)p;
    e59c:	1aeb      	subs	r3, r5, r3
    e59e:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    e5a0:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    e5a2:	bf8a      	itet	hi
    e5a4:	78a2      	ldrbhi	r2, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    e5a6:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    e5a8:	f103 30ff 	addhi.w	r0, r3, #4294967295
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    e5ac:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    e5ae:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    e5b0:	bf84      	itt	hi
    e5b2:	f360 0205 	bfihi	r2, r0, #0, #6
    e5b6:	70a2      	strbhi	r2, [r4, #2]
		if (h->tx_pwr) {
    e5b8:	065e      	lsls	r6, r3, #25
    e5ba:	d50b      	bpl.n	e5d4 <ll_adv_params_set+0x1e4>
			if (tx_pwr) {
    e5bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e5be:	2b00      	cmp	r3, #0
    e5c0:	d045      	beq.n	e64e <ll_adv_params_set+0x25e>
				if (*tx_pwr != 0x7F) {
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	2b7f      	cmp	r3, #127	; 0x7f
    e5c6:	d102      	bne.n	e5ce <ll_adv_params_set+0x1de>
					*tx_pwr = _tx_pwr;
    e5c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e5ca:	2300      	movs	r3, #0
    e5cc:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
    e5ce:	f805 3c01 	strb.w	r3, [r5, #-1]
			ptr--;
    e5d2:	3d01      	subs	r5, #1
		if (h->aux_ptr) {
    e5d4:	78e2      	ldrb	r2, [r4, #3]
    e5d6:	06d0      	lsls	r0, r2, #27
    e5d8:	d510      	bpl.n	e5fc <ll_adv_params_set+0x20c>
    e5da:	fa99 f3a9 	rbit	r3, r9
    e5de:	f1b9 0f00 	cmp.w	r9, #0
			aux->phy = find_lsb_set(phy_s);
    e5e2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    e5e6:	fab3 f383 	clz	r3, r3
    e5ea:	bf08      	it	eq
    e5ec:	f04f 33ff 	moveq.w	r3, #4294967295
    e5f0:	3301      	adds	r3, #1
    e5f2:	f363 1047 	bfi	r0, r3, #5, #3
    e5f6:	f805 0c01 	strb.w	r0, [r5, #-1]
			ptr -= sizeof(struct ext_adv_aux_ptr);
    e5fa:	3d03      	subs	r5, #3
		if (h->adi) {
    e5fc:	0713      	lsls	r3, r2, #28
    e5fe:	d50b      	bpl.n	e618 <ll_adv_params_set+0x228>
			memcpy(ptr, _ptr, sizeof(struct ext_adv_adi));
    e600:	2202      	movs	r2, #2
    e602:	1ea8      	subs	r0, r5, #2
    e604:	f004 ff2e 	bl	13464 <memcpy>
			adi->sid = sid;
    e608:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    e60c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    e610:	f362 1307 	bfi	r3, r2, #4, #4
    e614:	f805 3c01 	strb.w	r3, [r5, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    e618:	f7ff fc22 	bl	de60 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e61c:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    e620:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    e624:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e628:	2404      	movs	r4, #4
    e62a:	5c83      	ldrb	r3, [r0, r2]
    e62c:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    e630:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    e634:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
    e638:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e63c:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    e63e:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    e640:	7848      	ldrb	r0, [r1, #1]
    e642:	b978      	cbnz	r0, e664 <ll_adv_params_set+0x274>
		pdu->len = BDADDR_SIZE;
    e644:	2306      	movs	r3, #6
    e646:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    e648:	b007      	add	sp, #28
    e64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
    e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e650:	e7bd      	b.n	e5ce <ll_adv_params_set+0x1de>
	} else if (pdu->len == 0) {
    e652:	7863      	ldrb	r3, [r4, #1]
    e654:	2b00      	cmp	r3, #0
    e656:	d1df      	bne.n	e618 <ll_adv_params_set+0x228>
		pdu->len = BDADDR_SIZE;
    e658:	2306      	movs	r3, #6
    e65a:	e75e      	b.n	e51a <ll_adv_params_set+0x12a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e65c:	200c      	movs	r0, #12
    e65e:	e7f3      	b.n	e648 <ll_adv_params_set+0x258>
				return 0x12; /* invalid HCI cmd param */
    e660:	2012      	movs	r0, #18
    e662:	e7f1      	b.n	e648 <ll_adv_params_set+0x258>
	return 0;
    e664:	2000      	movs	r0, #0
    e666:	e7ef      	b.n	e648 <ll_adv_params_set+0x258>
    e668:	02060100 	.word	0x02060100
    e66c:	2000188c 	.word	0x2000188c
    e670:	00020403 	.word	0x00020403
    e674:	2000188e 	.word	0x2000188e

0000e678 <ll_adv_enable>:
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
{
    e678:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    e67c:	b921      	cbnz	r1, e688 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
#endif /* !CONFIG_BT_HCI_MESH_EXT */
	return status;
}
    e67e:	b002      	add	sp, #8
    e680:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
    e684:	f7ff bd72 	b.w	e16c <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
    e688:	2000      	movs	r0, #0
    e68a:	f7ff fbed 	bl	de68 <ll_adv_is_enabled>
    e68e:	4681      	mov	r9, r0
    e690:	2800      	cmp	r0, #0
    e692:	d16c      	bne.n	e76e <ll_adv_enable+0xf6>
	radio_adv_data = radio_adv_data_get();
    e694:	f7ff fbe0 	bl	de58 <radio_adv_data_get>
    e698:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
    e69a:	f7ff fbe1 	bl	de60 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    e69e:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
    e6a2:	4d34      	ldr	r5, [pc, #208]	; (e774 <ll_adv_enable+0xfc>)
    e6a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e6a8:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
    e6ac:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    e6b0:	5d3b      	ldrb	r3, [r7, r4]
    e6b2:	f003 020f 	and.w	r2, r3, #15
    e6b6:	2a07      	cmp	r2, #7
    e6b8:	d110      	bne.n	e6dc <ll_adv_enable+0x64>
		if (h->adv_addr) {
    e6ba:	f898 2003 	ldrb.w	r2, [r8, #3]
    e6be:	07d2      	lsls	r2, r2, #31
    e6c0:	d50a      	bpl.n	e6d8 <ll_adv_enable+0x60>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    e6c2:	4649      	mov	r1, r9
    e6c4:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e6c8:	f7fb fe20 	bl	a30c <ll_addr_get>
    e6cc:	2206      	movs	r2, #6
    e6ce:	4601      	mov	r1, r0
    e6d0:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    e6d4:	f004 fec6 	bl	13464 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
    e6d8:	24ff      	movs	r4, #255	; 0xff
    e6da:	e038      	b.n	e74e <ll_adv_enable+0xd6>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    e6dc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    e6e0:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    e6e4:	ebc3 03c6 	rsb	r3, r3, r6, lsl #3
    e6e8:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
    e6ea:	7828      	ldrb	r0, [r5, #0]
    e6ec:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    e6f0:	f000 f9cc 	bl	ea8c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e6f4:	7828      	ldrb	r0, [r5, #0]
    e6f6:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
    e6fa:	d115      	bne.n	e728 <ll_adv_enable+0xb0>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    e6fc:	5d38      	ldrb	r0, [r7, r4]
    e6fe:	4651      	mov	r1, sl
    e700:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e704:	f7fb fe02 	bl	a30c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    e708:	2206      	movs	r2, #6
    e70a:	4601      	mov	r1, r0
    e70c:	f108 0002 	add.w	r0, r8, #2
    e710:	f004 fea8 	bl	13464 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    e714:	5d38      	ldrb	r0, [r7, r4]
    e716:	4651      	mov	r1, sl
    e718:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e71c:	f7fb fdf6 	bl	a30c <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
    e720:	2206      	movs	r2, #6
    e722:	4601      	mov	r1, r0
    e724:	1cb0      	adds	r0, r6, #2
    e726:	e7d5      	b.n	e6d4 <ll_adv_enable+0x5c>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
    e728:	464a      	mov	r2, r9
    e72a:	1ca9      	adds	r1, r5, #2
    e72c:	09c0      	lsrs	r0, r0, #7
    e72e:	f000 f9cf 	bl	ead0 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
    e732:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
    e734:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
    e736:	d002      	beq.n	e73e <ll_adv_enable+0xc6>
				ll_rl_rpa_update(false);
    e738:	4648      	mov	r0, r9
    e73a:	f000 fb51 	bl	ede0 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
    e73e:	4641      	mov	r1, r8
    e740:	4620      	mov	r0, r4
    e742:	f000 faf7 	bl	ed34 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
    e746:	4631      	mov	r1, r6
    e748:	4620      	mov	r0, r4
    e74a:	f000 faf3 	bl	ed34 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
    e74e:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    e750:	7a28      	ldrb	r0, [r5, #8]
    e752:	89a9      	ldrh	r1, [r5, #12]
    e754:	9400      	str	r4, [sp, #0]
    e756:	f3c2 03c1 	ubfx	r3, r2, #3, #2
    e75a:	f000 0007 	and.w	r0, r0, #7
    e75e:	f002 0207 	and.w	r2, r2, #7
    e762:	f7f4 fee1 	bl	3528 <radio_adv_enable>
	return status;
    e766:	b2c0      	uxtb	r0, r0
}
    e768:	b002      	add	sp, #8
    e76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
    e76e:	2000      	movs	r0, #0
    e770:	e7fa      	b.n	e768 <ll_adv_enable+0xf0>
    e772:	bf00      	nop
    e774:	2000188c 	.word	0x2000188c

0000e778 <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    e778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e77c:	4688      	mov	r8, r1
	int i;

	if (free) {
    e77e:	4615      	mov	r5, r2
    e780:	b10a      	cbz	r2, e786 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    e782:	23ff      	movs	r3, #255	; 0xff
    e784:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    e786:	4f14      	ldr	r7, [pc, #80]	; (e7d8 <wl_find+0x60>)
{
    e788:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    e78a:	f000 0601 	and.w	r6, r0, #1
    e78e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
    e792:	07da      	lsls	r2, r3, #31
    e794:	d51c      	bpl.n	e7d0 <wl_find+0x58>
    e796:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e79a:	42b3      	cmp	r3, r6
    e79c:	d113      	bne.n	e7c6 <wl_find+0x4e>
    e79e:	480f      	ldr	r0, [pc, #60]	; (e7dc <wl_find+0x64>)
    e7a0:	2206      	movs	r2, #6
    e7a2:	4641      	mov	r1, r8
    e7a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    e7a8:	f004 fe4c 	bl	13444 <memcmp>
    e7ac:	b910      	cbnz	r0, e7b4 <wl_find+0x3c>
			return i;
    e7ae:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
    e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    e7b4:	b13d      	cbz	r5, e7c6 <wl_find+0x4e>
    e7b6:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
    e7ba:	07db      	lsls	r3, r3, #31
    e7bc:	d403      	bmi.n	e7c6 <wl_find+0x4e>
    e7be:	782b      	ldrb	r3, [r5, #0]
    e7c0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    e7c2:	bf08      	it	eq
    e7c4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    e7c6:	3401      	adds	r4, #1
    e7c8:	2c08      	cmp	r4, #8
    e7ca:	d1e0      	bne.n	e78e <wl_find+0x16>
	return FILTER_IDX_NONE;
    e7cc:	20ff      	movs	r0, #255	; 0xff
    e7ce:	e7ef      	b.n	e7b0 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    e7d0:	2d00      	cmp	r5, #0
    e7d2:	d1f4      	bne.n	e7be <wl_find+0x46>
    e7d4:	e7f7      	b.n	e7c6 <wl_find+0x4e>
    e7d6:	bf00      	nop
    e7d8:	20002248 	.word	0x20002248
    e7dc:	2000224a 	.word	0x2000224a

0000e7e0 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
    e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	filter->enable_bitmask |= BIT(index);
    e7e2:	4d10      	ldr	r5, [pc, #64]	; (e824 <filter_rl_update+0x44>)
	u8_t i;

	/* Populate filter from rl peers */
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
    e7e4:	4e10      	ldr	r6, [pc, #64]	; (e828 <filter_rl_update+0x48>)
{
    e7e6:	2400      	movs	r4, #0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    e7e8:	1caf      	adds	r7, r5, #2
		if (rl[i].taken) {
    e7ea:	2128      	movs	r1, #40	; 0x28
    e7ec:	4361      	muls	r1, r4
    e7ee:	5c73      	ldrb	r3, [r6, r1]
    e7f0:	07da      	lsls	r2, r3, #31
    e7f2:	d512      	bpl.n	e81a <filter_rl_update+0x3a>
	filter->enable_bitmask |= BIT(index);
    e7f4:	2201      	movs	r2, #1
    e7f6:	fa02 f004 	lsl.w	r0, r2, r4
    e7fa:	782a      	ldrb	r2, [r5, #0]
    e7fc:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    e7fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    e802:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    e804:	786a      	ldrb	r2, [r5, #1]
    e806:	40a3      	lsls	r3, r4
    e808:	4313      	orrs	r3, r2
    e80a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    e80c:	4b07      	ldr	r3, [pc, #28]	; (e82c <filter_rl_update+0x4c>)
    e80e:	2206      	movs	r2, #6
    e810:	4419      	add	r1, r3
    e812:	fb02 7004 	mla	r0, r2, r4, r7
    e816:	f004 fe25 	bl	13464 <memcpy>
    e81a:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e81c:	2c08      	cmp	r4, #8
    e81e:	d1e4      	bne.n	e7ea <filter_rl_update+0xa>
				      rl[i].id_addr.val);
		}
	}
}
    e820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e822:	bf00      	nop
    e824:	20002216 	.word	0x20002216
    e828:	2000189c 	.word	0x2000189c
    e82c:	2000189d 	.word	0x2000189d

0000e830 <filter_wl_update>:
{
    e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!wl[i].taken) {
    e832:	4d19      	ldr	r5, [pc, #100]	; (e898 <filter_wl_update+0x68>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    e834:	4f19      	ldr	r7, [pc, #100]	; (e89c <filter_wl_update+0x6c>)
{
    e836:	2400      	movs	r4, #0
    e838:	462e      	mov	r6, r5
		if (!wl[i].taken) {
    e83a:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
    e83e:	07d9      	lsls	r1, r3, #31
    e840:	d526      	bpl.n	e890 <filter_wl_update+0x60>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    e842:	783b      	ldrb	r3, [r7, #0]
    e844:	00e1      	lsls	r1, r4, #3
    e846:	b15b      	cbz	r3, e860 <filter_wl_update+0x30>
		j = wl[i].rl_idx;
    e848:	186b      	adds	r3, r5, r1
    e84a:	785a      	ldrb	r2, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    e84c:	2a07      	cmp	r2, #7
    e84e:	d807      	bhi.n	e860 <filter_wl_update+0x30>
    e850:	2328      	movs	r3, #40	; 0x28
    e852:	4353      	muls	r3, r2
    e854:	4a12      	ldr	r2, [pc, #72]	; (e8a0 <filter_wl_update+0x70>)
    e856:	5cd3      	ldrb	r3, [r2, r3]
    e858:	075a      	lsls	r2, r3, #29
    e85a:	d501      	bpl.n	e860 <filter_wl_update+0x30>
    e85c:	06db      	lsls	r3, r3, #27
    e85e:	d517      	bpl.n	e890 <filter_wl_update+0x60>
	filter->enable_bitmask |= BIT(index);
    e860:	4810      	ldr	r0, [pc, #64]	; (e8a4 <filter_wl_update+0x74>)
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    e862:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    e866:	2201      	movs	r2, #1
    e868:	fa02 fc04 	lsl.w	ip, r2, r4
    e86c:	7802      	ldrb	r2, [r0, #0]
    e86e:	ea42 020c 	orr.w	r2, r2, ip
    e872:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    e874:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    e878:	7842      	ldrb	r2, [r0, #1]
    e87a:	40a3      	lsls	r3, r4
    e87c:	4313      	orrs	r3, r2
    e87e:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    e880:	4b09      	ldr	r3, [pc, #36]	; (e8a8 <filter_wl_update+0x78>)
    e882:	3002      	adds	r0, #2
    e884:	2206      	movs	r2, #6
    e886:	4419      	add	r1, r3
    e888:	fb02 0004 	mla	r0, r2, r4, r0
    e88c:	f004 fdea 	bl	13464 <memcpy>
    e890:	3401      	adds	r4, #1
	for (i = 0U; i < WL_SIZE; i++) {
    e892:	2c08      	cmp	r4, #8
    e894:	d1d1      	bne.n	e83a <filter_wl_update+0xa>
}
    e896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e898:	20002248 	.word	0x20002248
    e89c:	20002215 	.word	0x20002215
    e8a0:	2000189c 	.word	0x2000189c
    e8a4:	20002289 	.word	0x20002289
    e8a8:	2000224a 	.word	0x2000224a

0000e8ac <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    e8ac:	2807      	cmp	r0, #7
    e8ae:	d80c      	bhi.n	e8ca <ctrl_lrpa_get+0x1e>
    e8b0:	2328      	movs	r3, #40	; 0x28
    e8b2:	4358      	muls	r0, r3
    e8b4:	4a06      	ldr	r2, [pc, #24]	; (e8d0 <ctrl_lrpa_get+0x24>)
    e8b6:	5c13      	ldrb	r3, [r2, r0]
    e8b8:	1811      	adds	r1, r2, r0
    e8ba:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    e8be:	b128      	cbz	r0, e8cc <ctrl_lrpa_get+0x20>
    e8c0:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e8c4:	b110      	cbz	r0, e8cc <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    e8c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
    e8c8:	4770      	bx	lr
		return NULL;
    e8ca:	2000      	movs	r0, #0
}
    e8cc:	4770      	bx	lr
    e8ce:	bf00      	nop
    e8d0:	2000189c 	.word	0x2000189c

0000e8d4 <ctrl_irks_get>:
	*count = peer_irk_count;
    e8d4:	4b02      	ldr	r3, [pc, #8]	; (e8e0 <ctrl_irks_get+0xc>)
    e8d6:	781b      	ldrb	r3, [r3, #0]
    e8d8:	7003      	strb	r3, [r0, #0]
}
    e8da:	4802      	ldr	r0, [pc, #8]	; (e8e4 <ctrl_irks_get+0x10>)
    e8dc:	4770      	bx	lr
    e8de:	bf00      	nop
    e8e0:	2000218c 	.word	0x2000218c
    e8e4:	20002195 	.word	0x20002195

0000e8e8 <ctrl_rl_idx>:
	if (whitelist) {
    e8e8:	b188      	cbz	r0, e90e <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    e8ea:	2907      	cmp	r1, #7
    e8ec:	d905      	bls.n	e8fa <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
    e8ee:	4040      	eors	r0, r0
    e8f0:	f380 8811 	msr	BASEPRI, r0
    e8f4:	f04f 0003 	mov.w	r0, #3
    e8f8:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
    e8fa:	4b09      	ldr	r3, [pc, #36]	; (e920 <ctrl_rl_idx+0x38>)
    e8fc:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
    e900:	07d2      	lsls	r2, r2, #31
    e902:	d5f4      	bpl.n	e8ee <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
    e904:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    e908:	7849      	ldrb	r1, [r1, #1]
}
    e90a:	4608      	mov	r0, r1
    e90c:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    e90e:	2907      	cmp	r1, #7
    e910:	d8ed      	bhi.n	e8ee <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
    e912:	2328      	movs	r3, #40	; 0x28
    e914:	434b      	muls	r3, r1
    e916:	4a03      	ldr	r2, [pc, #12]	; (e924 <ctrl_rl_idx+0x3c>)
    e918:	5cd3      	ldrb	r3, [r2, r3]
    e91a:	07db      	lsls	r3, r3, #31
    e91c:	d4f5      	bmi.n	e90a <ctrl_rl_idx+0x22>
    e91e:	e7e6      	b.n	e8ee <ctrl_rl_idx+0x6>
    e920:	20002248 	.word	0x20002248
    e924:	2000189c 	.word	0x2000189c

0000e928 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
    e928:	4b0a      	ldr	r3, [pc, #40]	; (e954 <ctrl_rl_irk_idx+0x2c>)
    e92a:	781b      	ldrb	r3, [r3, #0]
    e92c:	4283      	cmp	r3, r0
    e92e:	d805      	bhi.n	e93c <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    e930:	4040      	eors	r0, r0
    e932:	f380 8811 	msr	BASEPRI, r0
    e936:	f04f 0003 	mov.w	r0, #3
    e93a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
    e93c:	4b06      	ldr	r3, [pc, #24]	; (e958 <ctrl_rl_irk_idx+0x30>)
    e93e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    e940:	2807      	cmp	r0, #7
    e942:	d8f5      	bhi.n	e930 <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
    e944:	2328      	movs	r3, #40	; 0x28
    e946:	4343      	muls	r3, r0
    e948:	4a04      	ldr	r2, [pc, #16]	; (e95c <ctrl_rl_irk_idx+0x34>)
    e94a:	5cd3      	ldrb	r3, [r2, r3]
    e94c:	07db      	lsls	r3, r3, #31
    e94e:	d5ef      	bpl.n	e930 <ctrl_rl_irk_idx+0x8>
}
    e950:	4770      	bx	lr
    e952:	bf00      	nop
    e954:	2000218c 	.word	0x2000218c
    e958:	2000218d 	.word	0x2000218d
    e95c:	2000189c 	.word	0x2000189c

0000e960 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    e960:	2807      	cmp	r0, #7
    e962:	d80e      	bhi.n	e982 <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
    e964:	2328      	movs	r3, #40	; 0x28
    e966:	4358      	muls	r0, r3
    e968:	4b07      	ldr	r3, [pc, #28]	; (e988 <ctrl_irk_whitelisted+0x28>)
    e96a:	5c18      	ldrb	r0, [r3, r0]
    e96c:	07c3      	lsls	r3, r0, #31
    e96e:	d405      	bmi.n	e97c <ctrl_irk_whitelisted+0x1c>
    e970:	4040      	eors	r0, r0
    e972:	f380 8811 	msr	BASEPRI, r0
    e976:	f04f 0003 	mov.w	r0, #3
    e97a:	df02      	svc	2
	return rl[rl_idx].wl;
    e97c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    e980:	4770      	bx	lr
		return false;
    e982:	2000      	movs	r0, #0
}
    e984:	4770      	bx	lr
    e986:	bf00      	nop
    e988:	2000189c 	.word	0x2000189c

0000e98c <ctrl_filter_get>:
}
    e98c:	4a03      	ldr	r2, [pc, #12]	; (e99c <ctrl_filter_get+0x10>)
    e98e:	4b04      	ldr	r3, [pc, #16]	; (e9a0 <ctrl_filter_get+0x14>)
    e990:	2800      	cmp	r0, #0
    e992:	bf14      	ite	ne
    e994:	4610      	movne	r0, r2
    e996:	4618      	moveq	r0, r3
    e998:	4770      	bx	lr
    e99a:	bf00      	nop
    e99c:	20002289 	.word	0x20002289
    e9a0:	20002216 	.word	0x20002216

0000e9a4 <ll_wl_clear>:
{
    e9a4:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    e9a6:	f7ff fa67 	bl	de78 <radio_adv_filter_pol_get>
    e9aa:	b108      	cbz	r0, e9b0 <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e9ac:	200c      	movs	r0, #12
}
    e9ae:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    e9b0:	f7ff fa84 	bl	debc <radio_scan_filter_pol_get>
    e9b4:	f010 0001 	ands.w	r0, r0, #1
    e9b8:	d1f8      	bne.n	e9ac <ll_wl_clear+0x8>
		wl[i].taken = 0U;
    e9ba:	4b16      	ldr	r3, [pc, #88]	; (ea14 <ll_wl_clear+0x70>)
    e9bc:	781a      	ldrb	r2, [r3, #0]
    e9be:	f360 0200 	bfi	r2, r0, #0, #1
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	7a1a      	ldrb	r2, [r3, #8]
    e9c6:	f360 0200 	bfi	r2, r0, #0, #1
    e9ca:	721a      	strb	r2, [r3, #8]
    e9cc:	7c1a      	ldrb	r2, [r3, #16]
    e9ce:	f360 0200 	bfi	r2, r0, #0, #1
    e9d2:	741a      	strb	r2, [r3, #16]
    e9d4:	7e1a      	ldrb	r2, [r3, #24]
    e9d6:	f360 0200 	bfi	r2, r0, #0, #1
    e9da:	761a      	strb	r2, [r3, #24]
    e9dc:	f893 2020 	ldrb.w	r2, [r3, #32]
    e9e0:	f360 0200 	bfi	r2, r0, #0, #1
    e9e4:	f883 2020 	strb.w	r2, [r3, #32]
    e9e8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    e9ec:	f360 0200 	bfi	r2, r0, #0, #1
    e9f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    e9f4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e9f8:	f360 0200 	bfi	r2, r0, #0, #1
    e9fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ea00:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    ea04:	f360 0200 	bfi	r2, r0, #0, #1
    ea08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0U;
    ea0c:	4b02      	ldr	r3, [pc, #8]	; (ea18 <ll_wl_clear+0x74>)
    ea0e:	7018      	strb	r0, [r3, #0]
	return 0;
    ea10:	e7cd      	b.n	e9ae <ll_wl_clear+0xa>
    ea12:	bf00      	nop
    ea14:	20002248 	.word	0x20002248
    ea18:	20002288 	.word	0x20002288

0000ea1c <ll_wl_remove>:
{
    ea1c:	b538      	push	{r3, r4, r5, lr}
    ea1e:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ea20:	f7ff fa2a 	bl	de78 <radio_adv_filter_pol_get>
    ea24:	4604      	mov	r4, r0
    ea26:	b108      	cbz	r0, ea2c <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ea28:	200c      	movs	r0, #12
}
    ea2a:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ea2c:	f7ff fa46 	bl	debc <radio_scan_filter_pol_get>
    ea30:	f010 0301 	ands.w	r3, r0, #1
    ea34:	d1f8      	bne.n	ea28 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    ea36:	7828      	ldrb	r0, [r5, #0]
    ea38:	28ff      	cmp	r0, #255	; 0xff
    ea3a:	d103      	bne.n	ea44 <ll_wl_remove+0x28>
		wl_anon = 0U;
    ea3c:	4a10      	ldr	r2, [pc, #64]	; (ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>)
		return 0;
    ea3e:	4618      	mov	r0, r3
		wl_anon = 0U;
    ea40:	7013      	strb	r3, [r2, #0]
		return 0;
    ea42:	e7f2      	b.n	ea2a <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    ea44:	4622      	mov	r2, r4
    ea46:	1c69      	adds	r1, r5, #1
    ea48:	f7ff fe96 	bl	e778 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    ea4c:	2807      	cmp	r0, #7
    ea4e:	d814      	bhi.n	ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
		u8_t j = wl[i].rl_idx;
    ea50:	4b0c      	ldr	r3, [pc, #48]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
    ea52:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    ea56:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    ea58:	2d07      	cmp	r5, #7
    ea5a:	d806      	bhi.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
			rl[j].wl = 0U;
    ea5c:	2228      	movs	r2, #40	; 0x28
    ea5e:	490a      	ldr	r1, [pc, #40]	; (ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>)
    ea60:	436a      	muls	r2, r5
    ea62:	5c8d      	ldrb	r5, [r1, r2]
    ea64:	f364 1545 	bfi	r5, r4, #5, #1
    ea68:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0U;
    ea6a:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    ea6e:	f36f 0200 	bfc	r2, #0, #1
    ea72:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return wl_remove(addr);
    ea76:	b2e0      	uxtb	r0, r4
    ea78:	e7d7      	b.n	ea2a <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ea7a:	2402      	movs	r4, #2
    ea7c:	e7fb      	b.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    ea7e:	bf00      	nop
    ea80:	20002288 	.word	0x20002288
    ea84:	20002248 	.word	0x20002248
    ea88:	2000189c 	.word	0x2000189c

0000ea8c <ll_filters_adv_update>:

void ll_filters_adv_update(u8_t adv_fp)
{
    ea8c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0U;
    ea8e:	4b0d      	ldr	r3, [pc, #52]	; (eac4 <ll_filters_adv_update+0x38>)
    ea90:	2200      	movs	r2, #0
    ea92:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0U;
    ea94:	705a      	strb	r2, [r3, #1]
	/* Clear before populating filter */
	filter_clear(&wl_filter);

	/* enabling advertising */
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
    ea96:	b128      	cbz	r0, eaa4 <ll_filters_adv_update+0x18>
    ea98:	f7ff fa10 	bl	debc <radio_scan_filter_pol_get>
    ea9c:	07c3      	lsls	r3, r0, #31
    ea9e:	d401      	bmi.n	eaa4 <ll_filters_adv_update+0x18>
		/* whitelist not in use, update whitelist */
		filter_wl_update();
    eaa0:	f7ff fec6 	bl	e830 <filter_wl_update>
	filter->enable_bitmask = 0U;
    eaa4:	4b08      	ldr	r3, [pc, #32]	; (eac8 <ll_filters_adv_update+0x3c>)
    eaa6:	2000      	movs	r0, #0
    eaa8:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
    eaaa:	7058      	strb	r0, [r3, #1]
	}

	/* Clear before populating rl filter */
	filter_clear(&rl_filter);

	if (rl_enable && !ll_scan_is_enabled(0)) {
    eaac:	4b07      	ldr	r3, [pc, #28]	; (eacc <ll_filters_adv_update+0x40>)
    eaae:	781b      	ldrb	r3, [r3, #0]
    eab0:	b133      	cbz	r3, eac0 <ll_filters_adv_update+0x34>
    eab2:	f7ff f9ed 	bl	de90 <ll_scan_is_enabled>
    eab6:	b918      	cbnz	r0, eac0 <ll_filters_adv_update+0x34>
		/* rl not in use, update resolving list LUT */
		filter_rl_update();
	}
}
    eab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    eabc:	f7ff be90 	b.w	e7e0 <filter_rl_update>
}
    eac0:	bd08      	pop	{r3, pc}
    eac2:	bf00      	nop
    eac4:	20002289 	.word	0x20002289
    eac8:	20002216 	.word	0x20002216
    eacc:	20002215 	.word	0x20002215

0000ead0 <ll_rl_find>:
		filter_rl_update();
	}
}

u8_t ll_rl_find(u8_t id_addr_type, u8_t *id_addr, u8_t *free)
{
    ead0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ead4:	468a      	mov	sl, r1
	u8_t i;

	if (free) {
    ead6:	4614      	mov	r4, r2
    ead8:	b10a      	cbz	r2, eade <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    eada:	23ff      	movs	r3, #255	; 0xff
    eadc:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    eade:	f8df 9058 	ldr.w	r9, [pc, #88]	; eb38 <ll_rl_find+0x68>
{
    eae2:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    eae4:	f000 0801 	and.w	r8, r0, #1
    eae8:	2628      	movs	r6, #40	; 0x28
    eaea:	436e      	muls	r6, r5
    eaec:	b2ef      	uxtb	r7, r5
    eaee:	f819 3006 	ldrb.w	r3, [r9, r6]
    eaf2:	07da      	lsls	r2, r3, #31
    eaf4:	d51a      	bpl.n	eb2c <ll_rl_find+0x5c>
    eaf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eafa:	4543      	cmp	r3, r8
    eafc:	d10f      	bne.n	eb1e <ll_rl_find+0x4e>
    eafe:	480d      	ldr	r0, [pc, #52]	; (eb34 <ll_rl_find+0x64>)
    eb00:	2206      	movs	r2, #6
    eb02:	4651      	mov	r1, sl
    eb04:	4430      	add	r0, r6
    eb06:	f004 fc9d 	bl	13444 <memcmp>
    eb0a:	b160      	cbz	r0, eb26 <ll_rl_find+0x56>
			return i;
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    eb0c:	b13c      	cbz	r4, eb1e <ll_rl_find+0x4e>
    eb0e:	f819 3006 	ldrb.w	r3, [r9, r6]
    eb12:	07db      	lsls	r3, r3, #31
    eb14:	d403      	bmi.n	eb1e <ll_rl_find+0x4e>
    eb16:	7823      	ldrb	r3, [r4, #0]
    eb18:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    eb1a:	bf08      	it	eq
    eb1c:	7027      	strbeq	r7, [r4, #0]
    eb1e:	3501      	adds	r5, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    eb20:	2d08      	cmp	r5, #8
    eb22:	d1e1      	bne.n	eae8 <ll_rl_find+0x18>
		}
	}

	return FILTER_IDX_NONE;
    eb24:	27ff      	movs	r7, #255	; 0xff
}
    eb26:	4638      	mov	r0, r7
    eb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    eb2c:	2c00      	cmp	r4, #0
    eb2e:	d1f2      	bne.n	eb16 <ll_rl_find+0x46>
    eb30:	e7f5      	b.n	eb1e <ll_rl_find+0x4e>
    eb32:	bf00      	nop
    eb34:	2000189d 	.word	0x2000189d
    eb38:	2000189c 	.word	0x2000189c

0000eb3c <ll_wl_add>:
{
    eb3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eb40:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    eb42:	f7ff f999 	bl	de78 <radio_adv_filter_pol_get>
    eb46:	4605      	mov	r5, r0
    eb48:	b118      	cbz	r0, eb52 <ll_wl_add+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    eb4a:	200c      	movs	r0, #12
}
    eb4c:	b002      	add	sp, #8
    eb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    eb52:	f7ff f9b3 	bl	debc <radio_scan_filter_pol_get>
    eb56:	f010 0301 	ands.w	r3, r0, #1
    eb5a:	d1f6      	bne.n	eb4a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    eb5c:	7838      	ldrb	r0, [r7, #0]
    eb5e:	28ff      	cmp	r0, #255	; 0xff
    eb60:	d104      	bne.n	eb6c <ll_wl_add+0x30>
		wl_anon = 1U;
    eb62:	4a20      	ldr	r2, [pc, #128]	; (ebe4 <ll_wl_add+0xa8>)
    eb64:	2101      	movs	r1, #1
    eb66:	7011      	strb	r1, [r2, #0]
		return 0;
    eb68:	4618      	mov	r0, r3
    eb6a:	e7ef      	b.n	eb4c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    eb6c:	f107 0801 	add.w	r8, r7, #1
    eb70:	f10d 0207 	add.w	r2, sp, #7
    eb74:	4641      	mov	r1, r8
    eb76:	f7ff fdff 	bl	e778 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    eb7a:	2807      	cmp	r0, #7
    eb7c:	d92e      	bls.n	ebdc <ll_wl_add+0xa0>
	} else if (j >= ARRAY_SIZE(wl)) {
    eb7e:	f89d 6007 	ldrb.w	r6, [sp, #7]
    eb82:	2e07      	cmp	r6, #7
    eb84:	d82c      	bhi.n	ebe0 <ll_wl_add+0xa4>
	wl[i].id_addr_type = id_addr->type & 0x1;
    eb86:	4c18      	ldr	r4, [pc, #96]	; (ebe8 <ll_wl_add+0xac>)
    eb88:	783a      	ldrb	r2, [r7, #0]
    eb8a:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    eb8e:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    eb92:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
    eb96:	4641      	mov	r1, r8
    eb98:	2206      	movs	r2, #6
    eb9a:	3002      	adds	r0, #2
    eb9c:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    eba0:	f004 fc60 	bl	13464 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    eba4:	462a      	mov	r2, r5
    eba6:	4641      	mov	r1, r8
    eba8:	7838      	ldrb	r0, [r7, #0]
    ebaa:	f7ff ff91 	bl	ead0 <ll_rl_find>
    ebae:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
    ebb0:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
    ebb2:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
    ebb4:	d80f      	bhi.n	ebd6 <ll_wl_add+0x9a>
		wl[i].rl_idx = j;
    ebb6:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1U;
    ebb8:	2328      	movs	r3, #40	; 0x28
    ebba:	4a0c      	ldr	r2, [pc, #48]	; (ebec <ll_wl_add+0xb0>)
    ebbc:	4358      	muls	r0, r3
    ebbe:	5c13      	ldrb	r3, [r2, r0]
    ebc0:	f043 0320 	orr.w	r3, r3, #32
    ebc4:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1U;
    ebc6:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    ebca:	f043 0301 	orr.w	r3, r3, #1
    ebce:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
	return wl_add(addr);
    ebd2:	b2e8      	uxtb	r0, r5
    ebd4:	e7ba      	b.n	eb4c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
    ebd6:	22ff      	movs	r2, #255	; 0xff
    ebd8:	705a      	strb	r2, [r3, #1]
    ebda:	e7f4      	b.n	ebc6 <ll_wl_add+0x8a>
		return BT_HCI_ERR_INVALID_PARAM;
    ebdc:	2512      	movs	r5, #18
    ebde:	e7f8      	b.n	ebd2 <ll_wl_add+0x96>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ebe0:	2507      	movs	r5, #7
    ebe2:	e7f6      	b.n	ebd2 <ll_wl_add+0x96>
    ebe4:	20002288 	.word	0x20002288
    ebe8:	20002248 	.word	0x20002248
    ebec:	2000189c 	.word	0x2000189c

0000ebf0 <ctrl_rl_idx_allowed>:
bool ctrl_rl_idx_allowed(u8_t irkmatch_ok, u8_t rl_idx)
{
	/* If AR is disabled or we don't know the device or we matched an IRK
	 * then we're all set.
	 */
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    ebf0:	4b0c      	ldr	r3, [pc, #48]	; (ec24 <ctrl_rl_idx_allowed+0x34>)
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	b19b      	cbz	r3, ec1e <ctrl_rl_idx_allowed+0x2e>
    ebf6:	2907      	cmp	r1, #7
    ebf8:	d811      	bhi.n	ec1e <ctrl_rl_idx_allowed+0x2e>
    ebfa:	b980      	cbnz	r0, ec1e <ctrl_rl_idx_allowed+0x2e>
		return true;
	}

	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
	LL_ASSERT(rl[rl_idx].taken);
    ebfc:	2328      	movs	r3, #40	; 0x28
    ebfe:	4359      	muls	r1, r3
    ec00:	4b09      	ldr	r3, [pc, #36]	; (ec28 <ctrl_rl_idx_allowed+0x38>)
    ec02:	5c58      	ldrb	r0, [r3, r1]
    ec04:	07c2      	lsls	r2, r0, #31
    ec06:	d405      	bmi.n	ec14 <ctrl_rl_idx_allowed+0x24>
    ec08:	4040      	eors	r0, r0
    ec0a:	f380 8811 	msr	BASEPRI, r0
    ec0e:	f04f 0003 	mov.w	r0, #3
    ec12:	df02      	svc	2

	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    ec14:	0743      	lsls	r3, r0, #29
    ec16:	d502      	bpl.n	ec1e <ctrl_rl_idx_allowed+0x2e>
    ec18:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ec1c:	4770      	bx	lr
		return true;
    ec1e:	2001      	movs	r0, #1
}
    ec20:	4770      	bx	lr
    ec22:	bf00      	nop
    ec24:	20002215 	.word	0x20002215
    ec28:	2000189c 	.word	0x2000189c

0000ec2c <ll_rl_id_addr_get>:

void ll_rl_id_addr_get(u8_t rl_idx, u8_t *id_addr_type, u8_t *id_addr)
{
    ec2c:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    ec2e:	2b07      	cmp	r3, #7
{
    ec30:	b430      	push	{r4, r5}
    ec32:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    ec34:	d905      	bls.n	ec42 <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
    ec36:	4040      	eors	r0, r0
    ec38:	f380 8811 	msr	BASEPRI, r0
    ec3c:	f04f 0003 	mov.w	r0, #3
    ec40:	df02      	svc	2
    ec42:	2528      	movs	r5, #40	; 0x28
    ec44:	4c08      	ldr	r4, [pc, #32]	; (ec68 <ll_rl_id_addr_get+0x3c>)
    ec46:	fb05 f203 	mul.w	r2, r5, r3
    ec4a:	5ca2      	ldrb	r2, [r4, r2]
    ec4c:	f012 0f01 	tst.w	r2, #1
    ec50:	d0f1      	beq.n	ec36 <ll_rl_id_addr_get+0xa>

	*id_addr_type = rl[rl_idx].id_addr_type;
    ec52:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ec56:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    ec58:	fb05 4103 	mla	r1, r5, r3, r4
    ec5c:	2206      	movs	r2, #6
    ec5e:	3101      	adds	r1, #1
}
    ec60:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    ec62:	f004 bbff 	b.w	13464 <memcpy>
    ec66:	bf00      	nop
    ec68:	2000189c 	.word	0x2000189c

0000ec6c <ctrl_rl_addr_allowed>:

bool ctrl_rl_addr_allowed(u8_t id_addr_type, u8_t *id_addr, u8_t *rl_idx)
{
    ec6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t i, j;

	/* If AR is disabled or we matched an IRK then we're all set. No hw
	 * filters are used in this case.
	 */
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    ec70:	4b1a      	ldr	r3, [pc, #104]	; (ecdc <ctrl_rl_addr_allowed+0x70>)
    ec72:	781b      	ldrb	r3, [r3, #0]
    ec74:	b383      	cbz	r3, ecd8 <ctrl_rl_addr_allowed+0x6c>
    ec76:	7813      	ldrb	r3, [r2, #0]
    ec78:	2bff      	cmp	r3, #255	; 0xff
    ec7a:	d12d      	bne.n	ecd8 <ctrl_rl_addr_allowed+0x6c>
		return true;
	}

	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    ec7c:	4e18      	ldr	r6, [pc, #96]	; (ece0 <ctrl_rl_addr_allowed+0x74>)
    ec7e:	2300      	movs	r3, #0
    ec80:	f04f 0828 	mov.w	r8, #40	; 0x28
    ec84:	46b4      	mov	ip, r6
    ec86:	f106 0906 	add.w	r9, r6, #6
    ec8a:	fb08 f403 	mul.w	r4, r8, r3
    ec8e:	fa5f fe83 	uxtb.w	lr, r3
    ec92:	5d37      	ldrb	r7, [r6, r4]
    ec94:	f017 0f01 	tst.w	r7, #1
    ec98:	eb06 0504 	add.w	r5, r6, r4
    ec9c:	d019      	beq.n	ecd2 <ctrl_rl_addr_allowed+0x66>
    ec9e:	f3c7 1780 	ubfx	r7, r7, #6, #1
    eca2:	4287      	cmp	r7, r0
    eca4:	d115      	bne.n	ecd2 <ctrl_rl_addr_allowed+0x66>
    eca6:	1e4f      	subs	r7, r1, #1
    eca8:	444c      	add	r4, r9
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0U; j < BDADDR_SIZE; j++) {
				if (addr[j] != id_addr[j]) {
    ecaa:	f815 bf01 	ldrb.w	fp, [r5, #1]!
    ecae:	f817 af01 	ldrb.w	sl, [r7, #1]!
    ecb2:	45d3      	cmp	fp, sl
    ecb4:	d10d      	bne.n	ecd2 <ctrl_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
    ecb6:	42a5      	cmp	r5, r4
    ecb8:	d1f7      	bne.n	ecaa <ctrl_rl_addr_allowed+0x3e>
					break;
				}
			}

			if (j == BDADDR_SIZE) {
				*rl_idx = i;
    ecba:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
    ecbe:	2228      	movs	r2, #40	; 0x28
    ecc0:	4353      	muls	r3, r2
    ecc2:	f81c 0003 	ldrb.w	r0, [ip, r3]
    ecc6:	0743      	lsls	r3, r0, #29
    ecc8:	d506      	bpl.n	ecd8 <ctrl_rl_addr_allowed+0x6c>
    ecca:	f3c0 1000 	ubfx	r0, r0, #4, #1
			}
		}
	}

	return true;
}
    ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecd2:	3301      	adds	r3, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    ecd4:	2b08      	cmp	r3, #8
    ecd6:	d1d8      	bne.n	ec8a <ctrl_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
    ecd8:	2001      	movs	r0, #1
    ecda:	e7f8      	b.n	ecce <ctrl_rl_addr_allowed+0x62>
    ecdc:	20002215 	.word	0x20002215
    ece0:	2000189c 	.word	0x2000189c

0000ece4 <ctrl_rl_addr_resolve>:

bool ctrl_rl_addr_resolve(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx)
{
    ece4:	b470      	push	{r4, r5, r6}
	/* Unable to resolve if AR is disabled, no RL entry or no local IRK */
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    ece6:	4c0d      	ldr	r4, [pc, #52]	; (ed1c <ctrl_rl_addr_resolve+0x38>)
    ece8:	7824      	ldrb	r4, [r4, #0]
    ecea:	b1a4      	cbz	r4, ed16 <ctrl_rl_addr_resolve+0x32>
    ecec:	2a07      	cmp	r2, #7
    ecee:	d812      	bhi.n	ed16 <ctrl_rl_addr_resolve+0x32>
    ecf0:	2528      	movs	r5, #40	; 0x28
    ecf2:	4c0b      	ldr	r4, [pc, #44]	; (ed20 <ctrl_rl_addr_resolve+0x3c>)
    ecf4:	fb05 f602 	mul.w	r6, r5, r2
    ecf8:	5da6      	ldrb	r6, [r4, r6]
    ecfa:	0736      	lsls	r6, r6, #28
    ecfc:	d50b      	bpl.n	ed16 <ctrl_rl_addr_resolve+0x32>
		return false;
	}

	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
    ecfe:	b150      	cbz	r0, ed16 <ctrl_rl_addr_resolve+0x32>
    ed00:	794b      	ldrb	r3, [r1, #5]
    ed02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ed06:	2b40      	cmp	r3, #64	; 0x40
    ed08:	d105      	bne.n	ed16 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    ed0a:	fb05 4202 	mla	r2, r5, r2, r4
    ed0e:	1dd0      	adds	r0, r2, #7
					  (bt_addr_t *)id_addr);
	}

	return false;
}
    ed10:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    ed12:	f004 bc15 	b.w	13540 <bt_rpa_irk_matches>
}
    ed16:	2000      	movs	r0, #0
    ed18:	bc70      	pop	{r4, r5, r6}
    ed1a:	4770      	bx	lr
    ed1c:	20002215 	.word	0x20002215
    ed20:	2000189c 	.word	0x2000189c

0000ed24 <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
    ed24:	4b02      	ldr	r3, [pc, #8]	; (ed30 <ctrl_rl_enabled+0xc>)
    ed26:	7818      	ldrb	r0, [r3, #0]
}
    ed28:	3000      	adds	r0, #0
    ed2a:	bf18      	it	ne
    ed2c:	2001      	movne	r0, #1
    ed2e:	4770      	bx	lr
    ed30:	20002215 	.word	0x20002215

0000ed34 <ll_rl_pdu_adv_update>:

#if defined(CONFIG_BT_BROADCASTER)
void ll_rl_pdu_adv_update(u8_t idx, struct pdu_adv *pdu)
{
    ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed36:	4605      	mov	r5, r0
    ed38:	460c      	mov	r4, r1
    ed3a:	1c8f      	adds	r7, r1, #2
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->scan_rsp.addr[0] :
				  &pdu->adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
    ed3c:	f7ff fb54 	bl	e3e8 <ll_adv_set_get>

	/* AdvA */
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    ed40:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
    ed42:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    ed44:	d832      	bhi.n	edac <ll_rl_pdu_adv_update+0x78>
    ed46:	2328      	movs	r3, #40	; 0x28
    ed48:	4a24      	ldr	r2, [pc, #144]	; (eddc <ll_rl_pdu_adv_update+0xa8>)
    ed4a:	436b      	muls	r3, r5
    ed4c:	18d1      	adds	r1, r2, r3
    ed4e:	5cd3      	ldrb	r3, [r2, r3]
    ed50:	071a      	lsls	r2, r3, #28
    ed52:	d52b      	bpl.n	edac <ll_rl_pdu_adv_update+0x78>
		LL_ASSERT(rl[idx].rpas_ready);
    ed54:	079b      	lsls	r3, r3, #30
    ed56:	d405      	bmi.n	ed64 <ll_rl_pdu_adv_update+0x30>
    ed58:	4040      	eors	r0, r0
    ed5a:	f380 8811 	msr	BASEPRI, r0
    ed5e:	f04f 0003 	mov.w	r0, #3
    ed62:	df02      	svc	2
		pdu->tx_addr = 1U;
    ed64:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    ed66:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1U;
    ed68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed6c:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    ed6e:	2206      	movs	r2, #6
    ed70:	4638      	mov	r0, r7
    ed72:	f004 fb77 	bl	13464 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    ed76:	7823      	ldrb	r3, [r4, #0]
    ed78:	f003 020f 	and.w	r2, r3, #15
    ed7c:	2a01      	cmp	r2, #1
    ed7e:	d12c      	bne.n	edda <ll_rl_pdu_adv_update+0xa6>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
    ed80:	2d07      	cmp	r5, #7
    ed82:	f104 0008 	add.w	r0, r4, #8
    ed86:	d81e      	bhi.n	edc6 <ll_rl_pdu_adv_update+0x92>
    ed88:	2228      	movs	r2, #40	; 0x28
    ed8a:	4914      	ldr	r1, [pc, #80]	; (eddc <ll_rl_pdu_adv_update+0xa8>)
    ed8c:	fb02 f705 	mul.w	r7, r2, r5
    ed90:	5dcf      	ldrb	r7, [r1, r7]
    ed92:	077f      	lsls	r7, r7, #29
    ed94:	d517      	bpl.n	edc6 <ll_rl_pdu_adv_update+0x92>
			pdu->rx_addr = 1U;
			memcpy(&pdu->direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    ed96:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1U;
    ed9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ed9e:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
    eda0:	2206      	movs	r2, #6
    eda2:	311e      	adds	r1, #30
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->direct_ind.tgt_addr[0],
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
    eda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
    eda8:	f004 bb5c 	b.w	13464 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
    edac:	7830      	ldrb	r0, [r6, #0]
    edae:	7823      	ldrb	r3, [r4, #0]
    edb0:	f3c0 1041 	ubfx	r0, r0, #5, #2
    edb4:	f360 1386 	bfi	r3, r0, #6, #1
    edb8:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
    edba:	4639      	mov	r1, r7
    edbc:	f000 0001 	and.w	r0, r0, #1
    edc0:	f7fb faa4 	bl	a30c <ll_addr_get>
    edc4:	e7d7      	b.n	ed76 <ll_rl_pdu_adv_update+0x42>
			pdu->rx_addr = ll_adv->id_addr_type;
    edc6:	4631      	mov	r1, r6
    edc8:	7822      	ldrb	r2, [r4, #0]
    edca:	f811 3b02 	ldrb.w	r3, [r1], #2
    edce:	09db      	lsrs	r3, r3, #7
    edd0:	f363 12c7 	bfi	r2, r3, #7, #1
    edd4:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
    edd6:	2206      	movs	r2, #6
    edd8:	e7e4      	b.n	eda4 <ll_rl_pdu_adv_update+0x70>
}
    edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eddc:	2000189c 	.word	0x2000189c

0000ede0 <ll_rl_rpa_update>:

	return (ll_adv_is_enabled(0) || ll_scan_is_enabled(0)) ? 0 : 1;
}

void ll_rl_rpa_update(bool timeout)
{
    ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ede4:	b087      	sub	sp, #28
    ede6:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    ede8:	f008 f958 	bl	1709c <z_impl_k_uptime_get>
    edec:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    edf0:	f1b9 0f00 	cmp.w	r9, #0
    edf4:	d145      	bne.n	ee82 <ll_rl_rpa_update+0xa2>
    edf6:	4b61      	ldr	r3, [pc, #388]	; (ef7c <ll_rl_rpa_update+0x19c>)
    edf8:	e9d3 0100 	ldrd	r0, r1, [r3]
    edfc:	1c4b      	adds	r3, r1, #1
    edfe:	bf08      	it	eq
    ee00:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    ee04:	d03d      	beq.n	ee82 <ll_rl_rpa_update+0xa2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    ee06:	e9dd 3400 	ldrd	r3, r4, [sp]
    ee0a:	1a1b      	subs	r3, r3, r0
    ee0c:	4618      	mov	r0, r3
    ee0e:	4b5c      	ldr	r3, [pc, #368]	; (ef80 <ll_rl_rpa_update+0x1a0>)
    ee10:	681a      	ldr	r2, [r3, #0]
    ee12:	eb64 0401 	sbc.w	r4, r4, r1
    ee16:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    ee18:	4290      	cmp	r0, r2
    ee1a:	eb74 0303 	sbcs.w	r3, r4, r3
    ee1e:	bfac      	ite	ge
    ee20:	2601      	movge	r6, #1
    ee22:	2600      	movlt	r6, #0
	BT_DBG("");

	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    ee24:	f8df 8168 	ldr.w	r8, [pc, #360]	; ef90 <ll_rl_rpa_update+0x1b0>
	bool all = timeout || (rpa_last_ms == -1) ||
    ee28:	2400      	movs	r4, #0
    ee2a:	4645      	mov	r5, r8
			}

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
    ee2c:	f108 0b07 	add.w	fp, r8, #7
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    ee30:	2328      	movs	r3, #40	; 0x28
    ee32:	4363      	muls	r3, r4
    ee34:	f818 3003 	ldrb.w	r3, [r8, r3]
    ee38:	07df      	lsls	r7, r3, #31
    ee3a:	d544      	bpl.n	eec6 <ll_rl_rpa_update+0xe6>
    ee3c:	b90e      	cbnz	r6, ee42 <ll_rl_rpa_update+0x62>
    ee3e:	0798      	lsls	r0, r3, #30
    ee40:	d441      	bmi.n	eec6 <ll_rl_rpa_update+0xe6>
			if (rl[i].pirk) {
    ee42:	2328      	movs	r3, #40	; 0x28
    ee44:	4363      	muls	r3, r4
    ee46:	18ea      	adds	r2, r5, r3
    ee48:	5ce9      	ldrb	r1, [r5, r3]
    ee4a:	0749      	lsls	r1, r1, #29
    ee4c:	d51b      	bpl.n	ee86 <ll_rl_rpa_update+0xa6>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    ee4e:	7dd1      	ldrb	r1, [r2, #23]
    ee50:	4a4c      	ldr	r2, [pc, #304]	; (ef84 <ll_rl_rpa_update+0x1a4>)
    ee52:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    ee56:	f102 0110 	add.w	r1, r2, #16
    ee5a:	f10d 0007 	add.w	r0, sp, #7
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    ee5e:	f811 7d01 	ldrb.w	r7, [r1, #-1]!
    ee62:	f800 7f01 	strb.w	r7, [r0, #1]!
	for (; length > 0; length--) {
    ee66:	4291      	cmp	r1, r2
    ee68:	d1f9      	bne.n	ee5e <ll_rl_rpa_update+0x7e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    ee6a:	4947      	ldr	r1, [pc, #284]	; (ef88 <ll_rl_rpa_update+0x1a8>)
    ee6c:	a802      	add	r0, sp, #8
    ee6e:	4419      	add	r1, r3
    ee70:	f004 fb79 	bl	13566 <bt_rpa_create>
				LL_ASSERT(!err);
    ee74:	b138      	cbz	r0, ee86 <ll_rl_rpa_update+0xa6>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
    ee76:	4040      	eors	r0, r0
    ee78:	f380 8811 	msr	BASEPRI, r0
    ee7c:	f04f 0003 	mov.w	r0, #3
    ee80:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
    ee82:	2601      	movs	r6, #1
    ee84:	e7ce      	b.n	ee24 <ll_rl_rpa_update+0x44>
			if (rl[i].lirk) {
    ee86:	2028      	movs	r0, #40	; 0x28
    ee88:	4360      	muls	r0, r4
    ee8a:	eb05 0a00 	add.w	sl, r5, r0
    ee8e:	5c2b      	ldrb	r3, [r5, r0]
    ee90:	071a      	lsls	r2, r3, #28
    ee92:	d512      	bpl.n	eeba <ll_rl_rpa_update+0xda>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    ee94:	a902      	add	r1, sp, #8
    ee96:	4458      	add	r0, fp
    ee98:	f004 fb65 	bl	13566 <bt_rpa_create>
				LL_ASSERT(!err);
    ee9c:	2800      	cmp	r0, #0
    ee9e:	d1ea      	bne.n	ee76 <ll_rl_rpa_update+0x96>
    eea0:	4f3a      	ldr	r7, [pc, #232]	; (ef8c <ll_rl_rpa_update+0x1ac>)
    eea2:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
    eea4:	ab02      	add	r3, sp, #8
    eea6:	fb02 7704 	mla	r7, r2, r4, r7
    eeaa:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    eeae:	4619      	mov	r1, r3
    eeb0:	4638      	mov	r0, r7
    eeb2:	f004 fad7 	bl	13464 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
    eeb6:	f8ca 7024 	str.w	r7, [sl, #36]	; 0x24
			}

			rl[i].rpas_ready = 1U;
    eeba:	2328      	movs	r3, #40	; 0x28
    eebc:	4363      	muls	r3, r4
    eebe:	5cea      	ldrb	r2, [r5, r3]
    eec0:	f042 0202 	orr.w	r2, r2, #2
    eec4:	54ea      	strb	r2, [r5, r3]
    eec6:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    eec8:	2c08      	cmp	r4, #8
    eeca:	d1b1      	bne.n	ee30 <ll_rl_rpa_update+0x50>
		}
	}

	if (all) {
    eecc:	b126      	cbz	r6, eed8 <ll_rl_rpa_update+0xf8>
		rpa_last_ms = now;
    eece:	e9dd 1200 	ldrd	r1, r2, [sp]
    eed2:	4b2a      	ldr	r3, [pc, #168]	; (ef7c <ll_rl_rpa_update+0x19c>)
    eed4:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
    eed8:	f1b9 0f00 	cmp.w	r9, #0
    eedc:	d04a      	beq.n	ef74 <ll_rl_rpa_update+0x194>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled(0)) {
    eede:	2000      	movs	r0, #0
    eee0:	f7fe ffc2 	bl	de68 <ll_adv_is_enabled>
    eee4:	2800      	cmp	r0, #0
    eee6:	d045      	beq.n	ef74 <ll_rl_rpa_update+0x194>
	ll_adv = ll_adv_set_get();
    eee8:	f7ff fa7e 	bl	e3e8 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    eeec:	7803      	ldrb	r3, [r0, #0]
    eeee:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
    eef0:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    eef2:	d53f      	bpl.n	ef74 <ll_rl_rpa_update+0x194>
	radio_adv_data = radio_adv_data_get();
    eef4:	f7fe ffb0 	bl	de58 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    eef8:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
	if (radio_adv_data->first == radio_adv_data->last) {
    eefc:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ef00:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    ef04:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	if (radio_adv_data->first == radio_adv_data->last) {
    ef08:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
    ef0a:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ef0c:	eb00 0702 	add.w	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
    ef10:	d104      	bne.n	ef1c <ll_rl_rpa_update+0x13c>
		last = radio_adv_data->last + 1;
    ef12:	3401      	adds	r4, #1
    ef14:	b2e4      	uxtb	r4, r4
			last = 0U;
    ef16:	2c02      	cmp	r4, #2
    ef18:	bf08      	it	eq
    ef1a:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    ef1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    ef20:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
	pdu->type = prev->type;
    ef24:	5ca9      	ldrb	r1, [r5, r2]
    ef26:	5ce8      	ldrb	r0, [r5, r3]
    ef28:	f361 0003 	bfi	r0, r1, #0, #4
	pdu->rfu = 0U;
    ef2c:	f36f 1004 	bfc	r0, #4, #1
    ef30:	54e8      	strb	r0, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
    ef32:	5caa      	ldrb	r2, [r5, r2]
    ef34:	b2c1      	uxtb	r1, r0
    ef36:	f3c2 1240 	ubfx	r2, r2, #5, #1
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    ef3a:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
    ef3e:	f362 1145 	bfi	r1, r2, #5, #1
    ef42:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    ef44:	2200      	movs	r2, #0
    ef46:	f108 0102 	add.w	r1, r8, #2
    ef4a:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    ef4c:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    ef4e:	f7ff fdbf 	bl	ead0 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
    ef52:	2807      	cmp	r0, #7
    ef54:	d88f      	bhi.n	ee76 <ll_rl_rpa_update+0x96>
	ll_rl_pdu_adv_update(idx, pdu);
    ef56:	4631      	mov	r1, r6
    ef58:	f7ff feec 	bl	ed34 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
    ef5c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
    ef5e:	f107 0108 	add.w	r1, r7, #8
    ef62:	3a06      	subs	r2, #6
    ef64:	f106 0008 	add.w	r0, r6, #8
    ef68:	f004 fa7c 	bl	13464 <memcpy>
	pdu->len = prev->len;
    ef6c:	787b      	ldrb	r3, [r7, #1]
    ef6e:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
    ef70:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
			rpa_adv_refresh();
		}
#endif
	}
}
    ef74:	b007      	add	sp, #28
    ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef7a:	bf00      	nop
    ef7c:	20000008 	.word	0x20000008
    ef80:	200019dc 	.word	0x200019dc
    ef84:	20002195 	.word	0x20002195
    ef88:	200018ba 	.word	0x200018ba
    ef8c:	2000215c 	.word	0x2000215c
    ef90:	2000189c 	.word	0x2000189c

0000ef94 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    ef94:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
    ef96:	2001      	movs	r0, #1
    ef98:	f7ff ff22 	bl	ede0 <ll_rl_rpa_update>
    ef9c:	4b03      	ldr	r3, [pc, #12]	; (efac <rpa_timeout+0x18>)
    ef9e:	4904      	ldr	r1, [pc, #16]	; (efb0 <rpa_timeout+0x1c>)
    efa0:	681a      	ldr	r2, [r3, #0]
    efa2:	4804      	ldr	r0, [pc, #16]	; (efb4 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
    efa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    efa8:	f002 baf2 	b.w	11590 <k_delayed_work_submit_to_queue>
    efac:	200019dc 	.word	0x200019dc
    efb0:	200019e0 	.word	0x200019e0
    efb4:	20001f38 	.word	0x20001f38

0000efb8 <ll_adv_scan_state_cb>:
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
    efb8:	b128      	cbz	r0, efc6 <ll_adv_scan_state_cb+0xe>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    efba:	4b04      	ldr	r3, [pc, #16]	; (efcc <ll_adv_scan_state_cb+0x14>)
    efbc:	4904      	ldr	r1, [pc, #16]	; (efd0 <ll_adv_scan_state_cb+0x18>)
    efbe:	681a      	ldr	r2, [r3, #0]
    efc0:	4804      	ldr	r0, [pc, #16]	; (efd4 <ll_adv_scan_state_cb+0x1c>)
    efc2:	f002 bae5 	b.w	11590 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
    efc6:	4802      	ldr	r0, [pc, #8]	; (efd0 <ll_adv_scan_state_cb+0x18>)
    efc8:	f008 b804 	b.w	16fd4 <k_delayed_work_cancel>
    efcc:	200019dc 	.word	0x200019dc
    efd0:	200019e0 	.word	0x200019e0
    efd4:	20001f38 	.word	0x20001f38

0000efd8 <ll_rl_clear>:
{
	return CONFIG_BT_CTLR_RL_SIZE;
}

u8_t ll_rl_clear(void)
{
    efd8:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
    efda:	f007 f903 	bl	161e4 <rl_access_check.constprop.1>
    efde:	b390      	cbz	r0, f046 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
    efe0:	4b1a      	ldr	r3, [pc, #104]	; (f04c <ll_rl_clear+0x74>)
    efe2:	781a      	ldrb	r2, [r3, #0]
    efe4:	f36f 0200 	bfc	r2, #0, #1
    efe8:	701a      	strb	r2, [r3, #0]
    efea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    efee:	f36f 0200 	bfc	r2, #0, #1
    eff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    eff6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    effa:	f36f 0200 	bfc	r2, #0, #1
    effe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    f002:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
    f006:	f36f 0200 	bfc	r2, #0, #1
    f00a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    f00e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
    f012:	f36f 0200 	bfc	r2, #0, #1
    f016:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    f01a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    f01e:	f36f 0200 	bfc	r2, #0, #1
    f022:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    f026:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
    f02a:	f36f 0200 	bfc	r2, #0, #1
    f02e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    f032:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
    f036:	f36f 0200 	bfc	r2, #0, #1
    f03a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0U;
    f03e:	4b04      	ldr	r3, [pc, #16]	; (f050 <ll_rl_clear+0x78>)
    f040:	2000      	movs	r0, #0
    f042:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
    f044:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f046:	200c      	movs	r0, #12
    f048:	e7fc      	b.n	f044 <ll_rl_clear+0x6c>
    f04a:	bf00      	nop
    f04c:	2000189c 	.word	0x2000189c
    f050:	2000218c 	.word	0x2000218c

0000f054 <ll_rl_add>:

u8_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f058:	b085      	sub	sp, #20
    f05a:	4607      	mov	r7, r0
    f05c:	4689      	mov	r9, r1
    f05e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
    f060:	f007 f8c0 	bl	161e4 <rl_access_check.constprop.1>
    f064:	2800      	cmp	r0, #0
    f066:	f000 8085 	beq.w	f174 <ll_rl_add+0x120>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
    f06a:	f107 0801 	add.w	r8, r7, #1
    f06e:	f10d 020f 	add.w	r2, sp, #15
    f072:	4641      	mov	r1, r8
    f074:	7838      	ldrb	r0, [r7, #0]
    f076:	f7ff fd2b 	bl	ead0 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
    f07a:	2807      	cmp	r0, #7
    f07c:	d97c      	bls.n	f178 <ll_rl_add+0x124>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
    f07e:	f89d 500f 	ldrb.w	r5, [sp, #15]
    f082:	2d07      	cmp	r5, #7
    f084:	d87a      	bhi.n	f17c <ll_rl_add+0x128>
    f086:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f08a:	4c3d      	ldr	r4, [pc, #244]	; (f180 <ll_rl_add+0x12c>)
    f08c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
    f090:	2628      	movs	r6, #40	; 0x28
    f092:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f094:	f10b 0001 	add.w	r0, fp, #1
    f098:	2206      	movs	r2, #6
    f09a:	4641      	mov	r1, r8
    f09c:	4420      	add	r0, r4
    f09e:	f004 f9e1 	bl	13464 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    f0a2:	7839      	ldrb	r1, [r7, #0]
    f0a4:	5da3      	ldrb	r3, [r4, r6]
    f0a6:	19a2      	adds	r2, r4, r6
    f0a8:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f0ac:	4648      	mov	r0, r9
    f0ae:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    f0b0:	9201      	str	r2, [sp, #4]
    f0b2:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f0b4:	f006 fb67 	bl	15786 <mem_nz>
    f0b8:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f0ba:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f0bc:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f0c0:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f0c2:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f0c4:	f006 fb5f 	bl	15786 <mem_nz>
    f0c8:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
    f0ca:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f0cc:	f000 0001 	and.w	r0, r0, #1
    f0d0:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
    f0d4:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f0d8:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
    f0da:	d012      	beq.n	f102 <ll_rl_add+0xae>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
    f0dc:	4b29      	ldr	r3, [pc, #164]	; (f184 <ll_rl_add+0x130>)
    f0de:	7819      	ldrb	r1, [r3, #0]
    f0e0:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    f0e2:	4a29      	ldr	r2, [pc, #164]	; (f188 <ll_rl_add+0x134>)
    f0e4:	5455      	strb	r5, [r2, r1]
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
    f0e6:	1c4a      	adds	r2, r1, #1
    f0e8:	701a      	strb	r2, [r3, #0]
    f0ea:	4b28      	ldr	r3, [pc, #160]	; (f18c <ll_rl_add+0x138>)
    f0ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    f0f0:	f109 0210 	add.w	r2, r9, #16
    f0f4:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
    f0f6:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    f0fa:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    f0fe:	454a      	cmp	r2, r9
    f100:	d1f9      	bne.n	f0f6 <ll_rl_add+0xa2>
	}
	if (rl[i].lirk) {
    f102:	b158      	cbz	r0, f11c <ll_rl_add+0xc8>
		memcpy(rl[i].local_irk, lirk, 16);
    f104:	f10b 0007 	add.w	r0, fp, #7
    f108:	2210      	movs	r2, #16
    f10a:	4651      	mov	r1, sl
    f10c:	4420      	add	r0, r4
    f10e:	f004 f9a9 	bl	13464 <memcpy>
		rl[i].local_rpa = NULL;
    f112:	2328      	movs	r3, #40	; 0x28
    f114:	fb03 4305 	mla	r3, r3, r5, r4
    f118:	2200      	movs	r2, #0
    f11a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0U;
    f11c:	2628      	movs	r6, #40	; 0x28
    f11e:	436e      	muls	r6, r5
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    f120:	f10b 0018 	add.w	r0, fp, #24
    f124:	2206      	movs	r2, #6
    f126:	2100      	movs	r1, #0
    f128:	4420      	add	r0, r4
    f12a:	f004 f9c8 	bl	134be <memset>
	rl[i].rpas_ready = 0U;
    f12e:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0U;
    f130:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    f134:	f36f 1304 	bfc	r3, #4, #1
    f138:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f13a:	2200      	movs	r2, #0
    f13c:	4641      	mov	r1, r8
    f13e:	7838      	ldrb	r0, [r7, #0]
    f140:	f7ff fb1a 	bl	e778 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    f144:	2807      	cmp	r0, #7
    f146:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
    f148:	bf9d      	ittte	ls
    f14a:	4a11      	ldrls	r2, [pc, #68]	; (f190 <ll_rl_add+0x13c>)
		rl[i].wl = 1U;
    f14c:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
    f150:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0U;
    f154:	f36f 1345 	bfchi	r3, #5, #1
    f158:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1U;
    f15a:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
    f15e:	bf98      	it	ls
    f160:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1U;
    f162:	435d      	muls	r5, r3

	return 0;
    f164:	2000      	movs	r0, #0
	rl[i].taken = 1U;
    f166:	5d63      	ldrb	r3, [r4, r5]
    f168:	f043 0301 	orr.w	r3, r3, #1
    f16c:	5563      	strb	r3, [r4, r5]
}
    f16e:	b005      	add	sp, #20
    f170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f174:	200c      	movs	r0, #12
    f176:	e7fa      	b.n	f16e <ll_rl_add+0x11a>
		return BT_HCI_ERR_INVALID_PARAM;
    f178:	2012      	movs	r0, #18
    f17a:	e7f8      	b.n	f16e <ll_rl_add+0x11a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f17c:	2007      	movs	r0, #7
    f17e:	e7f6      	b.n	f16e <ll_rl_add+0x11a>
    f180:	2000189c 	.word	0x2000189c
    f184:	2000218c 	.word	0x2000218c
    f188:	2000218d 	.word	0x2000218d
    f18c:	20002195 	.word	0x20002195
    f190:	20002248 	.word	0x20002248

0000f194 <ll_rl_remove>:

u8_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    f194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f198:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
    f19a:	f007 f823 	bl	161e4 <rl_access_check.constprop.1>
    f19e:	2800      	cmp	r0, #0
    f1a0:	d053      	beq.n	f24a <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f1a2:	f109 0a01 	add.w	sl, r9, #1
    f1a6:	2200      	movs	r2, #0
    f1a8:	4651      	mov	r1, sl
    f1aa:	f899 0000 	ldrb.w	r0, [r9]
    f1ae:	f7ff fc8f 	bl	ead0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f1b2:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f1b4:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
    f1b6:	d84a      	bhi.n	f24e <ll_rl_remove+0xba>
		u8_t j, k;

		if (rl[i].pirk) {
    f1b8:	f04f 0b28 	mov.w	fp, #40	; 0x28
    f1bc:	4c25      	ldr	r4, [pc, #148]	; (f254 <ll_rl_remove+0xc0>)
    f1be:	fb0b f300 	mul.w	r3, fp, r0
    f1c2:	18e2      	adds	r2, r4, r3
    f1c4:	5ce3      	ldrb	r3, [r4, r3]
    f1c6:	075b      	lsls	r3, r3, #29
    f1c8:	d524      	bpl.n	f214 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f1ca:	4e23      	ldr	r6, [pc, #140]	; (f258 <ll_rl_remove+0xc4>)
    f1cc:	7835      	ldrb	r5, [r6, #0]
    f1ce:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    f1d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    f1d4:	d01b      	beq.n	f20e <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f1d6:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
    f1d8:	42af      	cmp	r7, r5
    f1da:	d018      	beq.n	f20e <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    f1dc:	481f      	ldr	r0, [pc, #124]	; (f25c <ll_rl_remove+0xc8>)
    f1de:	2210      	movs	r2, #16
    f1e0:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    f1e4:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    f1e8:	f004 f93c 	bl	13464 <memcpy>
    f1ec:	2300      	movs	r3, #0
				for (k = 0U;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    f1ee:	fb0b f103 	mul.w	r1, fp, r3
    f1f2:	1862      	adds	r2, r4, r1
    f1f4:	5c61      	ldrb	r1, [r4, r1]
    f1f6:	f011 0f01 	tst.w	r1, #1
    f1fa:	b2d8      	uxtb	r0, r3
    f1fc:	d021      	beq.n	f242 <ll_rl_remove+0xae>
    f1fe:	0749      	lsls	r1, r1, #29
    f200:	d51f      	bpl.n	f242 <ll_rl_remove+0xae>
    f202:	7dd1      	ldrb	r1, [r2, #23]
    f204:	42a9      	cmp	r1, r5
    f206:	d11c      	bne.n	f242 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
    f208:	4b15      	ldr	r3, [pc, #84]	; (f260 <ll_rl_remove+0xcc>)
						rl[k].pirk_idx = pi;
    f20a:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
    f20c:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
    f20e:	7833      	ldrb	r3, [r6, #0]
    f210:	3b01      	subs	r3, #1
    f212:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f214:	2200      	movs	r2, #0
    f216:	4651      	mov	r1, sl
    f218:	f899 0000 	ldrb.w	r0, [r9]
    f21c:	f7ff faac 	bl	e778 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    f220:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
    f222:	bf9f      	itttt	ls
    f224:	4b0f      	ldrls	r3, [pc, #60]	; (f264 <ll_rl_remove+0xd0>)
    f226:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
    f22a:	23ff      	movls	r3, #255	; 0xff
    f22c:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0U;
    f22e:	2028      	movs	r0, #40	; 0x28
    f230:	fb00 f008 	mul.w	r0, r0, r8
    f234:	5c23      	ldrb	r3, [r4, r0]
    f236:	f36f 0300 	bfc	r3, #0, #1
    f23a:	5423      	strb	r3, [r4, r0]
		return 0;
    f23c:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    f23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f242:	3301      	adds	r3, #1
				for (k = 0U;
    f244:	2b08      	cmp	r3, #8
    f246:	d1d2      	bne.n	f1ee <ll_rl_remove+0x5a>
    f248:	e7e1      	b.n	f20e <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f24a:	200c      	movs	r0, #12
    f24c:	e7f7      	b.n	f23e <ll_rl_remove+0xaa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f24e:	2002      	movs	r0, #2
    f250:	e7f5      	b.n	f23e <ll_rl_remove+0xaa>
    f252:	bf00      	nop
    f254:	2000189c 	.word	0x2000189c
    f258:	2000218c 	.word	0x2000218c
    f25c:	20002195 	.word	0x20002195
    f260:	2000218d 	.word	0x2000218d
    f264:	20002248 	.word	0x20002248

0000f268 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
    f268:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    f26a:	795c      	ldrb	r4, [r3, #5]
    f26c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    f270:	2c40      	cmp	r4, #64	; 0x40
{
    f272:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    f274:	d117      	bne.n	f2a6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
    f276:	b119      	cbz	r1, f280 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
    f278:	2200      	movs	r2, #0
    f27a:	f7ff fc29 	bl	ead0 <ll_rl_find>
    f27e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    f280:	2a07      	cmp	r2, #7
    f282:	d810      	bhi.n	f2a6 <ll_rl_crpa_set+0x3e>
    f284:	2128      	movs	r1, #40	; 0x28
    f286:	4c08      	ldr	r4, [pc, #32]	; (f2a8 <ll_rl_crpa_set+0x40>)
    f288:	fb01 f302 	mul.w	r3, r1, r2
    f28c:	5ce3      	ldrb	r3, [r4, r3]
    f28e:	07db      	lsls	r3, r3, #31
    f290:	d509      	bpl.n	f2a6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f292:	2018      	movs	r0, #24
    f294:	fb11 0002 	smlabb	r0, r1, r2, r0
    f298:	4420      	add	r0, r4
    f29a:	4629      	mov	r1, r5
    f29c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
    f29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f2a2:	f004 b8df 	b.w	13464 <memcpy>
}
    f2a6:	bd70      	pop	{r4, r5, r6, pc}
    f2a8:	2000189c 	.word	0x2000189c

0000f2ac <ll_rl_crpa_get>:

u8_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
    f2ac:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f2ae:	2200      	movs	r2, #0
{
    f2b0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f2b2:	1c41      	adds	r1, r0, #1
    f2b4:	7800      	ldrb	r0, [r0, #0]
    f2b6:	f7ff fc0b 	bl	ead0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    f2ba:	2807      	cmp	r0, #7
    f2bc:	d901      	bls.n	f2c2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f2be:	2002      	movs	r0, #2
}
    f2c0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    f2c2:	2428      	movs	r4, #40	; 0x28
    f2c4:	2318      	movs	r3, #24
    f2c6:	fb14 3000 	smlabb	r0, r4, r0, r3
    f2ca:	4c07      	ldr	r4, [pc, #28]	; (f2e8 <ll_rl_crpa_get+0x3c>)
    f2cc:	4404      	add	r4, r0
    f2ce:	2106      	movs	r1, #6
    f2d0:	4620      	mov	r0, r4
    f2d2:	f006 fa58 	bl	15786 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    f2d6:	2800      	cmp	r0, #0
    f2d8:	d0f1      	beq.n	f2be <ll_rl_crpa_get+0x12>
    f2da:	2206      	movs	r2, #6
    f2dc:	4621      	mov	r1, r4
    f2de:	4628      	mov	r0, r5
    f2e0:	f004 f8c0 	bl	13464 <memcpy>
			return 0;
    f2e4:	2000      	movs	r0, #0
    f2e6:	e7eb      	b.n	f2c0 <ll_rl_crpa_get+0x14>
    f2e8:	2000189c 	.word	0x2000189c

0000f2ec <ll_rl_lrpa_get>:

u8_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    f2ec:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f2ee:	2200      	movs	r2, #0
{
    f2f0:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f2f2:	1c41      	adds	r1, r0, #1
    f2f4:	7800      	ldrb	r0, [r0, #0]
    f2f6:	f7ff fbeb 	bl	ead0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f2fa:	2807      	cmp	r0, #7
    f2fc:	d80a      	bhi.n	f314 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
    f2fe:	4b06      	ldr	r3, [pc, #24]	; (f318 <ll_rl_lrpa_get+0x2c>)
    f300:	2228      	movs	r2, #40	; 0x28
    f302:	fb02 3000 	mla	r0, r2, r0, r3
    f306:	2206      	movs	r2, #6
    f308:	6a41      	ldr	r1, [r0, #36]	; 0x24
    f30a:	4620      	mov	r0, r4
    f30c:	f004 f8aa 	bl	13464 <memcpy>
		return 0;
    f310:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    f312:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f314:	2002      	movs	r0, #2
    f316:	e7fc      	b.n	f312 <ll_rl_lrpa_get+0x26>
    f318:	2000189c 	.word	0x2000189c

0000f31c <ll_rl_enable>:

u8_t ll_rl_enable(u8_t enable)
{
    f31c:	b510      	push	{r4, lr}
    f31e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    f320:	f006 ff60 	bl	161e4 <rl_access_check.constprop.1>
    f324:	b160      	cbz	r0, f340 <ll_rl_enable+0x24>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    f326:	b11c      	cbz	r4, f330 <ll_rl_enable+0x14>
    f328:	2c01      	cmp	r4, #1
    f32a:	d005      	beq.n	f338 <ll_rl_enable+0x1c>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1U;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    f32c:	2412      	movs	r4, #18
    f32e:	e001      	b.n	f334 <ll_rl_enable+0x18>
		rl_enable = 0U;
    f330:	4b04      	ldr	r3, [pc, #16]	; (f344 <ll_rl_enable+0x28>)
    f332:	701c      	strb	r4, [r3, #0]
	}

	return 0;
}
    f334:	4620      	mov	r0, r4
    f336:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
    f338:	4b02      	ldr	r3, [pc, #8]	; (f344 <ll_rl_enable+0x28>)
    f33a:	701c      	strb	r4, [r3, #0]
	return 0;
    f33c:	2400      	movs	r4, #0
		break;
    f33e:	e7f9      	b.n	f334 <ll_rl_enable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f340:	240c      	movs	r4, #12
    f342:	e7f7      	b.n	f334 <ll_rl_enable+0x18>
    f344:	20002215 	.word	0x20002215

0000f348 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000U;
    f348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f34c:	4358      	muls	r0, r3
    f34e:	4b01      	ldr	r3, [pc, #4]	; (f354 <ll_rl_timeout_set+0xc>)
    f350:	6018      	str	r0, [r3, #0]
}
    f352:	4770      	bx	lr
    f354:	200019dc 	.word	0x200019dc

0000f358 <ll_priv_mode_set>:

u8_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    f358:	b538      	push	{r3, r4, r5, lr}
    f35a:	4605      	mov	r5, r0
    f35c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
    f35e:	f006 ff41 	bl	161e4 <rl_access_check.constprop.1>
    f362:	b1e8      	cbz	r0, f3a0 <ll_priv_mode_set+0x48>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f364:	2200      	movs	r2, #0
    f366:	1c69      	adds	r1, r5, #1
    f368:	7828      	ldrb	r0, [r5, #0]
    f36a:	f7ff fbb1 	bl	ead0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f36e:	2807      	cmp	r0, #7
    f370:	d818      	bhi.n	f3a4 <ll_priv_mode_set+0x4c>
		switch (mode) {
    f372:	b11c      	cbz	r4, f37c <ll_priv_mode_set+0x24>
    f374:	2c01      	cmp	r4, #1
    f376:	d00a      	beq.n	f38e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1U;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    f378:	2412      	movs	r4, #18
    f37a:	e006      	b.n	f38a <ll_priv_mode_set+0x32>
			rl[i].dev = 0U;
    f37c:	2328      	movs	r3, #40	; 0x28
    f37e:	4a0a      	ldr	r2, [pc, #40]	; (f3a8 <ll_priv_mode_set+0x50>)
    f380:	4358      	muls	r0, r3
    f382:	5c13      	ldrb	r3, [r2, r0]
    f384:	f364 1304 	bfi	r3, r4, #4, #1
    f388:	5413      	strb	r3, [r2, r0]
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
    f38a:	4620      	mov	r0, r4
    f38c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1U;
    f38e:	2328      	movs	r3, #40	; 0x28
    f390:	4a05      	ldr	r2, [pc, #20]	; (f3a8 <ll_priv_mode_set+0x50>)
    f392:	4358      	muls	r0, r3
	return 0;
    f394:	2400      	movs	r4, #0
			rl[i].dev = 1U;
    f396:	5c13      	ldrb	r3, [r2, r0]
    f398:	f043 0310 	orr.w	r3, r3, #16
    f39c:	5413      	strb	r3, [r2, r0]
			break;
    f39e:	e7f4      	b.n	f38a <ll_priv_mode_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f3a0:	240c      	movs	r4, #12
    f3a2:	e7f2      	b.n	f38a <ll_priv_mode_set+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f3a4:	2402      	movs	r4, #2
    f3a6:	e7f0      	b.n	f38a <ll_priv_mode_set+0x32>
    f3a8:	2000189c 	.word	0x2000189c

0000f3ac <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
    f3ac:	4a39      	ldr	r2, [pc, #228]	; (f494 <ll_filter_reset+0xe8>)
    f3ae:	2300      	movs	r3, #0
{
    f3b0:	b430      	push	{r4, r5}
	wl_anon = 0U;
    f3b2:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0U;
    f3b4:	4a38      	ldr	r2, [pc, #224]	; (f498 <ll_filter_reset+0xec>)
    f3b6:	7811      	ldrb	r1, [r2, #0]
    f3b8:	f363 0100 	bfi	r1, r3, #0, #1
    f3bc:	7011      	strb	r1, [r2, #0]
    f3be:	7a11      	ldrb	r1, [r2, #8]
    f3c0:	f363 0100 	bfi	r1, r3, #0, #1
    f3c4:	7211      	strb	r1, [r2, #8]
    f3c6:	7c11      	ldrb	r1, [r2, #16]
    f3c8:	f363 0100 	bfi	r1, r3, #0, #1
    f3cc:	7411      	strb	r1, [r2, #16]
    f3ce:	7e11      	ldrb	r1, [r2, #24]
    f3d0:	f363 0100 	bfi	r1, r3, #0, #1
    f3d4:	7611      	strb	r1, [r2, #24]
    f3d6:	f892 1020 	ldrb.w	r1, [r2, #32]
    f3da:	f363 0100 	bfi	r1, r3, #0, #1
    f3de:	f882 1020 	strb.w	r1, [r2, #32]
    f3e2:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
    f3e6:	f363 0100 	bfi	r1, r3, #0, #1
    f3ea:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    f3ee:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    f3f2:	f363 0100 	bfi	r1, r3, #0, #1
    f3f6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    f3fa:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
    f3fe:	f363 0100 	bfi	r1, r3, #0, #1
    f402:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0U;
    f406:	4a25      	ldr	r2, [pc, #148]	; (f49c <ll_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    f408:	4925      	ldr	r1, [pc, #148]	; (f4a0 <ll_filter_reset+0xf4>)
	rl_enable = 0U;
    f40a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    f40c:	4a25      	ldr	r2, [pc, #148]	; (f4a4 <ll_filter_reset+0xf8>)
    f40e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
    f410:	4a25      	ldr	r2, [pc, #148]	; (f4a8 <ll_filter_reset+0xfc>)
    f412:	f04f 34ff 	mov.w	r4, #4294967295
    f416:	f04f 35ff 	mov.w	r5, #4294967295
    f41a:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0U;
    f41e:	4a23      	ldr	r2, [pc, #140]	; (f4ac <ll_filter_reset+0x100>)
    f420:	7811      	ldrb	r1, [r2, #0]
    f422:	f363 0100 	bfi	r1, r3, #0, #1
    f426:	7011      	strb	r1, [r2, #0]
    f428:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
    f42c:	f363 0100 	bfi	r1, r3, #0, #1
    f430:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    f434:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
    f438:	f363 0100 	bfi	r1, r3, #0, #1
    f43c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    f440:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
    f444:	f363 0100 	bfi	r1, r3, #0, #1
    f448:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
    f44c:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
    f450:	f363 0100 	bfi	r1, r3, #0, #1
    f454:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
    f458:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
    f45c:	f363 0100 	bfi	r1, r3, #0, #1
    f460:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
    f464:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
    f468:	f363 0100 	bfi	r1, r3, #0, #1
    f46c:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
    f470:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
    f474:	f363 0100 	bfi	r1, r3, #0, #1
    f478:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0U;
    f47c:	4a0c      	ldr	r2, [pc, #48]	; (f4b0 <ll_filter_reset+0x104>)
    f47e:	7013      	strb	r3, [r2, #0]
	rl_clear();
	if (init) {
    f480:	b120      	cbz	r0, f48c <ll_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    f482:	490c      	ldr	r1, [pc, #48]	; (f4b4 <ll_filter_reset+0x108>)
    f484:	480c      	ldr	r0, [pc, #48]	; (f4b8 <ll_filter_reset+0x10c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    f486:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    f488:	f007 bd9c 	b.w	16fc4 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
    f48c:	480a      	ldr	r0, [pc, #40]	; (f4b8 <ll_filter_reset+0x10c>)
}
    f48e:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
    f490:	f007 bda0 	b.w	16fd4 <k_delayed_work_cancel>
    f494:	20002288 	.word	0x20002288
    f498:	20002248 	.word	0x20002248
    f49c:	20002215 	.word	0x20002215
    f4a0:	000dbba0 	.word	0x000dbba0
    f4a4:	200019dc 	.word	0x200019dc
    f4a8:	20000008 	.word	0x20000008
    f4ac:	2000189c 	.word	0x2000189c
    f4b0:	2000218c 	.word	0x2000218c
    f4b4:	0000ef95 	.word	0x0000ef95
    f4b8:	200019e0 	.word	0x200019e0

0000f4bc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f4bc:	4b05      	ldr	r3, [pc, #20]	; (f4d4 <cntr_init+0x18>)
    f4be:	2200      	movs	r2, #0
    f4c0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    f4c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f4c8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
    f4cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
    f4d0:	4770      	bx	lr
    f4d2:	bf00      	nop
    f4d4:	4000b000 	.word	0x4000b000

0000f4d8 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    f4d8:	4a04      	ldr	r2, [pc, #16]	; (f4ec <cntr_start+0x14>)
    f4da:	7813      	ldrb	r3, [r2, #0]
    f4dc:	1c59      	adds	r1, r3, #1
    f4de:	7011      	strb	r1, [r2, #0]
    f4e0:	2001      	movs	r0, #1
    f4e2:	b913      	cbnz	r3, f4ea <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f4e4:	4a02      	ldr	r2, [pc, #8]	; (f4f0 <cntr_start+0x18>)
    f4e6:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    f4e8:	4618      	mov	r0, r3
}
    f4ea:	4770      	bx	lr
    f4ec:	200022bb 	.word	0x200022bb
    f4f0:	4000b000 	.word	0x4000b000

0000f4f4 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f4f4:	4b09      	ldr	r3, [pc, #36]	; (f51c <cntr_stop+0x28>)
    f4f6:	7818      	ldrb	r0, [r3, #0]
    f4f8:	b928      	cbnz	r0, f506 <cntr_stop+0x12>
    f4fa:	4040      	eors	r0, r0
    f4fc:	f380 8811 	msr	BASEPRI, r0
    f500:	f04f 0003 	mov.w	r0, #3
    f504:	df02      	svc	2

	if (--_refcount) {
    f506:	3801      	subs	r0, #1
    f508:	b2c0      	uxtb	r0, r0
    f50a:	7018      	strb	r0, [r3, #0]
    f50c:	2301      	movs	r3, #1
    f50e:	b910      	cbnz	r0, f516 <cntr_stop+0x22>
    f510:	4a03      	ldr	r2, [pc, #12]	; (f520 <cntr_stop+0x2c>)
    f512:	6013      	str	r3, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
    f514:	4770      	bx	lr
		return 1;
    f516:	4618      	mov	r0, r3
}
    f518:	4770      	bx	lr
    f51a:	bf00      	nop
    f51c:	200022bb 	.word	0x200022bb
    f520:	4000b004 	.word	0x4000b004

0000f524 <cntr_cnt_get>:
     return p_reg->COUNTER;
    f524:	4b01      	ldr	r3, [pc, #4]	; (f52c <cntr_cnt_get+0x8>)
    f526:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    f52a:	4770      	bx	lr
    f52c:	4000b000 	.word	0x4000b000

0000f530 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
    f530:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f534:	4b01      	ldr	r3, [pc, #4]	; (f53c <cntr_cmp_set+0xc>)
    f536:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
    f53a:	4770      	bx	lr
    f53c:	4000b000 	.word	0x4000b000

0000f540 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f540:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f542:	4b13      	ldr	r3, [pc, #76]	; (f590 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f544:	4c13      	ldr	r4, [pc, #76]	; (f594 <do_ecb+0x54>)
    f546:	2501      	movs	r5, #1
{
    f548:	4684      	mov	ip, r0
    f54a:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
    f54c:	2700      	movs	r7, #0
    f54e:	46a6      	mov	lr, r4
    f550:	461a      	mov	r2, r3
    f552:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f554:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f558:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f55c:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    f560:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f562:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    f566:	b931      	cbnz	r1, f576 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f568:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f56c:	b919      	cbnz	r1, f576 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f56e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f572:	2900      	cmp	r1, #0
    f574:	d1f5      	bne.n	f562 <do_ecb+0x22>
    f576:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f57a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    f57e:	2900      	cmp	r1, #0
    f580:	d1e7      	bne.n	f552 <do_ecb+0x12>
    f582:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    f586:	2800      	cmp	r0, #0
    f588:	d0e3      	beq.n	f552 <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
    f58a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    f58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f590:	4000e000 	.word	0x4000e000
    f594:	4000e004 	.word	0x4000e004

0000f598 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
    f598:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
    f59a:	4b08      	ldr	r3, [pc, #32]	; (f5bc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    f59c:	bf14      	ite	ne
    f59e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
    f5a2:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    f5a6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
    f5aa:	bf14      	ite	ne
    f5ac:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
    f5b0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
    f5b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
    f5b8:	4770      	bx	lr
    f5ba:	bf00      	nop
    f5bc:	4001f000 	.word	0x4001f000

0000f5c0 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    f5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    f5c2:	4e2d      	ldr	r6, [pc, #180]	; (f678 <sw_switch.isra.10+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    f5c4:	4f2d      	ldr	r7, [pc, #180]	; (f67c <sw_switch.isra.10+0xbc>)
    f5c6:	7835      	ldrb	r5, [r6, #0]
    f5c8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; f688 <sw_switch.isra.10+0xc8>
    f5cc:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
    f5d0:	b22b      	sxth	r3, r5
    f5d2:	00dc      	lsls	r4, r3, #3
    f5d4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    f5d8:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    f5dc:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    f5e0:	f105 040b 	add.w	r4, r5, #11
    f5e4:	b2e4      	uxtb	r4, r4
    f5e6:	00e4      	lsls	r4, r4, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));

	nrf_ppi_event_endpoint_setup(ppi,
    f5e8:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    f5ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    f5f0:	3fc0      	subs	r7, #192	; 0xc0
    f5f2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    f5f6:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    f5fa:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));

	if (dir) {
    f5fe:	2800      	cmp	r0, #0
    f600:	d034      	beq.n	f66c <sw_switch.isra.10+0xac>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52810_TXEN_TXIDLE_TX_1M_NS;
    f602:	f649 4040 	movw	r0, #40000	; 0x9c40
    f606:	f24a 075a 	movw	r7, #41050	; 0xa05a
    f60a:	2a02      	cmp	r2, #2
    f60c:	bf0c      	ite	eq
    f60e:	4602      	moveq	r2, r0
    f610:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52810_RX_CHAIN_DELAY_1M_NS;
    f612:	f241 504a 	movw	r0, #5450	; 0x154a
    f616:	f242 47b8 	movw	r7, #9400	; 0x24b8
    f61a:	2902      	cmp	r1, #2
    f61c:	bf18      	it	ne
    f61e:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    f620:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    f624:	4401      	add	r1, r0
    f626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f62a:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    f62e:	4a14      	ldr	r2, [pc, #80]	; (f680 <sw_switch.isra.10+0xc0>)
    f630:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    f634:	009b      	lsls	r3, r3, #2
    f636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f63a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    f63e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    f642:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
    f644:	bf8b      	itete	hi
    f646:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    f64a:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
    f64c:	1a51      	subhi	r1, r2, r1
    f64e:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
    f652:	bf88      	it	hi
    f654:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
    f658:	4b08      	ldr	r3, [pc, #32]	; (f67c <sw_switch.isra.10+0xbc>)
    f65a:	f44f 6290 	mov.w	r2, #1152	; 0x480
    f65e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
    f662:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    f664:	f003 0301 	and.w	r3, r3, #1
    f668:	7033      	strb	r3, [r6, #0]
}
    f66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    f66c:	4a05      	ldr	r2, [pc, #20]	; (f684 <sw_switch.isra.10+0xc4>)
    f66e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    f672:	212d      	movs	r1, #45	; 0x2d
    f674:	e7de      	b.n	f634 <sw_switch.isra.10+0x74>
    f676:	bf00      	nop
    f678:	200022bc 	.word	0x200022bc
    f67c:	4001f000 	.word	0x4001f000
    f680:	40001000 	.word	0x40001000
    f684:	40001004 	.word	0x40001004
    f688:	4000110c 	.word	0x4000110c

0000f68c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
    f68c:	4b04      	ldr	r3, [pc, #16]	; (f6a0 <isr_radio+0x14>)
    f68e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
    f692:	b123      	cbz	r3, f69e <isr_radio+0x12>
		isr_cb(isr_cb_param);
    f694:	4b03      	ldr	r3, [pc, #12]	; (f6a4 <isr_radio+0x18>)
    f696:	4a04      	ldr	r2, [pc, #16]	; (f6a8 <isr_radio+0x1c>)
    f698:	681b      	ldr	r3, [r3, #0]
    f69a:	6810      	ldr	r0, [r2, #0]
    f69c:	4718      	bx	r3
}
    f69e:	4770      	bx	lr
    f6a0:	40001000 	.word	0x40001000
    f6a4:	20001c18 	.word	0x20001c18
    f6a8:	20001c1c 	.word	0x20001c1c

0000f6ac <radio_isr_set>:
{
    f6ac:	b538      	push	{r3, r4, r5, lr}
    f6ae:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
    f6b0:	2001      	movs	r0, #1
{
    f6b2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
    f6b4:	f7f5 fd8e 	bl	51d4 <z_arch_irq_disable>
	isr_cb_param = param;
    f6b8:	4b08      	ldr	r3, [pc, #32]	; (f6dc <radio_isr_set+0x30>)
    f6ba:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
    f6bc:	4b08      	ldr	r3, [pc, #32]	; (f6e0 <radio_isr_set+0x34>)
    f6be:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t int_mask)
{
    NRF_RADIO->INTENSET = int_mask;
    f6c0:	4b08      	ldr	r3, [pc, #32]	; (f6e4 <radio_isr_set+0x38>)
    f6c2:	2210      	movs	r2, #16
    f6c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f6c8:	4b07      	ldr	r3, [pc, #28]	; (f6e8 <radio_isr_set+0x3c>)
    f6ca:	2202      	movs	r2, #2
    f6cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    f6d0:	2001      	movs	r0, #1
}
    f6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
    f6d6:	f7f5 bd6d 	b.w	51b4 <z_arch_irq_enable>
    f6da:	bf00      	nop
    f6dc:	20001c1c 	.word	0x20001c1c
    f6e0:	20001c18 	.word	0x20001c18
    f6e4:	40001000 	.word	0x40001000
    f6e8:	e000e100 	.word	0xe000e100

0000f6ec <radio_reset>:
{
    f6ec:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f6ee:	2001      	movs	r0, #1
    f6f0:	f7f5 fd70 	bl	51d4 <z_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
    f6f4:	4b03      	ldr	r3, [pc, #12]	; (f704 <radio_reset+0x18>)
    f6f6:	2200      	movs	r2, #0
    f6f8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f6fc:	2201      	movs	r2, #1
    f6fe:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
}
    f702:	bd08      	pop	{r3, pc}
    f704:	40001000 	.word	0x40001000

0000f708 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f708:	4b06      	ldr	r3, [pc, #24]	; (f724 <radio_phy_set+0x1c>)
	switch (phy) {
    f70a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f70c:	bf0c      	ite	eq
    f70e:	2204      	moveq	r2, #4
    f710:	2203      	movne	r2, #3
    f712:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    f716:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    f71a:	f042 0201 	orr.w	r2, r2, #1
    f71e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
    f722:	4770      	bx	lr
    f724:	40001000 	.word	0x40001000

0000f728 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    f728:	4b01      	ldr	r3, [pc, #4]	; (f730 <radio_tx_power_set+0x8>)
    f72a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    f72e:	4770      	bx	lr
    f730:	40001000 	.word	0x40001000

0000f734 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    f734:	4b01      	ldr	r3, [pc, #4]	; (f73c <radio_freq_chan_set+0x8>)
    f736:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    f73a:	4770      	bx	lr
    f73c:	40001000 	.word	0x40001000

0000f740 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    f740:	4b07      	ldr	r3, [pc, #28]	; (f760 <radio_whiten_iv_set+0x20>)
    f742:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f746:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f74a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f74e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f752:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f756:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f75a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    f75e:	4770      	bx	lr
    f760:	40001000 	.word	0x40001000

0000f764 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    f764:	4a0a      	ldr	r2, [pc, #40]	; (f790 <radio_aa_set+0x2c>)
    f766:	2300      	movs	r3, #0
    f768:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    f76c:	2301      	movs	r3, #1
    f76e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    f772:	78c3      	ldrb	r3, [r0, #3]
    f774:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f778:	7843      	ldrb	r3, [r0, #1]
    f77a:	7881      	ldrb	r1, [r0, #2]
    f77c:	041b      	lsls	r3, r3, #16
    f77e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f782:	7801      	ldrb	r1, [r0, #0]
    f784:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f788:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    f78c:	4770      	bx	lr
    f78e:	bf00      	nop
    f790:	40001000 	.word	0x40001000

0000f794 <radio_pkt_configure>:
	switch (phy) {
    f794:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f798:	2b02      	cmp	r3, #2
{
    f79a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f79c:	bf0c      	ite	eq
    f79e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    f7a2:	2400      	movne	r4, #0
	if (dc) {
    f7a4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f7a6:	f1c0 0308 	rsb	r3, r0, #8
    f7aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f7ae:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    f7b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f7b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f7ba:	4a0b      	ldr	r2, [pc, #44]	; (f7e8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    f7bc:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f7c0:	bf48      	it	mi
    f7c2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    f7c6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f7c8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f7cc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f7d0:	4b06      	ldr	r3, [pc, #24]	; (f7ec <radio_pkt_configure+0x58>)
    f7d2:	4003      	ands	r3, r0
    f7d4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f7d8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f7dc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    f7e0:	4319      	orrs	r1, r3
    f7e2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
    f7e6:	bd10      	pop	{r4, pc}
    f7e8:	40001000 	.word	0x40001000
    f7ec:	fef80000 	.word	0xfef80000

0000f7f0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f7f0:	4b01      	ldr	r3, [pc, #4]	; (f7f8 <radio_pkt_rx_set+0x8>)
    f7f2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    f7f6:	4770      	bx	lr
    f7f8:	40001000 	.word	0x40001000

0000f7fc <radio_pkt_tx_set>:
    f7fc:	4b01      	ldr	r3, [pc, #4]	; (f804 <radio_pkt_tx_set+0x8>)
    f7fe:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f802:	4770      	bx	lr
    f804:	40001000 	.word	0x40001000

0000f808 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + (uint32_t)task)) = 0x1UL;
    f808:	4b01      	ldr	r3, [pc, #4]	; (f810 <radio_rx_enable+0x8>)
    f80a:	2201      	movs	r2, #1
    f80c:	601a      	str	r2, [r3, #0]
}
    f80e:	4770      	bx	lr
    f810:	40001004 	.word	0x40001004

0000f814 <radio_tx_enable>:
    f814:	4b01      	ldr	r3, [pc, #4]	; (f81c <radio_tx_enable+0x8>)
    f816:	2201      	movs	r2, #1
    f818:	601a      	str	r2, [r3, #0]
}
    f81a:	4770      	bx	lr
    f81c:	40001000 	.word	0x40001000

0000f820 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
    f820:	4a07      	ldr	r2, [pc, #28]	; (f840 <radio_disable+0x20>)
    f822:	f44f 6390 	mov.w	r3, #1152	; 0x480
    f826:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    f82a:	2301      	movs	r3, #1
    f82c:	6053      	str	r3, [r2, #4]
    f82e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    f830:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    f834:	2100      	movs	r1, #0
    f836:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    f83a:	6113      	str	r3, [r2, #16]
}
    f83c:	4770      	bx	lr
    f83e:	bf00      	nop
    f840:	4001f000 	.word	0x4001f000

0000f844 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    f844:	4b04      	ldr	r3, [pc, #16]	; (f858 <radio_status_reset+0x14>)
    f846:	2200      	movs	r2, #0
    f848:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    f84c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f850:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    f854:	4770      	bx	lr
    f856:	bf00      	nop
    f858:	40001000 	.word	0x40001000

0000f85c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    f85c:	4b03      	ldr	r3, [pc, #12]	; (f86c <radio_is_ready+0x10>)
    f85e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f862:	3000      	adds	r0, #0
    f864:	bf18      	it	ne
    f866:	2001      	movne	r0, #1
    f868:	4770      	bx	lr
    f86a:	bf00      	nop
    f86c:	40001000 	.word	0x40001000

0000f870 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    f870:	4b03      	ldr	r3, [pc, #12]	; (f880 <radio_is_done+0x10>)
    f872:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f876:	3000      	adds	r0, #0
    f878:	bf18      	it	ne
    f87a:	2001      	movne	r0, #1
    f87c:	4770      	bx	lr
    f87e:	bf00      	nop
    f880:	40001000 	.word	0x40001000

0000f884 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    f884:	4b03      	ldr	r3, [pc, #12]	; (f894 <radio_is_idle+0x10>)
    f886:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f88a:	fab0 f080 	clz	r0, r0
    f88e:	0940      	lsrs	r0, r0, #5
    f890:	4770      	bx	lr
    f892:	bf00      	nop
    f894:	40001000 	.word	0x40001000

0000f898 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    f898:	4b04      	ldr	r3, [pc, #16]	; (f8ac <radio_crc_configure+0x14>)
    f89a:	f240 1203 	movw	r2, #259	; 0x103
    f89e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    f8a2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f8a6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    f8aa:	4770      	bx	lr
    f8ac:	40001000 	.word	0x40001000

0000f8b0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    f8b0:	4b03      	ldr	r3, [pc, #12]	; (f8c0 <radio_crc_is_valid+0x10>)
    f8b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f8b6:	3000      	adds	r0, #0
    f8b8:	bf18      	it	ne
    f8ba:	2001      	movne	r0, #1
    f8bc:	4770      	bx	lr
    f8be:	bf00      	nop
    f8c0:	40001000 	.word	0x40001000

0000f8c4 <radio_pkt_empty_get>:
}
    f8c4:	4800      	ldr	r0, [pc, #0]	; (f8c8 <radio_pkt_empty_get+0x4>)
    f8c6:	4770      	bx	lr
    f8c8:	20001b10 	.word	0x20001b10

0000f8cc <radio_pkt_scratch_get>:
}
    f8cc:	4800      	ldr	r0, [pc, #0]	; (f8d0 <radio_pkt_scratch_get+0x4>)
    f8ce:	4770      	bx	lr
    f8d0:	20001b14 	.word	0x20001b14

0000f8d4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f8d4:	4b04      	ldr	r3, [pc, #16]	; (f8e8 <radio_switch_complete_and_rx+0x14>)
    f8d6:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    f8d8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f8da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    f8de:	4602      	mov	r2, r0
    f8e0:	4608      	mov	r0, r1
    f8e2:	f7ff be6d 	b.w	f5c0 <sw_switch.isra.10>
    f8e6:	bf00      	nop
    f8e8:	40001000 	.word	0x40001000

0000f8ec <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f8ec:	4b03      	ldr	r3, [pc, #12]	; (f8fc <radio_switch_complete_and_tx+0x10>)
    f8ee:	2103      	movs	r1, #3
    f8f0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    f8f4:	4601      	mov	r1, r0
    f8f6:	2001      	movs	r0, #1
    f8f8:	f7ff be62 	b.w	f5c0 <sw_switch.isra.10>
    f8fc:	40001000 	.word	0x40001000

0000f900 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f900:	4b05      	ldr	r3, [pc, #20]	; (f918 <radio_switch_complete_and_disable+0x18>)
    f902:	2203      	movs	r2, #3
    f904:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
    f908:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    f90c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    f910:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(BIT(HAL_SW_SWITCH_TIMER_CLEAR_PPI) |
				 BIT(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI));
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    f914:	4770      	bx	lr
    f916:	bf00      	nop
    f918:	40001000 	.word	0x40001000

0000f91c <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f91c:	4a03      	ldr	r2, [pc, #12]	; (f92c <radio_rssi_measure+0x10>)
    f91e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f922:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f926:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    f92a:	4770      	bx	lr
    f92c:	40001000 	.word	0x40001000

0000f930 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f930:	4b01      	ldr	r3, [pc, #4]	; (f938 <radio_rssi_get+0x8>)
    f932:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f936:	4770      	bx	lr
    f938:	40001000 	.word	0x40001000

0000f93c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f93c:	4b02      	ldr	r3, [pc, #8]	; (f948 <radio_rssi_status_reset+0xc>)
    f93e:	2200      	movs	r2, #0
    f940:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	40001000 	.word	0x40001000

0000f94c <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f94c:	4b03      	ldr	r3, [pc, #12]	; (f95c <radio_rssi_is_ready+0x10>)
    f94e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f952:	3000      	adds	r0, #0
    f954:	bf18      	it	ne
    f956:	2001      	movne	r0, #1
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	40001000 	.word	0x40001000

0000f960 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f960:	b530      	push	{r4, r5, lr}
    f962:	2400      	movs	r4, #0
    f964:	00a3      	lsls	r3, r4, #2
    f966:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    f96e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f970:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    f974:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f976:	8895      	ldrh	r5, [r2, #4]
    f978:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
    f97c:	2c08      	cmp	r4, #8
		bdaddr += 6;
    f97e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
    f982:	d1ef      	bne.n	f964 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f984:	4b02      	ldr	r3, [pc, #8]	; (f990 <radio_filter_configure+0x30>)
    f986:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f98a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f98e:	bd30      	pop	{r4, r5, pc}
    f990:	40001000 	.word	0x40001000

0000f994 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f994:	4a03      	ldr	r2, [pc, #12]	; (f9a4 <radio_filter_disable+0x10>)
    f996:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f99a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f99e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
    f9a2:	4770      	bx	lr
    f9a4:	40001000 	.word	0x40001000

0000f9a8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f9a8:	4b02      	ldr	r3, [pc, #8]	; (f9b4 <radio_filter_status_reset+0xc>)
    f9aa:	2200      	movs	r2, #0
    f9ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    f9b0:	4770      	bx	lr
    f9b2:	bf00      	nop
    f9b4:	40001000 	.word	0x40001000

0000f9b8 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f9b8:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <radio_filter_has_match+0x10>)
    f9ba:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f9be:	3000      	adds	r0, #0
    f9c0:	bf18      	it	ne
    f9c2:	2001      	movne	r0, #1
    f9c4:	4770      	bx	lr
    f9c6:	bf00      	nop
    f9c8:	40001000 	.word	0x40001000

0000f9cc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f9cc:	4b01      	ldr	r3, [pc, #4]	; (f9d4 <radio_filter_match_get+0x8>)
    f9ce:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f9d2:	4770      	bx	lr
    f9d4:	40001000 	.word	0x40001000

0000f9d8 <radio_bc_configure>:
    NRF_RADIO->BCC = radio_bcc;
    f9d8:	4b04      	ldr	r3, [pc, #16]	; (f9ec <radio_bc_configure+0x14>)
    f9da:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f9de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f9e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f9e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    f9ea:	4770      	bx	lr
    f9ec:	40001000 	.word	0x40001000

0000f9f0 <radio_tmr_status_reset>:
}

__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    f9f0:	4b05      	ldr	r3, [pc, #20]	; (fa08 <radio_tmr_status_reset+0x18>)
    f9f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    f9f6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    f9fa:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    f9fe:	4a03      	ldr	r2, [pc, #12]	; (fa0c <radio_tmr_status_reset+0x1c>)
    fa00:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
    fa04:	4770      	bx	lr
    fa06:	bf00      	nop
    fa08:	4000b000 	.word	0x4000b000
    fa0c:	0e700060 	.word	0x0e700060

0000fa10 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
    fa10:	4b03      	ldr	r3, [pc, #12]	; (fa20 <radio_tmr_tifs_set+0x10>)
    fa12:	4a04      	ldr	r2, [pc, #16]	; (fa24 <radio_tmr_tifs_set+0x14>)
    fa14:	781b      	ldrb	r3, [r3, #0]
    fa16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    fa1a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    fa1e:	4770      	bx	lr
    fa20:	200022bc 	.word	0x200022bc
    fa24:	40009000 	.word	0x40009000

0000fa28 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    fa2a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    fa2e:	4c33      	ldr	r4, [pc, #204]	; (fafc <radio_tmr_start+0xd4>)
    fa30:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    fa34:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    fa36:	bf88      	it	hi
    fa38:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fa3c:	4b30      	ldr	r3, [pc, #192]	; (fb00 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
    fa3e:	4c31      	ldr	r4, [pc, #196]	; (fb04 <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
    fa40:	bf84      	itt	hi
    fa42:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
    fa46:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
    fa4a:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
    fa4e:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
    fa52:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
    fa56:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    fa5a:	f04f 0202 	mov.w	r2, #2
    fa5e:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
    fa60:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
    fa64:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    fa68:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
    fa6c:	4a26      	ldr	r2, [pc, #152]	; (fb08 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
    fa6e:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
    fa72:	bf88      	it	hi
    fa74:	f101 31ff 	addhi.w	r1, r1, #4294967295
    fa78:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
    fa7c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    fa80:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    fa84:	4921      	ldr	r1, [pc, #132]	; (fb0c <radio_tmr_start+0xe4>)
    fa86:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
    fa8a:	3b0c      	subs	r3, #12
    fa8c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    fa90:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
    fa94:	2320      	movs	r3, #32
    fa96:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    fa9a:	f7ff fd7d 	bl	f598 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
    fa9e:	4b1c      	ldr	r3, [pc, #112]	; (fb10 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    faa0:	4a1c      	ldr	r2, [pc, #112]	; (fb14 <radio_tmr_start+0xec>)
    faa2:	6015      	str	r5, [r2, #0]
    faa4:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    faa8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    faac:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    fab0:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    fab2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    fab6:	3b74      	subs	r3, #116	; 0x74
    fab8:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
    fabc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    fac0:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    fac2:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    fac6:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    faca:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    face:	33c4      	adds	r3, #196	; 0xc4
    fad0:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    fad4:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    fad8:	3bc0      	subs	r3, #192	; 0xc0
    fada:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    fade:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    fae2:	33c8      	adds	r3, #200	; 0xc8
    fae4:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    fae8:	f44f 6310 	mov.w	r3, #2304	; 0x900
    faec:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    faf0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    faf4:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_1_INCLUDE;
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_SOC_NRF52840 */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    faf8:	4620      	mov	r0, r4
    fafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fafc:	7ff0bdbf 	.word	0x7ff0bdbf
    fb00:	4000800c 	.word	0x4000800c
    fb04:	000f4240 	.word	0x000f4240
    fb08:	4000b000 	.word	0x4000b000
    fb0c:	4001f000 	.word	0x4001f000
    fb10:	40009000 	.word	0x40009000
    fb14:	4000900c 	.word	0x4000900c

0000fb18 <radio_tmr_stop>:
    fb18:	4a04      	ldr	r2, [pc, #16]	; (fb2c <radio_tmr_stop+0x14>)
    fb1a:	2301      	movs	r3, #1
    fb1c:	6013      	str	r3, [r2, #0]
    fb1e:	60d3      	str	r3, [r2, #12]
    fb20:	320c      	adds	r2, #12
    fb22:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
    fb26:	6013      	str	r3, [r2, #0]
    fb28:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    fb2a:	4770      	bx	lr
    fb2c:	40008004 	.word	0x40008004

0000fb30 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
    fb30:	4b04      	ldr	r3, [pc, #16]	; (fb44 <radio_tmr_hcto_configure+0x14>)
    fb32:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
    fb36:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    fb3a:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
    fb3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
				BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
    fb42:	4770      	bx	lr
    fb44:	40008000 	.word	0x40008000

0000fb48 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    fb48:	4b06      	ldr	r3, [pc, #24]	; (fb64 <radio_tmr_aa_capture+0x1c>)
    fb4a:	4a07      	ldr	r2, [pc, #28]	; (fb68 <radio_tmr_aa_capture+0x20>)
    fb4c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    fb50:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fb54:	3240      	adds	r2, #64	; 0x40
    fb56:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
    fb5a:	4a04      	ldr	r2, [pc, #16]	; (fb6c <radio_tmr_aa_capture+0x24>)
    fb5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
{
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
				BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
    fb60:	4770      	bx	lr
    fb62:	bf00      	nop
    fb64:	4001f000 	.word	0x4001f000
    fb68:	40001100 	.word	0x40001100
    fb6c:	04000040 	.word	0x04000040

0000fb70 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    fb70:	4b01      	ldr	r3, [pc, #4]	; (fb78 <radio_tmr_aa_get+0x8>)
    fb72:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    fb76:	4770      	bx	lr
    fb78:	40008000 	.word	0x40008000

0000fb7c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    fb7c:	4b01      	ldr	r3, [pc, #4]	; (fb84 <radio_tmr_aa_save+0x8>)
    fb7e:	6018      	str	r0, [r3, #0]
}
    fb80:	4770      	bx	lr
    fb82:	bf00      	nop
    fb84:	20001c20 	.word	0x20001c20

0000fb88 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    fb88:	4b01      	ldr	r3, [pc, #4]	; (fb90 <radio_tmr_aa_restore+0x8>)
    fb8a:	6818      	ldr	r0, [r3, #0]
    fb8c:	4770      	bx	lr
    fb8e:	bf00      	nop
    fb90:	20001c20 	.word	0x20001c20

0000fb94 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    fb94:	4b01      	ldr	r3, [pc, #4]	; (fb9c <radio_tmr_ready_get+0x8>)
    fb96:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    fb9a:	4770      	bx	lr
    fb9c:	40008000 	.word	0x40008000

0000fba0 <radio_tmr_end_capture>:
    fba0:	4b02      	ldr	r3, [pc, #8]	; (fbac <radio_tmr_end_capture+0xc>)
    fba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    fba6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
    fbaa:	4770      	bx	lr
    fbac:	4001f000 	.word	0x4001f000

0000fbb0 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    fbb0:	4b01      	ldr	r3, [pc, #4]	; (fbb8 <radio_tmr_end_get+0x8>)
    fbb2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
    fbb6:	4770      	bx	lr
    fbb8:	40008000 	.word	0x40008000

0000fbbc <radio_tmr_tifs_base_get>:
    fbbc:	4b01      	ldr	r3, [pc, #4]	; (fbc4 <radio_tmr_tifs_base_get+0x8>)
    fbbe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    fbc2:	4770      	bx	lr
    fbc4:	40008000 	.word	0x40008000

0000fbc8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fbc8:	4b13      	ldr	r3, [pc, #76]	; (fc18 <radio_ccm_rx_pkt_set+0x50>)
{
    fbca:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fbcc:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fbce:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fbd0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fbd4:	4e11      	ldr	r6, [pc, #68]	; (fc1c <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fbd6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fbda:	4d11      	ldr	r5, [pc, #68]	; (fc20 <radio_ccm_rx_pkt_set+0x58>)
    fbdc:	2902      	cmp	r1, #2
    fbde:	bf0c      	ite	eq
    fbe0:	4629      	moveq	r1, r5
    fbe2:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    fbe4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fbe8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    fbec:	480d      	ldr	r0, [pc, #52]	; (fc24 <radio_ccm_rx_pkt_set+0x5c>)
    fbee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    fbf2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fbf6:	4a0c      	ldr	r2, [pc, #48]	; (fc28 <radio_ccm_rx_pkt_set+0x60>)
    fbf8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    fbfc:	4a0b      	ldr	r2, [pc, #44]	; (fc2c <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
    fbfe:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    fc02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fc06:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fc0a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    fc0e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc12:	2201      	movs	r2, #1
    fc14:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    fc16:	bd70      	pop	{r4, r5, r6, pc}
    fc18:	4000f000 	.word	0x4000f000
    fc1c:	01000001 	.word	0x01000001
    fc20:	01010001 	.word	0x01010001
    fc24:	20001b14 	.word	0x20001b14
    fc28:	20001a04 	.word	0x20001a04
    fc2c:	4001f000 	.word	0x4001f000

0000fc30 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fc30:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fc32:	4b0e      	ldr	r3, [pc, #56]	; (fc6c <radio_ccm_tx_pkt_set+0x3c>)
    fc34:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fc36:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fc38:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fc3c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fc40:	4c0b      	ldr	r4, [pc, #44]	; (fc70 <radio_ccm_tx_pkt_set+0x40>)
    fc42:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fc46:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fc4a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fc4e:	4809      	ldr	r0, [pc, #36]	; (fc74 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fc50:	4909      	ldr	r1, [pc, #36]	; (fc78 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fc52:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fc56:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fc5a:	2101      	movs	r1, #1
    fc5c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fc60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fc64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    fc68:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    fc6a:	bd10      	pop	{r4, pc}
    fc6c:	4000f000 	.word	0x4000f000
    fc70:	01010000 	.word	0x01010000
    fc74:	20001b14 	.word	0x20001b14
    fc78:	20001a04 	.word	0x20001a04

0000fc7c <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    fc7c:	4b0c      	ldr	r3, [pc, #48]	; (fcb0 <radio_ccm_is_done+0x34>)
    fc7e:	2202      	movs	r2, #2
    fc80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fc84:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    fc88:	b16a      	cbz	r2, fca6 <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    fc8a:	2202      	movs	r2, #2
    fc8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fc90:	4a08      	ldr	r2, [pc, #32]	; (fcb4 <radio_ccm_is_done+0x38>)
    fc92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fc96:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fc9a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fc9e:	fab0 f080 	clz	r0, r0
    fca2:	0940      	lsrs	r0, r0, #5
    fca4:	4770      	bx	lr
		__WFE();
    fca6:	bf20      	wfe
		__SEV();
    fca8:	bf40      	sev
		__WFE();
    fcaa:	bf20      	wfe
    fcac:	e7ea      	b.n	fc84 <radio_ccm_is_done+0x8>
    fcae:	bf00      	nop
    fcb0:	4000f000 	.word	0x4000f000
    fcb4:	e000e100 	.word	0xe000e100

0000fcb8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    fcb8:	4b03      	ldr	r3, [pc, #12]	; (fcc8 <radio_ccm_mic_is_valid+0x10>)
    fcba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fcbe:	3000      	adds	r0, #0
    fcc0:	bf18      	it	ne
    fcc2:	2001      	movne	r0, #1
    fcc4:	4770      	bx	lr
    fcc6:	bf00      	nop
    fcc8:	4000f000 	.word	0x4000f000

0000fccc <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fccc:	4b11      	ldr	r3, [pc, #68]	; (fd14 <radio_ar_configure+0x48>)
{
    fcce:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fcd0:	2203      	movs	r2, #3
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fcd2:	4c11      	ldr	r4, [pc, #68]	; (fd18 <radio_ar_configure+0x4c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fcd4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
    fcd8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fcdc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fce0:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    fce4:	3a01      	subs	r2, #1
    fce6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
    fcea:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    fcec:	4a0b      	ldr	r2, [pc, #44]	; (fd1c <radio_ar_configure+0x50>)
    fcee:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
    fcf2:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
    fcf4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fcf8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fcfc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	radio_bc_configure(64);
    fd00:	f7ff fe6a 	bl	f9d8 <radio_bc_configure>
    fd04:	4b06      	ldr	r3, [pc, #24]	; (fd20 <radio_ar_configure+0x54>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    fd06:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
    fd0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    fd0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
    fd12:	bd10      	pop	{r4, pc}
    fd14:	4000f000 	.word	0x4000f000
    fd18:	40001000 	.word	0x40001000
    fd1c:	20001a00 	.word	0x20001a00
    fd20:	4001f000 	.word	0x4001f000

0000fd24 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fd24:	4b01      	ldr	r3, [pc, #4]	; (fd2c <radio_ar_match_get+0x8>)
    fd26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fd2a:	4770      	bx	lr
    fd2c:	4000f000 	.word	0x4000f000

0000fd30 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    fd30:	4a04      	ldr	r2, [pc, #16]	; (fd44 <radio_ar_status_reset+0x14>)
    fd32:	2300      	movs	r3, #0
    fd34:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fd38:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    fd3c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
    fd40:	4770      	bx	lr
    fd42:	bf00      	nop
    fd44:	40001000 	.word	0x40001000

0000fd48 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    fd48:	4b08      	ldr	r3, [pc, #32]	; (fd6c <radio_ar_has_match+0x24>)
    fd4a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fd4e:	b160      	cbz	r0, fd6a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    fd50:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    fd54:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fd58:	b138      	cbz	r0, fd6a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    fd5a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fd5e:	b120      	cbz	r0, fd6a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fd60:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fd64:	fab0 f080 	clz	r0, r0
    fd68:	0940      	lsrs	r0, r0, #5
}
    fd6a:	4770      	bx	lr
    fd6c:	40001000 	.word	0x40001000

0000fd70 <mayfly_pend>:
#endif
	       0;
}

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    fd70:	4b08      	ldr	r3, [pc, #32]	; (fd94 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    fd72:	b139      	cbz	r1, fd84 <mayfly_pend+0x14>
    fd74:	2901      	cmp	r1, #1
    fd76:	d00a      	beq.n	fd8e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
    fd78:	4040      	eors	r0, r0
    fd7a:	f380 8811 	msr	BASEPRI, r0
    fd7e:	f04f 0003 	mov.w	r0, #3
    fd82:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fd84:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fd88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    fd8c:	4770      	bx	lr
    fd8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    fd92:	e7f9      	b.n	fd88 <mayfly_pend+0x18>
    fd94:	e000e100 	.word	0xe000e100

0000fd98 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    fd98:	2803      	cmp	r0, #3
    fd9a:	d905      	bls.n	fda8 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    fd9c:	4040      	eors	r0, r0
    fd9e:	f380 8811 	msr	BASEPRI, r0
    fda2:	f04f 0003 	mov.w	r0, #3
    fda6:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    fda8:	4b02      	ldr	r3, [pc, #8]	; (fdb4 <hal_ticker_instance0_caller_id_get+0x1c>)
    fdaa:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    fdac:	2800      	cmp	r0, #0
    fdae:	d0f5      	beq.n	fd9c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    fdb0:	4770      	bx	lr
    fdb2:	bf00      	nop
    fdb4:	00018388 	.word	0x00018388

0000fdb8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    fdb8:	3802      	subs	r0, #2
{
    fdba:	b410      	push	{r4}
    fdbc:	461c      	mov	r4, r3
	switch (caller_id) {
    fdbe:	2803      	cmp	r0, #3
    fdc0:	d816      	bhi.n	fdf0 <hal_ticker_instance0_sched+0x38>
    fdc2:	e8df f000 	tbb	[pc, r0]
    fdc6:	0b02      	.short	0x0b02
    fdc8:	2411      	.short	0x2411
		}
		break;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    fdca:	2903      	cmp	r1, #3
    fdcc:	d110      	bne.n	fdf0 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    fdce:	4b13      	ldr	r3, [pc, #76]	; (fe1c <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    fdd0:	2100      	movs	r1, #0
			m.param = instance;
    fdd2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    fdd4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    fdd6:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    fdd8:	f7f9 bc3c 	b.w	9654 <mayfly_enqueue>
		switch (callee_id) {
    fddc:	2904      	cmp	r1, #4
    fdde:	d107      	bne.n	fdf0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    fde0:	4b0f      	ldr	r3, [pc, #60]	; (fe20 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    fde2:	2101      	movs	r1, #1
			m.param = instance;
    fde4:	609c      	str	r4, [r3, #8]
    fde6:	e7f5      	b.n	fdd4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    fde8:	2903      	cmp	r1, #3
    fdea:	d007      	beq.n	fdfc <hal_ticker_instance0_sched+0x44>
    fdec:	2904      	cmp	r1, #4
    fdee:	d00a      	beq.n	fe06 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    fdf0:	4040      	eors	r0, r0
    fdf2:	f380 8811 	msr	BASEPRI, r0
    fdf6:	f04f 0003 	mov.w	r0, #3
    fdfa:	df02      	svc	2
			m.param = instance;
    fdfc:	4b09      	ldr	r3, [pc, #36]	; (fe24 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    fdfe:	2100      	movs	r1, #0
			m.param = instance;
    fe00:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    fe02:	2001      	movs	r0, #1
    fe04:	e7e7      	b.n	fdd6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    fe06:	4b08      	ldr	r3, [pc, #32]	; (fe28 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    fe08:	2101      	movs	r1, #1
			m.param = instance;
    fe0a:	609c      	str	r4, [r3, #8]
    fe0c:	e7f9      	b.n	fe02 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    fe0e:	2904      	cmp	r1, #4
    fe10:	d1ee      	bne.n	fdf0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    fe12:	4b06      	ldr	r3, [pc, #24]	; (fe2c <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    fe14:	2101      	movs	r1, #1
			m.param = instance;
    fe16:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    fe18:	2003      	movs	r0, #3
    fe1a:	e7dc      	b.n	fdd6 <hal_ticker_instance0_sched+0x1e>
    fe1c:	20005210 	.word	0x20005210
    fe20:	20005220 	.word	0x20005220
    fe24:	20005230 	.word	0x20005230
    fe28:	20005240 	.word	0x20005240
    fe2c:	20005250 	.word	0x20005250

0000fe30 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    fe30:	4b01      	ldr	r3, [pc, #4]	; (fe38 <net_buf_pool_get+0x8>)
    fe32:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    fe36:	4770      	bx	lr
    fe38:	20005558 	.word	0x20005558

0000fe3c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fe3c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
    fe3e:	4b04      	ldr	r3, [pc, #16]	; (fe50 <net_buf_id+0x14>)
    fe40:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    fe44:	69db      	ldr	r3, [r3, #28]
    fe46:	1ac0      	subs	r0, r0, r3
}
    fe48:	4b02      	ldr	r3, [pc, #8]	; (fe54 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    fe4a:	1080      	asrs	r0, r0, #2
}
    fe4c:	4358      	muls	r0, r3
    fe4e:	4770      	bx	lr
    fe50:	20005558 	.word	0x20005558
    fe54:	b6db6db7 	.word	0xb6db6db7

0000fe58 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
    fe58:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    fe5a:	4b09      	ldr	r3, [pc, #36]	; (fe80 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fe5c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    fe5e:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
    fe62:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    fe64:	699b      	ldr	r3, [r3, #24]
    fe66:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    fe68:	6823      	ldr	r3, [r4, #0]
    fe6a:	429a      	cmp	r2, r3
    fe6c:	bf94      	ite	ls
    fe6e:	600a      	strls	r2, [r1, #0]
    fe70:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    fe72:	f7ff ffe3 	bl	fe3c <net_buf_id>
    fe76:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    fe7a:	fb02 3000 	mla	r0, r2, r0, r3
    fe7e:	bd10      	pop	{r4, pc}
    fe80:	20005558 	.word	0x20005558

0000fe84 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    fe84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    fe88:	4605      	mov	r5, r0
    fe8a:	9101      	str	r1, [sp, #4]
    fe8c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    fe8e:	f007 f8fa 	bl	17086 <z_impl_k_uptime_get_32>
    fe92:	4607      	mov	r7, r0
	__asm__ volatile(
    fe94:	f04f 0320 	mov.w	r3, #32
    fe98:	f3ef 8811 	mrs	r8, BASEPRI
    fe9c:	f383 8811 	msr	BASEPRI, r3
    fea0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    fea4:	8a6b      	ldrh	r3, [r5, #18]
    fea6:	2b00      	cmp	r3, #0
    fea8:	d041      	beq.n	ff2e <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    feaa:	8a2a      	ldrh	r2, [r5, #16]
    feac:	429a      	cmp	r2, r3
    feae:	d92c      	bls.n	ff0a <net_buf_alloc_len+0x86>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    feb0:	2100      	movs	r1, #0
    feb2:	4628      	mov	r0, r5
    feb4:	f006 fe76 	bl	16ba4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    feb8:	4604      	mov	r4, r0
    feba:	b330      	cbz	r0, ff0a <net_buf_alloc_len+0x86>
	__asm__ volatile(
    febc:	f388 8811 	msr	BASEPRI, r8
    fec0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	2b00      	cmp	r3, #0
    fec8:	d040      	beq.n	ff4c <net_buf_alloc_len+0xc8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    feca:	1c73      	adds	r3, r6, #1
    fecc:	2b01      	cmp	r3, #1
    fece:	d906      	bls.n	fede <net_buf_alloc_len+0x5a>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    fed0:	f007 f8d9 	bl	17086 <z_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    fed4:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
    fed6:	42b0      	cmp	r0, r6
    fed8:	bf94      	ite	ls
    feda:	1a36      	subls	r6, r6, r0
    fedc:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fede:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    fee0:	4f20      	ldr	r7, [pc, #128]	; (ff64 <net_buf_alloc_len+0xe0>)
    fee2:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    fee6:	4632      	mov	r2, r6
    fee8:	699b      	ldr	r3, [r3, #24]
    feea:	681b      	ldr	r3, [r3, #0]
    feec:	a901      	add	r1, sp, #4
    feee:	681b      	ldr	r3, [r3, #0]
    fef0:	4620      	mov	r0, r4
    fef2:	4798      	blx	r3
    fef4:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    fef6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    fef8:	bb48      	cbnz	r0, ff4e <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    fefa:	79a0      	ldrb	r0, [r4, #6]
    fefc:	4621      	mov	r1, r4
    fefe:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    ff02:	f006 fe2b 	bl	16b5c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    ff06:	462c      	mov	r4, r5
    ff08:	e01c      	b.n	ff44 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
    ff0a:	8a6b      	ldrh	r3, [r5, #18]
    ff0c:	1e5a      	subs	r2, r3, #1
    ff0e:	826a      	strh	r2, [r5, #18]
    ff10:	f388 8811 	msr	BASEPRI, r8
    ff14:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    ff18:	8a2c      	ldrh	r4, [r5, #16]
    ff1a:	1ae4      	subs	r4, r4, r3
    ff1c:	69eb      	ldr	r3, [r5, #28]
    ff1e:	221c      	movs	r2, #28
    ff20:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    ff24:	4b0f      	ldr	r3, [pc, #60]	; (ff64 <net_buf_alloc_len+0xe0>)
    ff26:	1aed      	subs	r5, r5, r3
    ff28:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    ff2a:	71a5      	strb	r5, [r4, #6]
		goto success;
    ff2c:	e7ca      	b.n	fec4 <net_buf_alloc_len+0x40>
    ff2e:	f388 8811 	msr	BASEPRI, r8
    ff32:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    ff36:	4631      	mov	r1, r6
    ff38:	4628      	mov	r0, r5
    ff3a:	f006 fe33 	bl	16ba4 <z_impl_k_queue_get>
	if (!buf) {
    ff3e:	4604      	mov	r4, r0
    ff40:	2800      	cmp	r0, #0
    ff42:	d1bf      	bne.n	fec4 <net_buf_alloc_len+0x40>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    ff44:	4620      	mov	r0, r4
    ff46:	b002      	add	sp, #8
    ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    ff4c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    ff4e:	2300      	movs	r3, #0
    ff50:	6023      	str	r3, [r4, #0]
    ff52:	2201      	movs	r2, #1
    ff54:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    ff56:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    ff58:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    ff5a:	6923      	ldr	r3, [r4, #16]
    ff5c:	81e2      	strh	r2, [r4, #14]
    ff5e:	60a3      	str	r3, [r4, #8]
	return buf;
    ff60:	e7f0      	b.n	ff44 <net_buf_alloc_len+0xc0>
    ff62:	bf00      	nop
    ff64:	20005558 	.word	0x20005558

0000ff68 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff6a:	4d15      	ldr	r5, [pc, #84]	; (ffc0 <net_buf_unref+0x58>)
    ff6c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    ff6e:	2600      	movs	r6, #0
	while (buf) {
    ff70:	b904      	cbnz	r4, ff74 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    ff72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    ff74:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    ff76:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    ff78:	3b01      	subs	r3, #1
    ff7a:	b2db      	uxtb	r3, r3
    ff7c:	7123      	strb	r3, [r4, #4]
    ff7e:	2b00      	cmp	r3, #0
    ff80:	d1f7      	bne.n	ff72 <net_buf_unref+0xa>
		if (buf->__buf) {
    ff82:	6921      	ldr	r1, [r4, #16]
    ff84:	b159      	cbz	r1, ff9e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ff86:	7963      	ldrb	r3, [r4, #5]
    ff88:	079b      	lsls	r3, r3, #30
    ff8a:	d407      	bmi.n	ff9c <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    ff8c:	79a3      	ldrb	r3, [r4, #6]
    ff8e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    ff92:	4620      	mov	r0, r4
    ff94:	699b      	ldr	r3, [r3, #24]
    ff96:	681b      	ldr	r3, [r3, #0]
    ff98:	689b      	ldr	r3, [r3, #8]
    ff9a:	4798      	blx	r3
			buf->__buf = NULL;
    ff9c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    ff9e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    ffa0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    ffa2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    ffa6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    ffa8:	695b      	ldr	r3, [r3, #20]
    ffaa:	b11b      	cbz	r3, ffb4 <net_buf_unref+0x4c>
			pool->destroy(buf);
    ffac:	4620      	mov	r0, r4
    ffae:	4798      	blx	r3
{
    ffb0:	463c      	mov	r4, r7
    ffb2:	e7dd      	b.n	ff70 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    ffb4:	4621      	mov	r1, r4
    ffb6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    ffba:	f006 fdcf 	bl	16b5c <k_queue_prepend>
    ffbe:	e7f7      	b.n	ffb0 <net_buf_unref+0x48>
    ffc0:	20005558 	.word	0x20005558

0000ffc4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    ffc4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    ffc6:	4b09      	ldr	r3, [pc, #36]	; (ffec <gpio_nrfx_init+0x28>)
    ffc8:	781a      	ldrb	r2, [r3, #0]
    ffca:	b96a      	cbnz	r2, ffe8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    ffcc:	2101      	movs	r1, #1
    ffce:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    ffd0:	2006      	movs	r0, #6
    ffd2:	2105      	movs	r1, #5
    ffd4:	f7f5 f920 	bl	5218 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    ffd8:	2006      	movs	r0, #6
    ffda:	f7f5 f8eb 	bl	51b4 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    ffde:	4b04      	ldr	r3, [pc, #16]	; (fff0 <gpio_nrfx_init+0x2c>)
    ffe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ffe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    ffe8:	2000      	movs	r0, #0
    ffea:	bd08      	pop	{r3, pc}
    ffec:	200022bd 	.word	0x200022bd
    fff0:	40006000 	.word	0x40006000

0000fff4 <gpiote_event_handler>:
{
    fff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    fff8:	4e4a      	ldr	r6, [pc, #296]	; (10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>)
    fffa:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    fffc:	2d01      	cmp	r5, #1
    fffe:	d163      	bne.n	100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>
	struct gpio_nrfx_data *data = get_port_data(port);
   10000:	4a49      	ldr	r2, [pc, #292]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
   10002:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   10004:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10006:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   10008:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1000c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
   10010:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   10012:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   10016:	4301      	orrs	r1, r0
   10018:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1001c:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10020:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   10022:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
   10026:	405c      	eors	r4, r3
   10028:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
   1002a:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   1002e:	462f      	mov	r7, r5
	u32_t pin = 0U;
   10030:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   10034:	2a00      	cmp	r2, #0
   10036:	d136      	bne.n	100a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa7>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10038:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1003a:	6833      	ldr	r3, [r6, #0]
   1003c:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1003e:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   10040:	4e3a      	ldr	r6, [pc, #232]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10042:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   10044:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10046:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   10048:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1004c:	fa07 f103 	lsl.w	r1, r7, r3
   10050:	4211      	tst	r1, r2
   10052:	d014      	beq.n	1007e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f>
   10054:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
   10058:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
   1005c:	0092      	lsls	r2, r2, #2
   1005e:	6811      	ldr	r1, [r2, #0]
   10060:	2901      	cmp	r1, #1
   10062:	d10c      	bne.n	1007e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10064:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   10068:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1006c:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   10070:	6812      	ldr	r2, [r2, #0]
   10072:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10074:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10078:	4081      	lsls	r1, r0
    (void)dummy;
   1007a:	9a01      	ldr	r2, [sp, #4]
   1007c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1007e:	3301      	adds	r3, #1
   10080:	2b08      	cmp	r3, #8
   10082:	d1e1      	bne.n	10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>
	if (fired_triggers[0]) {
   10084:	b314      	cbz	r4, 100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   10086:	4f28      	ldr	r7, [pc, #160]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10088:	68bb      	ldr	r3, [r7, #8]
   1008a:	6819      	ldr	r1, [r3, #0]
   1008c:	b1f1      	cbz	r1, 100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>
	return node->next;
   1008e:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
   10090:	688b      	ldr	r3, [r1, #8]
   10092:	421c      	tst	r4, r3
   10094:	d003      	beq.n	1009e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9f>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   10096:	684b      	ldr	r3, [r1, #4]
   10098:	4622      	mov	r2, r4
   1009a:	4638      	mov	r0, r7
   1009c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1009e:	b1ae      	cbz	r6, 100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>
   100a0:	4631      	mov	r1, r6
   100a2:	6836      	ldr	r6, [r6, #0]
   100a4:	e7f4      	b.n	10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
		if (level_pins & bit) {
   100a6:	423a      	tst	r2, r7
   100a8:	d00a      	beq.n	100c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   100aa:	f898 3004 	ldrb.w	r3, [r8, #4]
   100ae:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   100b2:	2100      	movs	r1, #0
   100b4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   100b8:	f006 f99f 	bl	163fa <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   100bc:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   100c0:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   100c4:	007f      	lsls	r7, r7, #1
   100c6:	e7b5      	b.n	10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   100c8:	2400      	movs	r4, #0
   100ca:	e7b9      	b.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
	if (port_event) {
   100cc:	2d01      	cmp	r5, #1
   100ce:	d10d      	bne.n	100ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xed>
	const struct gpio_nrfx_data *data = get_port_data(port);
   100d0:	4b15      	ldr	r3, [pc, #84]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
   100d2:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   100d8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   100dc:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   100de:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   100e2:	430b      	orrs	r3, r1
   100e4:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0U;
   100e8:	2600      	movs	r6, #0
	while (level_pins) {
   100ea:	b912      	cbnz	r2, 100f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf3>
}
   100ec:	b003      	add	sp, #12
   100ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   100f2:	4215      	tst	r5, r2
   100f4:	d012      	beq.n	1011c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11d>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   100f6:	69e1      	ldr	r1, [r4, #28]
   100f8:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   100fa:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   100fe:	404b      	eors	r3, r1
   10100:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   10102:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10106:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1010a:	bf0c      	ite	eq
   1010c:	2103      	moveq	r1, #3
   1010e:	2102      	movne	r1, #2
   10110:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   10114:	f006 f971 	bl	163fa <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10118:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1011c:	3601      	adds	r6, #1
		bit <<= 1;
   1011e:	006d      	lsls	r5, r5, #1
   10120:	e7e3      	b.n	100ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xeb>
   10122:	bf00      	nop
   10124:	4000617c 	.word	0x4000617c
   10128:	200053b8 	.word	0x200053b8
   1012c:	40006000 	.word	0x40006000

00010130 <gpiote_pin_int_cfg>:
{
   10130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
   10132:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   10134:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10136:	689b      	ldr	r3, [r3, #8]
   10138:	f001 041f 	and.w	r4, r1, #31
{
   1013c:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
   1013e:	494c      	ldr	r1, [pc, #304]	; (10270 <gpiote_pin_int_cfg+0x140>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10140:	791b      	ldrb	r3, [r3, #4]
   10142:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   10146:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
   1014a:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1014c:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1014e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   10152:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   10156:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   1015a:	4284      	cmp	r4, r0
   1015c:	d16c      	bne.n	10238 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
   1015e:	fa22 f003 	lsr.w	r0, r2, r3
   10162:	07c0      	lsls	r0, r0, #31
   10164:	d568      	bpl.n	10238 <gpiote_pin_int_cfg+0x108>
   10166:	009a      	lsls	r2, r3, #2
   10168:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1016c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10170:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   10174:	f020 0001 	bic.w	r0, r0, #1
   10178:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   1017c:	2201      	movs	r2, #1
   1017e:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   10182:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10186:	4620      	mov	r0, r4
   10188:	2100      	movs	r1, #0
   1018a:	f006 f936 	bl	163fa <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1018e:	68b0      	ldr	r0, [r6, #8]
   10190:	40e8      	lsrs	r0, r5
   10192:	f010 0001 	ands.w	r0, r0, #1
   10196:	d04d      	beq.n	10234 <gpiote_pin_int_cfg+0x104>
   10198:	68f0      	ldr	r0, [r6, #12]
   1019a:	40e8      	lsrs	r0, r5
   1019c:	f010 0001 	ands.w	r0, r0, #1
   101a0:	d048      	beq.n	10234 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
   101a2:	6970      	ldr	r0, [r6, #20]
   101a4:	40e8      	lsrs	r0, r5
   101a6:	f010 0201 	ands.w	r2, r0, #1
   101aa:	d051      	beq.n	10250 <gpiote_pin_int_cfg+0x120>
			if (data->double_edge & BIT(pin)) {
   101ac:	69b3      	ldr	r3, [r6, #24]
   101ae:	40eb      	lsrs	r3, r5
   101b0:	07db      	lsls	r3, r3, #31
   101b2:	d445      	bmi.n	10240 <gpiote_pin_int_cfg+0x110>
			} else if (((data->active_level & BIT(pin)) != 0U)
   101b4:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   101b6:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   101b8:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   101ba:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   101be:	f003 0301 	and.w	r3, r3, #1
   101c2:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   101c6:	42ab      	cmp	r3, r5
   101c8:	bf0c      	ite	eq
   101ca:	2502      	moveq	r5, #2
   101cc:	2501      	movne	r5, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   101ce:	4f28      	ldr	r7, [pc, #160]	; (10270 <gpiote_pin_int_cfg+0x140>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   101d0:	2100      	movs	r1, #0
   101d2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   101d6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   101da:	f010 0003 	ands.w	r0, r0, #3
   101de:	d131      	bne.n	10244 <gpiote_pin_int_cfg+0x114>
			nrf_gpiote_events_t evt =
   101e0:	008a      	lsls	r2, r1, #2
   101e2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   101e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   101ea:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   101ec:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
   101f0:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   101f4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   101f8:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   101fc:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
   10200:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)NRF_GPIOTE + event);
   10204:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10208:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1020c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   10210:	4335      	orrs	r5, r6
   10212:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10216:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   10218:	6812      	ldr	r2, [r2, #0]
   1021a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1021c:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1021e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   10222:	f042 0201 	orr.w	r2, r2, #1
   10226:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   1022a:	2301      	movs	r3, #1
   1022c:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
   10230:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
   10234:	b003      	add	sp, #12
   10236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10238:	3301      	adds	r3, #1
   1023a:	2b08      	cmp	r3, #8
   1023c:	d187      	bne.n	1014e <gpiote_pin_int_cfg+0x1e>
   1023e:	e7a2      	b.n	10186 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10240:	2503      	movs	r5, #3
   10242:	e7c4      	b.n	101ce <gpiote_pin_int_cfg+0x9e>
   10244:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10246:	2908      	cmp	r1, #8
   10248:	d1c3      	bne.n	101d2 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   1024a:	f06f 0012 	mvn.w	r0, #18
   1024e:	e7f1      	b.n	10234 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10250:	69f1      	ldr	r1, [r6, #28]
   10252:	6933      	ldr	r3, [r6, #16]
   10254:	404b      	eors	r3, r1
   10256:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1025a:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1025e:	4620      	mov	r0, r4
   10260:	bf0c      	ite	eq
   10262:	2103      	moveq	r1, #3
   10264:	2102      	movne	r1, #2
   10266:	f006 f8c8 	bl	163fa <nrf_gpio_cfg_sense_set>
	int res = 0;
   1026a:	4610      	mov	r0, r2
   1026c:	e7e2      	b.n	10234 <gpiote_pin_int_cfg+0x104>
   1026e:	bf00      	nop
   10270:	40006000 	.word	0x40006000

00010274 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   10274:	4802      	ldr	r0, [pc, #8]	; (10280 <pwm_nrfx_get_cycles_per_sec+0xc>)
   10276:	2100      	movs	r1, #0
   10278:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   1027c:	2000      	movs	r0, #0
   1027e:	4770      	bx	lr
   10280:	00f42400 	.word	0x00f42400

00010284 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
   10284:	b508      	push	{r3, lr}
	const struct pwm_nrfx_config *config = dev->config->config_info;
   10286:	6803      	ldr	r3, [r0, #0]
   10288:	6898      	ldr	r0, [r3, #8]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1028a:	2200      	movs	r2, #0
   1028c:	f100 0108 	add.w	r1, r0, #8
   10290:	f7f4 faf0 	bl	4874 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL);
	if (result != NRFX_SUCCESS) {
   10294:	4b03      	ldr	r3, [pc, #12]	; (102a4 <pwm_nrfx_init+0x20>)
   10296:	4298      	cmp	r0, r3
		LOG_ERR("Failed to initialize device: %s", dev->config->name);
		return -EBUSY;
	}

	return 0;
}
   10298:	bf14      	ite	ne
   1029a:	f06f 000f 	mvnne.w	r0, #15
   1029e:	2000      	moveq	r0, #0
   102a0:	bd08      	pop	{r3, pc}
   102a2:	bf00      	nop
   102a4:	0bad0000 	.word	0x0bad0000

000102a8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   102a8:	b570      	push	{r4, r5, r6, lr}
	nrf_uarte_parity_t parity;
	nrf_uarte_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   102aa:	794b      	ldrb	r3, [r1, #5]
   102ac:	2b01      	cmp	r3, #1
   102ae:	d123      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   102b0:	798b      	ldrb	r3, [r1, #6]
   102b2:	2b03      	cmp	r3, #3
   102b4:	d120      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   102b6:	79cc      	ldrb	r4, [r1, #7]
   102b8:	b12c      	cbz	r4, 102c6 <uarte_nrfx_configure+0x1e>
   102ba:	2c01      	cmp	r4, #1
   102bc:	d11c      	bne.n	102f8 <uarte_nrfx_configure+0x50>
	return dev->config->config_info;
   102be:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   102c0:	689b      	ldr	r3, [r3, #8]
   102c2:	791b      	ldrb	r3, [r3, #4]
   102c4:	b1c3      	cbz	r3, 102f8 <uarte_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   102c6:	790a      	ldrb	r2, [r1, #4]
   102c8:	b112      	cbz	r2, 102d0 <uarte_nrfx_configure+0x28>
   102ca:	2a02      	cmp	r2, #2
   102cc:	d114      	bne.n	102f8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   102ce:	220e      	movs	r2, #14
	return dev->config->config_info;
   102d0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   102d2:	689b      	ldr	r3, [r3, #8]
   102d4:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
   102d6:	680b      	ldr	r3, [r1, #0]
   102d8:	f647 2612 	movw	r6, #31250	; 0x7a12
   102dc:	42b3      	cmp	r3, r6
   102de:	d06b      	beq.n	103b8 <uarte_nrfx_configure+0x110>
   102e0:	d827      	bhi.n	10332 <uarte_nrfx_configure+0x8a>
   102e2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   102e6:	d061      	beq.n	103ac <uarte_nrfx_configure+0x104>
   102e8:	d812      	bhi.n	10310 <uarte_nrfx_configure+0x68>
   102ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   102ee:	d04d      	beq.n	1038c <uarte_nrfx_configure+0xe4>
   102f0:	d805      	bhi.n	102fe <uarte_nrfx_configure+0x56>
   102f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   102f6:	d074      	beq.n	103e2 <uarte_nrfx_configure+0x13a>
		return -ENOTSUP;
   102f8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   102fc:	e052      	b.n	103a4 <uarte_nrfx_configure+0xfc>
	switch (baudrate) {
   102fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10302:	d050      	beq.n	103a6 <uarte_nrfx_configure+0xfe>
   10304:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10308:	d1f6      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1030a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1030e:	e03f      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   10310:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10314:	d04c      	beq.n	103b0 <uarte_nrfx_configure+0x108>
   10316:	d804      	bhi.n	10322 <uarte_nrfx_configure+0x7a>
   10318:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1031c:	d1ec      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1031e:	4b32      	ldr	r3, [pc, #200]	; (103e8 <uarte_nrfx_configure+0x140>)
   10320:	e036      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   10322:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10326:	d045      	beq.n	103b4 <uarte_nrfx_configure+0x10c>
   10328:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1032c:	d1e4      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1032e:	4b2f      	ldr	r3, [pc, #188]	; (103ec <uarte_nrfx_configure+0x144>)
   10330:	e02e      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   10332:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10336:	d048      	beq.n	103ca <uarte_nrfx_configure+0x122>
   10338:	d812      	bhi.n	10360 <uarte_nrfx_configure+0xb8>
   1033a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1033e:	42b3      	cmp	r3, r6
   10340:	d03d      	beq.n	103be <uarte_nrfx_configure+0x116>
   10342:	d805      	bhi.n	10350 <uarte_nrfx_configure+0xa8>
   10344:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   10348:	d1d6      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1034a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1034e:	e01f      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   10350:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10354:	d036      	beq.n	103c4 <uarte_nrfx_configure+0x11c>
   10356:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1035a:	d1cd      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1035c:	4b24      	ldr	r3, [pc, #144]	; (103f0 <uarte_nrfx_configure+0x148>)
   1035e:	e017      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   10360:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10364:	d037      	beq.n	103d6 <uarte_nrfx_configure+0x12e>
   10366:	d808      	bhi.n	1037a <uarte_nrfx_configure+0xd2>
   10368:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1036c:	d030      	beq.n	103d0 <uarte_nrfx_configure+0x128>
   1036e:	4e21      	ldr	r6, [pc, #132]	; (103f4 <uarte_nrfx_configure+0x14c>)
   10370:	42b3      	cmp	r3, r6
   10372:	d1c1      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10374:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10378:	e00a      	b.n	10390 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1037a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1037e:	d02d      	beq.n	103dc <uarte_nrfx_configure+0x134>
   10380:	4e1d      	ldr	r6, [pc, #116]	; (103f8 <uarte_nrfx_configure+0x150>)
   10382:	42b3      	cmp	r3, r6
   10384:	d1b8      	bne.n	102f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1038a:	e001      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   1038c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10390:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   10394:	6883      	ldr	r3, [r0, #8]
   10396:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10398:	4322      	orrs	r2, r4
   1039a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1039e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   103a2:	2000      	movs	r0, #0
}
   103a4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   103a6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   103aa:	e7f1      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   103ac:	4b13      	ldr	r3, [pc, #76]	; (103fc <uarte_nrfx_configure+0x154>)
   103ae:	e7ef      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   103b0:	4b13      	ldr	r3, [pc, #76]	; (10400 <uarte_nrfx_configure+0x158>)
   103b2:	e7ed      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   103b4:	4b13      	ldr	r3, [pc, #76]	; (10404 <uarte_nrfx_configure+0x15c>)
   103b6:	e7eb      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   103b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   103bc:	e7e8      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   103be:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   103c2:	e7e5      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   103c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   103c8:	e7e2      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   103ca:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   103ce:	e7df      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   103d0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   103d4:	e7dc      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   103d6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   103da:	e7d9      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   103dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   103e0:	e7d6      	b.n	10390 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   103e2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   103e6:	e7d3      	b.n	10390 <uarte_nrfx_configure+0xe8>
   103e8:	00275000 	.word	0x00275000
   103ec:	0075c000 	.word	0x0075c000
   103f0:	013a9000 	.word	0x013a9000
   103f4:	0003d090 	.word	0x0003d090
   103f8:	000f4240 	.word	0x000f4240
   103fc:	0013b000 	.word	0x0013b000
   10400:	003af000 	.word	0x003af000
   10404:	004ea000 	.word	0x004ea000

00010408 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   10408:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   1040a:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   1040c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1040e:	f04f 0420 	mov.w	r4, #32
   10412:	f3ef 8e11 	mrs	lr, BASEPRI
   10416:	f384 8811 	msr	BASEPRI, r4
   1041a:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1041e:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   10420:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   10424:	1b9b      	subs	r3, r3, r6
   10426:	403b      	ands	r3, r7
	if (available < len) {
   10428:	429a      	cmp	r2, r3
		len = available;
   1042a:	bf88      	it	hi
   1042c:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1042e:	18b4      	adds	r4, r6, r2
   10430:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   10432:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   10434:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   10436:	f38e 8811 	msr	BASEPRI, lr
   1043a:	f3bf 8f6f 	isb	sy
   1043e:	440a      	add	r2, r1
	u8_t *dst   = buf;
   10440:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   10442:	42a2      	cmp	r2, r4
   10444:	d11a      	bne.n	1047c <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   10446:	4566      	cmp	r6, ip
   10448:	d10d      	bne.n	10466 <rng_pool_get+0x5e>
	__asm__ volatile(
   1044a:	f04f 0520 	mov.w	r5, #32
   1044e:	f3ef 8211 	mrs	r2, BASEPRI
   10452:	f385 8811 	msr	BASEPRI, r5
   10456:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1045a:	7805      	ldrb	r5, [r0, #0]
   1045c:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1045e:	f382 8811 	msr	BASEPRI, r2
   10462:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   10466:	1a64      	subs	r4, r4, r1
   10468:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1046a:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1046c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1046e:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   10470:	bf22      	ittt	cs
   10472:	4b07      	ldrcs	r3, [pc, #28]	; (10490 <rng_pool_get+0x88>)
   10474:	2101      	movcs	r1, #1
   10476:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   10478:	4610      	mov	r0, r2
   1047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1047c:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   10480:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   10482:	f89e e005 	ldrb.w	lr, [lr, #5]
   10486:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1048a:	403d      	ands	r5, r7
   1048c:	e7d9      	b.n	10442 <rng_pool_get+0x3a>
   1048e:	bf00      	nop
   10490:	4000d000 	.word	0x4000d000

00010494 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   10494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   10498:	4d11      	ldr	r5, [pc, #68]	; (104e0 <entropy_nrf5_get_entropy+0x4c>)
   1049a:	460e      	mov	r6, r1
   1049c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1049e:	f105 0845 	add.w	r8, r5, #69	; 0x45
   104a2:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   104a6:	b914      	cbnz	r4, 104ae <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   104a8:	4620      	mov	r0, r4
   104aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   104ae:	f04f 31ff 	mov.w	r1, #4294967295
   104b2:	4628      	mov	r0, r5
   104b4:	f000 ff44 	bl	11340 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   104b8:	4622      	mov	r2, r4
   104ba:	4631      	mov	r1, r6
   104bc:	4640      	mov	r0, r8
   104be:	f7ff ffa3 	bl	10408 <rng_pool_get>
   104c2:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   104c4:	4628      	mov	r0, r5
   104c6:	f000 ff0f 	bl	112e8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   104ca:	b92f      	cbnz	r7, 104d8 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   104cc:	f04f 31ff 	mov.w	r1, #4294967295
   104d0:	4648      	mov	r0, r9
   104d2:	f000 ff35 	bl	11340 <z_impl_k_sem_take>
			continue;
   104d6:	e7e6      	b.n	104a6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   104d8:	1be4      	subs	r4, r4, r7
   104da:	b2a4      	uxth	r4, r4
		buf += bytes;
   104dc:	443e      	add	r6, r7
   104de:	e7e2      	b.n	104a6 <entropy_nrf5_get_entropy+0x12>
   104e0:	20001c6c 	.word	0x20001c6c

000104e4 <random_byte_get>:
{
   104e4:	b082      	sub	sp, #8
	__asm__ volatile(
   104e6:	f04f 0320 	mov.w	r3, #32
   104ea:	f3ef 8211 	mrs	r2, BASEPRI
   104ee:	f383 8811 	msr	BASEPRI, r3
   104f2:	f3bf 8f6f 	isb	sy
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   104f6:	4b0a      	ldr	r3, [pc, #40]	; (10520 <random_byte_get+0x3c>)
   104f8:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   104fa:	b171      	cbz	r1, 1051a <random_byte_get+0x36>
     NRF_RNG->SHORTS &= ~mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   104fc:	4909      	ldr	r1, [pc, #36]	; (10524 <random_byte_get+0x40>)
   104fe:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   10502:	2100      	movs	r1, #0
   10504:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   10506:	681b      	ldr	r3, [r3, #0]
   10508:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1050a:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   1050c:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1050e:	f382 8811 	msr	BASEPRI, r2
   10512:	f3bf 8f6f 	isb	sy
}
   10516:	b002      	add	sp, #8
   10518:	4770      	bx	lr
	int retval = -EAGAIN;
   1051a:	f06f 000a 	mvn.w	r0, #10
   1051e:	e7f6      	b.n	1050e <random_byte_get+0x2a>
   10520:	4000d100 	.word	0x4000d100
   10524:	4000d000 	.word	0x4000d000

00010528 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   10528:	07db      	lsls	r3, r3, #31
{
   1052a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1052e:	4688      	mov	r8, r1
   10530:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   10532:	d405      	bmi.n	10540 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   10534:	4820      	ldr	r0, [pc, #128]	; (105b8 <entropy_nrf5_get_entropy_isr+0x90>)
   10536:	f7ff ff67 	bl	10408 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1053a:	b002      	add	sp, #8
   1053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   10540:	2a00      	cmp	r2, #0
   10542:	d032      	beq.n	105aa <entropy_nrf5_get_entropy_isr+0x82>
	__asm__ volatile(
   10544:	f04f 0320 	mov.w	r3, #32
   10548:	f3ef 8511 	mrs	r5, BASEPRI
   1054c:	f383 8811 	msr	BASEPRI, r3
   10550:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   10554:	200d      	movs	r0, #13
   10556:	f7f4 fe51 	bl	51fc <z_arch_irq_is_enabled>
   1055a:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   1055c:	200d      	movs	r0, #13
   1055e:	f7f4 fe39 	bl	51d4 <z_arch_irq_disable>
	__asm__ volatile(
   10562:	f385 8811 	msr	BASEPRI, r5
   10566:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   1056a:	4e14      	ldr	r6, [pc, #80]	; (105bc <entropy_nrf5_get_entropy_isr+0x94>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1056c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 105c4 <entropy_nrf5_get_entropy_isr+0x9c>
   10570:	2200      	movs	r2, #0
   10572:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   10574:	6832      	ldr	r2, [r6, #0]
   10576:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10578:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   1057a:	4a11      	ldr	r2, [pc, #68]	; (105c0 <entropy_nrf5_get_entropy_isr+0x98>)
   1057c:	2101      	movs	r1, #1
   1057e:	6011      	str	r1, [r2, #0]
   10580:	4625      	mov	r5, r4
   10582:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   10586:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   10588:	b18b      	cbz	r3, 105ae <entropy_nrf5_get_entropy_isr+0x86>
			byte = random_byte_get();
   1058a:	f7ff ffab 	bl	104e4 <random_byte_get>
			if (byte < 0) {
   1058e:	2800      	cmp	r0, #0
   10590:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   10594:	dbf7      	blt.n	10586 <entropy_nrf5_get_entropy_isr+0x5e>
   10596:	3d01      	subs	r5, #1
   10598:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1059a:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1059e:	2d00      	cmp	r5, #0
   105a0:	d1f1      	bne.n	10586 <entropy_nrf5_get_entropy_isr+0x5e>
		if (irq_enabled) {
   105a2:	b117      	cbz	r7, 105aa <entropy_nrf5_get_entropy_isr+0x82>
			irq_enable(RNG_IRQn);
   105a4:	200d      	movs	r0, #13
   105a6:	f7f4 fe05 	bl	51b4 <z_arch_irq_enable>
	return cnt;
   105aa:	4620      	mov	r0, r4
   105ac:	e7c5      	b.n	1053a <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   105ae:	bf20      	wfe
				__SEV();
   105b0:	bf40      	sev
				__WFE();
   105b2:	bf20      	wfe
   105b4:	e7e7      	b.n	10586 <entropy_nrf5_get_entropy_isr+0x5e>
   105b6:	bf00      	nop
   105b8:	20001c9c 	.word	0x20001c9c
   105bc:	4000d100 	.word	0x4000d100
   105c0:	4000d000 	.word	0x4000d000
   105c4:	e000e100 	.word	0xe000e100

000105c8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   105c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   105ca:	4c1d      	ldr	r4, [pc, #116]	; (10640 <entropy_nrf5_init+0x78>)
   105cc:	2201      	movs	r2, #1
   105ce:	4611      	mov	r1, r2
   105d0:	4620      	mov	r0, r4
   105d2:	f006 fc5a 	bl	16e8a <z_impl_k_sem_init>
   105d6:	f104 0018 	add.w	r0, r4, #24
   105da:	2201      	movs	r2, #1
   105dc:	2100      	movs	r1, #0
   105de:	f006 fc54 	bl	16e8a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   105e2:	2307      	movs	r3, #7
   105e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	rngp->threshold	  = threshold;
   105e8:	2304      	movs	r3, #4
   105ea:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	rngp->first_alloc = 0U;
   105ee:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   105f2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->mask	  = size - 1;
   105f4:	230c      	movs	r3, #12
   105f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   105fa:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   105fc:	4b11      	ldr	r3, [pc, #68]	; (10644 <entropy_nrf5_init+0x7c>)
   105fe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   10602:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	rngp->last	  = 0U;
   10606:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   1060a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1060e:	f042 0201 	orr.w	r2, r2, #1
   10612:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   10616:	4a0c      	ldr	r2, [pc, #48]	; (10648 <entropy_nrf5_init+0x80>)
   10618:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   1061a:	6812      	ldr	r2, [r2, #0]
   1061c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1061e:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = mask;
   10620:	2201      	movs	r2, #1
   10622:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   10626:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   10628:	601a      	str	r2, [r3, #0]
   1062a:	200d      	movs	r0, #13
   1062c:	462a      	mov	r2, r5
   1062e:	f7f4 fdf3 	bl	5218 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   10632:	200d      	movs	r0, #13
   10634:	f7f4 fdbe 	bl	51b4 <z_arch_irq_enable>

	return 0;
}
   10638:	4628      	mov	r0, r5
   1063a:	b003      	add	sp, #12
   1063c:	bd30      	pop	{r4, r5, pc}
   1063e:	bf00      	nop
   10640:	20001c6c 	.word	0x20001c6c
   10644:	4000d000 	.word	0x4000d000
   10648:	4000d100 	.word	0x4000d100

0001064c <isr>:
{
   1064c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1064e:	f7ff ff49 	bl	104e4 <random_byte_get>
	if (byte < 0) {
   10652:	2800      	cmp	r0, #0
   10654:	db20      	blt.n	10698 <isr+0x4c>
	u8_t last  = rngp->last;
   10656:	4b17      	ldr	r3, [pc, #92]	; (106b4 <isr+0x68>)
   10658:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1065c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   10660:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   10664:	1a51      	subs	r1, r2, r1
   10666:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1066a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1066c:	d10d      	bne.n	1068a <isr+0x3e>
	u8_t last  = rngp->last;
   1066e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   10672:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   10676:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1067a:	1a51      	subs	r1, r2, r1
   1067c:	ea34 0101 	bics.w	r1, r4, r1
   10680:	d10b      	bne.n	1069a <isr+0x4e>
   10682:	4b0d      	ldr	r3, [pc, #52]	; (106b8 <isr+0x6c>)
   10684:	2201      	movs	r2, #1
   10686:	601a      	str	r2, [r3, #0]
   10688:	e00e      	b.n	106a8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1068a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1068c:	3201      	adds	r2, #1
   1068e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   10690:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   10694:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   10698:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1069a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1069c:	3201      	adds	r2, #1
   1069e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   106a0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   106a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   106a8:	4804      	ldr	r0, [pc, #16]	; (106bc <isr+0x70>)
}
   106aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106ae:	f000 be1b 	b.w	112e8 <z_impl_k_sem_give>
   106b2:	bf00      	nop
   106b4:	20001c6c 	.word	0x20001c6c
   106b8:	4000d004 	.word	0x4000d004
   106bc:	20001c84 	.word	0x20001c84

000106c0 <button_pressed>:
	return err;
}

static void button_pressed(struct device *gpio_dev, struct gpio_callback *cb,
		    u32_t pins)
{
   106c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   106c2:	f04f 0320 	mov.w	r3, #32
   106c6:	f3ef 8511 	mrs	r5, BASEPRI
   106ca:	f383 8811 	msr	BASEPRI, r3
   106ce:	f3bf 8f6f 	isb	sy
			err = gpio_pin_disable_callback(button_devs[i],
   106d2:	4e11      	ldr	r6, [pc, #68]	; (10718 <button_pressed+0x58>)
			  button_pins[i].number);
   106d4:	4f11      	ldr	r7, [pc, #68]	; (1071c <button_pressed+0x5c>)
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   106d6:	2400      	movs	r4, #0
			  button_pins[i].number);
   106d8:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   106dc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   106e0:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   106e2:	6843      	ldr	r3, [r0, #4]
   106e4:	695b      	ldr	r3, [r3, #20]
   106e6:	b1a3      	cbz	r3, 10712 <button_pressed+0x52>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   106e8:	2100      	movs	r1, #0
   106ea:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   106ec:	3401      	adds	r4, #1
   106ee:	2c04      	cmp	r4, #4
   106f0:	d001      	beq.n	106f6 <button_pressed+0x36>
   106f2:	2800      	cmp	r0, #0
   106f4:	d0f0      	beq.n	106d8 <button_pressed+0x18>

	if (err) {
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   106f6:	4b0a      	ldr	r3, [pc, #40]	; (10720 <button_pressed+0x60>)
   106f8:	781a      	ldrb	r2, [r3, #0]
   106fa:	b92a      	cbnz	r2, 10708 <button_pressed+0x48>
	case STATE_WAITING:
		state = STATE_SCANNING;
   106fc:	2201      	movs	r2, #1
   106fe:	4909      	ldr	r1, [pc, #36]	; (10724 <button_pressed+0x64>)
   10700:	4809      	ldr	r0, [pc, #36]	; (10728 <button_pressed+0x68>)
   10702:	701a      	strb	r2, [r3, #0]
   10704:	f000 ff44 	bl	11590 <k_delayed_work_submit_to_queue>
	__asm__ volatile(
   10708:	f385 8811 	msr	BASEPRI, r5
   1070c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   10710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
   10712:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10716:	e7e9      	b.n	106ec <button_pressed+0x2c>
   10718:	20001cc0 	.word	0x20001cc0
   1071c:	000179dc 	.word	0x000179dc
   10720:	200022de 	.word	0x200022de
   10724:	20001cd4 	.word	0x20001cd4
   10728:	20001f38 	.word	0x20001f38

0001072c <buttons_scan_fn>:
{
   1072c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
		if (gpio_pin_read(
   10730:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1081c <buttons_scan_fn+0xf0>
			button_devs[i], button_pins[i].number, &val)) {
   10734:	4e31      	ldr	r6, [pc, #196]	; (107fc <buttons_scan_fn+0xd0>)
	u32_t ret = 0;
   10736:	2400      	movs	r4, #0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10738:	4625      	mov	r5, r4
   1073a:	4647      	mov	r7, r8
		if (gpio_pin_read(
   1073c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
			button_devs[i], button_pins[i].number, &val)) {
   10740:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
	return api->read(port, access_op, pin, value);
   10744:	6843      	ldr	r3, [r0, #4]
   10746:	7912      	ldrb	r2, [r2, #4]
   10748:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1074c:	2100      	movs	r1, #0
   1074e:	ab01      	add	r3, sp, #4
   10750:	47c8      	blx	r9
		if (gpio_pin_read(
   10752:	b310      	cbz	r0, 1079a <buttons_scan_fn+0x6e>
			return 0;
   10754:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10756:	4b2a      	ldr	r3, [pc, #168]	; (10800 <buttons_scan_fn+0xd4>)
   10758:	f3bf 8f5b 	dmb	ish
   1075c:	e853 2f00 	ldrex	r2, [r3]
   10760:	e843 4100 	strex	r1, r4, [r3]
   10764:	2900      	cmp	r1, #0
   10766:	d1f9      	bne.n	1075c <buttons_scan_fn+0x30>
   10768:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1076c:	4b25      	ldr	r3, [pc, #148]	; (10804 <buttons_scan_fn+0xd8>)
   1076e:	4d26      	ldr	r5, [pc, #152]	; (10808 <buttons_scan_fn+0xdc>)
   10770:	781a      	ldrb	r2, [r3, #0]
   10772:	b9da      	cbnz	r2, 107ac <buttons_scan_fn+0x80>
		if (button_handler_cb != NULL) {
   10774:	4b25      	ldr	r3, [pc, #148]	; (1080c <buttons_scan_fn+0xe0>)
   10776:	681b      	ldr	r3, [r3, #0]
   10778:	b12b      	cbz	r3, 10786 <buttons_scan_fn+0x5a>
			if (button_scan != last_button_scan) {
   1077a:	6829      	ldr	r1, [r5, #0]
   1077c:	42a1      	cmp	r1, r4
   1077e:	d002      	beq.n	10786 <buttons_scan_fn+0x5a>
				button_handler_cb(button_scan, has_changed);
   10780:	4061      	eors	r1, r4
   10782:	4620      	mov	r0, r4
   10784:	4798      	blx	r3
	last_button_scan = button_scan;
   10786:	602c      	str	r4, [r5, #0]
	if (button_scan != 0) {
   10788:	b19c      	cbz	r4, 107b2 <buttons_scan_fn+0x86>
   1078a:	220a      	movs	r2, #10
   1078c:	4920      	ldr	r1, [pc, #128]	; (10810 <buttons_scan_fn+0xe4>)
   1078e:	4821      	ldr	r0, [pc, #132]	; (10814 <buttons_scan_fn+0xe8>)
   10790:	f000 fefe 	bl	11590 <k_delayed_work_submit_to_queue>
}
   10794:	b003      	add	sp, #12
   10796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1079a:	9b01      	ldr	r3, [sp, #4]
   1079c:	b913      	cbnz	r3, 107a4 <buttons_scan_fn+0x78>
			ret |= 1U << i;
   1079e:	2301      	movs	r3, #1
   107a0:	40ab      	lsls	r3, r5
   107a2:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   107a4:	3501      	adds	r5, #1
   107a6:	2d04      	cmp	r5, #4
   107a8:	d1c8      	bne.n	1073c <buttons_scan_fn+0x10>
   107aa:	e7d4      	b.n	10756 <buttons_scan_fn+0x2a>
		initial_run = false;
   107ac:	2200      	movs	r2, #0
   107ae:	701a      	strb	r2, [r3, #0]
   107b0:	e7e9      	b.n	10786 <buttons_scan_fn+0x5a>
	__asm__ volatile(
   107b2:	f04f 0320 	mov.w	r3, #32
   107b6:	f3ef 8511 	mrs	r5, BASEPRI
   107ba:	f383 8811 	msr	BASEPRI, r3
   107be:	f3bf 8f6f 	isb	sy
		switch (state) {
   107c2:	4b15      	ldr	r3, [pc, #84]	; (10818 <buttons_scan_fn+0xec>)
   107c4:	781a      	ldrb	r2, [r3, #0]
   107c6:	2a01      	cmp	r2, #1
   107c8:	d10f      	bne.n	107ea <buttons_scan_fn+0xbe>
			state = STATE_WAITING;
   107ca:	701c      	strb	r4, [r3, #0]
			  button_pins[i].number);
   107cc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   107d0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   107d4:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   107d6:	6843      	ldr	r3, [r0, #4]
   107d8:	691b      	ldr	r3, [r3, #16]
   107da:	b15b      	cbz	r3, 107f4 <buttons_scan_fn+0xc8>
	return api->enable_callback(port, access_op, pin);
   107dc:	2100      	movs	r1, #0
   107de:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   107e0:	3401      	adds	r4, #1
   107e2:	2c04      	cmp	r4, #4
   107e4:	d001      	beq.n	107ea <buttons_scan_fn+0xbe>
   107e6:	2800      	cmp	r0, #0
   107e8:	d0f0      	beq.n	107cc <buttons_scan_fn+0xa0>
	__asm__ volatile(
   107ea:	f385 8811 	msr	BASEPRI, r5
   107ee:	f3bf 8f6f 	isb	sy
}
   107f2:	e7cf      	b.n	10794 <buttons_scan_fn+0x68>
		return -ENOTSUP;
   107f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   107f8:	e7f2      	b.n	107e0 <buttons_scan_fn+0xb4>
   107fa:	bf00      	nop
   107fc:	000179dc 	.word	0x000179dc
   10800:	20001d08 	.word	0x20001d08
   10804:	2000534b 	.word	0x2000534b
   10808:	20001d00 	.word	0x20001d00
   1080c:	20001cd0 	.word	0x20001cd0
   10810:	20001cd4 	.word	0x20001cd4
   10814:	20001f38 	.word	0x20001f38
   10818:	200022de 	.word	0x200022de
   1081c:	20001cc0 	.word	0x20001cc0

00010820 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10820:	4b07      	ldr	r3, [pc, #28]	; (10840 <dk_read_buttons+0x20>)
   10822:	f3bf 8f5b 	dmb	ish
   10826:	681b      	ldr	r3, [r3, #0]
   10828:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(u32_t *button_state, u32_t *has_changed)
{
	static u32_t last_state;
	u32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   1082c:	b100      	cbz	r0, 10830 <dk_read_buttons+0x10>
		*button_state = current_state;
   1082e:	6003      	str	r3, [r0, #0]
   10830:	4804      	ldr	r0, [pc, #16]	; (10844 <dk_read_buttons+0x24>)
	}

	if (has_changed != NULL) {
   10832:	b111      	cbz	r1, 1083a <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   10834:	6802      	ldr	r2, [r0, #0]
   10836:	405a      	eors	r2, r3
   10838:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   1083a:	6003      	str	r3, [r0, #0]
}
   1083c:	4770      	bx	lr
   1083e:	bf00      	nop
   10840:	20001d08 	.word	0x20001d08
   10844:	20001d04 	.word	0x20001d04

00010848 <dk_buttons_init>:
{
   10848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	button_handler_cb = button_handler;
   1084c:	4b3d      	ldr	r3, [pc, #244]	; (10944 <dk_buttons_init+0xfc>)
		button_devs[i] = device_get_binding(button_pins[i].port);
   1084e:	4e3e      	ldr	r6, [pc, #248]	; (10948 <dk_buttons_init+0x100>)
   10850:	4f3e      	ldr	r7, [pc, #248]	; (1094c <dk_buttons_init+0x104>)
	button_handler_cb = button_handler;
   10852:	6018      	str	r0, [r3, #0]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10854:	2500      	movs	r5, #0
   10856:	46b1      	mov	r9, r6
   10858:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   1085c:	f000 f89a 	bl	10994 <z_impl_device_get_binding>
   10860:	00ec      	lsls	r4, r5, #3
		button_devs[i] = device_get_binding(button_pins[i].port);
   10862:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		if (!button_devs[i]) {
   10866:	2800      	cmp	r0, #0
   10868:	d068      	beq.n	1093c <dk_buttons_init+0xf4>
	return api->config(port, access_op, pin, flags);
   1086a:	6843      	ldr	r3, [r0, #4]
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1086c:	4434      	add	r4, r6
   1086e:	f8d3 8000 	ldr.w	r8, [r3]
   10872:	7922      	ldrb	r2, [r4, #4]
   10874:	f44f 7380 	mov.w	r3, #256	; 0x100
   10878:	2100      	movs	r1, #0
   1087a:	47c0      	blx	r8
		if (err) {
   1087c:	4604      	mov	r4, r0
   1087e:	b9a0      	cbnz	r0, 108aa <dk_buttons_init+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10880:	3501      	adds	r5, #1
   10882:	2d04      	cmp	r5, #4
   10884:	d1e8      	bne.n	10858 <dk_buttons_init+0x10>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   10886:	4605      	mov	r5, r0
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   10888:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1088c:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   10890:	6843      	ldr	r3, [r0, #4]
   10892:	7912      	ldrb	r2, [r2, #4]
   10894:	681c      	ldr	r4, [r3, #0]
   10896:	2100      	movs	r1, #0
   10898:	f44f 7381 	mov.w	r3, #258	; 0x102
   1089c:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1089e:	3501      	adds	r5, #1
   108a0:	2d04      	cmp	r5, #4
   108a2:	4604      	mov	r4, r0
   108a4:	d004      	beq.n	108b0 <dk_buttons_init+0x68>
   108a6:	2800      	cmp	r0, #0
   108a8:	d0ee      	beq.n	10888 <dk_buttons_init+0x40>
}
   108aa:	4620      	mov	r0, r4
   108ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (err) {
   108b0:	2800      	cmp	r0, #0
   108b2:	d1fa      	bne.n	108aa <dk_buttons_init+0x62>
	u32_t pin_mask = 0;
   108b4:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   108b6:	4605      	mov	r5, r0
		pin_mask |= BIT(button_pins[i].number);
   108b8:	f04f 0a01 	mov.w	sl, #1
			button_pins[i].number);
   108bc:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   108c0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
			button_pins[i].number);
   108c4:	f893 8004 	ldrb.w	r8, [r3, #4]
	if (api->disable_callback == NULL) {
   108c8:	6843      	ldr	r3, [r0, #4]
   108ca:	695b      	ldr	r3, [r3, #20]
   108cc:	b913      	cbnz	r3, 108d4 <dk_buttons_init+0x8c>
		return -ENOTSUP;
   108ce:	f06f 0422 	mvn.w	r4, #34	; 0x22
   108d2:	e7ea      	b.n	108aa <dk_buttons_init+0x62>
	return api->disable_callback(port, access_op, pin);
   108d4:	4642      	mov	r2, r8
   108d6:	2100      	movs	r1, #0
   108d8:	4798      	blx	r3
		if (err) {
   108da:	4604      	mov	r4, r0
   108dc:	2800      	cmp	r0, #0
   108de:	d1e4      	bne.n	108aa <dk_buttons_init+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   108e0:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   108e2:	fa0a f808 	lsl.w	r8, sl, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   108e6:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   108e8:	ea46 0608 	orr.w	r6, r6, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   108ec:	d1e6      	bne.n	108bc <dk_buttons_init+0x74>
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   108ee:	4d18      	ldr	r5, [pc, #96]	; (10950 <dk_buttons_init+0x108>)
   108f0:	4b18      	ldr	r3, [pc, #96]	; (10954 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   108f2:	e9c5 3601 	strd	r3, r6, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   108f6:	4606      	mov	r6, r0
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   108f8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   108fc:	6843      	ldr	r3, [r0, #4]
   108fe:	68db      	ldr	r3, [r3, #12]
   10900:	2b00      	cmp	r3, #0
   10902:	d0e4      	beq.n	108ce <dk_buttons_init+0x86>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10904:	2201      	movs	r2, #1
   10906:	4629      	mov	r1, r5
   10908:	4798      	blx	r3
		if (err) {
   1090a:	4604      	mov	r4, r0
   1090c:	2800      	cmp	r0, #0
   1090e:	d1cc      	bne.n	108aa <dk_buttons_init+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10910:	3601      	adds	r6, #1
   10912:	2e04      	cmp	r6, #4
   10914:	d1f0      	bne.n	108f8 <dk_buttons_init+0xb0>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   10916:	4910      	ldr	r1, [pc, #64]	; (10958 <dk_buttons_init+0x110>)
   10918:	4810      	ldr	r0, [pc, #64]	; (1095c <dk_buttons_init+0x114>)
   1091a:	f006 fb53 	bl	16fc4 <k_delayed_work_init>
	state = STATE_SCANNING;
   1091e:	4b10      	ldr	r3, [pc, #64]	; (10960 <dk_buttons_init+0x118>)
   10920:	490e      	ldr	r1, [pc, #56]	; (1095c <dk_buttons_init+0x114>)
   10922:	4810      	ldr	r0, [pc, #64]	; (10964 <dk_buttons_init+0x11c>)
   10924:	2201      	movs	r2, #1
   10926:	701a      	strb	r2, [r3, #0]
   10928:	4622      	mov	r2, r4
   1092a:	f000 fe31 	bl	11590 <k_delayed_work_submit_to_queue>
	if (err) {
   1092e:	4604      	mov	r4, r0
   10930:	2800      	cmp	r0, #0
   10932:	d1ba      	bne.n	108aa <dk_buttons_init+0x62>
	dk_read_buttons(NULL, NULL);
   10934:	4601      	mov	r1, r0
   10936:	f7ff ff73 	bl	10820 <dk_read_buttons>
	return 0;
   1093a:	e7b6      	b.n	108aa <dk_buttons_init+0x62>
			return -ENODEV;
   1093c:	f06f 0412 	mvn.w	r4, #18
   10940:	e7b3      	b.n	108aa <dk_buttons_init+0x62>
   10942:	bf00      	nop
   10944:	20001cd0 	.word	0x20001cd0
   10948:	000179dc 	.word	0x000179dc
   1094c:	20001cc0 	.word	0x20001cc0
   10950:	20001cf4 	.word	0x20001cf4
   10954:	000106c1 	.word	0x000106c1
   10958:	0001072d 	.word	0x0001072d
   1095c:	20001cd4 	.word	0x20001cd4
   10960:	200022de 	.word	0x200022de
   10964:	20001f38 	.word	0x20001f38

00010968 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   10968:	4b09      	ldr	r3, [pc, #36]	; (10990 <z_sys_device_do_config_level+0x28>)
{
   1096a:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1096c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10970:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   10972:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   10974:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   10978:	42a5      	cmp	r5, r4
   1097a:	d800      	bhi.n	1097e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1097c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1097e:	6823      	ldr	r3, [r4, #0]
   10980:	4620      	mov	r0, r4
   10982:	685b      	ldr	r3, [r3, #4]
   10984:	4798      	blx	r3
		if (retval != 0) {
   10986:	b100      	cbz	r0, 1098a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   10988:	6066      	str	r6, [r4, #4]
								info++) {
   1098a:	340c      	adds	r4, #12
   1098c:	e7f4      	b.n	10978 <z_sys_device_do_config_level+0x10>
   1098e:	bf00      	nop
   10990:	000179fc 	.word	0x000179fc

00010994 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   10994:	4b10      	ldr	r3, [pc, #64]	; (109d8 <z_impl_device_get_binding+0x44>)
{
   10996:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   10998:	4c10      	ldr	r4, [pc, #64]	; (109dc <z_impl_device_get_binding+0x48>)
{
   1099a:	4605      	mov	r5, r0
   1099c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1099e:	429c      	cmp	r4, r3
   109a0:	d104      	bne.n	109ac <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   109a2:	4c0e      	ldr	r4, [pc, #56]	; (109dc <z_impl_device_get_binding+0x48>)
   109a4:	42b4      	cmp	r4, r6
   109a6:	d109      	bne.n	109bc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   109a8:	2400      	movs	r4, #0
   109aa:	e012      	b.n	109d2 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   109ac:	6862      	ldr	r2, [r4, #4]
   109ae:	b11a      	cbz	r2, 109b8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   109b0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   109b2:	6812      	ldr	r2, [r2, #0]
   109b4:	42aa      	cmp	r2, r5
   109b6:	d00c      	beq.n	109d2 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   109b8:	340c      	adds	r4, #12
   109ba:	e7f0      	b.n	1099e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   109bc:	6863      	ldr	r3, [r4, #4]
   109be:	b90b      	cbnz	r3, 109c4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   109c0:	340c      	adds	r4, #12
   109c2:	e7ef      	b.n	109a4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   109c4:	6823      	ldr	r3, [r4, #0]
   109c6:	4628      	mov	r0, r5
   109c8:	6819      	ldr	r1, [r3, #0]
   109ca:	f002 fd2e 	bl	1342a <strcmp>
   109ce:	2800      	cmp	r0, #0
   109d0:	d1f6      	bne.n	109c0 <z_impl_device_get_binding+0x2c>
}
   109d2:	4620      	mov	r0, r4
   109d4:	bd70      	pop	{r4, r5, r6, pc}
   109d6:	bf00      	nop
   109d8:	200053e8 	.word	0x200053e8
   109dc:	2000534c 	.word	0x2000534c

000109e0 <z_fatal_print>:
		return "Unknown error";
	}
}

void z_fatal_print(const char *fmt, ...)
{
   109e0:	b40f      	push	{r0, r1, r2, r3}
   109e2:	b513      	push	{r0, r1, r4, lr}
   109e4:	ab04      	add	r3, sp, #16
			.source_id = LOG_CURRENT_MODULE_ID(),
			.domain_id = CONFIG_LOG_DOMAIN_ID
		};
		log_generic(src_level, fmt, ap);
	} else {
		printk("FATAL: ");
   109e6:	4809      	ldr	r0, [pc, #36]	; (10a0c <z_fatal_print+0x2c>)
{
   109e8:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(ap, fmt);
   109ec:	9301      	str	r3, [sp, #4]
		printk("FATAL: ");
   109ee:	f001 fb96 	bl	1211e <printk>
		vprintk(fmt, ap);
   109f2:	9901      	ldr	r1, [sp, #4]
   109f4:	4620      	mov	r0, r4
   109f6:	f7f3 fbe7 	bl	41c8 <vprintk>
		printk("\n");
   109fa:	4805      	ldr	r0, [pc, #20]	; (10a10 <z_fatal_print+0x30>)
   109fc:	f001 fb8f 	bl	1211e <printk>
	}
	va_end(ap);
}
   10a00:	b002      	add	sp, #8
   10a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a06:	b004      	add	sp, #16
   10a08:	4770      	bx	lr
   10a0a:	bf00      	nop
   10a0c:	00018431 	.word	0x00018431
   10a10:	00017d17 	.word	0x00017d17

00010a14 <k_sys_fatal_error_handler>:
{
   10a14:	b510      	push	{r4, lr}
   10a16:	4604      	mov	r4, r0
	z_fatal_print("Halting system");
   10a18:	4802      	ldr	r0, [pc, #8]	; (10a24 <k_sys_fatal_error_handler+0x10>)
   10a1a:	f7ff ffe1 	bl	109e0 <z_fatal_print>
	z_arch_system_halt(reason);
   10a1e:	4620      	mov	r0, r4
   10a20:	f006 f80b 	bl	16a3a <z_arch_system_halt>
   10a24:	0001838c 	.word	0x0001838c

00010a28 <z_fatal_error>:
#endif /* CONFIG_LOG || CONFIG_PRINTK */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10a28:	b570      	push	{r4, r5, r6, lr}
   10a2a:	4604      	mov	r4, r0
   10a2c:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   10a2e:	f000 fc55 	bl	112dc <z_impl_k_current_get>
   10a32:	2c04      	cmp	r4, #4
   10a34:	bf96      	itet	ls
   10a36:	4b11      	ldrls	r3, [pc, #68]	; (10a7c <z_fatal_error+0x54>)
   10a38:	4a11      	ldrhi	r2, [pc, #68]	; (10a80 <z_fatal_error+0x58>)
   10a3a:	f853 2024 	ldrls.w	r2, [r3, r4, lsl #2]
   10a3e:	4605      	mov	r5, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	z_fatal_print(">>> ZEPHYR FATAL ERROR %d: %s", reason,
   10a40:	4621      	mov	r1, r4
   10a42:	4810      	ldr	r0, [pc, #64]	; (10a84 <z_fatal_error+0x5c>)
   10a44:	f7ff ffcc 	bl	109e0 <z_fatal_print>
	const char *thread_name = k_thread_name_get(thread);
   10a48:	4628      	mov	r0, r5
   10a4a:	f006 fa33 	bl	16eb4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   10a4e:	4602      	mov	r2, r0
   10a50:	b188      	cbz	r0, 10a76 <z_fatal_error+0x4e>
   10a52:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
   10a54:	4b0c      	ldr	r3, [pc, #48]	; (10a88 <z_fatal_error+0x60>)
   10a56:	2900      	cmp	r1, #0
   10a58:	bf08      	it	eq
   10a5a:	461a      	moveq	r2, r3
	 * if (k_is_in_isr()) {
	 *     printk("Fault during interrupt handling\n");
	 * }
	 */

	z_fatal_print("Current thread: %p (%s)", thread,
   10a5c:	4629      	mov	r1, r5
   10a5e:	480b      	ldr	r0, [pc, #44]	; (10a8c <z_fatal_error+0x64>)
   10a60:	f7ff ffbe 	bl	109e0 <z_fatal_print>
		      thread_name_get(thread));

	k_sys_fatal_error_handler(reason, esf);
   10a64:	4620      	mov	r0, r4
   10a66:	4631      	mov	r1, r6
   10a68:	f7ff ffd4 	bl	10a14 <k_sys_fatal_error_handler>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   10a6c:	4628      	mov	r0, r5
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   10a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10a72:	f7f4 bdcd 	b.w	5610 <z_impl_k_thread_abort>
		thread_name = "unknown";
   10a76:	4a04      	ldr	r2, [pc, #16]	; (10a88 <z_fatal_error+0x60>)
   10a78:	e7f0      	b.n	10a5c <z_fatal_error+0x34>
   10a7a:	bf00      	nop
   10a7c:	00017a14 	.word	0x00017a14
   10a80:	000183e5 	.word	0x000183e5
   10a84:	000183fb 	.word	0x000183fb
   10a88:	000183f3 	.word	0x000183f3
   10a8c:	00018419 	.word	0x00018419

00010a90 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10a90:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   10a92:	4d0b      	ldr	r5, [pc, #44]	; (10ac0 <idle+0x30>)
	__asm__ volatile(
   10a94:	f04f 0220 	mov.w	r2, #32
   10a98:	f3ef 8311 	mrs	r3, BASEPRI
   10a9c:	f382 8811 	msr	BASEPRI, r2
   10aa0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   10aa4:	f006 fac1 	bl	1702a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   10aa8:	2101      	movs	r1, #1
   10aaa:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   10aac:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   10aae:	bfd8      	it	le
   10ab0:	4608      	movle	r0, r1
   10ab2:	f006 faca 	bl	1704a <z_set_timeout_expiry>
	_kernel.idle = ticks;
   10ab6:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   10ab8:	f7f4 fb24 	bl	5104 <k_cpu_idle>
   10abc:	e7ea      	b.n	10a94 <idle+0x4>
   10abe:	bf00      	nop
   10ac0:	20001efc 	.word	0x20001efc

00010ac4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   10ac4:	4802      	ldr	r0, [pc, #8]	; (10ad0 <z_bss_zero+0xc>)
   10ac6:	4a03      	ldr	r2, [pc, #12]	; (10ad4 <z_bss_zero+0x10>)
   10ac8:	2100      	movs	r1, #0
   10aca:	1a12      	subs	r2, r2, r0
   10acc:	f002 bcf7 	b.w	134be <memset>
   10ad0:	20000000 	.word	0x20000000
   10ad4:	200022e0 	.word	0x200022e0

00010ad8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   10ad8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   10ada:	4806      	ldr	r0, [pc, #24]	; (10af4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   10adc:	4a06      	ldr	r2, [pc, #24]	; (10af8 <z_data_copy+0x20>)
   10ade:	4907      	ldr	r1, [pc, #28]	; (10afc <z_data_copy+0x24>)
   10ae0:	1a12      	subs	r2, r2, r0
   10ae2:	f002 fcbf 	bl	13464 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   10ae6:	4a06      	ldr	r2, [pc, #24]	; (10b00 <z_data_copy+0x28>)
   10ae8:	4906      	ldr	r1, [pc, #24]	; (10b04 <z_data_copy+0x2c>)
   10aea:	4807      	ldr	r0, [pc, #28]	; (10b08 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   10aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   10af0:	f002 bcb8 	b.w	13464 <memcpy>
   10af4:	20004e98 	.word	0x20004e98
   10af8:	20005618 	.word	0x20005618
   10afc:	000184af 	.word	0x000184af
   10b00:	00000000 	.word	0x00000000
   10b04:	000184a8 	.word	0x000184a8
   10b08:	20000000 	.word	0x20000000

00010b0c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   10b0c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10b0e:	2002      	movs	r0, #2
   10b10:	f7ff ff2a 	bl	10968 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   10b14:	4807      	ldr	r0, [pc, #28]	; (10b34 <bg_thread_main+0x28>)
   10b16:	f001 fb02 	bl	1211e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   10b1a:	2003      	movs	r0, #3
   10b1c:	f7ff ff24 	bl	10968 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   10b20:	f000 fcb8 	bl	11494 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   10b24:	f000 ff3a 	bl	1199c <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   10b28:	4a03      	ldr	r2, [pc, #12]	; (10b38 <bg_thread_main+0x2c>)
   10b2a:	7b13      	ldrb	r3, [r2, #12]
   10b2c:	f023 0301 	bic.w	r3, r3, #1
   10b30:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10b32:	bd08      	pop	{r3, pc}
   10b34:	00018439 	.word	0x00018439
   10b38:	20001d78 	.word	0x20001d78

00010b3c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   10b3c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   10b3e:	4b3f      	ldr	r3, [pc, #252]	; (10c3c <z_cstart+0x100>)
   10b40:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10b42:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   10b46:	4c3e      	ldr	r4, [pc, #248]	; (10c40 <z_cstart+0x104>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   10b48:	4e3e      	ldr	r6, [pc, #248]	; (10c44 <z_cstart+0x108>)
   10b4a:	6963      	ldr	r3, [r4, #20]
   10b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10b50:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b52:	2500      	movs	r5, #0
   10b54:	23e0      	movs	r3, #224	; 0xe0
   10b56:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   10b5a:	77e5      	strb	r5, [r4, #31]
   10b5c:	7625      	strb	r5, [r4, #24]
   10b5e:	7665      	strb	r5, [r4, #25]
   10b60:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10b64:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10b68:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
   10b6a:	f7f4 fd3d 	bl	55e8 <z_FaultInit>
	z_CpuIdleInit();
   10b6e:	f7f4 fac3 	bl	50f8 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10b72:	f04f 33ff 	mov.w	r3, #4294967295
   10b76:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10b78:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
   10b7a:	ab07      	add	r3, sp, #28
   10b7c:	4629      	mov	r1, r5
   10b7e:	226c      	movs	r2, #108	; 0x6c
   10b80:	4618      	mov	r0, r3
   10b82:	f002 fc9c 	bl	134be <memset>
   10b86:	2701      	movs	r7, #1
	_current = &dummy_thread;
   10b88:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10b8a:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
   10b8c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10b90:	f7ff feea 	bl	10968 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10b94:	4638      	mov	r0, r7
   10b96:	f7ff fee7 	bl	10968 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
   10b9a:	4c2b      	ldr	r4, [pc, #172]	; (10c48 <z_cstart+0x10c>)
	z_sched_init();
   10b9c:	f000 fb48 	bl	11230 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   10ba0:	4b2a      	ldr	r3, [pc, #168]	; (10c4c <z_cstart+0x110>)
	_kernel.ready_q.cache = _main_thread;
   10ba2:	6274      	str	r4, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   10ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10ba8:	e9cd 7304 	strd	r7, r3, [sp, #16]
   10bac:	e9cd 5502 	strd	r5, r5, [sp, #8]
   10bb0:	e9cd 5500 	strd	r5, r5, [sp]
   10bb4:	4b26      	ldr	r3, [pc, #152]	; (10c50 <z_cstart+0x114>)
   10bb6:	4927      	ldr	r1, [pc, #156]	; (10c54 <z_cstart+0x118>)
   10bb8:	4620      	mov	r0, r4
   10bba:	f000 fc21 	bl	11400 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10bbe:	7b63      	ldrb	r3, [r4, #13]
   10bc0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10bc4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10bc8:	7362      	strb	r2, [r4, #13]
   10bca:	4635      	mov	r5, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10bcc:	d104      	bne.n	10bd8 <z_cstart+0x9c>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   10bce:	69a3      	ldr	r3, [r4, #24]
   10bd0:	b913      	cbnz	r3, 10bd8 <z_cstart+0x9c>
		z_add_thread_to_ready_q(thread);
   10bd2:	4620      	mov	r0, r4
   10bd4:	f000 f9ae 	bl	10f34 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   10bd8:	4b1f      	ldr	r3, [pc, #124]	; (10c58 <z_cstart+0x11c>)
   10bda:	4e20      	ldr	r6, [pc, #128]	; (10c5c <z_cstart+0x120>)
   10bdc:	9305      	str	r3, [sp, #20]
   10bde:	2201      	movs	r2, #1
   10be0:	230f      	movs	r3, #15
   10be2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   10be6:	2300      	movs	r3, #0
   10be8:	f44f 7280 	mov.w	r2, #256	; 0x100
   10bec:	491c      	ldr	r1, [pc, #112]	; (10c60 <z_cstart+0x124>)
   10bee:	9300      	str	r3, [sp, #0]
   10bf0:	4630      	mov	r0, r6
   10bf2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10bf6:	4b1b      	ldr	r3, [pc, #108]	; (10c64 <z_cstart+0x128>)
   10bf8:	f000 fc02 	bl	11400 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10bfc:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   10bfe:	60ee      	str	r6, [r5, #12]
   10c00:	f023 0304 	bic.w	r3, r3, #4
   10c04:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10c06:	4b18      	ldr	r3, [pc, #96]	; (10c68 <z_cstart+0x12c>)
	list->tail = (sys_dnode_t *)list;
   10c08:	e9c5 3306 	strd	r3, r3, [r5, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   10c0c:	f7f4 fd26 	bl	565c <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   10c10:	480d      	ldr	r0, [pc, #52]	; (10c48 <z_cstart+0x10c>)
	_current = main_thread;
   10c12:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   10c14:	f002 fbef 	bl	133f6 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10c18:	4b0d      	ldr	r3, [pc, #52]	; (10c50 <z_cstart+0x114>)
   10c1a:	4a14      	ldr	r2, [pc, #80]	; (10c6c <z_cstart+0x130>)
   10c1c:	4618      	mov	r0, r3
   10c1e:	f382 8809 	msr	PSP, r2
   10c22:	b663      	cpsie	if
   10c24:	f04f 0100 	mov.w	r1, #0
   10c28:	f381 8811 	msr	BASEPRI, r1
   10c2c:	f3bf 8f6f 	isb	sy
   10c30:	2100      	movs	r1, #0
   10c32:	2200      	movs	r2, #0
   10c34:	2300      	movs	r3, #0
   10c36:	f001 f8b0 	bl	11d9a <z_thread_entry>
   10c3a:	bf00      	nop
   10c3c:	200044f0 	.word	0x200044f0
   10c40:	e000ed00 	.word	0xe000ed00
   10c44:	20001efc 	.word	0x20001efc
   10c48:	20001d78 	.word	0x20001d78
   10c4c:	00018489 	.word	0x00018489
   10c50:	00010b0d 	.word	0x00010b0d
   10c54:	200037f0 	.word	0x200037f0
   10c58:	0001848e 	.word	0x0001848e
   10c5c:	20001d0c 	.word	0x20001d0c
   10c60:	20003bf0 	.word	0x20003bf0
   10c64:	00010a91 	.word	0x00010a91
   10c68:	20001f14 	.word	0x20001f14
   10c6c:	20003bf0 	.word	0x20003bf0

00010c70 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   10c70:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   10c72:	4c07      	ldr	r4, [pc, #28]	; (10c90 <init_static_pools+0x20>)
   10c74:	4d07      	ldr	r5, [pc, #28]	; (10c94 <init_static_pools+0x24>)
   10c76:	42ac      	cmp	r4, r5
   10c78:	d301      	bcc.n	10c7e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   10c7a:	2000      	movs	r0, #0
   10c7c:	bd38      	pop	{r3, r4, r5, pc}
   10c7e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   10c82:	4620      	mov	r0, r4
   10c84:	e9c4 3305 	strd	r3, r3, [r4, #20]
   10c88:	f000 fef2 	bl	11a70 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   10c8c:	341c      	adds	r4, #28
   10c8e:	e7f2      	b.n	10c76 <init_static_pools+0x6>
   10c90:	20005478 	.word	0x20005478
   10c94:	20005494 	.word	0x20005494

00010c98 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   10c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   10c9c:	1e1d      	subs	r5, r3, #0
{
   10c9e:	b085      	sub	sp, #20
   10ca0:	4607      	mov	r7, r0
   10ca2:	460c      	mov	r4, r1
   10ca4:	4692      	mov	sl, r2
	if (timeout > 0) {
   10ca6:	dd4a      	ble.n	10d3e <k_mem_pool_alloc+0xa6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   10ca8:	f006 f9f8 	bl	1709c <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   10cac:	eb10 0805 	adds.w	r8, r0, r5
	return pool - &_k_mem_pool_list_start[0];
   10cb0:	4b24      	ldr	r3, [pc, #144]	; (10d44 <k_mem_pool_alloc+0xac>)
   10cb2:	4e25      	ldr	r6, [pc, #148]	; (10d48 <k_mem_pool_alloc+0xb0>)
   10cb4:	1afb      	subs	r3, r7, r3
   10cb6:	109b      	asrs	r3, r3, #2
   10cb8:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   10cba:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   10cbc:	f107 0b14 	add.w	fp, r7, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   10cc0:	9400      	str	r4, [sp, #0]
   10cc2:	ab03      	add	r3, sp, #12
   10cc4:	aa02      	add	r2, sp, #8
   10cc6:	4651      	mov	r1, sl
   10cc8:	4638      	mov	r0, r7
   10cca:	f000 ff1b 	bl	11b04 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   10cce:	f110 0f0b 	cmn.w	r0, #11
   10cd2:	d10b      	bne.n	10cec <k_mem_pool_alloc+0x54>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   10cd4:	9400      	str	r4, [sp, #0]
   10cd6:	ab03      	add	r3, sp, #12
   10cd8:	aa02      	add	r2, sp, #8
   10cda:	4651      	mov	r1, sl
   10cdc:	4638      	mov	r0, r7
   10cde:	f000 ff11 	bl	11b04 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   10ce2:	f110 0f0b 	cmn.w	r0, #11
   10ce6:	bf08      	it	eq
   10ce8:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   10cec:	7963      	ldrb	r3, [r4, #5]
   10cee:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   10cf0:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   10cf2:	f362 0303 	bfi	r3, r2, #0, #4
   10cf6:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   10cf8:	6863      	ldr	r3, [r4, #4]
   10cfa:	9a03      	ldr	r2, [sp, #12]
   10cfc:	f362 331f 	bfi	r3, r2, #12, #20
   10d00:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   10d02:	b1c8      	cbz	r0, 10d38 <k_mem_pool_alloc+0xa0>
   10d04:	b1c5      	cbz	r5, 10d38 <k_mem_pool_alloc+0xa0>
   10d06:	f110 0f0c 	cmn.w	r0, #12
   10d0a:	d115      	bne.n	10d38 <k_mem_pool_alloc+0xa0>
   10d0c:	f04f 0320 	mov.w	r3, #32
   10d10:	f3ef 8011 	mrs	r0, BASEPRI
   10d14:	f383 8811 	msr	BASEPRI, r3
   10d18:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   10d1c:	462a      	mov	r2, r5
   10d1e:	4659      	mov	r1, fp
   10d20:	f000 fa20 	bl	11164 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   10d24:	1c6b      	adds	r3, r5, #1
   10d26:	d0cb      	beq.n	10cc0 <k_mem_pool_alloc+0x28>
   10d28:	f006 f9b8 	bl	1709c <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   10d2c:	eba8 0500 	sub.w	r5, r8, r0
			if (timeout <= 0) {
   10d30:	2d00      	cmp	r5, #0
   10d32:	dcc5      	bgt.n	10cc0 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   10d34:	f06f 000a 	mvn.w	r0, #10
}
   10d38:	b005      	add	sp, #20
   10d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   10d3e:	f04f 0800 	mov.w	r8, #0
   10d42:	e7b5      	b.n	10cb0 <k_mem_pool_alloc+0x18>
   10d44:	20005478 	.word	0x20005478
   10d48:	b6db6db7 	.word	0xb6db6db7

00010d4c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   10d4c:	b570      	push	{r4, r5, r6, lr}
   10d4e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   10d50:	6802      	ldr	r2, [r0, #0]
   10d52:	7841      	ldrb	r1, [r0, #1]
   10d54:	4e11      	ldr	r6, [pc, #68]	; (10d9c <k_mem_pool_free_id+0x50>)
   10d56:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   10d5a:	00a4      	lsls	r4, r4, #2
   10d5c:	0b12      	lsrs	r2, r2, #12
   10d5e:	f001 010f 	and.w	r1, r1, #15
   10d62:	1930      	adds	r0, r6, r4
   10d64:	f000 ff83 	bl	11c6e <z_sys_mem_pool_block_free>
   10d68:	f04f 0320 	mov.w	r3, #32
   10d6c:	f3ef 8511 	mrs	r5, BASEPRI
   10d70:	f383 8811 	msr	BASEPRI, r3
   10d74:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   10d78:	f104 0014 	add.w	r0, r4, #20
   10d7c:	4430      	add	r0, r6
   10d7e:	f006 f84f 	bl	16e20 <z_unpend_all>

	if (need_sched != 0) {
   10d82:	b128      	cbz	r0, 10d90 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   10d84:	4629      	mov	r1, r5
   10d86:	4806      	ldr	r0, [pc, #24]	; (10da0 <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   10d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   10d8c:	f005 bf9d 	b.w	16cca <z_reschedule>
	__asm__ volatile(
   10d90:	f385 8811 	msr	BASEPRI, r5
   10d94:	f3bf 8f6f 	isb	sy
}
   10d98:	bd70      	pop	{r4, r5, r6, pc}
   10d9a:	bf00      	nop
   10d9c:	20005478 	.word	0x20005478
   10da0:	200022df 	.word	0x200022df

00010da4 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   10da4:	4601      	mov	r1, r0
   10da6:	4801      	ldr	r0, [pc, #4]	; (10dac <k_malloc+0x8>)
   10da8:	f005 be55 	b.w	16a56 <k_mem_pool_malloc>
   10dac:	20005478 	.word	0x20005478

00010db0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   10db0:	4b03      	ldr	r3, [pc, #12]	; (10dc0 <z_thread_malloc+0x10>)
   10db2:	689b      	ldr	r3, [r3, #8]
{
   10db4:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   10db6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   10db8:	b108      	cbz	r0, 10dbe <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   10dba:	f005 be4c 	b.w	16a56 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   10dbe:	4770      	bx	lr
   10dc0:	20001efc 	.word	0x20001efc

00010dc4 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10dc4:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   10dc8:	280d      	cmp	r0, #13
   10dca:	d809      	bhi.n	10de0 <resched.part.15+0x1c>
   10dcc:	b128      	cbz	r0, 10dda <resched.part.15+0x16>
   10dce:	4b05      	ldr	r3, [pc, #20]	; (10de4 <resched.part.15+0x20>)
   10dd0:	6858      	ldr	r0, [r3, #4]
   10dd2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   10dd6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
   10dda:	f080 0001 	eor.w	r0, r0, #1
   10dde:	4770      	bx	lr
   10de0:	2001      	movs	r0, #1
   10de2:	e7fa      	b.n	10dda <resched.part.15+0x16>
   10de4:	e000ed00 	.word	0xe000ed00

00010de8 <reset_time_slice>:
{
   10de8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   10dea:	4c08      	ldr	r4, [pc, #32]	; (10e0c <reset_time_slice+0x24>)
   10dec:	6823      	ldr	r3, [r4, #0]
   10dee:	b15b      	cbz	r3, 10e08 <reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   10df0:	f7f4 f86a 	bl	4ec8 <z_clock_elapsed>
   10df4:	6823      	ldr	r3, [r4, #0]
   10df6:	4a06      	ldr	r2, [pc, #24]	; (10e10 <reset_time_slice+0x28>)
   10df8:	4418      	add	r0, r3
   10dfa:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10dfc:	2100      	movs	r1, #0
   10dfe:	4618      	mov	r0, r3
}
   10e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   10e04:	f006 b921 	b.w	1704a <z_set_timeout_expiry>
}
   10e08:	bd10      	pop	{r4, pc}
   10e0a:	bf00      	nop
   10e0c:	20001f34 	.word	0x20001f34
   10e10:	20001efc 	.word	0x20001efc

00010e14 <k_sched_time_slice_set>:
{
   10e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e16:	460d      	mov	r5, r1
	__asm__ volatile(
   10e18:	f04f 0320 	mov.w	r3, #32
   10e1c:	f3ef 8411 	mrs	r4, BASEPRI
   10e20:	f383 8811 	msr	BASEPRI, r3
   10e24:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
   10e28:	4b0d      	ldr	r3, [pc, #52]	; (10e60 <k_sched_time_slice_set+0x4c>)

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   10e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10e2e:	f240 36e7 	movw	r6, #999	; 0x3e7
   10e32:	2700      	movs	r7, #0
   10e34:	fbc1 6700 	smlal	r6, r7, r1, r0
   10e38:	2200      	movs	r2, #0
   10e3a:	611a      	str	r2, [r3, #16]
   10e3c:	4630      	mov	r0, r6
   10e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e42:	2300      	movs	r3, #0
   10e44:	4639      	mov	r1, r7
   10e46:	f7ef fbdb 	bl	600 <__aeabi_ldivmod>
   10e4a:	4b06      	ldr	r3, [pc, #24]	; (10e64 <k_sched_time_slice_set+0x50>)
   10e4c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   10e4e:	4b06      	ldr	r3, [pc, #24]	; (10e68 <k_sched_time_slice_set+0x54>)
   10e50:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   10e52:	f7ff ffc9 	bl	10de8 <reset_time_slice>
	__asm__ volatile(
   10e56:	f384 8811 	msr	BASEPRI, r4
   10e5a:	f3bf 8f6f 	isb	sy
}
   10e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e60:	20001efc 	.word	0x20001efc
   10e64:	20001f34 	.word	0x20001f34
   10e68:	20001f30 	.word	0x20001f30

00010e6c <k_sched_lock>:
	__asm__ volatile(
   10e6c:	f04f 0320 	mov.w	r3, #32
   10e70:	f3ef 8111 	mrs	r1, BASEPRI
   10e74:	f383 8811 	msr	BASEPRI, r3
   10e78:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   10e7c:	4b04      	ldr	r3, [pc, #16]	; (10e90 <k_sched_lock+0x24>)
   10e7e:	689a      	ldr	r2, [r3, #8]
   10e80:	7bd3      	ldrb	r3, [r2, #15]
   10e82:	3b01      	subs	r3, #1
   10e84:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10e86:	f381 8811 	msr	BASEPRI, r1
   10e8a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   10e8e:	4770      	bx	lr
   10e90:	20001efc 	.word	0x20001efc

00010e94 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   10e94:	4b09      	ldr	r3, [pc, #36]	; (10ebc <z_priq_dumb_remove+0x28>)
   10e96:	f103 0228 	add.w	r2, r3, #40	; 0x28
   10e9a:	4282      	cmp	r2, r0
   10e9c:	d105      	bne.n	10eaa <z_priq_dumb_remove+0x16>
   10e9e:	689b      	ldr	r3, [r3, #8]
   10ea0:	428b      	cmp	r3, r1
   10ea2:	d102      	bne.n	10eaa <z_priq_dumb_remove+0x16>
   10ea4:	7b4b      	ldrb	r3, [r1, #13]
   10ea6:	06db      	lsls	r3, r3, #27
   10ea8:	d107      	bne.n	10eba <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10eaa:	e9d1 2300 	ldrd	r2, r3, [r1]
   10eae:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10eb0:	680a      	ldr	r2, [r1, #0]
   10eb2:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   10eb4:	2300      	movs	r3, #0
	node->prev = NULL;
   10eb6:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10eba:	4770      	bx	lr
   10ebc:	20001efc 	.word	0x20001efc

00010ec0 <update_cache>:
{
   10ec0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   10ec2:	4c0d      	ldr	r4, [pc, #52]	; (10ef8 <update_cache+0x38>)
{
   10ec4:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   10ec6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10eca:	f005 ff45 	bl	16d58 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   10ece:	4605      	mov	r5, r0
   10ed0:	b900      	cbnz	r0, 10ed4 <update_cache+0x14>
   10ed2:	68e5      	ldr	r5, [r4, #12]
   10ed4:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   10ed6:	b94a      	cbnz	r2, 10eec <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   10ed8:	7b5a      	ldrb	r2, [r3, #13]
   10eda:	06d2      	lsls	r2, r2, #27
   10edc:	d106      	bne.n	10eec <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10ede:	69aa      	ldr	r2, [r5, #24]
   10ee0:	b922      	cbnz	r2, 10eec <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   10ee2:	89da      	ldrh	r2, [r3, #14]
   10ee4:	2a7f      	cmp	r2, #127	; 0x7f
   10ee6:	d901      	bls.n	10eec <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   10ee8:	6263      	str	r3, [r4, #36]	; 0x24
}
   10eea:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   10eec:	429d      	cmp	r5, r3
   10eee:	d001      	beq.n	10ef4 <update_cache+0x34>
			reset_time_slice();
   10ef0:	f7ff ff7a 	bl	10de8 <reset_time_slice>
		_kernel.ready_q.cache = th;
   10ef4:	6265      	str	r5, [r4, #36]	; 0x24
}
   10ef6:	e7f8      	b.n	10eea <update_cache+0x2a>
   10ef8:	20001efc 	.word	0x20001efc

00010efc <k_sched_unlock>:
{
   10efc:	b510      	push	{r4, lr}
	__asm__ volatile(
   10efe:	f04f 0320 	mov.w	r3, #32
   10f02:	f3ef 8411 	mrs	r4, BASEPRI
   10f06:	f383 8811 	msr	BASEPRI, r3
   10f0a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   10f0e:	4b08      	ldr	r3, [pc, #32]	; (10f30 <k_sched_unlock+0x34>)
   10f10:	689a      	ldr	r2, [r3, #8]
   10f12:	7bd3      	ldrb	r3, [r2, #15]
   10f14:	3301      	adds	r3, #1
   10f16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10f18:	2000      	movs	r0, #0
   10f1a:	f7ff ffd1 	bl	10ec0 <update_cache>
	__asm__ volatile(
   10f1e:	f384 8811 	msr	BASEPRI, r4
   10f22:	f3bf 8f6f 	isb	sy
}
   10f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   10f2a:	f005 beed 	b.w	16d08 <z_reschedule_unlocked>
   10f2e:	bf00      	nop
   10f30:	20001efc 	.word	0x20001efc

00010f34 <z_add_thread_to_ready_q>:
{
   10f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   10f36:	f04f 0320 	mov.w	r3, #32
   10f3a:	f3ef 8411 	mrs	r4, BASEPRI
   10f3e:	f383 8811 	msr	BASEPRI, r3
   10f42:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10f46:	4a16      	ldr	r2, [pc, #88]	; (10fa0 <z_add_thread_to_ready_q+0x6c>)
   10f48:	4611      	mov	r1, r2
   10f4a:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10f4e:	428b      	cmp	r3, r1
   10f50:	d00c      	beq.n	10f6c <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10f52:	b15b      	cbz	r3, 10f6c <z_add_thread_to_ready_q+0x38>
   10f54:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   10f56:	f990 500e 	ldrsb.w	r5, [r0, #14]
   10f5a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   10f5e:	42af      	cmp	r7, r5
   10f60:	dc0b      	bgt.n	10f7a <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
   10f62:	42b3      	cmp	r3, r6
   10f64:	d002      	beq.n	10f6c <z_add_thread_to_ready_q+0x38>
   10f66:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d1f6      	bne.n	10f5a <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   10f6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10f6e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   10f70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   10f72:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   10f74:	6018      	str	r0, [r3, #0]
	list->tail = node;
   10f76:	62d0      	str	r0, [r2, #44]	; 0x2c
   10f78:	e005      	b.n	10f86 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
   10f7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10f7c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   10f80:	685a      	ldr	r2, [r3, #4]
   10f82:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   10f84:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   10f86:	7b43      	ldrb	r3, [r0, #13]
   10f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10f8c:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   10f8e:	2000      	movs	r0, #0
   10f90:	f7ff ff96 	bl	10ec0 <update_cache>
	__asm__ volatile(
   10f94:	f384 8811 	msr	BASEPRI, r4
   10f98:	f3bf 8f6f 	isb	sy
}
   10f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f9e:	bf00      	nop
   10fa0:	20001efc 	.word	0x20001efc

00010fa4 <z_move_thread_to_end_of_prio_q>:
{
   10fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fa6:	4604      	mov	r4, r0
	__asm__ volatile(
   10fa8:	f04f 0320 	mov.w	r3, #32
   10fac:	f3ef 8611 	mrs	r6, BASEPRI
   10fb0:	f383 8811 	msr	BASEPRI, r3
   10fb4:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   10fb8:	4f19      	ldr	r7, [pc, #100]	; (11020 <z_move_thread_to_end_of_prio_q+0x7c>)
   10fba:	f107 0528 	add.w	r5, r7, #40	; 0x28
   10fbe:	4601      	mov	r1, r0
   10fc0:	4628      	mov	r0, r5
   10fc2:	f7ff ff67 	bl	10e94 <z_priq_dumb_remove>
	return list->head == list;
   10fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10fc8:	42ab      	cmp	r3, r5
   10fca:	463a      	mov	r2, r7
   10fcc:	d00c      	beq.n	10fe8 <z_move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10fce:	b15b      	cbz	r3, 10fe8 <z_move_thread_to_end_of_prio_q+0x44>
   10fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   10fd2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   10fd6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   10fda:	428f      	cmp	r7, r1
   10fdc:	dc0b      	bgt.n	10ff6 <z_move_thread_to_end_of_prio_q+0x52>
	return (node == list->tail) ? NULL : node->next;
   10fde:	4283      	cmp	r3, r0
   10fe0:	d002      	beq.n	10fe8 <z_move_thread_to_end_of_prio_q+0x44>
   10fe2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d1f6      	bne.n	10fd6 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
   10fe8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10fea:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   10fec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   10fee:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   10ff0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10ff2:	62d4      	str	r4, [r2, #44]	; 0x2c
   10ff4:	e005      	b.n	11002 <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
   10ff6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10ff8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   10ffc:	6859      	ldr	r1, [r3, #4]
   10ffe:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   11000:	605c      	str	r4, [r3, #4]
   11002:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   11004:	6890      	ldr	r0, [r2, #8]
   11006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1100a:	7363      	strb	r3, [r4, #13]
   1100c:	1b03      	subs	r3, r0, r4
   1100e:	4258      	negs	r0, r3
   11010:	4158      	adcs	r0, r3
   11012:	f7ff ff55 	bl	10ec0 <update_cache>
	__asm__ volatile(
   11016:	f386 8811 	msr	BASEPRI, r6
   1101a:	f3bf 8f6f 	isb	sy
}
   1101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11020:	20001efc 	.word	0x20001efc

00011024 <z_time_slice>:
	if (pending_current == _current) {
   11024:	4a16      	ldr	r2, [pc, #88]	; (11080 <z_time_slice+0x5c>)
   11026:	4917      	ldr	r1, [pc, #92]	; (11084 <z_time_slice+0x60>)
{
   11028:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1102a:	680c      	ldr	r4, [r1, #0]
   1102c:	6893      	ldr	r3, [r2, #8]
   1102e:	42a3      	cmp	r3, r4
   11030:	4614      	mov	r4, r2
   11032:	d103      	bne.n	1103c <z_time_slice+0x18>
}
   11034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			reset_time_slice();
   11038:	f7ff bed6 	b.w	10de8 <reset_time_slice>
	pending_current = NULL;
   1103c:	2500      	movs	r5, #0
   1103e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   11040:	4911      	ldr	r1, [pc, #68]	; (11088 <z_time_slice+0x64>)
   11042:	6809      	ldr	r1, [r1, #0]
   11044:	b1c1      	cbz	r1, 11078 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
   11046:	89d9      	ldrh	r1, [r3, #14]
   11048:	297f      	cmp	r1, #127	; 0x7f
   1104a:	d815      	bhi.n	11078 <z_time_slice+0x54>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1104c:	490f      	ldr	r1, [pc, #60]	; (1108c <z_time_slice+0x68>)
   1104e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   11052:	6809      	ldr	r1, [r1, #0]
   11054:	428d      	cmp	r5, r1
   11056:	db0f      	blt.n	11078 <z_time_slice+0x54>
	return thread == _idle_thread;
   11058:	490d      	ldr	r1, [pc, #52]	; (11090 <z_time_slice+0x6c>)
		&& !is_idle(t)
   1105a:	6809      	ldr	r1, [r1, #0]
   1105c:	428b      	cmp	r3, r1
   1105e:	d00b      	beq.n	11078 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
   11060:	6999      	ldr	r1, [r3, #24]
   11062:	b949      	cbnz	r1, 11078 <z_time_slice+0x54>
		if (ticks >= _current_cpu->slice_ticks) {
   11064:	6911      	ldr	r1, [r2, #16]
   11066:	4281      	cmp	r1, r0
   11068:	dc03      	bgt.n	11072 <z_time_slice+0x4e>
			z_move_thread_to_end_of_prio_q(_current);
   1106a:	4618      	mov	r0, r3
   1106c:	f7ff ff9a 	bl	10fa4 <z_move_thread_to_end_of_prio_q>
   11070:	e7e0      	b.n	11034 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   11072:	1a09      	subs	r1, r1, r0
   11074:	6111      	str	r1, [r2, #16]
}
   11076:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   11078:	2300      	movs	r3, #0
   1107a:	6123      	str	r3, [r4, #16]
   1107c:	e7fb      	b.n	11076 <z_time_slice+0x52>
   1107e:	bf00      	nop
   11080:	20001efc 	.word	0x20001efc
   11084:	20001f2c 	.word	0x20001f2c
   11088:	20001f34 	.word	0x20001f34
   1108c:	20001f30 	.word	0x20001f30
   11090:	00017a28 	.word	0x00017a28

00011094 <z_remove_thread_from_ready_q>:
{
   11094:	b538      	push	{r3, r4, r5, lr}
   11096:	4604      	mov	r4, r0
	__asm__ volatile(
   11098:	f04f 0320 	mov.w	r3, #32
   1109c:	f3ef 8511 	mrs	r5, BASEPRI
   110a0:	f383 8811 	msr	BASEPRI, r3
   110a4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   110a8:	7b43      	ldrb	r3, [r0, #13]
   110aa:	065a      	lsls	r2, r3, #25
   110ac:	d507      	bpl.n	110be <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   110ae:	4601      	mov	r1, r0
   110b0:	4809      	ldr	r0, [pc, #36]	; (110d8 <z_remove_thread_from_ready_q+0x44>)
   110b2:	f7ff feef 	bl	10e94 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   110b6:	7b63      	ldrb	r3, [r4, #13]
   110b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   110bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   110be:	4b07      	ldr	r3, [pc, #28]	; (110dc <z_remove_thread_from_ready_q+0x48>)
   110c0:	6898      	ldr	r0, [r3, #8]
   110c2:	1b03      	subs	r3, r0, r4
   110c4:	4258      	negs	r0, r3
   110c6:	4158      	adcs	r0, r3
   110c8:	f7ff fefa 	bl	10ec0 <update_cache>
	__asm__ volatile(
   110cc:	f385 8811 	msr	BASEPRI, r5
   110d0:	f3bf 8f6f 	isb	sy
}
   110d4:	bd38      	pop	{r3, r4, r5, pc}
   110d6:	bf00      	nop
   110d8:	20001f24 	.word	0x20001f24
   110dc:	20001efc 	.word	0x20001efc

000110e0 <pend>:
{
   110e0:	b570      	push	{r4, r5, r6, lr}
   110e2:	4604      	mov	r4, r0
   110e4:	460d      	mov	r5, r1
   110e6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   110e8:	f7ff ffd4 	bl	11094 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   110ec:	7b63      	ldrb	r3, [r4, #13]
   110ee:	f043 0302 	orr.w	r3, r3, #2
   110f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   110f4:	b1ed      	cbz	r5, 11132 <pend+0x52>
	return list->head == list;
   110f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   110f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   110fa:	429d      	cmp	r5, r3
   110fc:	d00c      	beq.n	11118 <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   110fe:	b15b      	cbz	r3, 11118 <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
   11100:	f994 200e 	ldrsb.w	r2, [r4, #14]
   11104:	f993 100e 	ldrsb.w	r1, [r3, #14]
   11108:	4291      	cmp	r1, r2
   1110a:	dc0c      	bgt.n	11126 <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
   1110c:	6869      	ldr	r1, [r5, #4]
   1110e:	428b      	cmp	r3, r1
   11110:	d002      	beq.n	11118 <pend+0x38>
   11112:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11114:	2b00      	cmp	r3, #0
   11116:	d1f5      	bne.n	11104 <pend+0x24>
	node->prev = list->tail;
   11118:	686b      	ldr	r3, [r5, #4]
   1111a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1111c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1111e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   11120:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11122:	606c      	str	r4, [r5, #4]
   11124:	e005      	b.n	11132 <pend+0x52>
	node->prev = successor->prev;
   11126:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11128:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1112c:	685a      	ldr	r2, [r3, #4]
   1112e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11130:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   11132:	1c73      	adds	r3, r6, #1
   11134:	d013      	beq.n	1115e <pend+0x7e>
   11136:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1113a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1113e:	2100      	movs	r1, #0
   11140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11144:	fbc5 0106 	smlal	r0, r1, r5, r6
   11148:	2300      	movs	r3, #0
   1114a:	f7ef fa59 	bl	600 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1114e:	4904      	ldr	r1, [pc, #16]	; (11160 <pend+0x80>)
   11150:	1c42      	adds	r2, r0, #1
   11152:	f104 0018 	add.w	r0, r4, #24
}
   11156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1115a:	f000 ba99 	b.w	11690 <z_add_timeout>
   1115e:	bd70      	pop	{r4, r5, r6, pc}
   11160:	00016d65 	.word	0x00016d65

00011164 <z_pend_curr_irqlock>:
{
   11164:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   11166:	4d0f      	ldr	r5, [pc, #60]	; (111a4 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   11168:	4c0f      	ldr	r4, [pc, #60]	; (111a8 <z_pend_curr_irqlock+0x44>)
{
   1116a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1116c:	68a8      	ldr	r0, [r5, #8]
   1116e:	f7ff ffb7 	bl	110e0 <pend>
	pending_current = _current;
   11172:	68ab      	ldr	r3, [r5, #8]
   11174:	6023      	str	r3, [r4, #0]
   11176:	4630      	mov	r0, r6
   11178:	f7f4 f802 	bl	5180 <__swap>
	__asm__ volatile(
   1117c:	f04f 0220 	mov.w	r2, #32
   11180:	f3ef 8311 	mrs	r3, BASEPRI
   11184:	f382 8811 	msr	BASEPRI, r2
   11188:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1118c:	6822      	ldr	r2, [r4, #0]
   1118e:	68a9      	ldr	r1, [r5, #8]
   11190:	4291      	cmp	r1, r2
			pending_current = NULL;
   11192:	bf04      	itt	eq
   11194:	2200      	moveq	r2, #0
   11196:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   11198:	f383 8811 	msr	BASEPRI, r3
   1119c:	f3bf 8f6f 	isb	sy
}
   111a0:	bd70      	pop	{r4, r5, r6, pc}
   111a2:	bf00      	nop
   111a4:	20001efc 	.word	0x20001efc
   111a8:	20001f2c 	.word	0x20001f2c

000111ac <z_pend_curr>:
{
   111ac:	b510      	push	{r4, lr}
   111ae:	460c      	mov	r4, r1
   111b0:	4611      	mov	r1, r2
	pending_current = _current;
   111b2:	4a06      	ldr	r2, [pc, #24]	; (111cc <z_pend_curr+0x20>)
   111b4:	6890      	ldr	r0, [r2, #8]
   111b6:	4a06      	ldr	r2, [pc, #24]	; (111d0 <z_pend_curr+0x24>)
   111b8:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   111ba:	461a      	mov	r2, r3
   111bc:	f7ff ff90 	bl	110e0 <pend>
   111c0:	4620      	mov	r0, r4
}
   111c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111c6:	f7f3 bfdb 	b.w	5180 <__swap>
   111ca:	bf00      	nop
   111cc:	20001efc 	.word	0x20001efc
   111d0:	20001f2c 	.word	0x20001f2c

000111d4 <z_tick_sleep.part.18>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
   111d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   111d6:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   111d8:	f005 ff51 	bl	1707e <z_tick_get_32>
   111dc:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   111de:	f04f 0320 	mov.w	r3, #32
   111e2:	f3ef 8711 	mrs	r7, BASEPRI
   111e6:	f383 8811 	msr	BASEPRI, r3
   111ea:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   111ee:	4d0d      	ldr	r5, [pc, #52]	; (11224 <z_tick_sleep.part.18+0x50>)
   111f0:	4b0d      	ldr	r3, [pc, #52]	; (11228 <z_tick_sleep.part.18+0x54>)
   111f2:	68a8      	ldr	r0, [r5, #8]
   111f4:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   111f6:	f7ff ff4d 	bl	11094 <z_remove_thread_from_ready_q>
   111fa:	68a8      	ldr	r0, [r5, #8]
   111fc:	490b      	ldr	r1, [pc, #44]	; (1122c <z_tick_sleep.part.18+0x58>)
   111fe:	4632      	mov	r2, r6
   11200:	3018      	adds	r0, #24
   11202:	f000 fa45 	bl	11690 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   11206:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11208:	7b53      	ldrb	r3, [r2, #13]
   1120a:	f043 0310 	orr.w	r3, r3, #16
   1120e:	7353      	strb	r3, [r2, #13]
   11210:	4638      	mov	r0, r7
   11212:	f7f3 ffb5 	bl	5180 <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   11216:	f005 ff32 	bl	1707e <z_tick_get_32>
   1121a:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1121c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11222:	bf00      	nop
   11224:	20001efc 	.word	0x20001efc
   11228:	20001f2c 	.word	0x20001f2c
   1122c:	00016d65 	.word	0x00016d65

00011230 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   11230:	4b04      	ldr	r3, [pc, #16]	; (11244 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11232:	2100      	movs	r1, #0
   11234:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   11238:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1123c:	4608      	mov	r0, r1
   1123e:	f7ff bde9 	b.w	10e14 <k_sched_time_slice_set>
   11242:	bf00      	nop
   11244:	20001efc 	.word	0x20001efc

00011248 <z_impl_k_yield>:
{
   11248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
   1124a:	4c22      	ldr	r4, [pc, #136]	; (112d4 <z_impl_k_yield+0x8c>)
   1124c:	4b22      	ldr	r3, [pc, #136]	; (112d8 <z_impl_k_yield+0x90>)
   1124e:	68a2      	ldr	r2, [r4, #8]
   11250:	681b      	ldr	r3, [r3, #0]
   11252:	429a      	cmp	r2, r3
   11254:	d032      	beq.n	112bc <z_impl_k_yield+0x74>
   11256:	f04f 0320 	mov.w	r3, #32
   1125a:	f3ef 8611 	mrs	r6, BASEPRI
   1125e:	f383 8811 	msr	BASEPRI, r3
   11262:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   11266:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1126a:	68a1      	ldr	r1, [r4, #8]
   1126c:	4628      	mov	r0, r5
   1126e:	f7ff fe11 	bl	10e94 <z_priq_dumb_remove>
	return list->head == list;
   11272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
				_priq_run_add(&_kernel.ready_q.runq,
   11274:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11276:	42ab      	cmp	r3, r5
   11278:	d00c      	beq.n	11294 <z_impl_k_yield+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1127a:	b15b      	cbz	r3, 11294 <z_impl_k_yield+0x4c>
   1127c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1127e:	f992 000e 	ldrsb.w	r0, [r2, #14]
   11282:	f993 700e 	ldrsb.w	r7, [r3, #14]
   11286:	4287      	cmp	r7, r0
   11288:	dc0b      	bgt.n	112a2 <z_impl_k_yield+0x5a>
	return (node == list->tail) ? NULL : node->next;
   1128a:	4299      	cmp	r1, r3
   1128c:	d002      	beq.n	11294 <z_impl_k_yield+0x4c>
   1128e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11290:	2b00      	cmp	r3, #0
   11292:	d1f6      	bne.n	11282 <z_impl_k_yield+0x3a>
	node->prev = list->tail;
   11294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11296:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
   11298:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
   1129a:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
   1129c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1129e:	62e2      	str	r2, [r4, #44]	; 0x2c
   112a0:	e005      	b.n	112ae <z_impl_k_yield+0x66>
	node->prev = successor->prev;
   112a2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   112a4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   112a8:	6859      	ldr	r1, [r3, #4]
   112aa:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   112ac:	605a      	str	r2, [r3, #4]
			update_cache(1);
   112ae:	2001      	movs	r0, #1
   112b0:	f7ff fe06 	bl	10ec0 <update_cache>
	__asm__ volatile(
   112b4:	f386 8811 	msr	BASEPRI, r6
   112b8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   112bc:	f04f 0320 	mov.w	r3, #32
   112c0:	f3ef 8011 	mrs	r0, BASEPRI
   112c4:	f383 8811 	msr	BASEPRI, r3
   112c8:	f3bf 8f6f 	isb	sy
}
   112cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   112d0:	f7f3 bf56 	b.w	5180 <__swap>
   112d4:	20001efc 	.word	0x20001efc
   112d8:	00017a28 	.word	0x00017a28

000112dc <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   112dc:	4b01      	ldr	r3, [pc, #4]	; (112e4 <z_impl_k_current_get+0x8>)
   112de:	6898      	ldr	r0, [r3, #8]
   112e0:	4770      	bx	lr
   112e2:	bf00      	nop
   112e4:	20001efc 	.word	0x20001efc

000112e8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   112e8:	b570      	push	{r4, r5, r6, lr}
   112ea:	4604      	mov	r4, r0
   112ec:	f04f 0320 	mov.w	r3, #32
   112f0:	f3ef 8611 	mrs	r6, BASEPRI
   112f4:	f383 8811 	msr	BASEPRI, r3
   112f8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   112fc:	f005 fd63 	bl	16dc6 <z_unpend_first_thread>
	if (thread != NULL) {
   11300:	4605      	mov	r5, r0
   11302:	b170      	cbz	r0, 11322 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11304:	7b43      	ldrb	r3, [r0, #13]
   11306:	06db      	lsls	r3, r3, #27
   11308:	d103      	bne.n	11312 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1130a:	6983      	ldr	r3, [r0, #24]
   1130c:	b90b      	cbnz	r3, 11312 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1130e:	f7ff fe11 	bl	10f34 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11312:	2300      	movs	r3, #0
   11314:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   11316:	4631      	mov	r1, r6
   11318:	4808      	ldr	r0, [pc, #32]	; (1133c <z_impl_k_sem_give+0x54>)
}
   1131a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1131e:	f005 bcd4 	b.w	16cca <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   11322:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   11326:	429a      	cmp	r2, r3
   11328:	bf18      	it	ne
   1132a:	3301      	addne	r3, #1
   1132c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1132e:	2102      	movs	r1, #2
   11330:	f104 0010 	add.w	r0, r4, #16
   11334:	f005 ff5c 	bl	171f0 <z_handle_obj_poll_events>
   11338:	e7ed      	b.n	11316 <z_impl_k_sem_give+0x2e>
   1133a:	bf00      	nop
   1133c:	200022df 	.word	0x200022df

00011340 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   11340:	b410      	push	{r4}
   11342:	4602      	mov	r2, r0
   11344:	460b      	mov	r3, r1
   11346:	f04f 0020 	mov.w	r0, #32
   1134a:	f3ef 8111 	mrs	r1, BASEPRI
   1134e:	f380 8811 	msr	BASEPRI, r0
   11352:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   11356:	6894      	ldr	r4, [r2, #8]
   11358:	b144      	cbz	r4, 1136c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1135a:	3c01      	subs	r4, #1
   1135c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1135e:	f381 8811 	msr	BASEPRI, r1
   11362:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   11366:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   11368:	bc10      	pop	{r4}
   1136a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1136c:	b933      	cbnz	r3, 1137c <z_impl_k_sem_take+0x3c>
   1136e:	f381 8811 	msr	BASEPRI, r1
   11372:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   11376:	f06f 000f 	mvn.w	r0, #15
   1137a:	e7f5      	b.n	11368 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1137c:	4801      	ldr	r0, [pc, #4]	; (11384 <z_impl_k_sem_take+0x44>)
}
   1137e:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   11380:	f7ff bf14 	b.w	111ac <z_pend_curr>
   11384:	200022df 	.word	0x200022df

00011388 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   11388:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1138a:	4c08      	ldr	r4, [pc, #32]	; (113ac <k_sys_work_q_init+0x24>)
   1138c:	4908      	ldr	r1, [pc, #32]	; (113b0 <k_sys_work_q_init+0x28>)
   1138e:	f04f 33ff 	mov.w	r3, #4294967295
   11392:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11396:	4620      	mov	r0, r4
   11398:	f000 f8d6 	bl	11548 <k_work_q_start>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   1139c:	4905      	ldr	r1, [pc, #20]	; (113b4 <k_sys_work_q_init+0x2c>)
   1139e:	f104 0010 	add.w	r0, r4, #16
   113a2:	f005 fd84 	bl	16eae <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   113a6:	2000      	movs	r0, #0
   113a8:	bd10      	pop	{r4, pc}
   113aa:	bf00      	nop
   113ac:	20001f38 	.word	0x20001f38
   113b0:	200044f0 	.word	0x200044f0
   113b4:	00018493 	.word	0x00018493

000113b8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   113b8:	b510      	push	{r4, lr}
   113ba:	4602      	mov	r2, r0
	__asm__ volatile(
   113bc:	f04f 0320 	mov.w	r3, #32
   113c0:	f3ef 8411 	mrs	r4, BASEPRI
   113c4:	f383 8811 	msr	BASEPRI, r3
   113c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   113cc:	7b43      	ldrb	r3, [r0, #13]
   113ce:	0759      	lsls	r1, r3, #29
   113d0:	d404      	bmi.n	113dc <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   113d2:	f384 8811 	msr	BASEPRI, r4
   113d6:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   113da:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   113dc:	f023 0304 	bic.w	r3, r3, #4
   113e0:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   113e2:	f005 fd5b 	bl	16e9c <z_is_thread_ready>
   113e6:	b110      	cbz	r0, 113ee <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   113e8:	4610      	mov	r0, r2
   113ea:	f7ff fda3 	bl	10f34 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   113ee:	4621      	mov	r1, r4
   113f0:	4802      	ldr	r0, [pc, #8]	; (113fc <z_impl_k_thread_start+0x44>)
}
   113f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   113f6:	f005 bc68 	b.w	16cca <z_reschedule>
   113fa:	bf00      	nop
   113fc:	200022df 	.word	0x200022df

00011400 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   11400:	b530      	push	{r4, r5, lr}
   11402:	b087      	sub	sp, #28
   11404:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11408:	9504      	str	r5, [sp, #16]
   1140a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1140c:	9503      	str	r5, [sp, #12]
   1140e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11410:	9502      	str	r5, [sp, #8]
   11412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11414:	9501      	str	r5, [sp, #4]
   11416:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11418:	9500      	str	r5, [sp, #0]
   1141a:	f7f3 ff23 	bl	5264 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1141e:	4b04      	ldr	r3, [pc, #16]	; (11430 <z_setup_new_thread+0x30>)
   11420:	689b      	ldr	r3, [r3, #8]
   11422:	b913      	cbnz	r3, 1142a <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11424:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   11426:	b007      	add	sp, #28
   11428:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   1142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1142c:	e7fa      	b.n	11424 <z_setup_new_thread+0x24>
   1142e:	bf00      	nop
   11430:	20001efc 	.word	0x20001efc

00011434 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   11434:	b570      	push	{r4, r5, r6, lr}
   11436:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11438:	2600      	movs	r6, #0
   1143a:	9605      	str	r6, [sp, #20]
   1143c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1143e:	9604      	str	r6, [sp, #16]
   11440:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11442:	9603      	str	r6, [sp, #12]
   11444:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11446:	9602      	str	r6, [sp, #8]
   11448:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1144a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1144c:	9601      	str	r6, [sp, #4]
   1144e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11450:	9600      	str	r6, [sp, #0]
{
   11452:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11454:	f7ff ffd4 	bl	11400 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   11458:	1c6b      	adds	r3, r5, #1
   1145a:	d003      	beq.n	11464 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1145c:	b92d      	cbnz	r5, 1146a <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1145e:	4620      	mov	r0, r4
   11460:	f7ff ffaa 	bl	113b8 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   11464:	4620      	mov	r0, r4
   11466:	b006      	add	sp, #24
   11468:	bd70      	pop	{r4, r5, r6, pc}
   1146a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1146e:	f240 30e7 	movw	r0, #999	; 0x3e7
   11472:	2100      	movs	r1, #0
   11474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11478:	2300      	movs	r3, #0
   1147a:	fbc6 0105 	smlal	r0, r1, r6, r5
   1147e:	f7ef f8bf 	bl	600 <__aeabi_ldivmod>
   11482:	4903      	ldr	r1, [pc, #12]	; (11490 <z_impl_k_thread_create+0x5c>)
   11484:	1c42      	adds	r2, r0, #1
   11486:	f104 0018 	add.w	r0, r4, #24
   1148a:	f000 f901 	bl	11690 <z_add_timeout>
   1148e:	e7e9      	b.n	11464 <z_impl_k_thread_create+0x30>
   11490:	00016d65 	.word	0x00016d65

00011494 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   11494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   11498:	4e28      	ldr	r6, [pc, #160]	; (1153c <z_init_static_threads+0xa8>)
   1149a:	4d29      	ldr	r5, [pc, #164]	; (11540 <z_init_static_threads+0xac>)
{
   1149c:	b087      	sub	sp, #28
   1149e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   114a0:	42b5      	cmp	r5, r6
   114a2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   114a6:	d310      	bcc.n	114ca <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   114a8:	f7ff fce0 	bl	10e6c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   114ac:	4c24      	ldr	r4, [pc, #144]	; (11540 <z_init_static_threads+0xac>)
   114ae:	f8df a094 	ldr.w	sl, [pc, #148]	; 11544 <z_init_static_threads+0xb0>
   114b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   114b6:	f240 36e7 	movw	r6, #999	; 0x3e7
   114ba:	2700      	movs	r7, #0
   114bc:	4544      	cmp	r4, r8
   114be:	d321      	bcc.n	11504 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   114c0:	b007      	add	sp, #28
   114c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   114c6:	f7ff bd19 	b.w	10efc <k_sched_unlock>
		z_setup_new_thread(
   114ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   114ce:	9305      	str	r3, [sp, #20]
   114d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   114d4:	9304      	str	r3, [sp, #16]
   114d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   114da:	9303      	str	r3, [sp, #12]
   114dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   114e0:	9302      	str	r3, [sp, #8]
   114e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   114e6:	9301      	str	r3, [sp, #4]
   114e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   114ec:	9300      	str	r3, [sp, #0]
   114ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   114f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   114f6:	f7ff ff83 	bl	11400 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   114fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   114fe:	64dd      	str	r5, [r3, #76]	; 0x4c
   11500:	4625      	mov	r5, r4
   11502:	e7cd      	b.n	114a0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   11504:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11506:	1c4b      	adds	r3, r1, #1
   11508:	d004      	beq.n	11514 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1150a:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1150c:	b921      	cbnz	r1, 11518 <z_init_static_threads+0x84>
   1150e:	4628      	mov	r0, r5
   11510:	f7ff ff52 	bl	113b8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   11514:	3430      	adds	r4, #48	; 0x30
   11516:	e7d1      	b.n	114bc <z_init_static_threads+0x28>
   11518:	46b3      	mov	fp, r6
   1151a:	46bc      	mov	ip, r7
   1151c:	fbc9 bc01 	smlal	fp, ip, r9, r1
   11520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11524:	2300      	movs	r3, #0
   11526:	4658      	mov	r0, fp
   11528:	4661      	mov	r1, ip
   1152a:	f7ef f869 	bl	600 <__aeabi_ldivmod>
   1152e:	4651      	mov	r1, sl
   11530:	1c42      	adds	r2, r0, #1
   11532:	f105 0018 	add.w	r0, r5, #24
   11536:	f000 f8ab 	bl	11690 <z_add_timeout>
   1153a:	e7eb      	b.n	11514 <z_init_static_threads+0x80>
   1153c:	20005478 	.word	0x20005478
   11540:	200053e8 	.word	0x200053e8
   11544:	00016d65 	.word	0x00016d65

00011548 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   11548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1154c:	4605      	mov	r5, r0
   1154e:	b086      	sub	sp, #24
   11550:	4698      	mov	r8, r3
   11552:	460e      	mov	r6, r1
   11554:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   11556:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   1155a:	f005 faf2 	bl	16b42 <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1155e:	2000      	movs	r0, #0
   11560:	e9cd 0004 	strd	r0, r0, [sp, #16]
   11564:	e9cd 0802 	strd	r0, r8, [sp, #8]
   11568:	e9cd 5000 	strd	r5, r0, [sp]
   1156c:	4631      	mov	r1, r6
   1156e:	4b06      	ldr	r3, [pc, #24]	; (11588 <k_work_q_start+0x40>)
   11570:	463a      	mov	r2, r7
   11572:	4620      	mov	r0, r4
   11574:	f7ff ff5e 	bl	11434 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   11578:	4904      	ldr	r1, [pc, #16]	; (1158c <k_work_q_start+0x44>)
   1157a:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1157c:	b006      	add	sp, #24
   1157e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11582:	f005 bc94 	b.w	16eae <z_impl_k_thread_name_set>
   11586:	bf00      	nop
   11588:	00011daf 	.word	0x00011daf
   1158c:	0001849c 	.word	0x0001849c

00011590 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   11590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11594:	4606      	mov	r6, r0
   11596:	460d      	mov	r5, r1
   11598:	4617      	mov	r7, r2
	__asm__ volatile(
   1159a:	f04f 0320 	mov.w	r3, #32
   1159e:	f3ef 8811 	mrs	r8, BASEPRI
   115a2:	f383 8811 	msr	BASEPRI, r3
   115a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   115aa:	69cc      	ldr	r4, [r1, #28]
   115ac:	b15c      	cbz	r4, 115c6 <k_delayed_work_submit_to_queue+0x36>
   115ae:	4284      	cmp	r4, r0
   115b0:	d12c      	bne.n	1160c <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   115b2:	4628      	mov	r0, r5
   115b4:	f005 fcc4 	bl	16f40 <work_cancel>
		if (err < 0) {
   115b8:	1e04      	subs	r4, r0, #0
   115ba:	da06      	bge.n	115ca <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   115bc:	f388 8811 	msr	BASEPRI, r8
   115c0:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   115c4:	e00c      	b.n	115e0 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   115c6:	2800      	cmp	r0, #0
   115c8:	d0f3      	beq.n	115b2 <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   115ca:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   115cc:	b95f      	cbnz	r7, 115e6 <k_delayed_work_submit_to_queue+0x56>
   115ce:	f388 8811 	msr	BASEPRI, r8
   115d2:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   115d6:	4629      	mov	r1, r5
   115d8:	4630      	mov	r0, r6
   115da:	f005 fc94 	bl	16f06 <k_work_submit_to_queue>
		return 0;
   115de:	463c      	mov	r4, r7
}
   115e0:	4620      	mov	r0, r4
   115e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115e6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   115ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   115ee:	2100      	movs	r1, #0
   115f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115f4:	2300      	movs	r3, #0
   115f6:	fbc6 0107 	smlal	r0, r1, r6, r7
   115fa:	f7ef f801 	bl	600 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   115fe:	4905      	ldr	r1, [pc, #20]	; (11614 <k_delayed_work_submit_to_queue+0x84>)
   11600:	1c42      	adds	r2, r0, #1
   11602:	f105 000c 	add.w	r0, r5, #12
   11606:	f000 f843 	bl	11690 <z_add_timeout>
   1160a:	e7d7      	b.n	115bc <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   1160c:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   11610:	e7d4      	b.n	115bc <k_delayed_work_submit_to_queue+0x2c>
   11612:	bf00      	nop
   11614:	00016f37 	.word	0x00016f37

00011618 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   11618:	4b03      	ldr	r3, [pc, #12]	; (11628 <elapsed+0x10>)
   1161a:	681b      	ldr	r3, [r3, #0]
   1161c:	b90b      	cbnz	r3, 11622 <elapsed+0xa>
   1161e:	f7f3 bc53 	b.w	4ec8 <z_clock_elapsed>
}
   11622:	2000      	movs	r0, #0
   11624:	4770      	bx	lr
   11626:	bf00      	nop
   11628:	20001fb4 	.word	0x20001fb4

0001162c <remove_timeout>:
{
   1162c:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1162e:	b140      	cbz	r0, 11642 <remove_timeout+0x16>
   11630:	4a08      	ldr	r2, [pc, #32]	; (11654 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   11632:	6852      	ldr	r2, [r2, #4]
   11634:	4290      	cmp	r0, r2
   11636:	d004      	beq.n	11642 <remove_timeout+0x16>
	if (next(t) != NULL) {
   11638:	b11b      	cbz	r3, 11642 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1163a:	689a      	ldr	r2, [r3, #8]
   1163c:	6881      	ldr	r1, [r0, #8]
   1163e:	440a      	add	r2, r1
   11640:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   11642:	6842      	ldr	r2, [r0, #4]
   11644:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   11646:	6803      	ldr	r3, [r0, #0]
   11648:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1164a:	2300      	movs	r3, #0
	node->prev = NULL;
   1164c:	e9c0 3300 	strd	r3, r3, [r0]
}
   11650:	4770      	bx	lr
   11652:	bf00      	nop
   11654:	20005290 	.word	0x20005290

00011658 <next_timeout>:
	return list->head == list;
   11658:	4b0b      	ldr	r3, [pc, #44]	; (11688 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1165a:	b510      	push	{r4, lr}
   1165c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1165e:	429c      	cmp	r4, r3
   11660:	bf08      	it	eq
   11662:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   11664:	f7ff ffd8 	bl	11618 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   11668:	b154      	cbz	r4, 11680 <next_timeout+0x28>
   1166a:	68a3      	ldr	r3, [r4, #8]
   1166c:	1a18      	subs	r0, r3, r0
   1166e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11672:	4b06      	ldr	r3, [pc, #24]	; (1168c <next_timeout+0x34>)
   11674:	691b      	ldr	r3, [r3, #16]
   11676:	b113      	cbz	r3, 1167e <next_timeout+0x26>
   11678:	4298      	cmp	r0, r3
   1167a:	bfa8      	it	ge
   1167c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1167e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   11680:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11684:	e7f5      	b.n	11672 <next_timeout+0x1a>
   11686:	bf00      	nop
   11688:	20005290 	.word	0x20005290
   1168c:	20001efc 	.word	0x20001efc

00011690 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   11690:	b570      	push	{r4, r5, r6, lr}
   11692:	4604      	mov	r4, r0
   11694:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11696:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   11698:	f04f 0320 	mov.w	r3, #32
   1169c:	f3ef 8511 	mrs	r5, BASEPRI
   116a0:	f383 8811 	msr	BASEPRI, r3
   116a4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   116a8:	f7ff ffb6 	bl	11618 <elapsed>
	return list->head == list;
   116ac:	4b19      	ldr	r3, [pc, #100]	; (11714 <z_add_timeout+0x84>)
   116ae:	681a      	ldr	r2, [r3, #0]
   116b0:	2e01      	cmp	r6, #1
   116b2:	bfac      	ite	ge
   116b4:	1980      	addge	r0, r0, r6
   116b6:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116b8:	429a      	cmp	r2, r3
   116ba:	60a0      	str	r0, [r4, #8]
   116bc:	d001      	beq.n	116c2 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   116be:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   116c0:	b932      	cbnz	r2, 116d0 <z_add_timeout+0x40>
	node->prev = list->tail;
   116c2:	685a      	ldr	r2, [r3, #4]
   116c4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   116c6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   116c8:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   116ca:	6014      	str	r4, [r2, #0]
	list->tail = node;
   116cc:	605c      	str	r4, [r3, #4]
   116ce:	e00b      	b.n	116e8 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   116d0:	6890      	ldr	r0, [r2, #8]
   116d2:	68a1      	ldr	r1, [r4, #8]
   116d4:	4288      	cmp	r0, r1
   116d6:	dd16      	ble.n	11706 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
   116d8:	1a41      	subs	r1, r0, r1
   116da:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   116dc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   116de:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   116e2:	6851      	ldr	r1, [r2, #4]
   116e4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   116e6:	6054      	str	r4, [r2, #4]
	return list->head == list;
   116e8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116ea:	429a      	cmp	r2, r3
   116ec:	d006      	beq.n	116fc <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   116ee:	4294      	cmp	r4, r2
   116f0:	d104      	bne.n	116fc <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
   116f2:	f7ff ffb1 	bl	11658 <next_timeout>
   116f6:	2100      	movs	r1, #0
   116f8:	f7f3 fb98 	bl	4e2c <z_clock_set_timeout>
	__asm__ volatile(
   116fc:	f385 8811 	msr	BASEPRI, r5
   11700:	f3bf 8f6f 	isb	sy
		}
	}
}
   11704:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   11706:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   11708:	4296      	cmp	r6, r2
   1170a:	60a1      	str	r1, [r4, #8]
   1170c:	d0d9      	beq.n	116c2 <z_add_timeout+0x32>
   1170e:	6812      	ldr	r2, [r2, #0]
   11710:	e7d6      	b.n	116c0 <z_add_timeout+0x30>
   11712:	bf00      	nop
   11714:	20005290 	.word	0x20005290

00011718 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   11718:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1171c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1171e:	f7ff fc81 	bl	11024 <z_time_slice>
	__asm__ volatile(
   11722:	f04f 0320 	mov.w	r3, #32
   11726:	f3ef 8511 	mrs	r5, BASEPRI
   1172a:	f383 8811 	msr	BASEPRI, r3
   1172e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11732:	4e21      	ldr	r6, [pc, #132]	; (117b8 <z_clock_announce+0xa0>)
   11734:	4f21      	ldr	r7, [pc, #132]	; (117bc <z_clock_announce+0xa4>)
	return list->head == list;
   11736:	f8df 9088 	ldr.w	r9, [pc, #136]	; 117c0 <z_clock_announce+0xa8>
   1173a:	6034      	str	r4, [r6, #0]
   1173c:	46b8      	mov	r8, r7
   1173e:	f8d9 4000 	ldr.w	r4, [r9]
   11742:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11744:	454c      	cmp	r4, r9
   11746:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1174a:	d005      	beq.n	11758 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1174c:	b124      	cbz	r4, 11758 <z_clock_announce+0x40>
   1174e:	68a3      	ldr	r3, [r4, #8]
   11750:	4293      	cmp	r3, r2
   11752:	dd14      	ble.n	1177e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11754:	1a9b      	subs	r3, r3, r2
   11756:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   11758:	eb1b 0002 	adds.w	r0, fp, r2
   1175c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   11760:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11762:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   11766:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   11768:	f7ff ff76 	bl	11658 <next_timeout>
   1176c:	4621      	mov	r1, r4
   1176e:	f7f3 fb5d 	bl	4e2c <z_clock_set_timeout>
	__asm__ volatile(
   11772:	f385 8811 	msr	BASEPRI, r5
   11776:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1177a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1177e:	eb1b 0003 	adds.w	r0, fp, r3
   11782:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   11786:	1ad3      	subs	r3, r2, r3
   11788:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1178a:	2300      	movs	r3, #0
		curr_tick += dt;
   1178c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   11790:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   11792:	4620      	mov	r0, r4
   11794:	f7ff ff4a 	bl	1162c <remove_timeout>
   11798:	f385 8811 	msr	BASEPRI, r5
   1179c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   117a0:	68e3      	ldr	r3, [r4, #12]
   117a2:	4798      	blx	r3
	__asm__ volatile(
   117a4:	f04f 0320 	mov.w	r3, #32
   117a8:	f3ef 8511 	mrs	r5, BASEPRI
   117ac:	f383 8811 	msr	BASEPRI, r3
   117b0:	f3bf 8f6f 	isb	sy
   117b4:	e7c3      	b.n	1173e <z_clock_announce+0x26>
   117b6:	bf00      	nop
   117b8:	20001fb4 	.word	0x20001fb4
   117bc:	20000010 	.word	0x20000010
   117c0:	20005290 	.word	0x20005290

000117c4 <z_tick_get>:

s64_t z_tick_get(void)
{
   117c4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   117c8:	f04f 0320 	mov.w	r3, #32
   117cc:	f3ef 8411 	mrs	r4, BASEPRI
   117d0:	f383 8811 	msr	BASEPRI, r3
   117d4:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   117d8:	f7f3 fb76 	bl	4ec8 <z_clock_elapsed>
   117dc:	4b07      	ldr	r3, [pc, #28]	; (117fc <z_tick_get+0x38>)
   117de:	e9d3 2300 	ldrd	r2, r3, [r3]
   117e2:	eb12 0b00 	adds.w	fp, r2, r0
   117e6:	f143 0c00 	adc.w	ip, r3, #0
   117ea:	4658      	mov	r0, fp
   117ec:	4661      	mov	r1, ip
	__asm__ volatile(
   117ee:	f384 8811 	msr	BASEPRI, r4
   117f2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   117f6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   117fa:	bf00      	nop
   117fc:	20000010 	.word	0x20000010

00011800 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   11800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   11804:	4b49      	ldr	r3, [pc, #292]	; (1192c <z_impl_k_poll+0x12c>)
{
   11806:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   11808:	689b      	ldr	r3, [r3, #8]
   1180a:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1180c:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1180e:	2301      	movs	r3, #1
{
   11810:	4607      	mov	r7, r0
   11812:	468a      	mov	sl, r1
   11814:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   11816:	f88d 3004 	strb.w	r3, [sp, #4]
   1181a:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1181c:	f04f 35ff 	mov.w	r5, #4294967295
	event->poller = NULL;
   11820:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   11822:	4556      	cmp	r6, sl
   11824:	db17      	blt.n	11856 <z_impl_k_poll+0x56>
	__asm__ volatile(
   11826:	f04f 0320 	mov.w	r3, #32
   1182a:	f3ef 8611 	mrs	r6, BASEPRI
   1182e:	f383 8811 	msr	BASEPRI, r3
   11832:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   11836:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1183a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1183e:	2b00      	cmp	r3, #0
   11840:	d152      	bne.n	118e8 <z_impl_k_poll+0xe8>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   11842:	4632      	mov	r2, r6
   11844:	4629      	mov	r1, r5
   11846:	4638      	mov	r0, r7
   11848:	f005 fc36 	bl	170b8 <clear_event_registrations>
	__asm__ volatile(
   1184c:	f386 8811 	msr	BASEPRI, r6
   11850:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   11854:	e054      	b.n	11900 <z_impl_k_poll+0x100>
	__asm__ volatile(
   11856:	f04f 0320 	mov.w	r3, #32
   1185a:	f3ef 8b11 	mrs	fp, BASEPRI
   1185e:	f383 8811 	msr	BASEPRI, r3
   11862:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   11866:	7b63      	ldrb	r3, [r4, #13]
   11868:	f003 030f 	and.w	r3, r3, #15
   1186c:	2b02      	cmp	r3, #2
   1186e:	d003      	beq.n	11878 <z_impl_k_poll+0x78>
   11870:	2b04      	cmp	r3, #4
   11872:	d004      	beq.n	1187e <z_impl_k_poll+0x7e>
   11874:	2b01      	cmp	r3, #1
   11876:	d117      	bne.n	118a8 <z_impl_k_poll+0xa8>
		if (event->signal->signaled != 0U) {
   11878:	6922      	ldr	r2, [r4, #16]
   1187a:	6892      	ldr	r2, [r2, #8]
   1187c:	e001      	b.n	11882 <z_impl_k_poll+0x82>
   1187e:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   11880:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   11882:	b18a      	cbz	r2, 118a8 <z_impl_k_poll+0xa8>
	event->state |= state;
   11884:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   11886:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   1188a:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1188e:	430b      	orrs	r3, r1
   11890:	f363 3210 	bfi	r2, r3, #12, #5
   11894:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   11896:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   1189a:	f38b 8811 	msr	BASEPRI, fp
   1189e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   118a2:	3601      	adds	r6, #1
   118a4:	3414      	adds	r4, #20
   118a6:	e7bc      	b.n	11822 <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   118a8:	f1b8 0f00 	cmp.w	r8, #0
   118ac:	d0f5      	beq.n	1189a <z_impl_k_poll+0x9a>
   118ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
   118b2:	2a00      	cmp	r2, #0
   118b4:	d0f1      	beq.n	1189a <z_impl_k_poll+0x9a>
	switch (event->type) {
   118b6:	2b02      	cmp	r3, #2
   118b8:	d007      	beq.n	118ca <z_impl_k_poll+0xca>
   118ba:	2b04      	cmp	r3, #4
   118bc:	d00f      	beq.n	118de <z_impl_k_poll+0xde>
   118be:	2b01      	cmp	r3, #1
   118c0:	d109      	bne.n	118d6 <z_impl_k_poll+0xd6>
		add_event(&event->signal->poll_events, event, poller);
   118c2:	466a      	mov	r2, sp
   118c4:	4621      	mov	r1, r4
   118c6:	6920      	ldr	r0, [r4, #16]
   118c8:	e003      	b.n	118d2 <z_impl_k_poll+0xd2>
		add_event(&event->sem->poll_events, event, poller);
   118ca:	6920      	ldr	r0, [r4, #16]
   118cc:	466a      	mov	r2, sp
   118ce:	4621      	mov	r1, r4
   118d0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   118d2:	f005 fc48 	bl	17166 <add_event>
	event->poller = poller;
   118d6:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   118da:	3501      	adds	r5, #1
   118dc:	e7dd      	b.n	1189a <z_impl_k_poll+0x9a>
		add_event(&event->queue->poll_events, event, poller);
   118de:	6920      	ldr	r0, [r4, #16]
   118e0:	466a      	mov	r2, sp
   118e2:	4621      	mov	r1, r4
   118e4:	3008      	adds	r0, #8
   118e6:	e7f4      	b.n	118d2 <z_impl_k_poll+0xd2>
	poller.is_polling = false;
   118e8:	2300      	movs	r3, #0
   118ea:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   118ee:	f1b8 0f00 	cmp.w	r8, #0
   118f2:	d109      	bne.n	11908 <z_impl_k_poll+0x108>
   118f4:	f386 8811 	msr	BASEPRI, r6
   118f8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   118fc:	f06f 040a 	mvn.w	r4, #10
}
   11900:	4620      	mov	r0, r4
   11902:	b005      	add	sp, #20
   11904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11908:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1190a:	4643      	mov	r3, r8
   1190c:	4631      	mov	r1, r6
   1190e:	4808      	ldr	r0, [pc, #32]	; (11930 <z_impl_k_poll+0x130>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11910:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11914:	f7ff fc4a 	bl	111ac <z_pend_curr>
   11918:	4604      	mov	r4, r0
	__asm__ volatile(
   1191a:	f04f 0320 	mov.w	r3, #32
   1191e:	f3ef 8611 	mrs	r6, BASEPRI
   11922:	f383 8811 	msr	BASEPRI, r3
   11926:	f3bf 8f6f 	isb	sy
   1192a:	e78a      	b.n	11842 <z_impl_k_poll+0x42>
   1192c:	20001efc 	.word	0x20001efc
   11930:	200022df 	.word	0x200022df

00011934 <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   11934:	b538      	push	{r3, r4, r5, lr}
   11936:	f04f 0320 	mov.w	r3, #32
   1193a:	f3ef 8511 	mrs	r5, BASEPRI
   1193e:	f383 8811 	msr	BASEPRI, r3
   11942:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11946:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   11948:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1194a:	4298      	cmp	r0, r3
	signal->signaled = 1U;
   1194c:	f04f 0101 	mov.w	r1, #1
   11950:	6081      	str	r1, [r0, #8]
   11952:	d106      	bne.n	11962 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   11954:	f385 8811 	msr	BASEPRI, r5
   11958:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1195c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1195e:	4620      	mov	r0, r4
   11960:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   11962:	e9d3 0200 	ldrd	r0, r2, [r3]
   11966:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   11968:	6818      	ldr	r0, [r3, #0]
   1196a:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   1196c:	2200      	movs	r2, #0
	node->prev = NULL;
   1196e:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11972:	4618      	mov	r0, r3
   11974:	f005 fbcb 	bl	1710e <signal_poll_event>
	z_reschedule(&lock, key);
   11978:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1197a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1197c:	4801      	ldr	r0, [pc, #4]	; (11984 <z_impl_k_poll_signal_raise+0x50>)
   1197e:	f005 f9a4 	bl	16cca <z_reschedule>
	return rc;
   11982:	e7ec      	b.n	1195e <z_impl_k_poll_signal_raise+0x2a>
   11984:	200022df 	.word	0x200022df

00011988 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   11988:	6843      	ldr	r3, [r0, #4]
   1198a:	6a1b      	ldr	r3, [r3, #32]
   1198c:	b103      	cbz	r3, 11990 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1198e:	4718      	bx	r3
}
   11990:	4770      	bx	lr

00011992 <k_sleep>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   11992:	f005 ba5b 	b.w	16e4c <z_impl_k_sleep>

00011996 <button_changed>:
{
   11996:	b500      	push	{lr}
}
   11998:	f85d fb04 	ldr.w	pc, [sp], #4

0001199c <main>:
  }
}

void main()
{
   1199c:	b507      	push	{r0, r1, r2, lr}
  //setup_adc();
  setup_pwm();
   1199e:	f7f2 f9dd 	bl	3d5c <setup_pwm>
  //volatile int adc_result = sample_adc();
  //volatile int adc_result2 = sample_adc();
  k_sleep(100);
   119a2:	2064      	movs	r0, #100	; 0x64
   119a4:	f7ff fff5 	bl	11992 <k_sleep>
  set_led_state(FIVE_V_EN, 1);
   119a8:	2101      	movs	r1, #1
   119aa:	200a      	movs	r0, #10
   119ac:	f7f2 fae4 	bl	3f78 <set_led_state>

  volatile char random = random_char();
   119b0:	f7f2 f9f6 	bl	3da0 <random_char>
   119b4:	f88d 0003 	strb.w	r0, [sp, #3]
  volatile int vcc2 = sample_adc();
   119b8:	f7f2 fb40 	bl	403c <sample_adc>
   119bc:	9001      	str	r0, [sp, #4]
  encrypt();

}
   119be:	b003      	add	sp, #12
   119c0:	f85d eb04 	ldr.w	lr, [sp], #4
  encrypt();
   119c4:	f7f2 b9fc 	b.w	3dc0 <encrypt>

000119c8 <gpio_pin_configure.constprop.0>:
	return api->config(port, access_op, pin, flags);
   119c8:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
   119ca:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   119cc:	681c      	ldr	r4, [r3, #0]
   119ce:	460a      	mov	r2, r1
   119d0:	46a4      	mov	ip, r4
   119d2:	2301      	movs	r3, #1
   119d4:	2100      	movs	r1, #0
}
   119d6:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
   119d8:	4760      	bx	ip

000119da <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   119da:	6843      	ldr	r3, [r0, #4]
{
   119dc:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   119de:	685c      	ldr	r4, [r3, #4]
   119e0:	4613      	mov	r3, r2
   119e2:	46a4      	mov	ip, r4
   119e4:	460a      	mov	r2, r1
}
   119e6:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   119e8:	2100      	movs	r1, #0
   119ea:	4760      	bx	ip

000119ec <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   119ec:	b570      	push	{r4, r5, r6, lr}
   119ee:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   119f0:	f990 000b 	ldrsb.w	r0, [r0, #11]
   119f4:	250c      	movs	r5, #12
   119f6:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   119f8:	4288      	cmp	r0, r1
   119fa:	eb06 0405 	add.w	r4, r6, r5
   119fe:	bfb4      	ite	lt
   11a00:	5971      	ldrlt	r1, [r6, r5]
   11a02:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
   11a04:	2420      	movs	r4, #32
   11a06:	fb92 f4f4 	sdiv	r4, r2, r4
   11a0a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11a0e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   11a10:	f002 001f 	and.w	r0, r2, #31
   11a14:	bd70      	pop	{r4, r5, r6, pc}

00011a16 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   11a16:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   11a18:	ab01      	add	r3, sp, #4
   11a1a:	f7ff ffe7 	bl	119ec <get_bit_ptr>

	*word |= (1<<bit);
   11a1e:	9a01      	ldr	r2, [sp, #4]
   11a20:	2301      	movs	r3, #1
   11a22:	fa03 f000 	lsl.w	r0, r3, r0
   11a26:	6813      	ldr	r3, [r2, #0]
   11a28:	4303      	orrs	r3, r0
   11a2a:	6013      	str	r3, [r2, #0]
}
   11a2c:	b003      	add	sp, #12
   11a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00011a32 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   11a32:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   11a34:	ab01      	add	r3, sp, #4
   11a36:	f7ff ffd9 	bl	119ec <get_bit_ptr>

	*word &= ~(1<<bit);
   11a3a:	9a01      	ldr	r2, [sp, #4]
   11a3c:	2301      	movs	r3, #1
   11a3e:	fa03 f000 	lsl.w	r0, r3, r0
   11a42:	6813      	ldr	r3, [r2, #0]
   11a44:	ea23 0300 	bic.w	r3, r3, r0
   11a48:	6013      	str	r3, [r2, #0]
}
   11a4a:	b003      	add	sp, #12
   11a4c:	f85d fb04 	ldr.w	pc, [sp], #4

00011a50 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   11a50:	f04f 0320 	mov.w	r3, #32
   11a54:	f3ef 8011 	mrs	r0, BASEPRI
   11a58:	f383 8811 	msr	BASEPRI, r3
   11a5c:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   11a60:	4770      	bx	lr

00011a62 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11a62:	07c3      	lsls	r3, r0, #31
   11a64:	d503      	bpl.n	11a6e <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   11a66:	f381 8811 	msr	BASEPRI, r1
   11a6a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   11a6e:	4770      	bx	lr

00011a70 <z_sys_mem_pool_base_init>:
{
   11a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   11a74:	6843      	ldr	r3, [r0, #4]
   11a76:	8905      	ldrh	r5, [r0, #8]
{
   11a78:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   11a7a:	6800      	ldr	r0, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   11a7c:	f894 e00a 	ldrb.w	lr, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   11a80:	435d      	muls	r5, r3
	p->max_inline_level = -1;
   11a82:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   11a84:	4428      	add	r0, r5
	p->max_inline_level = -1;
   11a86:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
   11a88:	2100      	movs	r1, #0
		sys_dlist_init(&p->levels[i].free_list);
   11a8a:	f04f 080c 	mov.w	r8, #12
			bits += (nblocks + 31)/32;
   11a8e:	f04f 0920 	mov.w	r9, #32
	for (i = 0; i < p->n_levels; i++) {
   11a92:	458e      	cmp	lr, r1
   11a94:	dc05      	bgt.n	11aa2 <z_sys_mem_pool_base_init+0x32>
	for (i = 0; i < p->n_max; i++) {
   11a96:	2500      	movs	r5, #0
   11a98:	8923      	ldrh	r3, [r4, #8]
   11a9a:	42ab      	cmp	r3, r5
   11a9c:	dc1f      	bgt.n	11ade <z_sys_mem_pool_base_init+0x6e>
}
   11a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
   11aa2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		int nblocks = buflen / sz;
   11aa6:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
   11aaa:	fb08 f701 	mul.w	r7, r8, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   11aae:	2a20      	cmp	r2, #32
		sys_dlist_init(&p->levels[i].free_list);
   11ab0:	eb0c 0607 	add.w	r6, ip, r7
			bits += (nblocks + 31)/32;
   11ab4:	bf88      	it	hi
   11ab6:	321f      	addhi	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   11ab8:	f106 0a04 	add.w	sl, r6, #4
		sz = WB_DN(sz / 4);
   11abc:	ea4f 0393 	mov.w	r3, r3, lsr #2
	list->tail = (sys_dnode_t *)list;
   11ac0:	e9c6 aa01 	strd	sl, sl, [r6, #4]
			bits += (nblocks + 31)/32;
   11ac4:	bf8a      	itet	hi
   11ac6:	fb92 f2f9 	sdivhi	r2, r2, r9
			p->max_inline_level = i;
   11aca:	72e1      	strbls	r1, [r4, #11]
			p->levels[i].bits_p = bits;
   11acc:	f84c 0007 	strhi.w	r0, [ip, r7]
		sz = WB_DN(sz / 4);
   11ad0:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   11ad4:	bf88      	it	hi
   11ad6:	eb00 0082 	addhi.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   11ada:	3101      	adds	r1, #1
   11adc:	e7d9      	b.n	11a92 <z_sys_mem_pool_base_init+0x22>
	return (u8_t *)p->buf + lsz * block;
   11ade:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   11ae0:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   11ae2:	6820      	ldr	r0, [r4, #0]
   11ae4:	436a      	muls	r2, r5
   11ae6:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   11ae8:	1d1e      	adds	r6, r3, #4
	node->next = list;
   11aea:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   11aec:	689a      	ldr	r2, [r3, #8]
   11aee:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   11af0:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   11af2:	4620      	mov	r0, r4
   11af4:	6011      	str	r1, [r2, #0]
	list->tail = node;
   11af6:	6099      	str	r1, [r3, #8]
   11af8:	462a      	mov	r2, r5
   11afa:	2100      	movs	r1, #0
   11afc:	f7ff ff8b 	bl	11a16 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   11b00:	3501      	adds	r5, #1
   11b02:	e7c9      	b.n	11a98 <z_sys_mem_pool_base_init+0x28>

00011b04 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   11b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b08:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   11b0a:	7a84      	ldrb	r4, [r0, #10]
{
   11b0c:	af00      	add	r7, sp, #0
   11b0e:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   11b12:	00a3      	lsls	r3, r4, #2
   11b14:	330a      	adds	r3, #10
   11b16:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   11b1a:	ebad 0d03 	sub.w	sp, sp, r3
   11b1e:	46e8      	mov	r8, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   11b20:	4643      	mov	r3, r8
   11b22:	6842      	ldr	r2, [r0, #4]
   11b24:	f843 2904 	str.w	r2, [r3], #-4
{
   11b28:	4605      	mov	r5, r0
	for (i = 0; i < p->n_levels; i++) {
   11b2a:	2200      	movs	r2, #0
   11b2c:	4294      	cmp	r4, r2
   11b2e:	f102 39ff 	add.w	r9, r2, #4294967295
   11b32:	dd09      	ble.n	11b48 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   11b34:	b122      	cbz	r2, 11b40 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   11b36:	6818      	ldr	r0, [r3, #0]
   11b38:	0880      	lsrs	r0, r0, #2
   11b3a:	f020 0003 	bic.w	r0, r0, #3
   11b3e:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   11b40:	f853 0f04 	ldr.w	r0, [r3, #4]!
   11b44:	4288      	cmp	r0, r1
   11b46:	d208      	bcs.n	11b5a <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   11b48:	f1b9 3fff 	cmp.w	r9, #4294967295
   11b4c:	d107      	bne.n	11b5e <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   11b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11b50:	2300      	movs	r3, #0
   11b52:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   11b54:	f06f 000b 	mvn.w	r0, #11
   11b58:	e043      	b.n	11be2 <z_sys_mem_pool_block_alloc+0xde>
	for (i = 0; i < p->n_levels; i++) {
   11b5a:	3201      	adds	r2, #1
   11b5c:	e7e6      	b.n	11b2c <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11b5e:	7c28      	ldrb	r0, [r5, #16]
   11b60:	f010 0001 	ands.w	r0, r0, #1
   11b64:	d001      	beq.n	11b6a <z_sys_mem_pool_block_alloc+0x66>
   11b66:	f7ff ff73 	bl	11a50 <pool_irq_lock.isra.2.part.3>
   11b6a:	230c      	movs	r3, #12
   11b6c:	fb03 f309 	mul.w	r3, r3, r9
   11b70:	1d1a      	adds	r2, r3, #4
   11b72:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   11b74:	61f8      	str	r0, [r7, #28]
   11b76:	4413      	add	r3, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   11b78:	464e      	mov	r6, r9
	return list->head == list;
   11b7a:	681c      	ldr	r4, [r3, #0]
	if (!sys_dlist_is_empty(list)) {
   11b7c:	42a3      	cmp	r3, r4
   11b7e:	d06f      	beq.n	11c60 <z_sys_mem_pool_block_alloc+0x15c>
	node->prev->next = node->next;
   11b80:	e9d4 1300 	ldrd	r1, r3, [r4]
   11b84:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   11b86:	6821      	ldr	r1, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   11b88:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
   11b8c:	604b      	str	r3, [r1, #4]
	node->next = NULL;
   11b8e:	2300      	movs	r3, #0
	node->prev = NULL;
   11b90:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   11b94:	682b      	ldr	r3, [r5, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
   11b96:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   11b98:	1ae3      	subs	r3, r4, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   11b9a:	4628      	mov	r0, r5
   11b9c:	fb93 f2f2 	sdiv	r2, r3, r2
   11ba0:	f7ff ff47 	bl	11a32 <clear_free_bit>
   11ba4:	eba8 0388 	sub.w	r3, r8, r8, lsl #2
   11ba8:	f106 0b01 	add.w	fp, r6, #1
   11bac:	617b      	str	r3, [r7, #20]
   11bae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
			for (from_l = i; from_l < alloc_l; from_l++) {
   11bb2:	f10b 33ff 	add.w	r3, fp, #4294967295
   11bb6:	4599      	cmp	r9, r3
   11bb8:	dc17      	bgt.n	11bea <z_sys_mem_pool_block_alloc+0xe6>
	pool_irq_unlock(p, key);
   11bba:	69f9      	ldr	r1, [r7, #28]
   11bbc:	7c28      	ldrb	r0, [r5, #16]
   11bbe:	f7ff ff50 	bl	11a62 <pool_irq_unlock.isra.4>
	*data_p = data;
   11bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11bc4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   11bc6:	2c00      	cmp	r4, #0
   11bc8:	d0c4      	beq.n	11b54 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   11bca:	68bb      	ldr	r3, [r7, #8]
   11bcc:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   11bd0:	682b      	ldr	r3, [r5, #0]
   11bd2:	1ae4      	subs	r4, r4, r3
   11bd4:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
   11bd8:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   11bdc:	687b      	ldr	r3, [r7, #4]

	return 0;
   11bde:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   11be0:	601c      	str	r4, [r3, #0]
}
   11be2:	3724      	adds	r7, #36	; 0x24
   11be4:	46bd      	mov	sp, r7
   11be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   11bea:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   11bec:	f856 2b04 	ldr.w	r2, [r6], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   11bf0:	1ae3      	subs	r3, r4, r3
   11bf2:	fb93 f3f2 	sdiv	r3, r3, r2
   11bf6:	697a      	ldr	r2, [r7, #20]
		int lbn = 4*bn + i;
   11bf8:	009b      	lsls	r3, r3, #2
   11bfa:	613b      	str	r3, [r7, #16]
   11bfc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   11c00:	4413      	add	r3, r2
   11c02:	60fb      	str	r3, [r7, #12]
	for (i = 1; i < 4; i++) {
   11c04:	f04f 0a01 	mov.w	sl, #1
		void *block2 = (lsz * i) + (char *)block;
   11c08:	6833      	ldr	r3, [r6, #0]
   11c0a:	fb03 f30a 	mul.w	r3, r3, sl
   11c0e:	61bb      	str	r3, [r7, #24]
   11c10:	18e3      	adds	r3, r4, r3
   11c12:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
   11c14:	693b      	ldr	r3, [r7, #16]
   11c16:	4659      	mov	r1, fp
   11c18:	eb0a 0203 	add.w	r2, sl, r3
   11c1c:	4628      	mov	r0, r5
   11c1e:	f7ff fefa 	bl	11a16 <set_free_bit>
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   11c22:	68ea      	ldr	r2, [r5, #12]
   11c24:	68fb      	ldr	r3, [r7, #12]
   11c26:	441a      	add	r2, r3
	node->next = list;
   11c28:	69bb      	ldr	r3, [r7, #24]
   11c2a:	1d11      	adds	r1, r2, #4
   11c2c:	50e1      	str	r1, [r4, r3]
	node->prev = list->tail;
   11c2e:	683b      	ldr	r3, [r7, #0]
   11c30:	6891      	ldr	r1, [r2, #8]
   11c32:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   11c34:	6891      	ldr	r1, [r2, #8]
	for (i = 1; i < 4; i++) {
   11c36:	f10a 0a01 	add.w	sl, sl, #1
   11c3a:	f1ba 0f04 	cmp.w	sl, #4
   11c3e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11c40:	6093      	str	r3, [r2, #8]
   11c42:	d1e1      	bne.n	11c08 <z_sys_mem_pool_block_alloc+0x104>
				pool_irq_unlock(p, key);
   11c44:	7c28      	ldrb	r0, [r5, #16]
   11c46:	69f9      	ldr	r1, [r7, #28]
   11c48:	f7ff ff0b 	bl	11a62 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11c4c:	7c28      	ldrb	r0, [r5, #16]
   11c4e:	f010 0001 	ands.w	r0, r0, #1
   11c52:	d001      	beq.n	11c58 <z_sys_mem_pool_block_alloc+0x154>
   11c54:	f7ff fefc 	bl	11a50 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   11c58:	61f8      	str	r0, [r7, #28]
   11c5a:	f10b 0b01 	add.w	fp, fp, #1
   11c5e:	e7a8      	b.n	11bb2 <z_sys_mem_pool_block_alloc+0xae>
	for (i = alloc_l; i >= 0; i--) {
   11c60:	3e01      	subs	r6, #1
   11c62:	1c72      	adds	r2, r6, #1
   11c64:	f1a4 030c 	sub.w	r3, r4, #12
   11c68:	d187      	bne.n	11b7a <z_sys_mem_pool_block_alloc+0x76>
   11c6a:	2400      	movs	r4, #0
   11c6c:	e7a5      	b.n	11bba <z_sys_mem_pool_block_alloc+0xb6>

00011c6e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   11c6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c72:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   11c74:	7a83      	ldrb	r3, [r0, #10]
   11c76:	009b      	lsls	r3, r3, #2
   11c78:	330a      	adds	r3, #10
   11c7a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   11c7e:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   11c80:	ebad 0d03 	sub.w	sp, sp, r3
   11c84:	46e9      	mov	r9, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   11c86:	6843      	ldr	r3, [r0, #4]
   11c88:	f8c9 3000 	str.w	r3, [r9]
{
   11c8c:	4605      	mov	r5, r0
   11c8e:	464c      	mov	r4, r9
	for (i = 1; i <= level; i++) {
   11c90:	2001      	movs	r0, #1
   11c92:	4281      	cmp	r1, r0
   11c94:	d214      	bcs.n	11cc0 <z_sys_mem_pool_block_free+0x52>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11c96:	7c28      	ldrb	r0, [r5, #16]
   11c98:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   11c9c:	460e      	mov	r6, r1
   11c9e:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11ca0:	d001      	beq.n	11ca6 <z_sys_mem_pool_block_free+0x38>
   11ca2:	f7ff fed5 	bl	11a50 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   11ca6:	4604      	mov	r4, r0
	while (level >= 0) {
   11ca8:	2e00      	cmp	r6, #0
   11caa:	da11      	bge.n	11cd0 <z_sys_mem_pool_block_free+0x62>
	return -1;
   11cac:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   11cb0:	4621      	mov	r1, r4
   11cb2:	7c28      	ldrb	r0, [r5, #16]
   11cb4:	f7ff fed5 	bl	11a62 <pool_irq_unlock.isra.4>
}
   11cb8:	3714      	adds	r7, #20
   11cba:	46bd      	mov	sp, r7
   11cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   11cc0:	6823      	ldr	r3, [r4, #0]
   11cc2:	089b      	lsrs	r3, r3, #2
   11cc4:	f023 0303 	bic.w	r3, r3, #3
   11cc8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   11ccc:	3001      	adds	r0, #1
   11cce:	e7e0      	b.n	11c92 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   11cd0:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
   11cd4:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   11cd6:	fb03 fb08 	mul.w	fp, r3, r8
   11cda:	682b      	ldr	r3, [r5, #0]
   11cdc:	603b      	str	r3, [r7, #0]
		set_free_bit(p, level, bn);
   11cde:	4642      	mov	r2, r8
   11ce0:	4631      	mov	r1, r6
   11ce2:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   11ce4:	eb03 0a0b 	add.w	sl, r3, fp
		set_free_bit(p, level, bn);
   11ce8:	f7ff fe95 	bl	11a16 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   11cec:	68ea      	ldr	r2, [r5, #12]
   11cee:	230c      	movs	r3, #12
   11cf0:	fb03 2206 	mla	r2, r3, r6, r2
	node->next = list;
   11cf4:	683b      	ldr	r3, [r7, #0]
   11cf6:	1d11      	adds	r1, r2, #4
   11cf8:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   11cfc:	6893      	ldr	r3, [r2, #8]
   11cfe:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   11d02:	6893      	ldr	r3, [r2, #8]
   11d04:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   11d08:	f8c2 a008 	str.w	sl, [r2, #8]
		pool_irq_unlock(p, key);
   11d0c:	7c28      	ldrb	r0, [r5, #16]
   11d0e:	4621      	mov	r1, r4
   11d10:	f7ff fea7 	bl	11a62 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   11d14:	7c28      	ldrb	r0, [r5, #16]
   11d16:	f010 0001 	ands.w	r0, r0, #1
   11d1a:	d001      	beq.n	11d20 <z_sys_mem_pool_block_free+0xb2>
   11d1c:	f7ff fe98 	bl	11a50 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   11d20:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   11d22:	2e00      	cmp	r6, #0
   11d24:	d0c4      	beq.n	11cb0 <z_sys_mem_pool_block_free+0x42>
	int bit = get_bit_ptr(p, level, bn, &word);
   11d26:	f107 030c 	add.w	r3, r7, #12
   11d2a:	4642      	mov	r2, r8
   11d2c:	4631      	mov	r1, r6
   11d2e:	4628      	mov	r0, r5
   11d30:	f7ff fe5c 	bl	119ec <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   11d34:	68fa      	ldr	r2, [r7, #12]
   11d36:	2304      	movs	r3, #4
   11d38:	fb90 f3f3 	sdiv	r3, r0, r3
   11d3c:	6810      	ldr	r0, [r2, #0]
   11d3e:	009b      	lsls	r3, r3, #2
   11d40:	40d8      	lsrs	r0, r3
   11d42:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   11d46:	280f      	cmp	r0, #15
   11d48:	d1b2      	bne.n	11cb0 <z_sys_mem_pool_block_free+0x42>
			int b = (bn & ~3) + i;
   11d4a:	f028 0303 	bic.w	r3, r8, #3
		for (i = 0; i < 4; i++) {
   11d4e:	f04f 0b00 	mov.w	fp, #0
			int b = (bn & ~3) + i;
   11d52:	603b      	str	r3, [r7, #0]
   11d54:	683b      	ldr	r3, [r7, #0]
   11d56:	eb03 0a0b 	add.w	sl, r3, fp
			clear_free_bit(p, level, b);
   11d5a:	4652      	mov	r2, sl
   11d5c:	4631      	mov	r1, r6
   11d5e:	4628      	mov	r0, r5
   11d60:	f7ff fe67 	bl	11a32 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   11d64:	687b      	ldr	r3, [r7, #4]
   11d66:	682a      	ldr	r2, [r5, #0]
   11d68:	fb03 fa0a 	mul.w	sl, r3, sl
   11d6c:	eb02 000a 	add.w	r0, r2, sl
	node->prev->next = node->next;
   11d70:	f852 100a 	ldr.w	r1, [r2, sl]
   11d74:	6843      	ldr	r3, [r0, #4]
   11d76:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   11d78:	f852 100a 	ldr.w	r1, [r2, sl]
		for (i = 0; i < 4; i++) {
   11d7c:	f10b 0b01 	add.w	fp, fp, #1
   11d80:	604b      	str	r3, [r1, #4]
   11d82:	f1bb 0f04 	cmp.w	fp, #4
	node->next = NULL;
   11d86:	f04f 0300 	mov.w	r3, #0
   11d8a:	f842 300a 	str.w	r3, [r2, sl]
	node->prev = NULL;
   11d8e:	6043      	str	r3, [r0, #4]
   11d90:	d1e0      	bne.n	11d54 <z_sys_mem_pool_block_free+0xe6>
		bn = bn / 4;
   11d92:	fb98 f8fb 	sdiv	r8, r8, fp
		level = level - 1;
   11d96:	3e01      	subs	r6, #1
   11d98:	e786      	b.n	11ca8 <z_sys_mem_pool_block_free+0x3a>

00011d9a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11d9a:	b508      	push	{r3, lr}
   11d9c:	4604      	mov	r4, r0
   11d9e:	4608      	mov	r0, r1
   11da0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   11da2:	461a      	mov	r2, r3
   11da4:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   11da6:	f7ff fa99 	bl	112dc <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   11daa:	f7f3 fc31 	bl	5610 <z_impl_k_thread_abort>

00011dae <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   11dae:	b510      	push	{r4, lr}
   11db0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   11db2:	f04f 31ff 	mov.w	r1, #4294967295
   11db6:	4620      	mov	r0, r4
   11db8:	f004 fef4 	bl	16ba4 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   11dbc:	4603      	mov	r3, r0
   11dbe:	2800      	cmp	r0, #0
   11dc0:	d0f7      	beq.n	11db2 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11dc2:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   11dc4:	6842      	ldr	r2, [r0, #4]
   11dc6:	f3bf 8f5b 	dmb	ish
   11dca:	e853 1f00 	ldrex	r1, [r3]
   11dce:	f021 0c01 	bic.w	ip, r1, #1
   11dd2:	e843 ce00 	strex	lr, ip, [r3]
   11dd6:	f1be 0f00 	cmp.w	lr, #0
   11dda:	d1f6      	bne.n	11dca <z_work_q_main+0x1c>
   11ddc:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   11de0:	07cb      	lsls	r3, r1, #31
   11de2:	d500      	bpl.n	11de6 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   11de4:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   11de6:	f7ff fa2f 	bl	11248 <z_impl_k_yield>
   11dea:	e7e2      	b.n	11db2 <z_work_q_main+0x4>

00011dec <z_arch_printk_char_out>:
}
   11dec:	2000      	movs	r0, #0
   11dee:	4770      	bx	lr

00011df0 <print_err>:
{
   11df0:	b570      	push	{r4, r5, r6, lr}
   11df2:	4604      	mov	r4, r0
   11df4:	460d      	mov	r5, r1
	out('E', ctx);
   11df6:	2045      	movs	r0, #69	; 0x45
   11df8:	47a0      	blx	r4
	out('R', ctx);
   11dfa:	4629      	mov	r1, r5
   11dfc:	2052      	movs	r0, #82	; 0x52
   11dfe:	47a0      	blx	r4
	out('R', ctx);
   11e00:	4629      	mov	r1, r5
   11e02:	4623      	mov	r3, r4
   11e04:	2052      	movs	r0, #82	; 0x52
}
   11e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   11e0a:	4718      	bx	r3

00011e0c <str_out>:
{
   11e0c:	b530      	push	{r4, r5, lr}
   11e0e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11e10:	680c      	ldr	r4, [r1, #0]
   11e12:	1c55      	adds	r5, r2, #1
   11e14:	b114      	cbz	r4, 11e1c <str_out+0x10>
   11e16:	684b      	ldr	r3, [r1, #4]
   11e18:	4293      	cmp	r3, r2
   11e1a:	dc01      	bgt.n	11e20 <str_out+0x14>
		ctx->count++;
   11e1c:	608d      	str	r5, [r1, #8]
}
   11e1e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   11e20:	3b01      	subs	r3, #1
   11e22:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   11e24:	bf08      	it	eq
   11e26:	2200      	moveq	r2, #0
   11e28:	608d      	str	r5, [r1, #8]
   11e2a:	bf0c      	ite	eq
   11e2c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   11e2e:	54a0      	strbne	r0, [r4, r2]
   11e30:	e7f5      	b.n	11e1e <str_out+0x12>

00011e32 <z_vprintk>:
{
   11e32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   11e36:	2700      	movs	r7, #0
{
   11e38:	b089      	sub	sp, #36	; 0x24
   11e3a:	4605      	mov	r5, r0
   11e3c:	460e      	mov	r6, r1
   11e3e:	4692      	mov	sl, r2
   11e40:	461c      	mov	r4, r3
	int min_width = -1;
   11e42:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   11e46:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   11e48:	46bb      	mov	fp, r7
	while (*fmt) {
   11e4a:	f89a 0000 	ldrb.w	r0, [sl]
   11e4e:	b910      	cbnz	r0, 11e56 <z_vprintk+0x24>
}
   11e50:	b009      	add	sp, #36	; 0x24
   11e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   11e56:	f1bb 0f00 	cmp.w	fp, #0
   11e5a:	d107      	bne.n	11e6c <z_vprintk+0x3a>
			if (*fmt != '%') {
   11e5c:	2825      	cmp	r0, #37	; 0x25
   11e5e:	f000 814e 	beq.w	120fe <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   11e62:	4631      	mov	r1, r6
   11e64:	47a8      	blx	r5
		++fmt;
   11e66:	f10a 0a01 	add.w	sl, sl, #1
   11e6a:	e7ee      	b.n	11e4a <z_vprintk+0x18>
			switch (*fmt) {
   11e6c:	2864      	cmp	r0, #100	; 0x64
   11e6e:	d068      	beq.n	11f42 <z_vprintk+0x110>
   11e70:	d81a      	bhi.n	11ea8 <z_vprintk+0x76>
   11e72:	2839      	cmp	r0, #57	; 0x39
   11e74:	d80b      	bhi.n	11e8e <z_vprintk+0x5c>
   11e76:	2831      	cmp	r0, #49	; 0x31
   11e78:	d25a      	bcs.n	11f30 <z_vprintk+0xfe>
   11e7a:	282d      	cmp	r0, #45	; 0x2d
   11e7c:	f000 8146 	beq.w	1210c <z_vprintk+0x2da>
   11e80:	2830      	cmp	r0, #48	; 0x30
   11e82:	d046      	beq.n	11f12 <z_vprintk+0xe0>
   11e84:	2825      	cmp	r0, #37	; 0x25
   11e86:	d108      	bne.n	11e9a <z_vprintk+0x68>
				out((int)'%', ctx);
   11e88:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   11e8a:	47a8      	blx	r5
   11e8c:	e07a      	b.n	11f84 <z_vprintk+0x152>
			switch (*fmt) {
   11e8e:	2858      	cmp	r0, #88	; 0x58
   11e90:	f000 80b4 	beq.w	11ffc <z_vprintk+0x1ca>
   11e94:	2863      	cmp	r0, #99	; 0x63
   11e96:	f000 812c 	beq.w	120f2 <z_vprintk+0x2c0>
				out((int)'%', ctx);
   11e9a:	4631      	mov	r1, r6
   11e9c:	2025      	movs	r0, #37	; 0x25
   11e9e:	47a8      	blx	r5
				out((int)*fmt, ctx);
   11ea0:	4631      	mov	r1, r6
   11ea2:	f89a 0000 	ldrb.w	r0, [sl]
   11ea6:	e7f0      	b.n	11e8a <z_vprintk+0x58>
			switch (*fmt) {
   11ea8:	2870      	cmp	r0, #112	; 0x70
   11eaa:	f000 809d 	beq.w	11fe8 <z_vprintk+0x1b6>
   11eae:	d80d      	bhi.n	11ecc <z_vprintk+0x9a>
   11eb0:	2869      	cmp	r0, #105	; 0x69
   11eb2:	d046      	beq.n	11f42 <z_vprintk+0x110>
   11eb4:	286c      	cmp	r0, #108	; 0x6c
   11eb6:	d103      	bne.n	11ec0 <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   11eb8:	2f6c      	cmp	r7, #108	; 0x6c
   11eba:	d126      	bne.n	11f0a <z_vprintk+0xd8>
					length_mod = 'L';
   11ebc:	274c      	movs	r7, #76	; 0x4c
   11ebe:	e7d2      	b.n	11e66 <z_vprintk+0x34>
			switch (*fmt) {
   11ec0:	2868      	cmp	r0, #104	; 0x68
   11ec2:	d1ea      	bne.n	11e9a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   11ec4:	2f68      	cmp	r7, #104	; 0x68
   11ec6:	d120      	bne.n	11f0a <z_vprintk+0xd8>
					length_mod = 'H';
   11ec8:	2748      	movs	r7, #72	; 0x48
   11eca:	e7cc      	b.n	11e66 <z_vprintk+0x34>
			switch (*fmt) {
   11ecc:	2875      	cmp	r0, #117	; 0x75
   11ece:	d070      	beq.n	11fb2 <z_vprintk+0x180>
   11ed0:	d817      	bhi.n	11f02 <z_vprintk+0xd0>
   11ed2:	2873      	cmp	r0, #115	; 0x73
   11ed4:	d1e1      	bne.n	11e9a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   11ed6:	6822      	ldr	r2, [r4, #0]
   11ed8:	f104 0b04 	add.w	fp, r4, #4
   11edc:	4611      	mov	r1, r2
				while (*s) {
   11ede:	460c      	mov	r4, r1
   11ee0:	f814 0b01 	ldrb.w	r0, [r4], #1
   11ee4:	2800      	cmp	r0, #0
   11ee6:	f040 80f9 	bne.w	120dc <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   11eea:	f1b8 0f03 	cmp.w	r8, #3
   11eee:	f040 8113 	bne.w	12118 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   11ef2:	1a8c      	subs	r4, r1, r2
   11ef4:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   11ef8:	2c00      	cmp	r4, #0
   11efa:	f300 80f5 	bgt.w	120e8 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   11efe:	465c      	mov	r4, fp
   11f00:	e040      	b.n	11f84 <z_vprintk+0x152>
			switch (*fmt) {
   11f02:	2878      	cmp	r0, #120	; 0x78
   11f04:	d07a      	beq.n	11ffc <z_vprintk+0x1ca>
   11f06:	287a      	cmp	r0, #122	; 0x7a
   11f08:	d1c7      	bne.n	11e9a <z_vprintk+0x68>
				} else if (length_mod == 0) {
   11f0a:	2f00      	cmp	r7, #0
   11f0c:	d1c5      	bne.n	11e9a <z_vprintk+0x68>
   11f0e:	4607      	mov	r7, r0
   11f10:	e7a9      	b.n	11e66 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   11f12:	f1b9 0f00 	cmp.w	r9, #0
   11f16:	da0e      	bge.n	11f36 <z_vprintk+0x104>
   11f18:	f1b8 0f00 	cmp.w	r8, #0
   11f1c:	f000 80f9 	beq.w	12112 <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   11f20:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   11f24:	f1b8 0f00 	cmp.w	r8, #0
   11f28:	bf08      	it	eq
   11f2a:	f04f 0802 	moveq.w	r8, #2
   11f2e:	e79a      	b.n	11e66 <z_vprintk+0x34>
				if (min_width < 0) {
   11f30:	f1b9 0f00 	cmp.w	r9, #0
   11f34:	dbf4      	blt.n	11f20 <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   11f36:	220a      	movs	r2, #10
   11f38:	fb02 0909 	mla	r9, r2, r9, r0
   11f3c:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   11f40:	e7f0      	b.n	11f24 <z_vprintk+0xf2>
				if (length_mod == 'z') {
   11f42:	2f7a      	cmp	r7, #122	; 0x7a
   11f44:	d103      	bne.n	11f4e <z_vprintk+0x11c>
					d = va_arg(ap, int);
   11f46:	f8d4 b000 	ldr.w	fp, [r4]
   11f4a:	3404      	adds	r4, #4
   11f4c:	e01e      	b.n	11f8c <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   11f4e:	2f6c      	cmp	r7, #108	; 0x6c
   11f50:	d0f9      	beq.n	11f46 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   11f52:	2f4c      	cmp	r7, #76	; 0x4c
   11f54:	d1f7      	bne.n	11f46 <z_vprintk+0x114>
					long long lld = va_arg(ap, long long);
   11f56:	3407      	adds	r4, #7
   11f58:	f024 0307 	bic.w	r3, r4, #7
   11f5c:	f103 0408 	add.w	r4, r3, #8
   11f60:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   11f64:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   11f68:	f143 0100 	adc.w	r1, r3, #0
   11f6c:	f04f 0c00 	mov.w	ip, #0
   11f70:	f04f 3bff 	mov.w	fp, #4294967295
   11f74:	458c      	cmp	ip, r1
   11f76:	bf08      	it	eq
   11f78:	4583      	cmpeq	fp, r0
   11f7a:	d206      	bcs.n	11f8a <z_vprintk+0x158>
						print_err(out, ctx);
   11f7c:	4631      	mov	r1, r6
   11f7e:	4628      	mov	r0, r5
   11f80:	f7ff ff36 	bl	11df0 <print_err>
			might_format = 0;
   11f84:	f04f 0b00 	mov.w	fp, #0
				break;
   11f88:	e76d      	b.n	11e66 <z_vprintk+0x34>
					d = lld;
   11f8a:	4693      	mov	fp, r2
				if (d < 0) {
   11f8c:	f1bb 0f00 	cmp.w	fp, #0
   11f90:	da06      	bge.n	11fa0 <z_vprintk+0x16e>
					out((int)'-', ctx);
   11f92:	4631      	mov	r1, r6
   11f94:	202d      	movs	r0, #45	; 0x2d
   11f96:	47a8      	blx	r5
					d = -d;
   11f98:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   11f9c:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   11fa0:	f8cd 9000 	str.w	r9, [sp]
   11fa4:	4643      	mov	r3, r8
   11fa6:	465a      	mov	r2, fp
				_printk_dec_ulong(out, ctx, u, padding,
   11fa8:	4631      	mov	r1, r6
   11faa:	4628      	mov	r0, r5
   11fac:	f7f2 f8ba 	bl	4124 <_printk_dec_ulong>
   11fb0:	e7e8      	b.n	11f84 <z_vprintk+0x152>
				if (length_mod == 'z') {
   11fb2:	2f7a      	cmp	r7, #122	; 0x7a
   11fb4:	d102      	bne.n	11fbc <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   11fb6:	6822      	ldr	r2, [r4, #0]
   11fb8:	3404      	adds	r4, #4
   11fba:	e011      	b.n	11fe0 <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   11fbc:	2f6c      	cmp	r7, #108	; 0x6c
   11fbe:	d0fa      	beq.n	11fb6 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   11fc0:	2f4c      	cmp	r7, #76	; 0x4c
   11fc2:	d1f8      	bne.n	11fb6 <z_vprintk+0x184>
					unsigned long long llu =
   11fc4:	3407      	adds	r4, #7
   11fc6:	f024 0307 	bic.w	r3, r4, #7
   11fca:	f103 0408 	add.w	r4, r3, #8
   11fce:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   11fd2:	2100      	movs	r1, #0
   11fd4:	f04f 30ff 	mov.w	r0, #4294967295
   11fd8:	4299      	cmp	r1, r3
   11fda:	bf08      	it	eq
   11fdc:	4290      	cmpeq	r0, r2
   11fde:	d3cd      	bcc.n	11f7c <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   11fe0:	f8cd 9000 	str.w	r9, [sp]
   11fe4:	4643      	mov	r3, r8
   11fe6:	e7df      	b.n	11fa8 <z_vprintk+0x176>
				  out('0', ctx);
   11fe8:	4631      	mov	r1, r6
   11fea:	2030      	movs	r0, #48	; 0x30
   11fec:	47a8      	blx	r5
				  out('x', ctx);
   11fee:	4631      	mov	r1, r6
   11ff0:	2078      	movs	r0, #120	; 0x78
   11ff2:	47a8      	blx	r5
				  min_width = 8;
   11ff4:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   11ff8:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   11ffc:	f89a 2000 	ldrb.w	r2, [sl]
   12000:	2a70      	cmp	r2, #112	; 0x70
   12002:	d105      	bne.n	12010 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   12004:	6823      	ldr	r3, [r4, #0]
   12006:	9304      	str	r3, [sp, #16]
   12008:	2300      	movs	r3, #0
   1200a:	9302      	str	r3, [sp, #8]
   1200c:	3404      	adds	r4, #4
   1200e:	e00c      	b.n	1202a <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   12010:	2f6c      	cmp	r7, #108	; 0x6c
   12012:	d0f7      	beq.n	12004 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   12014:	2f4c      	cmp	r7, #76	; 0x4c
   12016:	d1f5      	bne.n	12004 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   12018:	3407      	adds	r4, #7
   1201a:	f024 0207 	bic.w	r2, r4, #7
   1201e:	f102 0408 	add.w	r4, r2, #8
   12022:	6813      	ldr	r3, [r2, #0]
   12024:	9304      	str	r3, [sp, #16]
   12026:	6853      	ldr	r3, [r2, #4]
   12028:	9302      	str	r3, [sp, #8]
	int digits = 0;
   1202a:	2200      	movs	r2, #0
   1202c:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   1202e:	9205      	str	r2, [sp, #20]
	int remaining = 16; /* 16 digits max */
   12030:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   12032:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   12034:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   12036:	9902      	ldr	r1, [sp, #8]
   12038:	9804      	ldr	r0, [sp, #16]
   1203a:	f1c2 0c20 	rsb	ip, r2, #32
   1203e:	f1a2 0e20 	sub.w	lr, r2, #32
   12042:	40d0      	lsrs	r0, r2
   12044:	fa01 fc0c 	lsl.w	ip, r1, ip
   12048:	ea40 000c 	orr.w	r0, r0, ip
   1204c:	fa21 fe0e 	lsr.w	lr, r1, lr
   12050:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   12054:	f010 000f 	ands.w	r0, r0, #15
   12058:	d108      	bne.n	1206c <z_vprintk+0x23a>
   1205a:	9905      	ldr	r1, [sp, #20]
   1205c:	b901      	cbnz	r1, 12060 <z_vprintk+0x22e>
   1205e:	bb42      	cbnz	r2, 120b2 <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   12060:	f04f 0c30 	mov.w	ip, #48	; 0x30
   12064:	e008      	b.n	12078 <z_vprintk+0x246>
			found_largest_digit = 1;
   12066:	f8cd b014 	str.w	fp, [sp, #20]
   1206a:	e7e3      	b.n	12034 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   1206c:	2809      	cmp	r0, #9
   1206e:	bf8c      	ite	hi
   12070:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   12074:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   12078:	4631      	mov	r1, r6
   1207a:	4460      	add	r0, ip
   1207c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12080:	47a8      	blx	r5
			digits++;
   12082:	9b03      	ldr	r3, [sp, #12]
   12084:	3301      	adds	r3, #1
   12086:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   12088:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1208c:	2a00      	cmp	r2, #0
   1208e:	d1ea      	bne.n	12066 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   12090:	f1b8 0f03 	cmp.w	r8, #3
   12094:	f47f af76 	bne.w	11f84 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   12098:	9b03      	ldr	r3, [sp, #12]
   1209a:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   1209e:	f1bb 0f00 	cmp.w	fp, #0
   120a2:	f77f af6f 	ble.w	11f84 <z_vprintk+0x152>
			out(' ', ctx);
   120a6:	4631      	mov	r1, r6
   120a8:	2020      	movs	r0, #32
   120aa:	47a8      	blx	r5
   120ac:	f10b 3bff 	add.w	fp, fp, #4294967295
   120b0:	e7f5      	b.n	1209e <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   120b2:	1e59      	subs	r1, r3, #1
   120b4:	4599      	cmp	r9, r3
   120b6:	9106      	str	r1, [sp, #24]
   120b8:	db07      	blt.n	120ca <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   120ba:	f1b8 0f01 	cmp.w	r8, #1
   120be:	d106      	bne.n	120ce <z_vprintk+0x29c>
   120c0:	9207      	str	r2, [sp, #28]
				out('0', ctx);
   120c2:	4631      	mov	r1, r6
   120c4:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   120c6:	47a8      	blx	r5
   120c8:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   120ca:	9b06      	ldr	r3, [sp, #24]
   120cc:	e7b2      	b.n	12034 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   120ce:	f1b8 0f02 	cmp.w	r8, #2
   120d2:	d1fa      	bne.n	120ca <z_vprintk+0x298>
   120d4:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   120d6:	4631      	mov	r1, r6
   120d8:	2020      	movs	r0, #32
   120da:	e7f4      	b.n	120c6 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   120dc:	4631      	mov	r1, r6
   120de:	9202      	str	r2, [sp, #8]
   120e0:	47a8      	blx	r5
   120e2:	4621      	mov	r1, r4
   120e4:	9a02      	ldr	r2, [sp, #8]
   120e6:	e6fa      	b.n	11ede <z_vprintk+0xac>
						out(' ', ctx);
   120e8:	4631      	mov	r1, r6
   120ea:	2020      	movs	r0, #32
   120ec:	47a8      	blx	r5
   120ee:	3c01      	subs	r4, #1
   120f0:	e702      	b.n	11ef8 <z_vprintk+0xc6>
				out(c, ctx);
   120f2:	4631      	mov	r1, r6
   120f4:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   120f6:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   120fa:	47a8      	blx	r5
   120fc:	e6ff      	b.n	11efe <z_vprintk+0xcc>
				length_mod = 0;
   120fe:	465f      	mov	r7, fp
				padding = PAD_NONE;
   12100:	46d8      	mov	r8, fp
				min_width = -1;
   12102:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   12106:	f04f 0b01 	mov.w	fp, #1
   1210a:	e6ac      	b.n	11e66 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   1210c:	f04f 0803 	mov.w	r8, #3
   12110:	e6a9      	b.n	11e66 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   12112:	f04f 0801 	mov.w	r8, #1
   12116:	e6a6      	b.n	11e66 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   12118:	465c      	mov	r4, fp
			might_format = 0;
   1211a:	4683      	mov	fp, r0
   1211c:	e6a3      	b.n	11e66 <z_vprintk+0x34>

0001211e <printk>:
{
   1211e:	b40f      	push	{r0, r1, r2, r3}
   12120:	b507      	push	{r0, r1, r2, lr}
   12122:	a904      	add	r1, sp, #16
   12124:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   12128:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1212a:	f7f2 f84d 	bl	41c8 <vprintk>
}
   1212e:	b003      	add	sp, #12
   12130:	f85d eb04 	ldr.w	lr, [sp], #4
   12134:	b004      	add	sp, #16
   12136:	4770      	bx	lr

00012138 <snprintk>:
{
   12138:	b40c      	push	{r2, r3}
   1213a:	b507      	push	{r0, r1, r2, lr}
   1213c:	ab04      	add	r3, sp, #16
   1213e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   12142:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   12144:	f7f2 f850 	bl	41e8 <vsnprintk>
}
   12148:	b003      	add	sp, #12
   1214a:	f85d eb04 	ldr.w	lr, [sp], #4
   1214e:	b002      	add	sp, #8
   12150:	4770      	bx	lr

00012152 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_UART_BUFFER_SIZE, 20);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   12152:	4770      	bx	lr

00012154 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12154:	f04f 0220 	mov.w	r2, #32
   12158:	f3ef 8311 	mrs	r3, BASEPRI
   1215c:	f382 8811 	msr	BASEPRI, r2
   12160:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
   12164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12168:	2101      	movs	r1, #1
   1216a:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
   1216e:	f383 8811 	msr	BASEPRI, r3
   12172:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12176:	2000      	movs	r0, #0
   12178:	4770      	bx	lr

0001217a <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1217a:	f7f2 ba43 	b.w	4604 <SystemInit>

0001217e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1217e:	428b      	cmp	r3, r1
{
   12180:	b538      	push	{r3, r4, r5, lr}
   12182:	4615      	mov	r5, r2
   12184:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   12186:	d805      	bhi.n	12194 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   12188:	461a      	mov	r2, r3
   1218a:	4629      	mov	r1, r5
   1218c:	f001 f96a 	bl	13464 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   12190:	4620      	mov	r0, r4
   12192:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   12194:	2400      	movs	r4, #0
   12196:	e7fb      	b.n	12190 <_copy+0x12>

00012198 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   12198:	f001 b991 	b.w	134be <memset>

0001219c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1219c:	09c3      	lsrs	r3, r0, #7
   1219e:	005a      	lsls	r2, r3, #1
   121a0:	4413      	add	r3, r2
   121a2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   121a6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   121aa:	b2c0      	uxtb	r0, r0
   121ac:	4770      	bx	lr

000121ae <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   121ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121b2:	4606      	mov	r6, r0
   121b4:	b0a8      	sub	sp, #160	; 0xa0
   121b6:	460f      	mov	r7, r1
   121b8:	4614      	mov	r4, r2
   121ba:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   121bc:	f04f 0820 	mov.w	r8, #32
		uECC_RNG_Function rng_function = uECC_get_rng();
   121c0:	f7f2 f826 	bl	4210 <uECC_get_rng>
		if (!rng_function ||
   121c4:	4603      	mov	r3, r0
   121c6:	2800      	cmp	r0, #0
   121c8:	d03a      	beq.n	12240 <uECC_make_key+0x92>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   121ca:	2140      	movs	r1, #64	; 0x40
   121cc:	a808      	add	r0, sp, #32
   121ce:	4798      	blx	r3
		if (!rng_function ||
   121d0:	b3b0      	cbz	r0, 12240 <uECC_make_key+0x92>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   121d2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   121d6:	f104 0224 	add.w	r2, r4, #36	; 0x24
   121da:	a908      	add	r1, sp, #32
   121dc:	4668      	mov	r0, sp
   121de:	331f      	adds	r3, #31
   121e0:	fb93 f3f8 	sdiv	r3, r3, r8
   121e4:	b25b      	sxtb	r3, r3
   121e6:	f000 fa22 	bl	1262e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   121ea:	4622      	mov	r2, r4
   121ec:	4669      	mov	r1, sp
   121ee:	a818      	add	r0, sp, #96	; 0x60
   121f0:	f000 fe38 	bl	12e64 <EccPoint_compute_public_key>
   121f4:	b310      	cbz	r0, 1223c <uECC_make_key+0x8e>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   121f6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   121fa:	466a      	mov	r2, sp
					       BITS_TO_BYTES(curve->num_n_bits),
   121fc:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   121fe:	4638      	mov	r0, r7
   12200:	2108      	movs	r1, #8
   12202:	fb93 f1f1 	sdiv	r1, r3, r1
   12206:	f000 fe55 	bl	12eb4 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1220a:	aa18      	add	r2, sp, #96	; 0x60
   1220c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   12210:	4630      	mov	r0, r6
   12212:	f000 fe4f 	bl	12eb4 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   12216:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1221a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1221e:	ab18      	add	r3, sp, #96	; 0x60
   12220:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   12224:	1870      	adds	r0, r6, r1
   12226:	f000 fe45 	bl	12eb4 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);
   1222a:	2220      	movs	r2, #32
   1222c:	2100      	movs	r1, #0
   1222e:	4668      	mov	r0, sp
   12230:	f001 f945 	bl	134be <memset>

      			return 1;
   12234:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   12236:	b028      	add	sp, #160	; 0xa0
   12238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1223c:	3d01      	subs	r5, #1
   1223e:	d1bf      	bne.n	121c0 <uECC_make_key+0x12>
        		return 0;
   12240:	2000      	movs	r0, #0
   12242:	e7f8      	b.n	12236 <uECC_make_key+0x88>

00012244 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   12244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12248:	4691      	mov	r9, r2
   1224a:	b0a5      	sub	sp, #148	; 0x94
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1224c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	wordcount_t num_bytes = curve->num_bytes;
   12250:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   12254:	f993 b000 	ldrsb.w	fp, [r3]
	uECC_word_t *p2[2] = {_private, tmp};
   12258:	ad04      	add	r5, sp, #16
{
   1225a:	4682      	mov	sl, r0
	uECC_vli_bytesToNative(_private,
   1225c:	f04f 0808 	mov.w	r8, #8
	uECC_word_t *p2[2] = {_private, tmp};
   12260:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   12262:	4628      	mov	r0, r5
			       BITS_TO_BYTES(curve->num_n_bits));
   12264:	3207      	adds	r2, #7
	uECC_vli_bytesToNative(_private,
   12266:	fb92 f2f8 	sdiv	r2, r2, r8
{
   1226a:	461c      	mov	r4, r3
	uECC_word_t *p2[2] = {_private, tmp};
   1226c:	9502      	str	r5, [sp, #8]
   1226e:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   12270:	f000 fe34 	bl	12edc <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   12274:	463a      	mov	r2, r7
   12276:	4651      	mov	r1, sl
   12278:	a814      	add	r0, sp, #80	; 0x50
   1227a:	f000 fe2f 	bl	12edc <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1227e:	ab14      	add	r3, sp, #80	; 0x50
   12280:	eb0a 0107 	add.w	r1, sl, r7
   12284:	eb03 008b 	add.w	r0, r3, fp, lsl #2
   12288:	463a      	mov	r2, r7
   1228a:	f000 fe27 	bl	12edc <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1228e:	4623      	mov	r3, r4
   12290:	4632      	mov	r2, r6
   12292:	4629      	mov	r1, r5
   12294:	4628      	mov	r0, r5
   12296:	f000 fdb9 	bl	12e0c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1229a:	fab0 f080 	clz	r0, r0
   1229e:	9401      	str	r4, [sp, #4]
   122a0:	ab24      	add	r3, sp, #144	; 0x90
   122a2:	0940      	lsrs	r0, r0, #5
   122a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   122a8:	8863      	ldrh	r3, [r4, #2]
   122aa:	3301      	adds	r3, #1
   122ac:	b21b      	sxth	r3, r3
   122ae:	9300      	str	r3, [sp, #0]
   122b0:	a914      	add	r1, sp, #80	; 0x50
   122b2:	2300      	movs	r3, #0
   122b4:	f850 2c88 	ldr.w	r2, [r0, #-136]
   122b8:	4608      	mov	r0, r1
   122ba:	f000 fcd8 	bl	12c6e <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   122be:	aa14      	add	r2, sp, #80	; 0x50
   122c0:	4639      	mov	r1, r7
   122c2:	4648      	mov	r0, r9
   122c4:	f000 fdf6 	bl	12eb4 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   122c8:	4621      	mov	r1, r4
   122ca:	a814      	add	r0, sp, #80	; 0x50
   122cc:	f000 fc46 	bl	12b5c <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   122d0:	eb0d 0408 	add.w	r4, sp, r8
	r = !EccPoint_isZero(_public, curve);
   122d4:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
   122d6:	4642      	mov	r2, r8
   122d8:	2100      	movs	r1, #0
   122da:	4620      	mov	r0, r4
   122dc:	f001 f8ef 	bl	134be <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   122e0:	2220      	movs	r2, #32
   122e2:	2100      	movs	r1, #0
   122e4:	4630      	mov	r0, r6
   122e6:	f001 f8ea 	bl	134be <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   122ea:	2220      	movs	r2, #32
   122ec:	2100      	movs	r1, #0
   122ee:	4628      	mov	r0, r5
   122f0:	f001 f8e5 	bl	134be <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   122f4:	fab7 f087 	clz	r0, r7
   122f8:	0940      	lsrs	r0, r0, #5
   122fa:	b025      	add	sp, #148	; 0x94
   122fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012300 <uECC_vli_add>:
{
   12300:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   12302:	2400      	movs	r4, #0
{
   12304:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   12306:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   12308:	b265      	sxtb	r5, r4
   1230a:	42ab      	cmp	r3, r5
   1230c:	dc00      	bgt.n	12310 <uECC_vli_add+0x10>
}
   1230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   12310:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   12314:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   12318:	4435      	add	r5, r6
   1231a:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1231c:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   1231e:	bf8c      	ite	hi
   12320:	2601      	movhi	r6, #1
   12322:	2600      	movls	r6, #0
		result[i] = sum;
   12324:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   12328:	bf18      	it	ne
   1232a:	4630      	movne	r0, r6
   1232c:	3401      	adds	r4, #1
   1232e:	e7eb      	b.n	12308 <uECC_vli_add+0x8>

00012330 <uECC_vli_rshift1>:
	vli += num_words;
   12330:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   12334:	2300      	movs	r3, #0
	while (vli-- > end) {
   12336:	4288      	cmp	r0, r1
   12338:	d300      	bcc.n	1233c <uECC_vli_rshift1+0xc>
}
   1233a:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1233c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   12340:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   12344:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   12346:	07d3      	lsls	r3, r2, #31
   12348:	e7f5      	b.n	12336 <uECC_vli_rshift1+0x6>

0001234a <vli_modInv_update>:
	if (!EVEN(uv)) {
   1234a:	6803      	ldr	r3, [r0, #0]
{
   1234c:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1234e:	f013 0501 	ands.w	r5, r3, #1
{
   12352:	4606      	mov	r6, r0
   12354:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   12356:	d005      	beq.n	12364 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   12358:	4613      	mov	r3, r2
   1235a:	460a      	mov	r2, r1
   1235c:	4601      	mov	r1, r0
   1235e:	f7ff ffcf 	bl	12300 <uECC_vli_add>
   12362:	4605      	mov	r5, r0
	uECC_vli_rshift1(uv, num_words);
   12364:	4621      	mov	r1, r4
   12366:	4630      	mov	r0, r6
   12368:	f7ff ffe2 	bl	12330 <uECC_vli_rshift1>
	if (carry) {
   1236c:	b145      	cbz	r5, 12380 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1236e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   12372:	3a01      	subs	r2, #1
   12374:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
   12378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1237c:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
}
   12380:	bd70      	pop	{r4, r5, r6, pc}

00012382 <uECC_vli_mult>:
{
   12382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12386:	b087      	sub	sp, #28
	for (k = 0; k < num_words; ++k) {
   12388:	2600      	movs	r6, #0
{
   1238a:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1238e:	9201      	str	r2, [sp, #4]
   12390:	4682      	mov	sl, r0
	uECC_word_t r1 = 0;
   12392:	4631      	mov	r1, r6
	uECC_word_t r0 = 0;
   12394:	4632      	mov	r2, r6
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   12396:	f06f 0803 	mvn.w	r8, #3
   1239a:	fa4f fe86 	sxtb.w	lr, r6
	for (k = 0; k < num_words; ++k) {
   1239e:	459e      	cmp	lr, r3
   123a0:	db11      	blt.n	123c6 <uECC_vli_mult+0x44>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   123a2:	f04f 30ff 	mov.w	r0, #4294967295
   123a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   123aa:	9001      	str	r0, [sp, #4]
   123ac:	f04f 0c01 	mov.w	ip, #1
   123b0:	4618      	mov	r0, r3
   123b2:	9c01      	ldr	r4, [sp, #4]
   123b4:	42a0      	cmp	r0, r4
   123b6:	db35      	blt.n	12424 <uECC_vli_mult+0xa2>
	result[num_words * 2 - 1] = r0;
   123b8:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   123bc:	f843 2c04 	str.w	r2, [r3, #-4]
}
   123c0:	b007      	add	sp, #28
   123c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c6:	2700      	movs	r7, #0
   123c8:	46b9      	mov	r9, r7
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   123ca:	fb08 f407 	mul.w	r4, r8, r7
	uECC_dword_t p = (uECC_dword_t)a * b;
   123ce:	9801      	ldr	r0, [sp, #4]
   123d0:	5905      	ldr	r5, [r0, r4]
   123d2:	9802      	ldr	r0, [sp, #8]
   123d4:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
   123d8:	fba5 4504 	umull	r4, r5, r5, r4
   123dc:	46a3      	mov	fp, r4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   123de:	2400      	movs	r4, #0
   123e0:	4620      	mov	r0, r4
   123e2:	ea40 0002 	orr.w	r0, r0, r2
	uECC_dword_t p = (uECC_dword_t)a * b;
   123e6:	46ac      	mov	ip, r5
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   123e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   123ec:	4661      	mov	r1, ip
   123ee:	4658      	mov	r0, fp
   123f0:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   123f4:	4622      	mov	r2, r4
   123f6:	3701      	adds	r7, #1
   123f8:	eb10 040b 	adds.w	r4, r0, fp
   123fc:	eb51 050c 	adcs.w	r5, r1, ip
		for (i = 0; i <= k; ++i) {
   12400:	fa4f fb87 	sxtb.w	fp, r7
   12404:	bf28      	it	cs
   12406:	2201      	movcs	r2, #1
   12408:	45de      	cmp	lr, fp
	*r2 += (r01 < p);
   1240a:	4491      	add	r9, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1240c:	4629      	mov	r1, r5
	*r0 = (uECC_word_t)r01;
   1240e:	4622      	mov	r2, r4
		for (i = 0; i <= k; ++i) {
   12410:	dadb      	bge.n	123ca <uECC_vli_mult+0x48>
   12412:	9a01      	ldr	r2, [sp, #4]
		result[k] = r0;
   12414:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
   12418:	3204      	adds	r2, #4
   1241a:	9201      	str	r2, [sp, #4]
   1241c:	3601      	adds	r6, #1
	*r1 = r01 >> uECC_WORD_BITS;
   1241e:	462a      	mov	r2, r5
	*r2 += (r01 < p);
   12420:	4649      	mov	r1, r9
   12422:	e7ba      	b.n	1239a <uECC_vli_mult+0x18>
   12424:	9c02      	ldr	r4, [sp, #8]
   12426:	fa4f fb8c 	sxtb.w	fp, ip
   1242a:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   1242e:	9404      	str	r4, [sp, #16]
   12430:	9c03      	ldr	r4, [sp, #12]
   12432:	eba0 0b0b 	sub.w	fp, r0, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   12436:	460e      	mov	r6, r1
   12438:	2100      	movs	r1, #0
   1243a:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
   1243e:	468e      	mov	lr, r1
   12440:	eb0c 040e 	add.w	r4, ip, lr
   12444:	b264      	sxtb	r4, r4
   12446:	42a3      	cmp	r3, r4
   12448:	dc09      	bgt.n	1245e <uECC_vli_mult+0xdc>
		result[k] = r0;
   1244a:	f84a 2020 	str.w	r2, [sl, r0, lsl #2]
   1244e:	f10c 0c01 	add.w	ip, ip, #1
   12452:	3001      	adds	r0, #1
   12454:	b240      	sxtb	r0, r0
   12456:	fa5f fc8c 	uxtb.w	ip, ip
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1245a:	4632      	mov	r2, r6
   1245c:	e7a9      	b.n	123b2 <uECC_vli_mult+0x30>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1245e:	f06f 0403 	mvn.w	r4, #3
   12462:	fb04 f40e 	mul.w	r4, r4, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   12466:	f85b 5004 	ldr.w	r5, [fp, r4]
   1246a:	9c04      	ldr	r4, [sp, #16]
   1246c:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
   12470:	fba5 4504 	umull	r4, r5, r5, r4
   12474:	46a0      	mov	r8, r4
   12476:	46a9      	mov	r9, r5
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   12478:	2400      	movs	r4, #0
   1247a:	4635      	mov	r5, r6
   1247c:	462f      	mov	r7, r5
   1247e:	4626      	mov	r6, r4
   12480:	ea46 0602 	orr.w	r6, r6, r2
   12484:	4622      	mov	r2, r4
   12486:	4644      	mov	r4, r8
   12488:	19a6      	adds	r6, r4, r6
   1248a:	464d      	mov	r5, r9
   1248c:	416f      	adcs	r7, r5
   1248e:	bf28      	it	cs
   12490:	2201      	movcs	r2, #1
	*r2 += (r01 < p);
   12492:	4411      	add	r1, r2
   12494:	f10e 0e01 	add.w	lr, lr, #1
	*r0 = (uECC_word_t)r01;
   12498:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   1249a:	463e      	mov	r6, r7
   1249c:	e7d0      	b.n	12440 <uECC_vli_mult+0xbe>

0001249e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1249e:	2300      	movs	r3, #0
{
   124a0:	b510      	push	{r4, lr}
		 vli[i] = 0;
   124a2:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   124a4:	b25a      	sxtb	r2, r3
   124a6:	4291      	cmp	r1, r2
   124a8:	dc00      	bgt.n	124ac <uECC_vli_clear+0xe>
}
   124aa:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   124ac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   124b0:	3301      	adds	r3, #1
   124b2:	e7f7      	b.n	124a4 <uECC_vli_clear+0x6>

000124b4 <uECC_vli_isZero>:
{
   124b4:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   124b6:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   124b8:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   124ba:	b25c      	sxtb	r4, r3
   124bc:	42a1      	cmp	r1, r4
   124be:	dc03      	bgt.n	124c8 <uECC_vli_isZero+0x14>
}
   124c0:	fab2 f082 	clz	r0, r2
   124c4:	0940      	lsrs	r0, r0, #5
   124c6:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   124c8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   124cc:	3301      	adds	r3, #1
   124ce:	4322      	orrs	r2, r4
   124d0:	e7f3      	b.n	124ba <uECC_vli_isZero+0x6>

000124d2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   124d2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   124d4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   124d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   124da:	f001 011f 	and.w	r1, r1, #31
   124de:	fa03 f101 	lsl.w	r1, r3, r1
}
   124e2:	4008      	ands	r0, r1
   124e4:	4770      	bx	lr

000124e6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   124e6:	3901      	subs	r1, #1
   124e8:	b249      	sxtb	r1, r1
   124ea:	1c4a      	adds	r2, r1, #1
   124ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   124f0:	2900      	cmp	r1, #0
   124f2:	b2cb      	uxtb	r3, r1
   124f4:	db02      	blt.n	124fc <uECC_vli_numBits+0x16>
   124f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   124fa:	b171      	cbz	r1, 1251a <uECC_vli_numBits+0x34>
	return (i + 1);
   124fc:	3301      	adds	r3, #1
   124fe:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   12500:	b18b      	cbz	r3, 12526 <uECC_vli_numBits+0x40>
	digit = vli[num_digits - 1];
   12502:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   12506:	3a01      	subs	r2, #1
   12508:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   1250c:	2000      	movs	r0, #0
   1250e:	b93a      	cbnz	r2, 12520 <uECC_vli_numBits+0x3a>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   12510:	3b01      	subs	r3, #1
   12512:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   12516:	b218      	sxth	r0, r3
   12518:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1251a:	3b01      	subs	r3, #1
   1251c:	b259      	sxtb	r1, r3
   1251e:	e7e7      	b.n	124f0 <uECC_vli_numBits+0xa>
		digit >>= 1;
   12520:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   12522:	3001      	adds	r0, #1
   12524:	e7f3      	b.n	1250e <uECC_vli_numBits+0x28>
		return 0;
   12526:	4618      	mov	r0, r3
}
   12528:	4770      	bx	lr

0001252a <uECC_vli_set>:
{
   1252a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1252c:	2300      	movs	r3, #0
   1252e:	b25c      	sxtb	r4, r3
   12530:	42a2      	cmp	r2, r4
   12532:	dc00      	bgt.n	12536 <uECC_vli_set+0xc>
}
   12534:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   12536:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1253a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1253e:	3301      	adds	r3, #1
   12540:	e7f5      	b.n	1252e <uECC_vli_set+0x4>

00012542 <uECC_vli_cmp_unsafe>:
{
   12542:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   12544:	3a01      	subs	r2, #1
   12546:	b252      	sxtb	r2, r2
   12548:	0093      	lsls	r3, r2, #2
   1254a:	4418      	add	r0, r3
   1254c:	4419      	add	r1, r3
   1254e:	2300      	movs	r3, #0
   12550:	2a00      	cmp	r2, #0
   12552:	da01      	bge.n	12558 <uECC_vli_cmp_unsafe+0x16>
	return 0;
   12554:	2000      	movs	r0, #0
}
   12556:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   12558:	58c5      	ldr	r5, [r0, r3]
   1255a:	58cc      	ldr	r4, [r1, r3]
   1255c:	42a5      	cmp	r5, r4
   1255e:	d805      	bhi.n	1256c <uECC_vli_cmp_unsafe+0x2a>
   12560:	f1a3 0304 	sub.w	r3, r3, #4
		} else if (left[i] < right[i]) {
   12564:	d304      	bcc.n	12570 <uECC_vli_cmp_unsafe+0x2e>
   12566:	3a01      	subs	r2, #1
   12568:	b252      	sxtb	r2, r2
   1256a:	e7f1      	b.n	12550 <uECC_vli_cmp_unsafe+0xe>
			return 1;
   1256c:	2001      	movs	r0, #1
   1256e:	e7f2      	b.n	12556 <uECC_vli_cmp_unsafe+0x14>
			return -1;
   12570:	f04f 30ff 	mov.w	r0, #4294967295
   12574:	e7ef      	b.n	12556 <uECC_vli_cmp_unsafe+0x14>

00012576 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   12576:	3a01      	subs	r2, #1
   12578:	b2d2      	uxtb	r2, r2
   1257a:	b253      	sxtb	r3, r2
   1257c:	009b      	lsls	r3, r3, #2
{
   1257e:	b5f0      	push	{r4, r5, r6, r7, lr}
   12580:	4419      	add	r1, r3
   12582:	18c6      	adds	r6, r0, r3
	for (i = num_words - 1; i >= 0; --i) {
   12584:	2300      	movs	r3, #0
	uECC_word_t diff = 0;
   12586:	4618      	mov	r0, r3
   12588:	f06f 0703 	mvn.w	r7, #3
	for (i = num_words - 1; i >= 0; --i) {
   1258c:	1ad4      	subs	r4, r2, r3
   1258e:	0624      	lsls	r4, r4, #24
   12590:	d503      	bpl.n	1259a <uECC_vli_equal+0x24>
}
   12592:	3000      	adds	r0, #0
   12594:	bf18      	it	ne
   12596:	2001      	movne	r0, #1
   12598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1259a:	fb07 f503 	mul.w	r5, r7, r3
   1259e:	3301      	adds	r3, #1
		diff |= (left[i] ^ right[i]);
   125a0:	5974      	ldr	r4, [r6, r5]
   125a2:	594d      	ldr	r5, [r1, r5]
   125a4:	406c      	eors	r4, r5
   125a6:	4320      	orrs	r0, r4
   125a8:	e7f0      	b.n	1258c <uECC_vli_equal+0x16>

000125aa <uECC_vli_sub>:
{
   125aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   125ac:	2400      	movs	r4, #0
{
   125ae:	4607      	mov	r7, r0
	uECC_word_t borrow = 0;
   125b0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   125b2:	b265      	sxtb	r5, r4
   125b4:	42ab      	cmp	r3, r5
   125b6:	dc00      	bgt.n	125ba <uECC_vli_sub+0x10>
}
   125b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   125ba:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   125be:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   125c2:	1b75      	subs	r5, r6, r5
   125c4:	1a2d      	subs	r5, r5, r0
		borrow = cond_set(val, borrow, (diff != left[i]));
   125c6:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   125c8:	bf34      	ite	cc
   125ca:	2601      	movcc	r6, #1
   125cc:	2600      	movcs	r6, #0
		result[i] = diff;
   125ce:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   125d2:	bf18      	it	ne
   125d4:	4630      	movne	r0, r6
   125d6:	3401      	adds	r4, #1
   125d8:	e7eb      	b.n	125b2 <uECC_vli_sub+0x8>

000125da <uECC_vli_modAdd>:
{
   125da:	b570      	push	{r4, r5, r6, lr}
   125dc:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   125e0:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   125e2:	4623      	mov	r3, r4
{
   125e4:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   125e6:	f7ff fe8b 	bl	12300 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   125ea:	b930      	cbnz	r0, 125fa <uECC_vli_modAdd+0x20>
   125ec:	4622      	mov	r2, r4
   125ee:	4629      	mov	r1, r5
   125f0:	4630      	mov	r0, r6
   125f2:	f7ff ffa6 	bl	12542 <uECC_vli_cmp_unsafe>
   125f6:	2801      	cmp	r0, #1
   125f8:	d007      	beq.n	1260a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   125fa:	4623      	mov	r3, r4
   125fc:	4632      	mov	r2, r6
   125fe:	4629      	mov	r1, r5
   12600:	4628      	mov	r0, r5
}
   12602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   12606:	f7ff bfd0 	b.w	125aa <uECC_vli_sub>
}
   1260a:	bd70      	pop	{r4, r5, r6, pc}

0001260c <uECC_vli_modSub>:
{
   1260c:	b570      	push	{r4, r5, r6, lr}
   1260e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   12612:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   12614:	4623      	mov	r3, r4
{
   12616:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   12618:	f7ff ffc7 	bl	125aa <uECC_vli_sub>
	if (l_borrow) {
   1261c:	b130      	cbz	r0, 1262c <uECC_vli_modSub+0x20>
		uECC_vli_add(result, result, mod, num_words);
   1261e:	4632      	mov	r2, r6
   12620:	4629      	mov	r1, r5
   12622:	4628      	mov	r0, r5
}
   12624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   12628:	f7ff be6a 	b.w	12300 <uECC_vli_add>
}
   1262c:	bd70      	pop	{r4, r5, r6, pc}

0001262e <uECC_vli_mmod>:
{
   1262e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12632:	b0a5      	sub	sp, #148	; 0x94
   12634:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   12636:	ab14      	add	r3, sp, #80	; 0x50
   12638:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1263c:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   1263e:	4629      	mov	r1, r5
   12640:	4610      	mov	r0, r2
{
   12642:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   12644:	f7ff ff4f 	bl	124e6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   12648:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1264c:	b204      	sxth	r4, r0
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1264e:	4263      	negs	r3, r4
   12650:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   12654:	f04f 0620 	mov.w	r6, #32
   12658:	fb94 f6f6 	sdiv	r6, r4, r6
   1265c:	b276      	sxtb	r6, r6
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1265e:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   12662:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   12664:	bf58      	it	pl
   12666:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   1266a:	4631      	mov	r1, r6
   1266c:	f7ff ff17 	bl	1249e <uECC_vli_clear>
	if (bit_shift > 0) {
   12670:	f1b8 0f00 	cmp.w	r8, #0
   12674:	b230      	sxth	r0, r6
   12676:	dd2d      	ble.n	126d4 <uECC_vli_mmod+0xa6>
   12678:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1267a:	2200      	movs	r2, #0
   1267c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   12680:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   12684:	4613      	mov	r3, r2
   12686:	429d      	cmp	r5, r3
   12688:	d819      	bhi.n	126be <uECC_vli_mmod+0x90>
		for (i = 0; i < num_words * 2; ++i) {
   1268a:	b22f      	sxth	r7, r5
   1268c:	007b      	lsls	r3, r7, #1
   1268e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   12690:	ab04      	add	r3, sp, #16
   12692:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   12696:	f105 38ff 	add.w	r8, r5, #4294967295
   1269a:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1269c:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1269e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   126a2:	2c00      	cmp	r4, #0
   126a4:	da53      	bge.n	1274e <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   126a6:	ab24      	add	r3, sp, #144	; 0x90
   126a8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   126ac:	462a      	mov	r2, r5
   126ae:	f856 1c88 	ldr.w	r1, [r6, #-136]
   126b2:	4648      	mov	r0, r9
   126b4:	f7ff ff39 	bl	1252a <uECC_vli_set>
}
   126b8:	b025      	add	sp, #148	; 0x94
   126ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   126be:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   126c2:	fa06 f108 	lsl.w	r1, r6, r8
   126c6:	430a      	orrs	r2, r1
   126c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   126cc:	fa26 f20c 	lsr.w	r2, r6, ip
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   126d0:	3301      	adds	r3, #1
   126d2:	e7d8      	b.n	12686 <uECC_vli_mmod+0x58>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   126d4:	ab04      	add	r3, sp, #16
   126d6:	462a      	mov	r2, r5
   126d8:	4639      	mov	r1, r7
   126da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   126de:	f7ff ff24 	bl	1252a <uECC_vli_set>
   126e2:	e7d2      	b.n	1268a <uECC_vli_mmod+0x5c>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   126e4:	fa0f fe82 	sxth.w	lr, r2
   126e8:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   126ec:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   126f0:	ab24      	add	r3, sp, #144	; 0x90
   126f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   126f6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   126fa:	ebab 0303 	sub.w	r3, fp, r3
   126fe:	1a1b      	subs	r3, r3, r0
			if (diff != v[index][i]) {
   12700:	459b      	cmp	fp, r3
   12702:	d002      	beq.n	1270a <uECC_vli_mmod+0xdc>
				borrow = (diff > v[index][i]);
   12704:	bf34      	ite	cc
   12706:	2001      	movcc	r0, #1
   12708:	2000      	movcs	r0, #0
			v[1 - index][i] = diff;
   1270a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1270e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   12712:	3101      	adds	r1, #1
		for (i = 0; i < num_words * 2; ++i) {
   12714:	9b01      	ldr	r3, [sp, #4]
   12716:	b24a      	sxtb	r2, r1
   12718:	429a      	cmp	r2, r3
   1271a:	dbe3      	blt.n	126e4 <uECC_vli_mmod+0xb6>
		index = !(index ^ borrow);
   1271c:	1a33      	subs	r3, r6, r0
   1271e:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   12720:	4629      	mov	r1, r5
   12722:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   12724:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   12726:	f7ff fe03 	bl	12330 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1272a:	ab24      	add	r3, sp, #144	; 0x90
   1272c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   12730:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   12732:	f853 2c80 	ldr.w	r2, [r3, #-128]
   12736:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1273a:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1273c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   12740:	3c01      	subs	r4, #1
   12742:	f848 3c80 	str.w	r3, [r8, #-128]
   12746:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   12748:	f7ff fdf2 	bl	12330 <uECC_vli_rshift1>
   1274c:	e7a9      	b.n	126a2 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1274e:	ab24      	add	r3, sp, #144	; 0x90
   12750:	2100      	movs	r1, #0
			v[1 - index][i] = diff;
   12752:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   12756:	4608      	mov	r0, r1
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   12758:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1275c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   12760:	e7d8      	b.n	12714 <uECC_vli_mmod+0xe6>

00012762 <uECC_vli_modMult_fast>:
{
   12762:	b530      	push	{r4, r5, lr}
   12764:	461c      	mov	r4, r3
   12766:	b091      	sub	sp, #68	; 0x44
   12768:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1276a:	f993 3000 	ldrsb.w	r3, [r3]
   1276e:	4668      	mov	r0, sp
   12770:	f7ff fe07 	bl	12382 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   12774:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   12778:	4669      	mov	r1, sp
   1277a:	4628      	mov	r0, r5
   1277c:	4798      	blx	r3
}
   1277e:	b011      	add	sp, #68	; 0x44
   12780:	bd30      	pop	{r4, r5, pc}

00012782 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   12782:	4613      	mov	r3, r2
   12784:	460a      	mov	r2, r1
   12786:	f7ff bfec 	b.w	12762 <uECC_vli_modMult_fast>

0001278a <double_jacobian_default>:
{
   1278a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1278e:	f993 6000 	ldrsb.w	r6, [r3]
{
   12792:	b092      	sub	sp, #72	; 0x48
   12794:	4604      	mov	r4, r0
   12796:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   12798:	4610      	mov	r0, r2
   1279a:	4631      	mov	r1, r6
{
   1279c:	4615      	mov	r5, r2
   1279e:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   127a0:	f7ff fe88 	bl	124b4 <uECC_vli_isZero>
   127a4:	2800      	cmp	r0, #0
   127a6:	f040 8091 	bne.w	128cc <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   127aa:	4642      	mov	r2, r8
   127ac:	4649      	mov	r1, r9
   127ae:	a802      	add	r0, sp, #8
   127b0:	f7ff ffe7 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   127b4:	4643      	mov	r3, r8
   127b6:	aa02      	add	r2, sp, #8
   127b8:	4621      	mov	r1, r4
   127ba:	a80a      	add	r0, sp, #40	; 0x28
   127bc:	f7ff ffd1 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   127c0:	a902      	add	r1, sp, #8
   127c2:	4608      	mov	r0, r1
   127c4:	4642      	mov	r2, r8
   127c6:	f7ff ffdc 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   127ca:	4643      	mov	r3, r8
   127cc:	462a      	mov	r2, r5
   127ce:	4649      	mov	r1, r9
   127d0:	4648      	mov	r0, r9
   127d2:	f7ff ffc6 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   127d6:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   127da:	4642      	mov	r2, r8
   127dc:	4629      	mov	r1, r5
   127de:	4628      	mov	r0, r5
   127e0:	f7ff ffcf 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   127e4:	463b      	mov	r3, r7
   127e6:	462a      	mov	r2, r5
   127e8:	4621      	mov	r1, r4
   127ea:	4620      	mov	r0, r4
   127ec:	9600      	str	r6, [sp, #0]
   127ee:	f7ff fef4 	bl	125da <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   127f2:	463b      	mov	r3, r7
   127f4:	462a      	mov	r2, r5
   127f6:	4629      	mov	r1, r5
   127f8:	4628      	mov	r0, r5
   127fa:	9600      	str	r6, [sp, #0]
   127fc:	f7ff feed 	bl	125da <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   12800:	463b      	mov	r3, r7
   12802:	462a      	mov	r2, r5
   12804:	4621      	mov	r1, r4
   12806:	4628      	mov	r0, r5
   12808:	9600      	str	r6, [sp, #0]
   1280a:	f7ff feff 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1280e:	4643      	mov	r3, r8
   12810:	462a      	mov	r2, r5
   12812:	4621      	mov	r1, r4
   12814:	4620      	mov	r0, r4
   12816:	f7ff ffa4 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1281a:	463b      	mov	r3, r7
   1281c:	4622      	mov	r2, r4
   1281e:	4621      	mov	r1, r4
   12820:	4628      	mov	r0, r5
   12822:	9600      	str	r6, [sp, #0]
   12824:	f7ff fed9 	bl	125da <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   12828:	463b      	mov	r3, r7
   1282a:	9600      	str	r6, [sp, #0]
   1282c:	462a      	mov	r2, r5
   1282e:	4621      	mov	r1, r4
   12830:	4620      	mov	r0, r4
   12832:	f7ff fed2 	bl	125da <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   12836:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   12838:	07db      	lsls	r3, r3, #31
   1283a:	d54a      	bpl.n	128d2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1283c:	4633      	mov	r3, r6
   1283e:	463a      	mov	r2, r7
   12840:	4621      	mov	r1, r4
   12842:	4620      	mov	r0, r4
   12844:	f7ff fd5c 	bl	12300 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   12848:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1284a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1284c:	4620      	mov	r0, r4
   1284e:	f7ff fd6f 	bl	12330 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   12852:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   12856:	3b01      	subs	r3, #1
   12858:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1285c:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   12860:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   12864:	4642      	mov	r2, r8
   12866:	4621      	mov	r1, r4
   12868:	4628      	mov	r0, r5
   1286a:	f7ff ff8a 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1286e:	463b      	mov	r3, r7
   12870:	aa0a      	add	r2, sp, #40	; 0x28
   12872:	4629      	mov	r1, r5
   12874:	4628      	mov	r0, r5
   12876:	9600      	str	r6, [sp, #0]
   12878:	f7ff fec8 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1287c:	463b      	mov	r3, r7
   1287e:	aa0a      	add	r2, sp, #40	; 0x28
   12880:	4629      	mov	r1, r5
   12882:	4628      	mov	r0, r5
   12884:	9600      	str	r6, [sp, #0]
   12886:	f7ff fec1 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1288a:	a90a      	add	r1, sp, #40	; 0x28
   1288c:	4608      	mov	r0, r1
   1288e:	463b      	mov	r3, r7
   12890:	462a      	mov	r2, r5
   12892:	9600      	str	r6, [sp, #0]
   12894:	f7ff feba 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   12898:	4643      	mov	r3, r8
   1289a:	aa0a      	add	r2, sp, #40	; 0x28
   1289c:	4621      	mov	r1, r4
   1289e:	4620      	mov	r0, r4
   128a0:	f7ff ff5f 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   128a4:	aa02      	add	r2, sp, #8
   128a6:	463b      	mov	r3, r7
   128a8:	4610      	mov	r0, r2
   128aa:	4621      	mov	r1, r4
   128ac:	9600      	str	r6, [sp, #0]
   128ae:	f7ff fead 	bl	1260c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   128b2:	4632      	mov	r2, r6
   128b4:	4629      	mov	r1, r5
   128b6:	4620      	mov	r0, r4
   128b8:	f7ff fe37 	bl	1252a <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   128bc:	4649      	mov	r1, r9
   128be:	4628      	mov	r0, r5
   128c0:	f7ff fe33 	bl	1252a <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   128c4:	a902      	add	r1, sp, #8
   128c6:	4648      	mov	r0, r9
   128c8:	f7ff fe2f 	bl	1252a <uECC_vli_set>
}
   128cc:	b012      	add	sp, #72	; 0x48
   128ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   128d2:	4631      	mov	r1, r6
   128d4:	4620      	mov	r0, r4
   128d6:	f7ff fd2b 	bl	12330 <uECC_vli_rshift1>
   128da:	e7c3      	b.n	12864 <double_jacobian_default+0xda>

000128dc <x_side_default>:
{
   128dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128e0:	b08b      	sub	sp, #44	; 0x2c
   128e2:	4604      	mov	r4, r0
   128e4:	4615      	mov	r5, r2
   128e6:	4689      	mov	r9, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   128e8:	ae0a      	add	r6, sp, #40	; 0x28
   128ea:	221c      	movs	r2, #28
   128ec:	2100      	movs	r1, #0
   128ee:	a803      	add	r0, sp, #12
   128f0:	f000 fde5 	bl	134be <memset>
   128f4:	2303      	movs	r3, #3
   128f6:	f846 3d20 	str.w	r3, [r6, #-32]!
	wordcount_t num_words = curve->num_words;
   128fa:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   128fe:	462a      	mov	r2, r5
   12900:	4649      	mov	r1, r9
   12902:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   12904:	1d2f      	adds	r7, r5, #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   12906:	f7ff ff3c 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1290a:	463b      	mov	r3, r7
   1290c:	4632      	mov	r2, r6
   1290e:	4621      	mov	r1, r4
   12910:	4620      	mov	r0, r4
   12912:	f8cd 8000 	str.w	r8, [sp]
   12916:	f7ff fe79 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1291a:	462b      	mov	r3, r5
   1291c:	464a      	mov	r2, r9
   1291e:	4621      	mov	r1, r4
   12920:	4620      	mov	r0, r4
   12922:	f7ff ff1e 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   12926:	f8cd 8000 	str.w	r8, [sp]
   1292a:	463b      	mov	r3, r7
   1292c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   12930:	4621      	mov	r1, r4
   12932:	4620      	mov	r0, r4
   12934:	f7ff fe51 	bl	125da <uECC_vli_modAdd>
}
   12938:	b00b      	add	sp, #44	; 0x2c
   1293a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001293e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1293e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12942:	b09b      	sub	sp, #108	; 0x6c
   12944:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   12946:	9c22      	ldr	r4, [sp, #136]	; 0x88
   12948:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1294c:	9500      	str	r5, [sp, #0]
{
   1294e:	4698      	mov	r8, r3
   12950:	4607      	mov	r7, r0
   12952:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   12954:	4623      	mov	r3, r4
   12956:	4602      	mov	r2, r0
   12958:	4631      	mov	r1, r6
   1295a:	a802      	add	r0, sp, #8
   1295c:	f7ff fe56 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   12960:	a902      	add	r1, sp, #8
   12962:	9a22      	ldr	r2, [sp, #136]	; 0x88
   12964:	4608      	mov	r0, r1
   12966:	f7ff ff0c 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1296a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1296c:	aa02      	add	r2, sp, #8
   1296e:	4639      	mov	r1, r7
   12970:	4638      	mov	r0, r7
   12972:	f7ff fef6 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   12976:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12978:	aa02      	add	r2, sp, #8
   1297a:	4631      	mov	r1, r6
   1297c:	4630      	mov	r0, r6
   1297e:	f7ff fef0 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   12982:	4623      	mov	r3, r4
   12984:	464a      	mov	r2, r9
   12986:	4641      	mov	r1, r8
   12988:	a802      	add	r0, sp, #8
   1298a:	9500      	str	r5, [sp, #0]
   1298c:	f7ff fe25 	bl	125da <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   12990:	4623      	mov	r3, r4
   12992:	464a      	mov	r2, r9
   12994:	4641      	mov	r1, r8
   12996:	4640      	mov	r0, r8
   12998:	9500      	str	r5, [sp, #0]
   1299a:	f7ff fe37 	bl	1260c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1299e:	4623      	mov	r3, r4
   129a0:	463a      	mov	r2, r7
   129a2:	4631      	mov	r1, r6
   129a4:	a80a      	add	r0, sp, #40	; 0x28
   129a6:	9500      	str	r5, [sp, #0]
   129a8:	f7ff fe30 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   129ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   129ae:	aa0a      	add	r2, sp, #40	; 0x28
   129b0:	4649      	mov	r1, r9
   129b2:	4648      	mov	r0, r9
   129b4:	f7ff fed5 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   129b8:	4623      	mov	r3, r4
   129ba:	4632      	mov	r2, r6
   129bc:	4639      	mov	r1, r7
   129be:	a80a      	add	r0, sp, #40	; 0x28
   129c0:	9500      	str	r5, [sp, #0]
   129c2:	f7ff fe0a 	bl	125da <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   129c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   129c8:	4641      	mov	r1, r8
   129ca:	4630      	mov	r0, r6
   129cc:	f7ff fed9 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   129d0:	4623      	mov	r3, r4
   129d2:	aa0a      	add	r2, sp, #40	; 0x28
   129d4:	4631      	mov	r1, r6
   129d6:	4630      	mov	r0, r6
   129d8:	9500      	str	r5, [sp, #0]
   129da:	f7ff fe17 	bl	1260c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   129de:	4623      	mov	r3, r4
   129e0:	4632      	mov	r2, r6
   129e2:	4639      	mov	r1, r7
   129e4:	a812      	add	r0, sp, #72	; 0x48
   129e6:	9500      	str	r5, [sp, #0]
   129e8:	f7ff fe10 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   129ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   129ee:	aa12      	add	r2, sp, #72	; 0x48
   129f0:	4641      	mov	r1, r8
   129f2:	4640      	mov	r0, r8
   129f4:	f7ff feb5 	bl	12762 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   129f8:	4623      	mov	r3, r4
   129fa:	464a      	mov	r2, r9
   129fc:	4641      	mov	r1, r8
   129fe:	4640      	mov	r0, r8
   12a00:	9500      	str	r5, [sp, #0]
   12a02:	f7ff fe03 	bl	1260c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   12a06:	9a22      	ldr	r2, [sp, #136]	; 0x88
   12a08:	a902      	add	r1, sp, #8
   12a0a:	a812      	add	r0, sp, #72	; 0x48
   12a0c:	f7ff feb9 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   12a10:	a912      	add	r1, sp, #72	; 0x48
   12a12:	4623      	mov	r3, r4
   12a14:	aa0a      	add	r2, sp, #40	; 0x28
   12a16:	4608      	mov	r0, r1
   12a18:	9500      	str	r5, [sp, #0]
   12a1a:	f7ff fdf7 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   12a1e:	4623      	mov	r3, r4
   12a20:	463a      	mov	r2, r7
   12a22:	a912      	add	r1, sp, #72	; 0x48
   12a24:	a80a      	add	r0, sp, #40	; 0x28
   12a26:	9500      	str	r5, [sp, #0]
   12a28:	f7ff fdf0 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   12a2c:	a90a      	add	r1, sp, #40	; 0x28
   12a2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12a30:	aa02      	add	r2, sp, #8
   12a32:	4608      	mov	r0, r1
   12a34:	f7ff fe95 	bl	12762 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   12a38:	4623      	mov	r3, r4
   12a3a:	464a      	mov	r2, r9
   12a3c:	a90a      	add	r1, sp, #40	; 0x28
   12a3e:	4648      	mov	r0, r9
   12a40:	9500      	str	r5, [sp, #0]
   12a42:	f7ff fde3 	bl	1260c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   12a46:	462a      	mov	r2, r5
   12a48:	a912      	add	r1, sp, #72	; 0x48
   12a4a:	4638      	mov	r0, r7
   12a4c:	f7ff fd6d 	bl	1252a <uECC_vli_set>
}
   12a50:	b01b      	add	sp, #108	; 0x6c
   12a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00012a56 <uECC_vli_modInv>:
{
   12a56:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a58:	460f      	mov	r7, r1
   12a5a:	b0a1      	sub	sp, #132	; 0x84
   12a5c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   12a5e:	4619      	mov	r1, r3
   12a60:	4638      	mov	r0, r7
{
   12a62:	4615      	mov	r5, r2
   12a64:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   12a66:	f7ff fd25 	bl	124b4 <uECC_vli_isZero>
   12a6a:	b120      	cbz	r0, 12a76 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   12a6c:	4630      	mov	r0, r6
   12a6e:	f7ff fd16 	bl	1249e <uECC_vli_clear>
}
   12a72:	b021      	add	sp, #132	; 0x84
   12a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   12a76:	4622      	mov	r2, r4
   12a78:	4639      	mov	r1, r7
   12a7a:	4668      	mov	r0, sp
   12a7c:	f7ff fd55 	bl	1252a <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   12a80:	4629      	mov	r1, r5
   12a82:	a808      	add	r0, sp, #32
   12a84:	f7ff fd51 	bl	1252a <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   12a88:	a810      	add	r0, sp, #64	; 0x40
   12a8a:	4621      	mov	r1, r4
   12a8c:	f7ff fd07 	bl	1249e <uECC_vli_clear>
	u[0] = 1;
   12a90:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   12a92:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   12a94:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   12a96:	f7ff fd02 	bl	1249e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   12a9a:	4622      	mov	r2, r4
   12a9c:	a908      	add	r1, sp, #32
   12a9e:	4668      	mov	r0, sp
   12aa0:	f7ff fd4f 	bl	12542 <uECC_vli_cmp_unsafe>
   12aa4:	b928      	cbnz	r0, 12ab2 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   12aa6:	4622      	mov	r2, r4
   12aa8:	a910      	add	r1, sp, #64	; 0x40
   12aaa:	4630      	mov	r0, r6
   12aac:	f7ff fd3d 	bl	1252a <uECC_vli_set>
   12ab0:	e7df      	b.n	12a72 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   12ab2:	9b00      	ldr	r3, [sp, #0]
   12ab4:	07da      	lsls	r2, r3, #31
   12ab6:	d409      	bmi.n	12acc <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   12ab8:	4621      	mov	r1, r4
   12aba:	4668      	mov	r0, sp
   12abc:	f7ff fc38 	bl	12330 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   12ac0:	4622      	mov	r2, r4
   12ac2:	4629      	mov	r1, r5
   12ac4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   12ac6:	f7ff fc40 	bl	1234a <vli_modInv_update>
   12aca:	e7e6      	b.n	12a9a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   12acc:	9b08      	ldr	r3, [sp, #32]
   12ace:	07db      	lsls	r3, r3, #31
   12ad0:	d407      	bmi.n	12ae2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   12ad2:	4621      	mov	r1, r4
   12ad4:	a808      	add	r0, sp, #32
   12ad6:	f7ff fc2b 	bl	12330 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   12ada:	4622      	mov	r2, r4
   12adc:	4629      	mov	r1, r5
   12ade:	a818      	add	r0, sp, #96	; 0x60
   12ae0:	e7f1      	b.n	12ac6 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   12ae2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   12ae4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   12ae6:	dd1c      	ble.n	12b22 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   12ae8:	aa08      	add	r2, sp, #32
   12aea:	4669      	mov	r1, sp
   12aec:	4668      	mov	r0, sp
   12aee:	f7ff fd5c 	bl	125aa <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   12af2:	4621      	mov	r1, r4
   12af4:	4668      	mov	r0, sp
   12af6:	f7ff fc1b 	bl	12330 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   12afa:	4622      	mov	r2, r4
   12afc:	a918      	add	r1, sp, #96	; 0x60
   12afe:	a810      	add	r0, sp, #64	; 0x40
   12b00:	f7ff fd1f 	bl	12542 <uECC_vli_cmp_unsafe>
   12b04:	2800      	cmp	r0, #0
   12b06:	da05      	bge.n	12b14 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   12b08:	a910      	add	r1, sp, #64	; 0x40
   12b0a:	4623      	mov	r3, r4
   12b0c:	462a      	mov	r2, r5
   12b0e:	4608      	mov	r0, r1
   12b10:	f7ff fbf6 	bl	12300 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   12b14:	a910      	add	r1, sp, #64	; 0x40
   12b16:	4623      	mov	r3, r4
   12b18:	aa18      	add	r2, sp, #96	; 0x60
   12b1a:	4608      	mov	r0, r1
   12b1c:	f7ff fd45 	bl	125aa <uECC_vli_sub>
   12b20:	e7ce      	b.n	12ac0 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   12b22:	a908      	add	r1, sp, #32
   12b24:	466a      	mov	r2, sp
   12b26:	4608      	mov	r0, r1
   12b28:	f7ff fd3f 	bl	125aa <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   12b2c:	4621      	mov	r1, r4
   12b2e:	a808      	add	r0, sp, #32
   12b30:	f7ff fbfe 	bl	12330 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   12b34:	4622      	mov	r2, r4
   12b36:	a910      	add	r1, sp, #64	; 0x40
   12b38:	a818      	add	r0, sp, #96	; 0x60
   12b3a:	f7ff fd02 	bl	12542 <uECC_vli_cmp_unsafe>
   12b3e:	2800      	cmp	r0, #0
   12b40:	da05      	bge.n	12b4e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   12b42:	a918      	add	r1, sp, #96	; 0x60
   12b44:	4623      	mov	r3, r4
   12b46:	462a      	mov	r2, r5
   12b48:	4608      	mov	r0, r1
   12b4a:	f7ff fbd9 	bl	12300 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   12b4e:	a918      	add	r1, sp, #96	; 0x60
   12b50:	4623      	mov	r3, r4
   12b52:	aa10      	add	r2, sp, #64	; 0x40
   12b54:	4608      	mov	r0, r1
   12b56:	f7ff fd28 	bl	125aa <uECC_vli_sub>
   12b5a:	e7be      	b.n	12ada <uECC_vli_modInv+0x84>

00012b5c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   12b5c:	7809      	ldrb	r1, [r1, #0]
   12b5e:	0049      	lsls	r1, r1, #1
   12b60:	b249      	sxtb	r1, r1
   12b62:	f7ff bca7 	b.w	124b4 <uECC_vli_isZero>

00012b66 <apply_z>:
{
   12b66:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b68:	4615      	mov	r5, r2
   12b6a:	b089      	sub	sp, #36	; 0x24
   12b6c:	461c      	mov	r4, r3
   12b6e:	4607      	mov	r7, r0
   12b70:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   12b72:	461a      	mov	r2, r3
   12b74:	4629      	mov	r1, r5
   12b76:	4668      	mov	r0, sp
   12b78:	f7ff fe03 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   12b7c:	4623      	mov	r3, r4
   12b7e:	466a      	mov	r2, sp
   12b80:	4639      	mov	r1, r7
   12b82:	4638      	mov	r0, r7
   12b84:	f7ff fded 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   12b88:	4623      	mov	r3, r4
   12b8a:	462a      	mov	r2, r5
   12b8c:	4669      	mov	r1, sp
   12b8e:	4668      	mov	r0, sp
   12b90:	f7ff fde7 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   12b94:	4623      	mov	r3, r4
   12b96:	466a      	mov	r2, sp
   12b98:	4631      	mov	r1, r6
   12b9a:	4630      	mov	r0, r6
   12b9c:	f7ff fde1 	bl	12762 <uECC_vli_modMult_fast>
}
   12ba0:	b009      	add	sp, #36	; 0x24
   12ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012ba4 <XYcZ_add>:
{
   12ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ba8:	b08b      	sub	sp, #44	; 0x2c
   12baa:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   12bac:	9d12      	ldr	r5, [sp, #72]	; 0x48
   12bae:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   12bb2:	9600      	str	r6, [sp, #0]
{
   12bb4:	461f      	mov	r7, r3
   12bb6:	4680      	mov	r8, r0
   12bb8:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   12bba:	462b      	mov	r3, r5
   12bbc:	4602      	mov	r2, r0
   12bbe:	4621      	mov	r1, r4
   12bc0:	a802      	add	r0, sp, #8
   12bc2:	f7ff fd23 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   12bc6:	a902      	add	r1, sp, #8
   12bc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12bca:	4608      	mov	r0, r1
   12bcc:	f7ff fdd9 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   12bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12bd2:	aa02      	add	r2, sp, #8
   12bd4:	4641      	mov	r1, r8
   12bd6:	4640      	mov	r0, r8
   12bd8:	f7ff fdc3 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   12bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12bde:	aa02      	add	r2, sp, #8
   12be0:	4621      	mov	r1, r4
   12be2:	4620      	mov	r0, r4
   12be4:	f7ff fdbd 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   12be8:	462b      	mov	r3, r5
   12bea:	464a      	mov	r2, r9
   12bec:	4639      	mov	r1, r7
   12bee:	4638      	mov	r0, r7
   12bf0:	9600      	str	r6, [sp, #0]
   12bf2:	f7ff fd0b 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   12bf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12bf8:	4639      	mov	r1, r7
   12bfa:	a802      	add	r0, sp, #8
   12bfc:	f7ff fdc1 	bl	12782 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   12c00:	a902      	add	r1, sp, #8
   12c02:	462b      	mov	r3, r5
   12c04:	4642      	mov	r2, r8
   12c06:	4608      	mov	r0, r1
   12c08:	9600      	str	r6, [sp, #0]
   12c0a:	f7ff fcff 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   12c0e:	a902      	add	r1, sp, #8
   12c10:	462b      	mov	r3, r5
   12c12:	4622      	mov	r2, r4
   12c14:	4608      	mov	r0, r1
   12c16:	9600      	str	r6, [sp, #0]
   12c18:	f7ff fcf8 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   12c1c:	462b      	mov	r3, r5
   12c1e:	4642      	mov	r2, r8
   12c20:	4621      	mov	r1, r4
   12c22:	4620      	mov	r0, r4
   12c24:	9600      	str	r6, [sp, #0]
   12c26:	f7ff fcf1 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   12c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12c2c:	4622      	mov	r2, r4
   12c2e:	4649      	mov	r1, r9
   12c30:	4648      	mov	r0, r9
   12c32:	f7ff fd96 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   12c36:	462b      	mov	r3, r5
   12c38:	aa02      	add	r2, sp, #8
   12c3a:	4641      	mov	r1, r8
   12c3c:	4620      	mov	r0, r4
   12c3e:	9600      	str	r6, [sp, #0]
   12c40:	f7ff fce4 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   12c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12c46:	4622      	mov	r2, r4
   12c48:	4639      	mov	r1, r7
   12c4a:	4638      	mov	r0, r7
   12c4c:	f7ff fd89 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   12c50:	462b      	mov	r3, r5
   12c52:	464a      	mov	r2, r9
   12c54:	4639      	mov	r1, r7
   12c56:	4638      	mov	r0, r7
   12c58:	9600      	str	r6, [sp, #0]
   12c5a:	f7ff fcd7 	bl	1260c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   12c5e:	4632      	mov	r2, r6
   12c60:	a902      	add	r1, sp, #8
   12c62:	4620      	mov	r0, r4
   12c64:	f7ff fc61 	bl	1252a <uECC_vli_set>
}
   12c68:	b00b      	add	sp, #44	; 0x2c
   12c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00012c6e <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   12c6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c72:	b0b1      	sub	sp, #196	; 0xc4
   12c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12c78:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   12c7a:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   12c7c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   12c80:	a818      	add	r0, sp, #96	; 0x60
   12c82:	463a      	mov	r2, r7
{
   12c84:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   12c86:	f7ff fc50 	bl	1252a <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   12c8a:	00bb      	lsls	r3, r7, #2
   12c8c:	9307      	str	r3, [sp, #28]
   12c8e:	9b05      	ldr	r3, [sp, #20]
   12c90:	00ba      	lsls	r2, r7, #2
   12c92:	4413      	add	r3, r2
   12c94:	4619      	mov	r1, r3
   12c96:	463a      	mov	r2, r7
   12c98:	a828      	add	r0, sp, #160	; 0xa0
   12c9a:	9302      	str	r3, [sp, #8]
   12c9c:	f7ff fc45 	bl	1252a <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   12ca0:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   12ca4:	2e00      	cmp	r6, #0
   12ca6:	f000 8087 	beq.w	12db8 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   12caa:	462a      	mov	r2, r5
   12cac:	4631      	mov	r1, r6
   12cae:	a808      	add	r0, sp, #32
   12cb0:	f7ff fc3b 	bl	1252a <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   12cb4:	ae10      	add	r6, sp, #64	; 0x40
   12cb6:	462a      	mov	r2, r5
   12cb8:	a918      	add	r1, sp, #96	; 0x60
   12cba:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   12cbc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   12cc0:	f7ff fc33 	bl	1252a <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   12cc4:	a928      	add	r1, sp, #160	; 0xa0
   12cc6:	4648      	mov	r0, r9
   12cc8:	f7ff fc2f 	bl	1252a <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   12ccc:	4623      	mov	r3, r4
   12cce:	aa08      	add	r2, sp, #32
   12cd0:	a928      	add	r1, sp, #160	; 0xa0
   12cd2:	a818      	add	r0, sp, #96	; 0x60
   12cd4:	f7ff ff47 	bl	12b66 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   12cd8:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   12cdc:	4623      	mov	r3, r4
   12cde:	aa08      	add	r2, sp, #32
   12ce0:	a928      	add	r1, sp, #160	; 0xa0
   12ce2:	a818      	add	r0, sp, #96	; 0x60
   12ce4:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   12ce6:	4623      	mov	r3, r4
   12ce8:	aa08      	add	r2, sp, #32
   12cea:	4649      	mov	r1, r9
   12cec:	4630      	mov	r0, r6
   12cee:	f7ff ff3a 	bl	12b66 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   12cf2:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   12cf6:	3d02      	subs	r5, #2
   12cf8:	b22d      	sxth	r5, r5
   12cfa:	2d00      	cmp	r5, #0
   12cfc:	dc63      	bgt.n	12dc6 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   12cfe:	9b06      	ldr	r3, [sp, #24]
   12d00:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   12d02:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   12d04:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   12d08:	ab10      	add	r3, sp, #64	; 0x40
   12d0a:	0176      	lsls	r6, r6, #5
   12d0c:	43ed      	mvns	r5, r5
   12d0e:	eb03 0806 	add.w	r8, r3, r6
   12d12:	f005 0501 	and.w	r5, r5, #1
   12d16:	ab20      	add	r3, sp, #128	; 0x80
   12d18:	441e      	add	r6, r3
   12d1a:	016d      	lsls	r5, r5, #5
   12d1c:	ab10      	add	r3, sp, #64	; 0x40
   12d1e:	eb03 0905 	add.w	r9, r3, r5
   12d22:	ab20      	add	r3, sp, #128	; 0x80
   12d24:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   12d26:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   12d2a:	462b      	mov	r3, r5
   12d2c:	464a      	mov	r2, r9
   12d2e:	4631      	mov	r1, r6
   12d30:	4640      	mov	r0, r8
   12d32:	f7ff fe04 	bl	1293e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   12d36:	4653      	mov	r3, sl
   12d38:	aa10      	add	r2, sp, #64	; 0x40
   12d3a:	a918      	add	r1, sp, #96	; 0x60
   12d3c:	a808      	add	r0, sp, #32
   12d3e:	9700      	str	r7, [sp, #0]
   12d40:	f7ff fc64 	bl	1260c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   12d44:	a908      	add	r1, sp, #32
   12d46:	4623      	mov	r3, r4
   12d48:	4632      	mov	r2, r6
   12d4a:	4608      	mov	r0, r1
   12d4c:	f7ff fd09 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   12d50:	a908      	add	r1, sp, #32
   12d52:	4623      	mov	r3, r4
   12d54:	9a05      	ldr	r2, [sp, #20]
   12d56:	4608      	mov	r0, r1
   12d58:	f7ff fd03 	bl	12762 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   12d5c:	a908      	add	r1, sp, #32
   12d5e:	463b      	mov	r3, r7
   12d60:	4652      	mov	r2, sl
   12d62:	4608      	mov	r0, r1
   12d64:	f7ff fe77 	bl	12a56 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   12d68:	a908      	add	r1, sp, #32
   12d6a:	4623      	mov	r3, r4
   12d6c:	9a02      	ldr	r2, [sp, #8]
   12d6e:	4608      	mov	r0, r1
   12d70:	f7ff fcf7 	bl	12762 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   12d74:	a908      	add	r1, sp, #32
   12d76:	4623      	mov	r3, r4
   12d78:	4642      	mov	r2, r8
   12d7a:	4608      	mov	r0, r1
   12d7c:	f7ff fcf1 	bl	12762 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   12d80:	9400      	str	r4, [sp, #0]
   12d82:	4633      	mov	r3, r6
   12d84:	4642      	mov	r2, r8
   12d86:	4629      	mov	r1, r5
   12d88:	4648      	mov	r0, r9
   12d8a:	f7ff ff0b 	bl	12ba4 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   12d8e:	4623      	mov	r3, r4
   12d90:	aa08      	add	r2, sp, #32
   12d92:	a920      	add	r1, sp, #128	; 0x80
   12d94:	a810      	add	r0, sp, #64	; 0x40
   12d96:	f7ff fee6 	bl	12b66 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   12d9a:	463a      	mov	r2, r7
   12d9c:	a910      	add	r1, sp, #64	; 0x40
   12d9e:	9804      	ldr	r0, [sp, #16]
   12da0:	f7ff fbc3 	bl	1252a <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   12da4:	9b04      	ldr	r3, [sp, #16]
   12da6:	9c07      	ldr	r4, [sp, #28]
   12da8:	4423      	add	r3, r4
   12daa:	a920      	add	r1, sp, #128	; 0x80
   12dac:	4618      	mov	r0, r3
   12dae:	f7ff fbbc 	bl	1252a <uECC_vli_set>
}
   12db2:	b031      	add	sp, #196	; 0xc4
   12db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   12db8:	4629      	mov	r1, r5
   12dba:	a808      	add	r0, sp, #32
   12dbc:	f7ff fb6f 	bl	1249e <uECC_vli_clear>
		z[0] = 1;
   12dc0:	2301      	movs	r3, #1
   12dc2:	9308      	str	r3, [sp, #32]
   12dc4:	e776      	b.n	12cb4 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   12dc6:	4629      	mov	r1, r5
   12dc8:	9806      	ldr	r0, [sp, #24]
   12dca:	f7ff fb82 	bl	124d2 <uECC_vli_testBit>
   12dce:	fab0 f080 	clz	r0, r0
   12dd2:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   12dd4:	f1c0 0801 	rsb	r8, r0, #1
   12dd8:	ea4f 1848 	mov.w	r8, r8, lsl #5
   12ddc:	0140      	lsls	r0, r0, #5
   12dde:	eb06 0b08 	add.w	fp, r6, r8
   12de2:	eb06 0a00 	add.w	sl, r6, r0
   12de6:	44c8      	add	r8, r9
   12de8:	eb09 0300 	add.w	r3, r9, r0
   12dec:	4652      	mov	r2, sl
   12dee:	4641      	mov	r1, r8
   12df0:	4658      	mov	r0, fp
   12df2:	9400      	str	r4, [sp, #0]
   12df4:	9303      	str	r3, [sp, #12]
   12df6:	f7ff fda2 	bl	1293e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   12dfa:	9400      	str	r4, [sp, #0]
   12dfc:	4643      	mov	r3, r8
   12dfe:	465a      	mov	r2, fp
   12e00:	9903      	ldr	r1, [sp, #12]
   12e02:	4650      	mov	r0, sl
   12e04:	f7ff fece 	bl	12ba4 <XYcZ_add>
   12e08:	3d01      	subs	r5, #1
   12e0a:	e775      	b.n	12cf8 <EccPoint_mult+0x8a>

00012e0c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   12e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   12e10:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
{
   12e14:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   12e16:	f103 0624 	add.w	r6, r3, #36	; 0x24
{
   12e1a:	4690      	mov	r8, r2
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   12e1c:	f105 041f 	add.w	r4, r5, #31
   12e20:	2220      	movs	r2, #32
   12e22:	fb94 f4f2 	sdiv	r4, r4, r2
   12e26:	b264      	sxtb	r4, r4
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   12e28:	4601      	mov	r1, r0
   12e2a:	4623      	mov	r3, r4
   12e2c:	4632      	mov	r2, r6
   12e2e:	4638      	mov	r0, r7
   12e30:	f7ff fa66 	bl	12300 <uECC_vli_add>
   12e34:	b990      	cbnz	r0, 12e5c <regularize_k+0x50>
   12e36:	ebb5 1f44 	cmp.w	r5, r4, lsl #5
   12e3a:	da11      	bge.n	12e60 <regularize_k+0x54>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   12e3c:	4629      	mov	r1, r5
   12e3e:	4638      	mov	r0, r7
   12e40:	f7ff fb47 	bl	124d2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   12e44:	1c05      	adds	r5, r0, #0
   12e46:	bf18      	it	ne
   12e48:	2501      	movne	r5, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   12e4a:	4623      	mov	r3, r4
   12e4c:	4632      	mov	r2, r6
   12e4e:	4639      	mov	r1, r7
   12e50:	4640      	mov	r0, r8
   12e52:	f7ff fa55 	bl	12300 <uECC_vli_add>

	return carry;
}
   12e56:	4628      	mov	r0, r5
   12e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   12e5c:	2501      	movs	r5, #1
   12e5e:	e7f4      	b.n	12e4a <regularize_k+0x3e>
   12e60:	4605      	mov	r5, r0
   12e62:	e7f2      	b.n	12e4a <regularize_k+0x3e>

00012e64 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   12e64:	b530      	push	{r4, r5, lr}
   12e66:	4614      	mov	r4, r2
   12e68:	b095      	sub	sp, #84	; 0x54
   12e6a:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   12e6c:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   12e6e:	4623      	mov	r3, r4
{
   12e70:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   12e72:	a904      	add	r1, sp, #16
   12e74:	9102      	str	r1, [sp, #8]
   12e76:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   12e78:	f7ff ffc8 	bl	12e0c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   12e7c:	fab0 f080 	clz	r0, r0
   12e80:	ab14      	add	r3, sp, #80	; 0x50
   12e82:	0940      	lsrs	r0, r0, #5
   12e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12e88:	8863      	ldrh	r3, [r4, #2]
   12e8a:	9401      	str	r4, [sp, #4]
   12e8c:	3301      	adds	r3, #1
   12e8e:	b21b      	sxth	r3, r3
   12e90:	9300      	str	r3, [sp, #0]
   12e92:	f850 2c48 	ldr.w	r2, [r0, #-72]
   12e96:	2300      	movs	r3, #0
   12e98:	f104 0144 	add.w	r1, r4, #68	; 0x44
   12e9c:	4628      	mov	r0, r5
   12e9e:	f7ff fee6 	bl	12c6e <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   12ea2:	4621      	mov	r1, r4
   12ea4:	4628      	mov	r0, r5
   12ea6:	f7ff fe59 	bl	12b5c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   12eaa:	fab0 f080 	clz	r0, r0
   12eae:	0940      	lsrs	r0, r0, #5
   12eb0:	b015      	add	sp, #84	; 0x54
   12eb2:	bd30      	pop	{r4, r5, pc}

00012eb4 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   12eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   12eb6:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   12eb8:	1e4f      	subs	r7, r1, #1
   12eba:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   12ebc:	428c      	cmp	r4, r1
   12ebe:	f105 0501 	add.w	r5, r5, #1
   12ec2:	db00      	blt.n	12ec6 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   12ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   12ec6:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   12ec8:	f023 0603 	bic.w	r6, r3, #3
   12ecc:	f003 0303 	and.w	r3, r3, #3
   12ed0:	5996      	ldr	r6, [r2, r6]
   12ed2:	00db      	lsls	r3, r3, #3
   12ed4:	fa26 f303 	lsr.w	r3, r6, r3
   12ed8:	5503      	strb	r3, [r0, r4]
   12eda:	e7ee      	b.n	12eba <uECC_vli_nativeToBytes+0x6>

00012edc <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   12edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ede:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   12ee0:	2304      	movs	r3, #4
{
   12ee2:	460e      	mov	r6, r1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   12ee4:	1cd1      	adds	r1, r2, #3
   12ee6:	fb91 f1f3 	sdiv	r1, r1, r3
   12eea:	b249      	sxtb	r1, r1
{
   12eec:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   12eee:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   12ef0:	f7ff fad5 	bl	1249e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   12ef4:	2100      	movs	r1, #0
   12ef6:	b24a      	sxtb	r2, r1
   12ef8:	42a2      	cmp	r2, r4
   12efa:	f101 0101 	add.w	r1, r1, #1
   12efe:	db00      	blt.n	12f02 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   12f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   12f02:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   12f04:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   12f08:	5cb2      	ldrb	r2, [r6, r2]
   12f0a:	f003 0303 	and.w	r3, r3, #3
   12f0e:	00db      	lsls	r3, r3, #3
   12f10:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   12f14:	582a      	ldr	r2, [r5, r0]
   12f16:	431a      	orrs	r2, r3
   12f18:	502a      	str	r2, [r5, r0]
   12f1a:	e7ec      	b.n	12ef6 <uECC_vli_bytesToNative+0x1a>

00012f1c <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   12f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f20:	b090      	sub	sp, #64	; 0x40
   12f22:	4606      	mov	r6, r0
   12f24:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   12f26:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   12f2a:	f7ff fe17 	bl	12b5c <EccPoint_isZero>
   12f2e:	bb48      	cbnz	r0, 12f84 <uECC_valid_point+0x68>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   12f30:	f104 0804 	add.w	r8, r4, #4
   12f34:	462a      	mov	r2, r5
   12f36:	4631      	mov	r1, r6
   12f38:	4640      	mov	r0, r8
   12f3a:	f7ff fb02 	bl	12542 <uECC_vli_cmp_unsafe>
   12f3e:	2801      	cmp	r0, #1
   12f40:	d123      	bne.n	12f8a <uECC_valid_point+0x6e>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   12f42:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   12f46:	462a      	mov	r2, r5
   12f48:	4639      	mov	r1, r7
   12f4a:	4640      	mov	r0, r8
   12f4c:	f7ff faf9 	bl	12542 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   12f50:	2801      	cmp	r0, #1
   12f52:	d11a      	bne.n	12f8a <uECC_valid_point+0x6e>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   12f54:	4622      	mov	r2, r4
   12f56:	4639      	mov	r1, r7
   12f58:	4668      	mov	r0, sp
   12f5a:	f7ff fc12 	bl	12782 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   12f5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   12f62:	4622      	mov	r2, r4
   12f64:	4631      	mov	r1, r6
   12f66:	a808      	add	r0, sp, #32
   12f68:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   12f6a:	462a      	mov	r2, r5
   12f6c:	a908      	add	r1, sp, #32
   12f6e:	4668      	mov	r0, sp
   12f70:	f7ff fb01 	bl	12576 <uECC_vli_equal>
   12f74:	2800      	cmp	r0, #0
		return -3;

	return 0;
   12f76:	bf14      	ite	ne
   12f78:	f06f 0002 	mvnne.w	r0, #2
   12f7c:	2000      	moveq	r0, #0
}
   12f7e:	b010      	add	sp, #64	; 0x40
   12f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   12f84:	f04f 30ff 	mov.w	r0, #4294967295
   12f88:	e7f9      	b.n	12f7e <uECC_valid_point+0x62>
		return -2;
   12f8a:	f06f 0001 	mvn.w	r0, #1
   12f8e:	e7f6      	b.n	12f7e <uECC_valid_point+0x62>

00012f90 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   12f90:	b570      	push	{r4, r5, r6, lr}
   12f92:	460c      	mov	r4, r1
   12f94:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   12f96:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   12f98:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   12f9c:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   12f9e:	4601      	mov	r1, r0
   12fa0:	4668      	mov	r0, sp
   12fa2:	f7ff ff9b 	bl	12edc <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   12fa6:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   12faa:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   12fae:	18b1      	adds	r1, r6, r2
   12fb0:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   12fb4:	f7ff ff92 	bl	12edc <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   12fb8:	2210      	movs	r2, #16
   12fba:	4629      	mov	r1, r5
   12fbc:	4668      	mov	r0, sp
   12fbe:	f7ff fac0 	bl	12542 <uECC_vli_cmp_unsafe>
   12fc2:	b128      	cbz	r0, 12fd0 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   12fc4:	4621      	mov	r1, r4
   12fc6:	4668      	mov	r0, sp
   12fc8:	f7ff ffa8 	bl	12f1c <uECC_valid_point>
}
   12fcc:	b010      	add	sp, #64	; 0x40
   12fce:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   12fd0:	f06f 0003 	mvn.w	r0, #3
   12fd4:	e7fa      	b.n	12fcc <uECC_valid_public_key+0x3c>

00012fd6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12fd6:	78cb      	ldrb	r3, [r1, #3]
   12fd8:	7802      	ldrb	r2, [r0, #0]
   12fda:	4053      	eors	r3, r2
   12fdc:	7003      	strb	r3, [r0, #0]
   12fde:	884b      	ldrh	r3, [r1, #2]
   12fe0:	7842      	ldrb	r2, [r0, #1]
   12fe2:	4053      	eors	r3, r2
   12fe4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12fe6:	680a      	ldr	r2, [r1, #0]
   12fe8:	7883      	ldrb	r3, [r0, #2]
   12fea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12fee:	7083      	strb	r3, [r0, #2]
   12ff0:	680a      	ldr	r2, [r1, #0]
   12ff2:	78c3      	ldrb	r3, [r0, #3]
   12ff4:	4053      	eors	r3, r2
   12ff6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12ff8:	79cb      	ldrb	r3, [r1, #7]
   12ffa:	7902      	ldrb	r2, [r0, #4]
   12ffc:	4053      	eors	r3, r2
   12ffe:	7103      	strb	r3, [r0, #4]
   13000:	88cb      	ldrh	r3, [r1, #6]
   13002:	7942      	ldrb	r2, [r0, #5]
   13004:	4053      	eors	r3, r2
   13006:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   13008:	684a      	ldr	r2, [r1, #4]
   1300a:	7983      	ldrb	r3, [r0, #6]
   1300c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   13010:	7183      	strb	r3, [r0, #6]
   13012:	684a      	ldr	r2, [r1, #4]
   13014:	79c3      	ldrb	r3, [r0, #7]
   13016:	4053      	eors	r3, r2
   13018:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1301a:	7acb      	ldrb	r3, [r1, #11]
   1301c:	7a02      	ldrb	r2, [r0, #8]
   1301e:	4053      	eors	r3, r2
   13020:	7203      	strb	r3, [r0, #8]
   13022:	7a42      	ldrb	r2, [r0, #9]
   13024:	894b      	ldrh	r3, [r1, #10]
   13026:	4053      	eors	r3, r2
   13028:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1302a:	688a      	ldr	r2, [r1, #8]
   1302c:	7a83      	ldrb	r3, [r0, #10]
   1302e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   13032:	7283      	strb	r3, [r0, #10]
   13034:	688a      	ldr	r2, [r1, #8]
   13036:	7ac3      	ldrb	r3, [r0, #11]
   13038:	4053      	eors	r3, r2
   1303a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1303c:	7bcb      	ldrb	r3, [r1, #15]
   1303e:	7b02      	ldrb	r2, [r0, #12]
   13040:	4053      	eors	r3, r2
   13042:	7303      	strb	r3, [r0, #12]
   13044:	89cb      	ldrh	r3, [r1, #14]
   13046:	7b42      	ldrb	r2, [r0, #13]
   13048:	4053      	eors	r3, r2
   1304a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1304c:	68ca      	ldr	r2, [r1, #12]
   1304e:	7b83      	ldrb	r3, [r0, #14]
   13050:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   13054:	7383      	strb	r3, [r0, #14]
   13056:	68ca      	ldr	r2, [r1, #12]
   13058:	7bc3      	ldrb	r3, [r0, #15]
   1305a:	4053      	eors	r3, r2
   1305c:	73c3      	strb	r3, [r0, #15]
}
   1305e:	4770      	bx	lr

00013060 <shift_rows>:
{
   13060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   13062:	7802      	ldrb	r2, [r0, #0]
   13064:	f88d 2000 	strb.w	r2, [sp]
   13068:	7942      	ldrb	r2, [r0, #5]
   1306a:	f88d 2001 	strb.w	r2, [sp, #1]
   1306e:	7a82      	ldrb	r2, [r0, #10]
   13070:	f88d 2002 	strb.w	r2, [sp, #2]
   13074:	7bc2      	ldrb	r2, [r0, #15]
   13076:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1307a:	7902      	ldrb	r2, [r0, #4]
   1307c:	f88d 2004 	strb.w	r2, [sp, #4]
   13080:	7a42      	ldrb	r2, [r0, #9]
   13082:	f88d 2005 	strb.w	r2, [sp, #5]
   13086:	7b82      	ldrb	r2, [r0, #14]
   13088:	f88d 2006 	strb.w	r2, [sp, #6]
   1308c:	78c2      	ldrb	r2, [r0, #3]
   1308e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   13092:	7a02      	ldrb	r2, [r0, #8]
   13094:	f88d 2008 	strb.w	r2, [sp, #8]
   13098:	7b42      	ldrb	r2, [r0, #13]
   1309a:	f88d 2009 	strb.w	r2, [sp, #9]
   1309e:	7882      	ldrb	r2, [r0, #2]
   130a0:	f88d 200a 	strb.w	r2, [sp, #10]
   130a4:	79c2      	ldrb	r2, [r0, #7]
   130a6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   130aa:	7b02      	ldrb	r2, [r0, #12]
   130ac:	f88d 200c 	strb.w	r2, [sp, #12]
   130b0:	7842      	ldrb	r2, [r0, #1]
   130b2:	f88d 200d 	strb.w	r2, [sp, #13]
   130b6:	7ac3      	ldrb	r3, [r0, #11]
   130b8:	7982      	ldrb	r2, [r0, #6]
   130ba:	f88d 200e 	strb.w	r2, [sp, #14]
   130be:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   130c2:	2310      	movs	r3, #16
   130c4:	466a      	mov	r2, sp
   130c6:	4619      	mov	r1, r3
   130c8:	f7ff f859 	bl	1217e <_copy>
}
   130cc:	b005      	add	sp, #20
   130ce:	f85d fb04 	ldr.w	pc, [sp], #4

000130d2 <mult_row_column>:
{
   130d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130d4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   130d6:	7808      	ldrb	r0, [r1, #0]
{
   130d8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   130da:	f7ff f85f 	bl	1219c <_double_byte>
   130de:	4605      	mov	r5, r0
   130e0:	7860      	ldrb	r0, [r4, #1]
   130e2:	f7ff f85b 	bl	1219c <_double_byte>
   130e6:	78a2      	ldrb	r2, [r4, #2]
   130e8:	7863      	ldrb	r3, [r4, #1]
   130ea:	4053      	eors	r3, r2
   130ec:	78e2      	ldrb	r2, [r4, #3]
   130ee:	4053      	eors	r3, r2
   130f0:	405d      	eors	r5, r3
   130f2:	4045      	eors	r5, r0
   130f4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   130f6:	7860      	ldrb	r0, [r4, #1]
   130f8:	7827      	ldrb	r7, [r4, #0]
   130fa:	f7ff f84f 	bl	1219c <_double_byte>
   130fe:	4605      	mov	r5, r0
   13100:	78a0      	ldrb	r0, [r4, #2]
   13102:	f7ff f84b 	bl	1219c <_double_byte>
   13106:	78a3      	ldrb	r3, [r4, #2]
   13108:	405f      	eors	r7, r3
   1310a:	78e3      	ldrb	r3, [r4, #3]
   1310c:	405f      	eors	r7, r3
   1310e:	407d      	eors	r5, r7
   13110:	4045      	eors	r5, r0
   13112:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   13114:	78a0      	ldrb	r0, [r4, #2]
   13116:	7865      	ldrb	r5, [r4, #1]
   13118:	7827      	ldrb	r7, [r4, #0]
   1311a:	f7ff f83f 	bl	1219c <_double_byte>
   1311e:	406f      	eors	r7, r5
   13120:	4605      	mov	r5, r0
   13122:	78e0      	ldrb	r0, [r4, #3]
   13124:	f7ff f83a 	bl	1219c <_double_byte>
   13128:	78e3      	ldrb	r3, [r4, #3]
   1312a:	405f      	eors	r7, r3
   1312c:	407d      	eors	r5, r7
   1312e:	4045      	eors	r5, r0
   13130:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13132:	7820      	ldrb	r0, [r4, #0]
   13134:	f7ff f832 	bl	1219c <_double_byte>
   13138:	7863      	ldrb	r3, [r4, #1]
   1313a:	7825      	ldrb	r5, [r4, #0]
   1313c:	405d      	eors	r5, r3
   1313e:	78a3      	ldrb	r3, [r4, #2]
   13140:	405d      	eors	r5, r3
   13142:	4045      	eors	r5, r0
   13144:	78e0      	ldrb	r0, [r4, #3]
   13146:	f7ff f829 	bl	1219c <_double_byte>
   1314a:	b2ed      	uxtb	r5, r5
   1314c:	4068      	eors	r0, r5
   1314e:	70f0      	strb	r0, [r6, #3]
}
   13150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013152 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   13152:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   13154:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   13156:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   13158:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1315c:	2b00      	cmp	r3, #0
   1315e:	bfb4      	ite	lt
   13160:	2387      	movlt	r3, #135	; 0x87
   13162:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   13164:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   13168:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1316c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1316e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   13172:	d002      	beq.n	1317a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   13174:	7813      	ldrb	r3, [r2, #0]
   13176:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   13178:	e7f4      	b.n	13164 <gf_double+0x12>
	}
}
   1317a:	bd10      	pop	{r4, pc}

0001317c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1317c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1317e:	b120      	cbz	r0, 1318a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   13180:	2258      	movs	r2, #88	; 0x58
   13182:	2100      	movs	r1, #0
   13184:	f7ff f808 	bl	12198 <_set>
   13188:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1318a:	bd08      	pop	{r3, pc}

0001318c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1318c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1318e:	4604      	mov	r4, r0
   13190:	b188      	cbz	r0, 131b6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   13192:	2210      	movs	r2, #16
   13194:	2100      	movs	r1, #0
   13196:	f7fe ffff 	bl	12198 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1319a:	2210      	movs	r2, #16
   1319c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   131a0:	2100      	movs	r1, #0
   131a2:	f7fe fff9 	bl	12198 <_set>
	s->leftover_offset = 0;
   131a6:	2300      	movs	r3, #0
   131a8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   131aa:	2200      	movs	r2, #0
   131ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   131b0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   131b4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   131b6:	bd10      	pop	{r4, pc}

000131b8 <tc_cmac_setup>:
{
   131b8:	b570      	push	{r4, r5, r6, lr}
   131ba:	460d      	mov	r5, r1
   131bc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   131be:	4604      	mov	r4, r0
   131c0:	b310      	cbz	r0, 13208 <tc_cmac_setup+0x50>
   131c2:	b311      	cbz	r1, 1320a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   131c4:	2258      	movs	r2, #88	; 0x58
   131c6:	2100      	movs	r1, #0
   131c8:	f7fe ffe6 	bl	12198 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   131cc:	4629      	mov	r1, r5
	s->sched = sched;
   131ce:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   131d0:	4630      	mov	r0, r6
   131d2:	f7f1 f8f3 	bl	43bc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   131d6:	2210      	movs	r2, #16
   131d8:	2100      	movs	r1, #0
   131da:	4620      	mov	r0, r4
   131dc:	f7fe ffdc 	bl	12198 <_set>
	gf_double (s->K1, s->iv);
   131e0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   131e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   131e6:	4621      	mov	r1, r4
   131e8:	4620      	mov	r0, r4
   131ea:	f7f1 f93d 	bl	4468 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   131ee:	4621      	mov	r1, r4
   131f0:	4628      	mov	r0, r5
   131f2:	f7ff ffae 	bl	13152 <gf_double>
	gf_double (s->K2, s->K1);
   131f6:	4629      	mov	r1, r5
   131f8:	f104 0020 	add.w	r0, r4, #32
   131fc:	f7ff ffa9 	bl	13152 <gf_double>
	tc_cmac_init(s);
   13200:	4620      	mov	r0, r4
   13202:	f7ff ffc3 	bl	1318c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   13206:	2001      	movs	r0, #1
}
   13208:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1320a:	4608      	mov	r0, r1
   1320c:	e7fc      	b.n	13208 <tc_cmac_setup+0x50>

0001320e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1320e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13210:	460d      	mov	r5, r1
   13212:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   13214:	4604      	mov	r4, r0
   13216:	2800      	cmp	r0, #0
   13218:	d05b      	beq.n	132d2 <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1321a:	b90a      	cbnz	r2, 13220 <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1321c:	2001      	movs	r0, #1
}
   1321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
   13220:	2900      	cmp	r1, #0
   13222:	d056      	beq.n	132d2 <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
   13224:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   13228:	ea50 0301 	orrs.w	r3, r0, r1
   1322c:	d051      	beq.n	132d2 <tc_cmac_update+0xc4>
	s->countdown--;
   1322e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   13232:	6c60      	ldr	r0, [r4, #68]	; 0x44
	s->countdown--;
   13234:	f141 33ff 	adc.w	r3, r1, #4294967295
   13238:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1323c:	b340      	cbz	r0, 13290 <tc_cmac_update+0x82>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1323e:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
   13242:	42be      	cmp	r6, r7
   13244:	f100 0030 	add.w	r0, r0, #48	; 0x30
   13248:	4420      	add	r0, r4
   1324a:	d208      	bcs.n	1325e <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1324c:	4633      	mov	r3, r6
   1324e:	4631      	mov	r1, r6
   13250:	462a      	mov	r2, r5
   13252:	f7fe ff94 	bl	1217e <_copy>
			s->leftover_offset += data_length;
   13256:	6c63      	ldr	r3, [r4, #68]	; 0x44
   13258:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   1325a:	6466      	str	r6, [r4, #68]	; 0x44
   1325c:	e7de      	b.n	1321c <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
   1325e:	463b      	mov	r3, r7
   13260:	462a      	mov	r2, r5
   13262:	4639      	mov	r1, r7
   13264:	f7fe ff8b 	bl	1217e <_copy>
		s->leftover_offset = 0;
   13268:	2300      	movs	r3, #0
   1326a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1326c:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
   1326e:	443d      	add	r5, r7
   13270:	4623      	mov	r3, r4
   13272:	f104 0110 	add.w	r1, r4, #16
			s->iv[i] ^= s->leftover[i];
   13276:	781a      	ldrb	r2, [r3, #0]
   13278:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   1327c:	4042      	eors	r2, r0
   1327e:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   13282:	428b      	cmp	r3, r1
   13284:	d1f7      	bne.n	13276 <tc_cmac_update+0x68>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   13286:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13288:	4621      	mov	r1, r4
   1328a:	4620      	mov	r0, r4
   1328c:	f7f1 f8ec 	bl	4468 <tc_aes_encrypt>
   13290:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   13294:	2e10      	cmp	r6, #16
   13296:	d809      	bhi.n	132ac <tc_cmac_update+0x9e>
	if (data_length > 0) {
   13298:	2e00      	cmp	r6, #0
   1329a:	d0bf      	beq.n	1321c <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
   1329c:	4633      	mov	r3, r6
   1329e:	462a      	mov	r2, r5
   132a0:	4631      	mov	r1, r6
   132a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   132a6:	f7fe ff6a 	bl	1217e <_copy>
   132aa:	e7d6      	b.n	1325a <tc_cmac_update+0x4c>
   132ac:	1e63      	subs	r3, r4, #1
   132ae:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   132b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   132b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   132b8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   132ba:	ea82 0200 	eor.w	r2, r2, r0
   132be:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   132c0:	d1f6      	bne.n	132b0 <tc_cmac_update+0xa2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   132c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   132c4:	4621      	mov	r1, r4
   132c6:	4620      	mov	r0, r4
   132c8:	f7f1 f8ce 	bl	4468 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   132cc:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   132ce:	3e10      	subs	r6, #16
   132d0:	e7e0      	b.n	13294 <tc_cmac_update+0x86>
		return TC_CRYPTO_FAIL;
   132d2:	2000      	movs	r0, #0
   132d4:	e7a3      	b.n	1321e <tc_cmac_update+0x10>

000132d6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   132d6:	b570      	push	{r4, r5, r6, lr}
   132d8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   132da:	4605      	mov	r5, r0
   132dc:	b1e0      	cbz	r0, 13318 <tc_cmac_final+0x42>
   132de:	b361      	cbz	r1, 1333a <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   132e0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   132e2:	2a10      	cmp	r2, #16
   132e4:	f101 0610 	add.w	r6, r1, #16
   132e8:	d117      	bne.n	1331a <tc_cmac_final+0x44>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   132ea:	4631      	mov	r1, r6
   132ec:	4623      	mov	r3, r4
   132ee:	3901      	subs	r1, #1
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
   132f0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   132f4:	781a      	ldrb	r2, [r3, #0]
   132f6:	4042      	eors	r2, r0
   132f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   132fc:	4042      	eors	r2, r0
   132fe:	f803 2b01 	strb.w	r2, [r3], #1
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   13302:	429e      	cmp	r6, r3
   13304:	d1f4      	bne.n	132f0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   13306:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13308:	4621      	mov	r1, r4
   1330a:	4628      	mov	r0, r5
   1330c:	f7f1 f8ac 	bl	4468 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   13310:	4620      	mov	r0, r4
   13312:	f7ff ff33 	bl	1317c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   13316:	2001      	movs	r0, #1
}
   13318:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1331a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1331e:	2100      	movs	r1, #0
   13320:	f1c2 0210 	rsb	r2, r2, #16
   13324:	4420      	add	r0, r4
   13326:	f7fe ff37 	bl	12198 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1332a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1332c:	4423      	add	r3, r4
   1332e:	2280      	movs	r2, #128	; 0x80
   13330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   13334:	f104 0120 	add.w	r1, r4, #32
   13338:	e7d8      	b.n	132ec <tc_cmac_final+0x16>
		return TC_CRYPTO_FAIL;
   1333a:	4608      	mov	r0, r1
   1333c:	e7ec      	b.n	13318 <tc_cmac_final+0x42>

0001333e <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1333e:	2300      	movs	r3, #0
   13340:	5043      	str	r3, [r0, r1]
{
   13342:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13344:	5843      	ldr	r3, [r0, r1]
   13346:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13348:	9b01      	ldr	r3, [sp, #4]
}
   1334a:	b002      	add	sp, #8
   1334c:	4770      	bx	lr

0001334e <start_playback.isra.2>:
static uint32_t start_playback(nrfx_pwm_t const * const p_instance,
   1334e:	b538      	push	{r3, r4, r5, lr}
   13350:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   13352:	2302      	movs	r3, #2
   13354:	710b      	strb	r3, [r1, #4]
    if (p_cb->handler)
   13356:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
   13358:	714a      	strb	r2, [r1, #5]
static uint32_t start_playback(nrfx_pwm_t const * const p_instance,
   1335a:	4604      	mov	r4, r0
    if (p_cb->handler)
   1335c:	b17b      	cbz	r3, 1337e <start_playback.isra.2+0x30>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
   1335e:	f012 0f04 	tst.w	r2, #4
   13362:	bf14      	ite	ne
   13364:	2192      	movne	r1, #146	; 0x92
   13366:	2182      	moveq	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   13368:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1336a:	bf48      	it	mi
   1336c:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   13370:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   13372:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   13374:	bf48      	it	mi
   13376:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1337a:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1337e:	6820      	ldr	r0, [r4, #0]
   13380:	f44f 7182 	mov.w	r1, #260	; 0x104
   13384:	f7ff ffdb 	bl	1333e <nrf_pwm_event_clear>
   13388:	6820      	ldr	r0, [r4, #0]
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1338a:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1338e:	bf05      	ittet	eq
   13390:	2301      	moveq	r3, #1
   13392:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
   13394:	1940      	addne	r0, r0, r5
    return 0;
   13396:	2000      	moveq	r0, #0
}
   13398:	bd38      	pop	{r3, r4, r5, pc}

0001339a <nrfx_pwm_stop>:
{
   1339a:	b538      	push	{r3, r4, r5, lr}
   1339c:	4605      	mov	r5, r0
   1339e:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   133a0:	f7f1 fb20 	bl	49e4 <nrfx_pwm_is_stopped>
   133a4:	b950      	cbnz	r0, 133bc <nrfx_pwm_stop+0x22>
        nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   133a6:	682b      	ldr	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133a8:	2201      	movs	r2, #1
   133aa:	605a      	str	r2, [r3, #4]
            if (nrfx_pwm_is_stopped(p_instance))
   133ac:	4628      	mov	r0, r5
   133ae:	f7f1 fb19 	bl	49e4 <nrfx_pwm_is_stopped>
   133b2:	b918      	cbnz	r0, 133bc <nrfx_pwm_stop+0x22>
        } while (wait_until_stopped);
   133b4:	2c00      	cmp	r4, #0
   133b6:	d1f9      	bne.n	133ac <nrfx_pwm_stop+0x12>
}
   133b8:	4620      	mov	r0, r4
   133ba:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   133bc:	2401      	movs	r4, #1
   133be:	e7fb      	b.n	133b8 <nrfx_pwm_stop+0x1e>

000133c0 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   133c0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   133c2:	2200      	movs	r2, #0
   133c4:	4610      	mov	r0, r2
   133c6:	2101      	movs	r1, #1
   133c8:	f7f1 ff26 	bl	5218 <z_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   133cc:	2000      	movs	r0, #0
   133ce:	f7f1 fef1 	bl	51b4 <z_arch_irq_enable>

	return 0;
}
   133d2:	2000      	movs	r0, #0
   133d4:	bd08      	pop	{r3, pc}

000133d6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   133d6:	4770      	bx	lr

000133d8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   133d8:	4770      	bx	lr

000133da <z_irq_spurious>:
	__reserved();
   133da:	f7f1 be99 	b.w	5110 <__bus_fault>

000133de <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   133de:	4770      	bx	lr

000133e0 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   133e0:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   133e2:	6800      	ldr	r0, [r0, #0]
   133e4:	f7f1 bf68 	b.w	52b8 <z_arm_fatal_error>

000133e8 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   133e8:	b508      	push	{r3, lr}
	handler();
   133ea:	f7f1 fea5 	bl	5138 <z_SysNmiOnReset>
	z_ExcExit();
}
   133ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   133f2:	f7f1 be35 	b.w	5060 <_IntExit>

000133f6 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   133f6:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   133f8:	2100      	movs	r1, #0
   133fa:	a801      	add	r0, sp, #4
   133fc:	f7f2 f9d8 	bl	57b0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   13400:	b003      	add	sp, #12
   13402:	f85d fb04 	ldr.w	pc, [sp], #4

00013406 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
   13406:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
   13408:	4603      	mov	r3, r0
   1340a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1340e:	b90a      	cbnz	r2, 13414 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   13410:	701a      	strb	r2, [r3, #0]

	return dest;
}
   13412:	4770      	bx	lr
		*d = *s;
   13414:	f803 2b01 	strb.w	r2, [r3], #1
   13418:	e7f7      	b.n	1340a <strcpy+0x4>

0001341a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1341a:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
   1341c:	4603      	mov	r3, r0
   1341e:	1a98      	subs	r0, r3, r2
   13420:	f813 1b01 	ldrb.w	r1, [r3], #1
   13424:	2900      	cmp	r1, #0
   13426:	d1fa      	bne.n	1341e <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
   13428:	4770      	bx	lr

0001342a <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   1342a:	3801      	subs	r0, #1
   1342c:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1342e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13432:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   13436:	4293      	cmp	r3, r2
   13438:	d102      	bne.n	13440 <strcmp+0x16>
   1343a:	2b00      	cmp	r3, #0
   1343c:	d1f7      	bne.n	1342e <strcmp+0x4>
   1343e:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   13440:	1a98      	subs	r0, r3, r2
   13442:	4770      	bx	lr

00013444 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   13444:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   13446:	b15a      	cbz	r2, 13460 <memcmp+0x1c>
   13448:	3901      	subs	r1, #1
   1344a:	1884      	adds	r4, r0, r2
   1344c:	f810 2b01 	ldrb.w	r2, [r0], #1
   13450:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   13454:	42a0      	cmp	r0, r4
   13456:	d001      	beq.n	1345c <memcmp+0x18>
   13458:	429a      	cmp	r2, r3
   1345a:	d0f7      	beq.n	1344c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1345c:	1ad0      	subs	r0, r2, r3
}
   1345e:	bd10      	pop	{r4, pc}
		return 0;
   13460:	4610      	mov	r0, r2
   13462:	e7fc      	b.n	1345e <memcmp+0x1a>

00013464 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   13464:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   13466:	ea81 0400 	eor.w	r4, r1, r0
   1346a:	07a5      	lsls	r5, r4, #30
   1346c:	4603      	mov	r3, r0
   1346e:	d00b      	beq.n	13488 <memcpy+0x24>
   13470:	3b01      	subs	r3, #1
   13472:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   13474:	4291      	cmp	r1, r2
   13476:	d11d      	bne.n	134b4 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   13478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1347a:	2a00      	cmp	r2, #0
   1347c:	d0fc      	beq.n	13478 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1347e:	f811 4b01 	ldrb.w	r4, [r1], #1
   13482:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   13486:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   13488:	079c      	lsls	r4, r3, #30
   1348a:	d1f6      	bne.n	1347a <memcpy+0x16>
   1348c:	1f1d      	subs	r5, r3, #4
   1348e:	460c      	mov	r4, r1
   13490:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   13492:	1b3e      	subs	r6, r7, r4
   13494:	2e03      	cmp	r6, #3
   13496:	d808      	bhi.n	134aa <memcpy+0x46>
   13498:	0894      	lsrs	r4, r2, #2
   1349a:	f06f 0503 	mvn.w	r5, #3
   1349e:	fb05 2204 	mla	r2, r5, r4, r2
   134a2:	00a4      	lsls	r4, r4, #2
   134a4:	4423      	add	r3, r4
   134a6:	4421      	add	r1, r4
   134a8:	e7e2      	b.n	13470 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   134aa:	f854 6b04 	ldr.w	r6, [r4], #4
   134ae:	f845 6f04 	str.w	r6, [r5, #4]!
   134b2:	e7ee      	b.n	13492 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   134b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   134b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   134bc:	e7da      	b.n	13474 <memcpy+0x10>

000134be <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   134be:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   134c0:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   134c2:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   134c4:	079c      	lsls	r4, r3, #30
   134c6:	d10f      	bne.n	134e8 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   134c8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   134cc:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   134d0:	461d      	mov	r5, r3
   134d2:	189f      	adds	r7, r3, r2
   134d4:	1b7e      	subs	r6, r7, r5
   134d6:	2e03      	cmp	r6, #3
   134d8:	d80c      	bhi.n	134f4 <memset+0x36>
   134da:	0894      	lsrs	r4, r2, #2
   134dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   134e0:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   134e2:	429c      	cmp	r4, r3
   134e4:	d109      	bne.n	134fa <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   134e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   134e8:	2a00      	cmp	r2, #0
   134ea:	d0fc      	beq.n	134e6 <memset+0x28>
		*(d_byte++) = c_byte;
   134ec:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   134f0:	3a01      	subs	r2, #1
   134f2:	e7e7      	b.n	134c4 <memset+0x6>
		*(d_word++) = c_word;
   134f4:	f845 4b04 	str.w	r4, [r5], #4
   134f8:	e7ec      	b.n	134d4 <memset+0x16>
		*(d_byte++) = c_byte;
   134fa:	f804 1b01 	strb.w	r1, [r4], #1
   134fe:	e7f0      	b.n	134e2 <memset+0x24>

00013500 <_stdout_hook_default>:
}
   13500:	f04f 30ff 	mov.w	r0, #4294967295
   13504:	4770      	bx	lr

00013506 <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   13506:	b530      	push	{r4, r5, lr}
   13508:	b085      	sub	sp, #20
   1350a:	4604      	mov	r4, r0
   1350c:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1350e:	4668      	mov	r0, sp
   13510:	2203      	movs	r2, #3
   13512:	f7ff ffa7 	bl	13464 <memcpy>
	(void)memset(res + 3, 0, 13);
   13516:	220d      	movs	r2, #13
   13518:	2100      	movs	r1, #0
   1351a:	f10d 0003 	add.w	r0, sp, #3
   1351e:	f7ff ffce 	bl	134be <memset>

	err = bt_encrypt_le(irk, res, res);
   13522:	4620      	mov	r0, r4
   13524:	466a      	mov	r2, sp
   13526:	4669      	mov	r1, sp
   13528:	f002 fa9e 	bl	15a68 <bt_encrypt_le>
	if (err) {
   1352c:	4604      	mov	r4, r0
   1352e:	b920      	cbnz	r0, 1353a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   13530:	2203      	movs	r2, #3
   13532:	4669      	mov	r1, sp
   13534:	4628      	mov	r0, r5
   13536:	f7ff ff95 	bl	13464 <memcpy>

	return 0;
}
   1353a:	4620      	mov	r0, r4
   1353c:	b005      	add	sp, #20
   1353e:	bd30      	pop	{r4, r5, pc}

00013540 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   13540:	b513      	push	{r0, r1, r4, lr}
   13542:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   13544:	aa01      	add	r2, sp, #4
   13546:	3103      	adds	r1, #3
   13548:	f7ff ffdd 	bl	13506 <ah>
	if (err) {
   1354c:	b948      	cbnz	r0, 13562 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1354e:	2203      	movs	r2, #3
   13550:	a901      	add	r1, sp, #4
   13552:	4620      	mov	r0, r4
   13554:	f7ff ff76 	bl	13444 <memcmp>
   13558:	fab0 f080 	clz	r0, r0
   1355c:	0940      	lsrs	r0, r0, #5
}
   1355e:	b002      	add	sp, #8
   13560:	bd10      	pop	{r4, pc}
		return false;
   13562:	2000      	movs	r0, #0
   13564:	e7fb      	b.n	1355e <bt_rpa_irk_matches+0x1e>

00013566 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   13566:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
   13568:	1ccd      	adds	r5, r1, #3
{
   1356a:	4606      	mov	r6, r0
   1356c:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
   1356e:	4628      	mov	r0, r5
   13570:	2103      	movs	r1, #3
   13572:	f002 fa5f 	bl	15a34 <bt_rand>
	if (err) {
   13576:	b960      	cbnz	r0, 13592 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   13578:	7963      	ldrb	r3, [r4, #5]
   1357a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1357e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13582:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   13584:	4622      	mov	r2, r4
   13586:	4629      	mov	r1, r5
   13588:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1358a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1358e:	f7ff bfba 	b.w	13506 <ah>
}
   13592:	bd70      	pop	{r4, r5, r6, pc}

00013594 <send_cmd_status>:
{
   13594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   13598:	f04f 32ff 	mov.w	r2, #4294967295
{
   1359c:	4680      	mov	r8, r0
   1359e:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   135a0:	200f      	movs	r0, #15
   135a2:	2100      	movs	r1, #0
   135a4:	f7f3 fb2c 	bl	6c00 <bt_buf_get_evt>
   135a8:	2501      	movs	r5, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   135aa:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   135ae:	4604      	mov	r4, r0
   135b0:	7505      	strb	r5, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   135b2:	2102      	movs	r1, #2
   135b4:	4630      	mov	r0, r6
   135b6:	f002 fedd 	bl	16374 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   135ba:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   135bc:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   135be:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   135c0:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   135c2:	4630      	mov	r0, r6
   135c4:	f002 fed6 	bl	16374 <net_buf_simple_add>
	evt->ncmd = 1U;
   135c8:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   135ca:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   135cc:	f8a0 8002 	strh.w	r8, [r0, #2]
	bt_recv_prio(buf);
   135d0:	4620      	mov	r0, r4
}
   135d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   135d6:	f7f3 b84d 	b.w	6674 <bt_recv_prio>

000135da <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   135da:	f101 0320 	add.w	r3, r1, #32
   135de:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   135e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   135e4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   135e8:	428b      	cmp	r3, r1
   135ea:	d1f9      	bne.n	135e0 <sys_memcpy_swap.constprop.2+0x6>
	}
}
   135ec:	4770      	bx	lr

000135ee <default_CSPRNG>:
{
   135ee:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   135f0:	f002 fa20 	bl	15a34 <bt_rand>
}
   135f4:	fab0 f080 	clz	r0, r0
   135f8:	0940      	lsrs	r0, r0, #5
   135fa:	bd08      	pop	{r3, pc}

000135fc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   135fc:	b510      	push	{r4, lr}
   135fe:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   13600:	7801      	ldrb	r1, [r0, #0]
   13602:	7822      	ldrb	r2, [r4, #0]
   13604:	428a      	cmp	r2, r1
{
   13606:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   13608:	d00e      	beq.n	13628 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1360a:	4669      	mov	r1, sp
   1360c:	f7f2 fa62 	bl	5ad4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   13610:	a905      	add	r1, sp, #20
   13612:	4620      	mov	r0, r4
   13614:	f7f2 fa5e 	bl	5ad4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   13618:	2210      	movs	r2, #16
   1361a:	f10d 0115 	add.w	r1, sp, #21
   1361e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   13622:	f7ff ff0f 	bl	13444 <memcmp>
   13626:	e00a      	b.n	1363e <bt_uuid_cmp+0x42>
	switch (u1->type) {
   13628:	2a01      	cmp	r2, #1
   1362a:	d00a      	beq.n	13642 <bt_uuid_cmp+0x46>
   1362c:	d304      	bcc.n	13638 <bt_uuid_cmp+0x3c>
   1362e:	2a02      	cmp	r2, #2
   13630:	d00a      	beq.n	13648 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   13632:	f06f 0015 	mvn.w	r0, #21
   13636:	e002      	b.n	1363e <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   13638:	8840      	ldrh	r0, [r0, #2]
   1363a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1363c:	1ac0      	subs	r0, r0, r3
}
   1363e:	b00a      	add	sp, #40	; 0x28
   13640:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   13642:	6840      	ldr	r0, [r0, #4]
   13644:	6863      	ldr	r3, [r4, #4]
   13646:	e7f9      	b.n	1363c <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   13648:	2210      	movs	r2, #16
   1364a:	1c61      	adds	r1, r4, #1
   1364c:	3001      	adds	r0, #1
   1364e:	e7e8      	b.n	13622 <bt_uuid_cmp+0x26>

00013650 <handle_event>:
{
   13650:	b410      	push	{r4}
   13652:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   13656:	7814      	ldrb	r4, [r2, #0]
   13658:	4284      	cmp	r4, r0
   1365a:	d004      	beq.n	13666 <handle_event+0x16>
   1365c:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
   1365e:	429a      	cmp	r2, r3
   13660:	d1f9      	bne.n	13656 <handle_event+0x6>
}
   13662:	bc10      	pop	{r4}
   13664:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   13666:	8988      	ldrh	r0, [r1, #12]
   13668:	7853      	ldrb	r3, [r2, #1]
   1366a:	4298      	cmp	r0, r3
   1366c:	d3f9      	bcc.n	13662 <handle_event+0x12>
		handler->handler(buf);
   1366e:	6853      	ldr	r3, [r2, #4]
}
   13670:	bc10      	pop	{r4}
		handler->handler(buf);
   13672:	4608      	mov	r0, r1
   13674:	4718      	bx	r3

00013676 <hci_vendor_event>:
}
   13676:	4770      	bx	lr

00013678 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   13678:	2207      	movs	r2, #7
   1367a:	f7ff bef3 	b.w	13464 <memcpy>

0001367e <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1367e:	f3bf 8f5b 	dmb	ish
   13682:	e850 3f00 	ldrex	r3, [r0]
   13686:	ea43 0201 	orr.w	r2, r3, r1
   1368a:	e840 2c00 	strex	ip, r2, [r0]
   1368e:	f1bc 0f00 	cmp.w	ip, #0
   13692:	d1f6      	bne.n	13682 <atomic_or+0x4>
   13694:	f3bf 8f5b 	dmb	ish
}
   13698:	4618      	mov	r0, r3
   1369a:	4770      	bx	lr

0001369c <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1369c:	f3bf 8f5b 	dmb	ish
   136a0:	e850 3f00 	ldrex	r3, [r0]
   136a4:	ea03 0201 	and.w	r2, r3, r1
   136a8:	e840 2c00 	strex	ip, r2, [r0]
   136ac:	f1bc 0f00 	cmp.w	ip, #0
   136b0:	d1f6      	bne.n	136a0 <atomic_and+0x4>
   136b2:	f3bf 8f5b 	dmb	ish
}
   136b6:	4618      	mov	r0, r3
   136b8:	4770      	bx	lr

000136ba <le_data_len_change>:
{
   136ba:	b508      	push	{r3, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
   136bc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   136be:	8818      	ldrh	r0, [r3, #0]
   136c0:	f7f3 fe16 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   136c4:	b118      	cbz	r0, 136ce <le_data_len_change+0x14>
}
   136c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   136ca:	f000 bc67 	b.w	13f9c <bt_conn_unref>
}
   136ce:	bd08      	pop	{r3, pc}

000136d0 <le_conn_update_complete>:
{
   136d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   136d2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   136d4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   136d8:	f7f3 fe0a 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   136dc:	4604      	mov	r4, r0
   136de:	b1c0      	cbz	r0, 13712 <le_conn_update_complete+0x42>
	if (!evt->status) {
   136e0:	782b      	ldrb	r3, [r5, #0]
   136e2:	b9c3      	cbnz	r3, 13716 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   136e4:	792a      	ldrb	r2, [r5, #4]
   136e6:	78eb      	ldrb	r3, [r5, #3]
   136e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   136ec:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   136f0:	79aa      	ldrb	r2, [r5, #6]
   136f2:	796b      	ldrb	r3, [r5, #5]
   136f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   136f8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   136fc:	79eb      	ldrb	r3, [r5, #7]
   136fe:	7a2a      	ldrb	r2, [r5, #8]
   13700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13704:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
   13708:	f7f3 fb4c 	bl	6da4 <notify_le_param_updated>
	bt_conn_unref(conn);
   1370c:	4620      	mov	r0, r4
   1370e:	f000 fc45 	bl	13f9c <bt_conn_unref>
}
   13712:	b003      	add	sp, #12
   13714:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13716:	2b1a      	cmp	r3, #26
   13718:	d1f8      	bne.n	1370c <le_conn_update_complete+0x3c>
   1371a:	78c3      	ldrb	r3, [r0, #3]
   1371c:	2b01      	cmp	r3, #1
   1371e:	d1f5      	bne.n	1370c <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13720:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13724:	3004      	adds	r0, #4
   13726:	f7ff ffaa 	bl	1367e <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1372a:	0543      	lsls	r3, r0, #21
   1372c:	d4ee      	bmi.n	1370c <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1372e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   13732:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   13736:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
   1373a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1373e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   13742:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13746:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   13748:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   1374c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   13750:	4620      	mov	r0, r4
   13752:	f7f4 f86b 	bl	782c <bt_l2cap_update_conn_param>
   13756:	e7d9      	b.n	1370c <le_conn_update_complete+0x3c>

00013758 <hci_num_completed_packets>:
{
   13758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1375c:	6887      	ldr	r7, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   1375e:	2600      	movs	r6, #0
   13760:	783b      	ldrb	r3, [r7, #0]
   13762:	429e      	cmp	r6, r3
   13764:	db01      	blt.n	1376a <hci_num_completed_packets+0x12>
}
   13766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1376a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1376e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13772:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	__asm__ volatile(
   13776:	f04f 0320 	mov.w	r3, #32
   1377a:	f3ef 8811 	mrs	r8, BASEPRI
   1377e:	f383 8811 	msr	BASEPRI, r3
   13782:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
   13786:	f7f3 fdb3 	bl	72f0 <bt_conn_lookup_handle>
		if (!conn) {
   1378a:	4604      	mov	r4, r0
   1378c:	b928      	cbnz	r0, 1379a <hci_num_completed_packets+0x42>
	__asm__ volatile(
   1378e:	f388 8811 	msr	BASEPRI, r8
   13792:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
   13796:	3601      	adds	r6, #1
   13798:	e7e2      	b.n	13760 <hci_num_completed_packets+0x8>
   1379a:	f388 8811 	msr	BASEPRI, r8
   1379e:	f3bf 8f6f 	isb	sy
			k_fifo_put(&conn->tx_notify, node);
   137a2:	f100 081c 	add.w	r8, r0, #28
		while (count--) {
   137a6:	b1b5      	cbz	r5, 137d6 <hci_num_completed_packets+0x7e>
	__asm__ volatile(
   137a8:	f04f 0320 	mov.w	r3, #32
   137ac:	f3ef 8011 	mrs	r0, BASEPRI
   137b0:	f383 8811 	msr	BASEPRI, r3
   137b4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   137b8:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   137ba:	b129      	cbz	r1, 137c8 <hci_num_completed_packets+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   137bc:	69a2      	ldr	r2, [r4, #24]
	return node->next;
   137be:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   137c0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   137c2:	4291      	cmp	r1, r2
	list->tail = node;
   137c4:	bf08      	it	eq
   137c6:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
   137c8:	f380 8811 	msr	BASEPRI, r0
   137cc:	f3bf 8f6f 	isb	sy
   137d0:	3d01      	subs	r5, #1
   137d2:	b2ad      	uxth	r5, r5
			if (!node) {
   137d4:	b919      	cbnz	r1, 137de <hci_num_completed_packets+0x86>
		bt_conn_unref(conn);
   137d6:	4620      	mov	r0, r4
   137d8:	f000 fbe0 	bl	13f9c <bt_conn_unref>
   137dc:	e7db      	b.n	13796 <hci_num_completed_packets+0x3e>
			k_fifo_put(&conn->tx_notify, node);
   137de:	4640      	mov	r0, r8
   137e0:	f003 f9b7 	bl	16b52 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
   137e4:	4620      	mov	r0, r4
   137e6:	f7f3 fad9 	bl	6d9c <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   137ea:	f7fd fd7d 	bl	112e8 <z_impl_k_sem_give>
   137ee:	e7da      	b.n	137a6 <hci_num_completed_packets+0x4e>

000137f0 <update_sec_level.part.14>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   137f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
   137f2:	b193      	cbz	r3, 1381a <update_sec_level.part.14+0x2a>
   137f4:	7a5a      	ldrb	r2, [r3, #9]
   137f6:	07d1      	lsls	r1, r2, #31
   137f8:	d50f      	bpl.n	1381a <update_sec_level.part.14+0x2a>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   137fa:	06d2      	lsls	r2, r2, #27
   137fc:	d50b      	bpl.n	13816 <update_sec_level.part.14+0x26>
   137fe:	7a1b      	ldrb	r3, [r3, #8]
   13800:	2b10      	cmp	r3, #16
   13802:	d108      	bne.n	13816 <update_sec_level.part.14+0x26>
			conn->sec_level = BT_SECURITY_FIPS;
   13804:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_MEDIUM;
   13806:	7243      	strb	r3, [r0, #9]
	if (conn->required_sec_level > conn->sec_level) {
   13808:	7a82      	ldrb	r2, [r0, #10]
   1380a:	7a43      	ldrb	r3, [r0, #9]
   1380c:	429a      	cmp	r2, r3
   1380e:	d906      	bls.n	1381e <update_sec_level.part.14+0x2e>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
   13810:	2105      	movs	r1, #5
   13812:	f000 bbc8 	b.w	13fa6 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_HIGH;
   13816:	2303      	movs	r3, #3
   13818:	e7f5      	b.n	13806 <update_sec_level.part.14+0x16>
		conn->sec_level = BT_SECURITY_MEDIUM;
   1381a:	2302      	movs	r3, #2
   1381c:	e7f3      	b.n	13806 <update_sec_level.part.14+0x16>
}
   1381e:	4770      	bx	lr

00013820 <hci_encrypt_change>:
{
   13820:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   13822:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   13824:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   13828:	f7f3 fd62 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   1382c:	4604      	mov	r4, r0
   1382e:	b300      	cbz	r0, 13872 <hci_encrypt_change+0x52>
	if (evt->status) {
   13830:	782b      	ldrb	r3, [r5, #0]
   13832:	7882      	ldrb	r2, [r0, #2]
   13834:	b13b      	cbz	r3, 13846 <hci_encrypt_change+0x26>
		if (conn->type == BT_CONN_TYPE_LE) {
   13836:	b90a      	cbnz	r2, 1383c <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
   13838:	7a43      	ldrb	r3, [r0, #9]
   1383a:	7283      	strb	r3, [r0, #10]
	bt_conn_unref(conn);
   1383c:	4620      	mov	r0, r4
}
   1383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13842:	f000 bbab 	b.w	13f9c <bt_conn_unref>
	conn->encrypt = evt->encrypt;
   13846:	78eb      	ldrb	r3, [r5, #3]
   13848:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1384a:	b932      	cbnz	r2, 1385a <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1384c:	b10b      	cbz	r3, 13852 <hci_encrypt_change+0x32>
			bt_smp_update_keys(conn);
   1384e:	f001 fe6c 	bl	1552a <bt_smp_update_keys>
	if (!conn->encrypt) {
   13852:	7ae3      	ldrb	r3, [r4, #11]
   13854:	b94b      	cbnz	r3, 1386a <hci_encrypt_change+0x4a>
		conn->sec_level = BT_SECURITY_LOW;
   13856:	2301      	movs	r3, #1
   13858:	7263      	strb	r3, [r4, #9]
	bt_l2cap_encrypt_change(conn, evt->status);
   1385a:	4620      	mov	r0, r4
   1385c:	7829      	ldrb	r1, [r5, #0]
   1385e:	f000 fc7d 	bl	1415c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
   13862:	4620      	mov	r0, r4
   13864:	f7f3 fb0c 	bl	6e80 <bt_conn_security_changed>
   13868:	e7e8      	b.n	1383c <hci_encrypt_change+0x1c>
   1386a:	4620      	mov	r0, r4
   1386c:	f7ff ffc0 	bl	137f0 <update_sec_level.part.14>
   13870:	e7f3      	b.n	1385a <hci_encrypt_change+0x3a>
}
   13872:	bd38      	pop	{r3, r4, r5, pc}

00013874 <find_pending_connect>:
{
   13874:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   13876:	2103      	movs	r1, #3
{
   13878:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1387a:	f7f3 fd99 	bl	73b0 <bt_conn_lookup_state_le>
	if (conn) {
   1387e:	b928      	cbnz	r0, 1388c <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   13880:	4620      	mov	r0, r4
   13882:	2102      	movs	r1, #2
}
   13884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   13888:	f7f3 bd92 	b.w	73b0 <bt_conn_lookup_state_le>
}
   1388c:	bd10      	pop	{r4, pc}

0001388e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1388e:	f3bf 8f5b 	dmb	ish
   13892:	6800      	ldr	r0, [r0, #0]
   13894:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13898:	4108      	asrs	r0, r1
}
   1389a:	f000 0001 	and.w	r0, r0, #1
   1389e:	4770      	bx	lr

000138a0 <sys_put_le64>:
	dst[1] = val >> 8;
   138a0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   138a4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   138a6:	0e00      	lsrs	r0, r0, #24
   138a8:	7053      	strb	r3, [r2, #1]
   138aa:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   138ac:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   138ae:	f3c1 2007 	ubfx	r0, r1, #8, #8
   138b2:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   138b4:	7093      	strb	r3, [r2, #2]
   138b6:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   138b8:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   138ba:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   138bc:	71d1      	strb	r1, [r2, #7]
}
   138be:	4770      	bx	lr

000138c0 <hci_encrypt_key_refresh_complete>:
{
   138c0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   138c2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   138c4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   138c8:	f7f3 fd12 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   138cc:	4604      	mov	r4, r0
   138ce:	b1e8      	cbz	r0, 1390c <hci_encrypt_key_refresh_complete+0x4c>
	if (evt->status) {
   138d0:	7829      	ldrb	r1, [r5, #0]
   138d2:	b119      	cbz	r1, 138dc <hci_encrypt_key_refresh_complete+0x1c>
}
   138d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_encrypt_change(conn, evt->status);
   138d8:	f000 bc40 	b.w	1415c <bt_l2cap_encrypt_change>
	if (conn->type == BT_CONN_TYPE_LE) {
   138dc:	7883      	ldrb	r3, [r0, #2]
   138de:	b92b      	cbnz	r3, 138ec <hci_encrypt_key_refresh_complete+0x2c>
		bt_smp_update_keys(conn);
   138e0:	f001 fe23 	bl	1552a <bt_smp_update_keys>
	if (!conn->encrypt) {
   138e4:	7ae3      	ldrb	r3, [r4, #11]
   138e6:	b96b      	cbnz	r3, 13904 <hci_encrypt_key_refresh_complete+0x44>
		conn->sec_level = BT_SECURITY_LOW;
   138e8:	2301      	movs	r3, #1
   138ea:	7263      	strb	r3, [r4, #9]
	bt_l2cap_encrypt_change(conn, evt->status);
   138ec:	7829      	ldrb	r1, [r5, #0]
   138ee:	4620      	mov	r0, r4
   138f0:	f000 fc34 	bl	1415c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
   138f4:	4620      	mov	r0, r4
   138f6:	f7f3 fac3 	bl	6e80 <bt_conn_security_changed>
	bt_conn_unref(conn);
   138fa:	4620      	mov	r0, r4
}
   138fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13900:	f000 bb4c 	b.w	13f9c <bt_conn_unref>
   13904:	4620      	mov	r0, r4
   13906:	f7ff ff73 	bl	137f0 <update_sec_level.part.14>
   1390a:	e7ef      	b.n	138ec <hci_encrypt_key_refresh_complete+0x2c>
}
   1390c:	bd38      	pop	{r3, r4, r5, pc}

0001390e <le_ltk_request>:
{
   1390e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   13910:	6885      	ldr	r5, [r0, #8]
{
   13912:	b085      	sub	sp, #20
	conn = bt_conn_lookup_handle(handle);
   13914:	8828      	ldrh	r0, [r5, #0]
   13916:	f7f3 fceb 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   1391a:	4604      	mov	r4, r0
   1391c:	b328      	cbz	r0, 1396a <le_ltk_request+0x5c>
	if (evt->rand == 0U && evt->ediv == 0U && bt_smp_get_tk(conn, tk)) {
   1391e:	f8d5 2002 	ldr.w	r2, [r5, #2]
   13922:	f8d5 3006 	ldr.w	r3, [r5, #6]
   13926:	4313      	orrs	r3, r2
   13928:	d121      	bne.n	1396e <le_ltk_request+0x60>
   1392a:	896b      	ldrh	r3, [r5, #10]
   1392c:	b9fb      	cbnz	r3, 1396e <le_ltk_request+0x60>
   1392e:	4669      	mov	r1, sp
   13930:	f001 fe6a 	bl	15608 <bt_smp_get_tk>
   13934:	b1d8      	cbz	r0, 1396e <le_ltk_request+0x60>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13936:	2112      	movs	r1, #18
   13938:	f242 001a 	movw	r0, #8218	; 0x201a
   1393c:	f7f2 fa36 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
   13940:	4606      	mov	r6, r0
   13942:	b178      	cbz	r0, 13964 <le_ltk_request+0x56>
		cp = net_buf_add(buf, sizeof(*cp));
   13944:	2112      	movs	r1, #18
   13946:	3008      	adds	r0, #8
   13948:	f002 fd14 	bl	16374 <net_buf_simple_add>
		cp->handle = evt->handle;
   1394c:	882b      	ldrh	r3, [r5, #0]
   1394e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
   13952:	2210      	movs	r2, #16
   13954:	4669      	mov	r1, sp
   13956:	f7ff fd85 	bl	13464 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1395a:	4631      	mov	r1, r6
   1395c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13960:	f7f2 fa44 	bl	5dec <bt_hci_cmd_send>
	bt_conn_unref(conn);
   13964:	4620      	mov	r0, r4
   13966:	f000 fb19 	bl	13f9c <bt_conn_unref>
}
   1396a:	b005      	add	sp, #20
   1396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!conn->le.keys) {
   1396e:	6f63      	ldr	r3, [r4, #116]	; 0x74
   13970:	2b00      	cmp	r3, #0
   13972:	d176      	bne.n	13a62 <le_ltk_request+0x154>
					     &conn->le.dst);
   13974:	f104 0648 	add.w	r6, r4, #72	; 0x48
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   13978:	4632      	mov	r2, r6
   1397a:	7a21      	ldrb	r1, [r4, #8]
   1397c:	2020      	movs	r0, #32
   1397e:	f7f5 fd71 	bl	9464 <bt_keys_find>
   13982:	6760      	str	r0, [r4, #116]	; 0x74
		if (!conn->le.keys) {
   13984:	2800      	cmp	r0, #0
   13986:	d16c      	bne.n	13a62 <le_ltk_request+0x154>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   13988:	4632      	mov	r2, r6
   1398a:	7a21      	ldrb	r1, [r4, #8]
   1398c:	2001      	movs	r0, #1
   1398e:	f7f5 fd69 	bl	9464 <bt_keys_find>
   13992:	6760      	str	r0, [r4, #116]	; 0x74
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   13994:	2800      	cmp	r0, #0
   13996:	d052      	beq.n	13a3e <le_ltk_request+0x130>
   13998:	8941      	ldrh	r1, [r0, #10]
   1399a:	068a      	lsls	r2, r1, #26
   1399c:	d529      	bpl.n	139f2 <le_ltk_request+0xe4>
	    evt->rand == 0U && evt->ediv == 0U) {
   1399e:	f8d5 2002 	ldr.w	r2, [r5, #2]
   139a2:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   139a6:	4313      	orrs	r3, r2
   139a8:	d123      	bne.n	139f2 <le_ltk_request+0xe4>
	    evt->rand == 0U && evt->ediv == 0U) {
   139aa:	896f      	ldrh	r7, [r5, #10]
   139ac:	bb0f      	cbnz	r7, 139f2 <le_ltk_request+0xe4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   139ae:	2112      	movs	r1, #18
   139b0:	f242 001a 	movw	r0, #8218	; 0x201a
   139b4:	f7f2 f9fa 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
   139b8:	4606      	mov	r6, r0
   139ba:	2800      	cmp	r0, #0
   139bc:	d0d2      	beq.n	13964 <le_ltk_request+0x56>
		cp = net_buf_add(buf, sizeof(*cp));
   139be:	2112      	movs	r1, #18
   139c0:	3008      	adds	r0, #8
   139c2:	f002 fcd7 	bl	16374 <net_buf_simple_add>
		cp->handle = evt->handle;
   139c6:	882b      	ldrh	r3, [r5, #0]
		memcpy(cp->ltk, conn->le.keys->ltk.val,
   139c8:	6f61      	ldr	r1, [r4, #116]	; 0x74
		cp->handle = evt->handle;
   139ca:	4605      	mov	r5, r0
		memcpy(cp->ltk, conn->le.keys->ltk.val,
   139cc:	3116      	adds	r1, #22
		cp->handle = evt->handle;
   139ce:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
   139d2:	f811 2c0e 	ldrb.w	r2, [r1, #-14]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
   139d6:	4628      	mov	r0, r5
   139d8:	f7ff fd44 	bl	13464 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
   139dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   139de:	7a18      	ldrb	r0, [r3, #8]
   139e0:	280f      	cmp	r0, #15
   139e2:	d8ba      	bhi.n	1395a <le_ltk_request+0x4c>
			(void)memset(cp->ltk + conn->le.keys->enc_size, 0,
   139e4:	f1c0 0210 	rsb	r2, r0, #16
   139e8:	4639      	mov	r1, r7
   139ea:	4428      	add	r0, r5
   139ec:	f7ff fd67 	bl	134be <memset>
   139f0:	e7b3      	b.n	1395a <le_ltk_request+0x4c>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   139f2:	07cb      	lsls	r3, r1, #31
   139f4:	d523      	bpl.n	13a3e <le_ltk_request+0x130>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
   139f6:	2208      	movs	r2, #8
   139f8:	1ca9      	adds	r1, r5, #2
   139fa:	303c      	adds	r0, #60	; 0x3c
   139fc:	f7ff fd22 	bl	13444 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   13a00:	b9e8      	cbnz	r0, 13a3e <le_ltk_request+0x130>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &evt->ediv, 2)) {
   13a02:	6f60      	ldr	r0, [r4, #116]	; 0x74
   13a04:	2202      	movs	r2, #2
   13a06:	f105 010a 	add.w	r1, r5, #10
   13a0a:	3044      	adds	r0, #68	; 0x44
   13a0c:	f7ff fd1a 	bl	13444 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
   13a10:	4607      	mov	r7, r0
   13a12:	b9a0      	cbnz	r0, 13a3e <le_ltk_request+0x130>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13a14:	2112      	movs	r1, #18
   13a16:	f242 001a 	movw	r0, #8218	; 0x201a
   13a1a:	f7f2 f9c7 	bl	5dac <bt_hci_cmd_create>
		if (!buf) {
   13a1e:	4606      	mov	r6, r0
   13a20:	2800      	cmp	r0, #0
   13a22:	d09f      	beq.n	13964 <le_ltk_request+0x56>
		cp = net_buf_add(buf, sizeof(*cp));
   13a24:	2112      	movs	r1, #18
   13a26:	3008      	adds	r0, #8
   13a28:	f002 fca4 	bl	16374 <net_buf_simple_add>
		cp->handle = evt->handle;
   13a2c:	882b      	ldrh	r3, [r5, #0]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
   13a2e:	6f61      	ldr	r1, [r4, #116]	; 0x74
		cp->handle = evt->handle;
   13a30:	4605      	mov	r5, r0
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
   13a32:	3146      	adds	r1, #70	; 0x46
		cp->handle = evt->handle;
   13a34:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
   13a38:	f811 2c3e 	ldrb.w	r2, [r1, #-62]
   13a3c:	e7cb      	b.n	139d6 <le_ltk_request+0xc8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   13a3e:	2102      	movs	r1, #2
   13a40:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
   13a44:	882e      	ldrh	r6, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   13a46:	f7f2 f9b1 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13a4a:	4605      	mov	r5, r0
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d089      	beq.n	13964 <le_ltk_request+0x56>
	cp = net_buf_add(buf, sizeof(*cp));
   13a50:	2102      	movs	r1, #2
   13a52:	3008      	adds	r0, #8
   13a54:	f002 fc8e 	bl	16374 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13a58:	4629      	mov	r1, r5
	cp->handle = handle;
   13a5a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13a5c:	f242 001b 	movw	r0, #8219	; 0x201b
   13a60:	e77e      	b.n	13960 <le_ltk_request+0x52>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   13a62:	6f60      	ldr	r0, [r4, #116]	; 0x74
   13a64:	e798      	b.n	13998 <le_ltk_request+0x8a>

00013a66 <le_conn_param_neg_reply>:
{
   13a66:	b570      	push	{r4, r5, r6, lr}
   13a68:	4606      	mov	r6, r0
   13a6a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   13a6c:	f242 0021 	movw	r0, #8225	; 0x2021
   13a70:	2103      	movs	r1, #3
   13a72:	f7f2 f99b 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13a76:	4604      	mov	r4, r0
   13a78:	b160      	cbz	r0, 13a94 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   13a7a:	2103      	movs	r1, #3
   13a7c:	3008      	adds	r0, #8
   13a7e:	f002 fc79 	bl	16374 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   13a82:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   13a84:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13a86:	4621      	mov	r1, r4
   13a88:	f242 0021 	movw	r0, #8225	; 0x2021
}
   13a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13a90:	f7f2 b9ac 	b.w	5dec <bt_hci_cmd_send>
}
   13a94:	bd70      	pop	{r4, r5, r6, pc}

00013a96 <le_conn_param_req>:
{
   13a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13a98:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13a9a:	78d9      	ldrb	r1, [r3, #3]
   13a9c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   13a9e:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13aa0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13aa4:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13aa8:	7959      	ldrb	r1, [r3, #5]
   13aaa:	791a      	ldrb	r2, [r3, #4]
   13aac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13ab0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   13ab4:	799a      	ldrb	r2, [r3, #6]
   13ab6:	79d9      	ldrb	r1, [r3, #7]
   13ab8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13abc:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13ac0:	7a1a      	ldrb	r2, [r3, #8]
   13ac2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   13ac4:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13ac6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   13aca:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13acc:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   13ad0:	f7f3 fc0e 	bl	72f0 <bt_conn_lookup_handle>
	if (!conn) {
   13ad4:	4607      	mov	r7, r0
   13ad6:	b928      	cbnz	r0, 13ae4 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   13ad8:	2102      	movs	r1, #2
   13ada:	4620      	mov	r0, r4
   13adc:	f7ff ffc3 	bl	13a66 <le_conn_param_neg_reply>
}
   13ae0:	b003      	add	sp, #12
   13ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   13ae4:	4669      	mov	r1, sp
   13ae6:	f7f3 f991 	bl	6e0c <le_param_req>
   13aea:	b938      	cbnz	r0, 13afc <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   13aec:	211e      	movs	r1, #30
   13aee:	4620      	mov	r0, r4
   13af0:	f7ff ffb9 	bl	13a66 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   13af4:	4638      	mov	r0, r7
   13af6:	f000 fa51 	bl	13f9c <bt_conn_unref>
   13afa:	e7f1      	b.n	13ae0 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   13afc:	210e      	movs	r1, #14
   13afe:	f242 0020 	movw	r0, #8224	; 0x2020
   13b02:	f7f2 f953 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13b06:	4605      	mov	r5, r0
   13b08:	2800      	cmp	r0, #0
   13b0a:	d0f3      	beq.n	13af4 <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   13b0c:	210e      	movs	r1, #14
   13b0e:	3008      	adds	r0, #8
   13b10:	f002 fc30 	bl	16374 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   13b14:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   13b16:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   13b18:	2100      	movs	r1, #0
   13b1a:	f7ff fcd0 	bl	134be <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   13b1e:	f8bd 3000 	ldrh.w	r3, [sp]
   13b22:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   13b24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13b28:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   13b2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13b2e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13b30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   13b34:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13b36:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13b38:	4629      	mov	r1, r5
   13b3a:	f242 0020 	movw	r0, #8224	; 0x2020
   13b3e:	f7f2 f955 	bl	5dec <bt_hci_cmd_send>
   13b42:	e7d7      	b.n	13af4 <le_conn_param_req+0x5e>

00013b44 <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
   13b44:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13b46:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
   13b48:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13b4a:	f242 0032 	movw	r0, #8242	; 0x2032
   13b4e:	f7f2 f92d 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13b52:	4605      	mov	r5, r0
   13b54:	b198      	cbz	r0, 13b7e <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
   13b56:	2107      	movs	r1, #7
   13b58:	3008      	adds	r0, #8
   13b5a:	f002 fc0b 	bl	16374 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13b5e:	8823      	ldrh	r3, [r4, #0]
   13b60:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0U;
   13b62:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
   13b64:	2302      	movs	r3, #2
	cp->all_phys = 0U;
   13b66:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
   13b68:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
   13b6a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   13b6c:	7144      	strb	r4, [r0, #5]
   13b6e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   13b70:	4629      	mov	r1, r5
   13b72:	f242 0032 	movw	r0, #8242	; 0x2032
   13b76:	f7f2 f939 	bl	5dec <bt_hci_cmd_send>
	return 0;
   13b7a:	4620      	mov	r0, r4
}
   13b7c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13b7e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13b82:	e7fb      	b.n	13b7c <hci_le_set_phy.isra.29+0x38>

00013b84 <hci_id_add>:
{
   13b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b86:	4607      	mov	r7, r0
   13b88:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   13b8a:	f242 0027 	movw	r0, #8231	; 0x2027
   13b8e:	2127      	movs	r1, #39	; 0x27
   13b90:	f7f2 f90c 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13b94:	4604      	mov	r4, r0
   13b96:	b1d0      	cbz	r0, 13bce <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   13b98:	2127      	movs	r1, #39	; 0x27
   13b9a:	3008      	adds	r0, #8
   13b9c:	f002 fbea 	bl	16374 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13ba0:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   13ba2:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13ba4:	f7ff fd68 	bl	13678 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
   13ba8:	4631      	mov	r1, r6
   13baa:	2210      	movs	r2, #16
   13bac:	1de8      	adds	r0, r5, #7
   13bae:	f7ff fc59 	bl	13464 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   13bb2:	2210      	movs	r2, #16
   13bb4:	2100      	movs	r1, #0
   13bb6:	f105 0017 	add.w	r0, r5, #23
   13bba:	f7ff fc80 	bl	134be <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   13bbe:	4621      	mov	r1, r4
   13bc0:	2200      	movs	r2, #0
   13bc2:	f242 0027 	movw	r0, #8231	; 0x2027
}
   13bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   13bca:	f7f2 b931 	b.w	5e30 <bt_hci_cmd_send_sync>
}
   13bce:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013bd4 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
   13bd4:	f100 0126 	add.w	r1, r0, #38	; 0x26
   13bd8:	3001      	adds	r0, #1
   13bda:	f7ff bfd3 	b.w	13b84 <hci_id_add>

00013bde <addr_res_enable>:
{
   13bde:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   13be0:	2101      	movs	r1, #1
{
   13be2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   13be4:	f242 002d 	movw	r0, #8237	; 0x202d
   13be8:	f7f2 f8e0 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13bec:	4604      	mov	r4, r0
   13bee:	b158      	cbz	r0, 13c08 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   13bf0:	4629      	mov	r1, r5
   13bf2:	3008      	adds	r0, #8
   13bf4:	f002 fbcd 	bl	16392 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   13bf8:	4621      	mov	r1, r4
   13bfa:	2200      	movs	r2, #0
   13bfc:	f242 002d 	movw	r0, #8237	; 0x202d
}
   13c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   13c04:	f7f2 b914 	b.w	5e30 <bt_hci_cmd_send_sync>
}
   13c08:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13c0c:	bd38      	pop	{r3, r4, r5, pc}

00013c0e <le_set_private_addr.isra.21>:
static int le_set_private_addr(u8_t id)
   13c0e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   13c10:	2106      	movs	r1, #6
   13c12:	4668      	mov	r0, sp
   13c14:	f001 ff0e 	bl	15a34 <bt_rand>
	if (err) {
   13c18:	b940      	cbnz	r0, 13c2c <le_set_private_addr.isra.21+0x1e>
	nrpa.val[5] &= 0x3f;
   13c1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   13c1e:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   13c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c24:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   13c28:	f7f2 f98c 	bl	5f44 <set_random_address>
}
   13c2c:	b003      	add	sp, #12
   13c2e:	f85d fb04 	ldr.w	pc, [sp], #4

00013c32 <set_ad>:
{
   13c32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c36:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13c38:	2120      	movs	r1, #32
{
   13c3a:	4682      	mov	sl, r0
   13c3c:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13c3e:	f7f2 f8b5 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13c42:	4607      	mov	r7, r0
   13c44:	2800      	cmp	r0, #0
   13c46:	d04a      	beq.n	13cde <set_ad+0xac>
	set_data = net_buf_add(buf, sizeof(*set_data));
   13c48:	2120      	movs	r1, #32
   13c4a:	3008      	adds	r0, #8
   13c4c:	f002 fb92 	bl	16374 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   13c50:	2220      	movs	r2, #32
   13c52:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   13c54:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   13c56:	f7ff fc32 	bl	134be <memset>
   13c5a:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
	for (c = 0; c < ad_len; c++) {
   13c5e:	45a1      	cmp	r9, r4
   13c60:	d106      	bne.n	13c70 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13c62:	4639      	mov	r1, r7
   13c64:	4650      	mov	r0, sl
   13c66:	2200      	movs	r2, #0
}
   13c68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13c6c:	f7f2 b8e0 	b.w	5e30 <bt_hci_cmd_send_sync>
   13c70:	6826      	ldr	r6, [r4, #0]
		for (i = 0; i < ad[c].len; i++) {
   13c72:	f04f 0b00 	mov.w	fp, #0
   13c76:	6863      	ldr	r3, [r4, #4]
   13c78:	455b      	cmp	r3, fp
   13c7a:	d801      	bhi.n	13c80 <set_ad+0x4e>
   13c7c:	3408      	adds	r4, #8
   13c7e:	e7ee      	b.n	13c5e <set_ad+0x2c>
			int len = data[i].data_len;
   13c80:	7872      	ldrb	r2, [r6, #1]
			if (set_data->len + len + 2 > 31) {
   13c82:	782b      	ldrb	r3, [r5, #0]
			u8_t type = data[i].type;
   13c84:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
   13c86:	1898      	adds	r0, r3, r2
   13c88:	3002      	adds	r0, #2
   13c8a:	281f      	cmp	r0, #31
   13c8c:	dd0c      	ble.n	13ca8 <set_ad+0x76>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
   13c8e:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
   13c90:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
   13c94:	d100      	bne.n	13c98 <set_ad+0x66>
   13c96:	b932      	cbnz	r2, 13ca6 <set_ad+0x74>
					net_buf_unref(buf);
   13c98:	4638      	mov	r0, r7
   13c9a:	f7fc f965 	bl	ff68 <net_buf_unref>
					return -EINVAL;
   13c9e:	f06f 0015 	mvn.w	r0, #21
}
   13ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13ca6:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
   13ca8:	fa5f f882 	uxtb.w	r8, r2
   13cac:	18e8      	adds	r0, r5, r3
   13cae:	f108 0c01 	add.w	ip, r8, #1
   13cb2:	f880 c001 	strb.w	ip, [r0, #1]
			set_data->data[set_data->len++] = type;
   13cb6:	1c98      	adds	r0, r3, #2
			set_data->data[set_data->len++] = len + 1;
   13cb8:	3301      	adds	r3, #1
			set_data->data[set_data->len++] = type;
   13cba:	fa55 f383 	uxtab	r3, r5, r3
   13cbe:	b2c0      	uxtb	r0, r0
   13cc0:	7028      	strb	r0, [r5, #0]
   13cc2:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
   13cc4:	3001      	adds	r0, #1
   13cc6:	6871      	ldr	r1, [r6, #4]
   13cc8:	4428      	add	r0, r5
   13cca:	f7ff fbcb 	bl	13464 <memcpy>
			set_data->len += len;
   13cce:	782b      	ldrb	r3, [r5, #0]
   13cd0:	4498      	add	r8, r3
   13cd2:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
   13cd6:	f10b 0b01 	add.w	fp, fp, #1
   13cda:	3608      	adds	r6, #8
   13cdc:	e7cb      	b.n	13c76 <set_ad+0x44>
		return -ENOBUFS;
   13cde:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13ce2:	e7de      	b.n	13ca2 <set_ad+0x70>

00013ce4 <hci_le_set_data_len.isra.28>:
static void hci_le_set_data_len(struct bt_conn *conn)
   13ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13ce6:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13ce8:	aa01      	add	r2, sp, #4
   13cea:	2100      	movs	r1, #0
   13cec:	f242 002f 	movw	r0, #8239	; 0x202f
   13cf0:	f7f2 f89e 	bl	5e30 <bt_hci_cmd_send_sync>
	if (err) {
   13cf4:	b9d8      	cbnz	r0, 13d2e <hci_le_set_data_len.isra.28+0x4a>
	rp = (void *)rsp->data;
   13cf6:	9801      	ldr	r0, [sp, #4]
   13cf8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13cfa:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13cfe:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
   13d02:	f7fc f931 	bl	ff68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   13d06:	2106      	movs	r1, #6
   13d08:	f242 0022 	movw	r0, #8226	; 0x2022
   13d0c:	f7f2 f84e 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13d10:	4604      	mov	r4, r0
   13d12:	b160      	cbz	r0, 13d2e <hci_le_set_data_len.isra.28+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   13d14:	2106      	movs	r1, #6
   13d16:	3008      	adds	r0, #8
   13d18:	f002 fb2c 	bl	16374 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13d1c:	883b      	ldrh	r3, [r7, #0]
   13d1e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   13d20:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   13d22:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   13d24:	4621      	mov	r1, r4
   13d26:	f242 0022 	movw	r0, #8226	; 0x2022
   13d2a:	f7f2 f85f 	bl	5dec <bt_hci_cmd_send>
}
   13d2e:	b003      	add	sp, #12
   13d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013d32 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   13d32:	6880      	ldr	r0, [r0, #8]
   13d34:	f7f2 b9e2 	b.w	60fc <enh_conn_complete>

00013d38 <bt_lookup_id_addr>:
{
   13d38:	b510      	push	{r4, lr}
   13d3a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   13d3c:	f7f5 fbba 	bl	94b4 <bt_keys_find_irk>
		if (keys) {
   13d40:	b100      	cbz	r0, 13d44 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   13d42:	1c44      	adds	r4, r0, #1
}
   13d44:	4620      	mov	r0, r4
   13d46:	bd10      	pop	{r4, pc}

00013d48 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   13d48:	8802      	ldrh	r2, [r0, #0]
   13d4a:	8843      	ldrh	r3, [r0, #2]
   13d4c:	429a      	cmp	r2, r3
{
   13d4e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   13d50:	d818      	bhi.n	13d84 <bt_le_conn_params_valid+0x3c>
   13d52:	2a05      	cmp	r2, #5
   13d54:	d916      	bls.n	13d84 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   13d56:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13d5a:	d813      	bhi.n	13d84 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   13d5c:	8884      	ldrh	r4, [r0, #4]
   13d5e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   13d62:	d20f      	bcs.n	13d84 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   13d64:	88c1      	ldrh	r1, [r0, #6]
   13d66:	f1a1 020a 	sub.w	r2, r1, #10
   13d6a:	b292      	uxth	r2, r2
   13d6c:	f640 4076 	movw	r0, #3190	; 0xc76
   13d70:	4282      	cmp	r2, r0
   13d72:	d807      	bhi.n	13d84 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   13d74:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   13d78:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   13d7c:	bf34      	ite	cc
   13d7e:	2001      	movcc	r0, #1
   13d80:	2000      	movcs	r0, #0
}
   13d82:	bd10      	pop	{r4, pc}
		return false;
   13d84:	2000      	movs	r0, #0
   13d86:	e7fc      	b.n	13d82 <bt_le_conn_params_valid+0x3a>

00013d88 <update_pending_id>:
	if (keys->flags & BT_KEYS_ID_PENDING_ADD) {
   13d88:	7a43      	ldrb	r3, [r0, #9]
   13d8a:	0759      	lsls	r1, r3, #29
   13d8c:	d504      	bpl.n	13d98 <update_pending_id+0x10>
		keys->flags &= ~BT_KEYS_ID_PENDING_ADD;
   13d8e:	f023 0304 	bic.w	r3, r3, #4
   13d92:	7243      	strb	r3, [r0, #9]
		bt_id_add(keys);
   13d94:	f7f2 bafa 	b.w	638c <bt_id_add>
	if (keys->flags & BT_KEYS_ID_PENDING_DEL) {
   13d98:	0719      	lsls	r1, r3, #28
   13d9a:	d504      	bpl.n	13da6 <update_pending_id+0x1e>
		keys->flags &= ~BT_KEYS_ID_PENDING_DEL;
   13d9c:	f023 0308 	bic.w	r3, r3, #8
   13da0:	7243      	strb	r3, [r0, #9]
		bt_id_del(keys);
   13da2:	f7f2 bb75 	b.w	6490 <bt_id_del>
}
   13da6:	4770      	bx	lr

00013da8 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   13da8:	2301      	movs	r3, #1
{
   13daa:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   13dac:	2106      	movs	r1, #6
{
   13dae:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   13db0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   13db4:	f001 fe3e 	bl	15a34 <bt_rand>
	if (err) {
   13db8:	b918      	cbnz	r0, 13dc2 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   13dba:	79a3      	ldrb	r3, [r4, #6]
   13dbc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   13dc0:	71a3      	strb	r3, [r4, #6]
}
   13dc2:	bd10      	pop	{r4, pc}

00013dc4 <bt_send>:
		return bt_hci_ecc_send(buf);
   13dc4:	f7f1 bdd8 	b.w	5978 <bt_hci_ecc_send>

00013dc8 <bt_addr_le_is_bonded>:
{
   13dc8:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   13dca:	f7f5 fbcd 	bl	9568 <bt_keys_find_addr>
		return keys && keys->keys;
   13dce:	b118      	cbz	r0, 13dd8 <bt_addr_le_is_bonded+0x10>
   13dd0:	8940      	ldrh	r0, [r0, #10]
   13dd2:	3000      	adds	r0, #0
   13dd4:	bf18      	it	ne
   13dd6:	2001      	movne	r0, #1
}
   13dd8:	bd08      	pop	{r3, pc}

00013dda <bt_le_adv_start>:
{
   13dda:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   13ddc:	7844      	ldrb	r4, [r0, #1]
   13dde:	f014 0410 	ands.w	r4, r4, #16
   13de2:	d106      	bne.n	13df2 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   13de4:	9401      	str	r4, [sp, #4]
   13de6:	9c04      	ldr	r4, [sp, #16]
   13de8:	9400      	str	r4, [sp, #0]
   13dea:	f7f2 fd89 	bl	6900 <bt_le_adv_start_internal>
}
   13dee:	b002      	add	sp, #8
   13df0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   13df2:	f06f 0015 	mvn.w	r0, #21
   13df6:	e7fa      	b.n	13dee <bt_le_adv_start+0x14>

00013df8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13df8:	f3bf 8f5b 	dmb	ish
   13dfc:	6800      	ldr	r0, [r0, #0]
   13dfe:	f3bf 8f5b 	dmb	ish
}
   13e02:	4770      	bx	lr

00013e04 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   13e04:	89c3      	ldrh	r3, [r0, #14]
{
   13e06:	b510      	push	{r4, lr}
   13e08:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   13e0a:	b12b      	cbz	r3, 13e18 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   13e0c:	6900      	ldr	r0, [r0, #16]
   13e0e:	f7fc f8ab 	bl	ff68 <net_buf_unref>
	conn->rx = NULL;
   13e12:	2300      	movs	r3, #0
   13e14:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   13e16:	81e3      	strh	r3, [r4, #14]
}
   13e18:	bd10      	pop	{r4, pc}

00013e1a <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13e1a:	f3bf 8f5b 	dmb	ish
   13e1e:	e850 3f00 	ldrex	r3, [r0]
   13e22:	1e5a      	subs	r2, r3, #1
   13e24:	e840 2100 	strex	r1, r2, [r0]
   13e28:	2900      	cmp	r1, #0
   13e2a:	d1f8      	bne.n	13e1e <atomic_dec+0x4>
   13e2c:	f3bf 8f5b 	dmb	ish
}
   13e30:	4618      	mov	r0, r3
   13e32:	4770      	bx	lr

00013e34 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13e34:	f3bf 8f5b 	dmb	ish
   13e38:	e850 3f00 	ldrex	r3, [r0]
   13e3c:	1c5a      	adds	r2, r3, #1
   13e3e:	e840 2100 	strex	r1, r2, [r0]
   13e42:	2900      	cmp	r1, #0
   13e44:	d1f8      	bne.n	13e38 <atomic_inc+0x4>
   13e46:	f3bf 8f5b 	dmb	ish
}
   13e4a:	4618      	mov	r0, r3
   13e4c:	4770      	bx	lr

00013e4e <tx_notify_cb>:
{
   13e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_ref(tx->conn);
   13e52:	f850 6c04 	ldr.w	r6, [r0, #-4]
	atomic_inc(&conn->ref);
   13e56:	f106 0544 	add.w	r5, r6, #68	; 0x44
{
   13e5a:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   13e5c:	4628      	mov	r0, r5
   13e5e:	f7ff ffe9 	bl	13e34 <atomic_inc>
	data = tx->data;
   13e62:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
	tx_free(tx);
   13e66:	f1a4 0008 	sub.w	r0, r4, #8
   13e6a:	f7f2 ff83 	bl	6d74 <tx_free>
	data.cb(conn, data.user_data);
   13e6e:	4630      	mov	r0, r6
   13e70:	4641      	mov	r1, r8
   13e72:	47b8      	blx	r7
	atomic_dec(&conn->ref);
   13e74:	4628      	mov	r0, r5
}
   13e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_dec(&conn->ref);
   13e7a:	f7ff bfce 	b.w	13e1a <atomic_dec>

00013e7e <bt_conn_recv>:
	switch (flags) {
   13e7e:	2a01      	cmp	r2, #1
{
   13e80:	b570      	push	{r4, r5, r6, lr}
   13e82:	4605      	mov	r5, r0
   13e84:	460c      	mov	r4, r1
	switch (flags) {
   13e86:	d00f      	beq.n	13ea8 <bt_conn_recv+0x2a>
   13e88:	2a02      	cmp	r2, #2
   13e8a:	d110      	bne.n	13eae <bt_conn_recv+0x30>
		len = sys_le16_to_cpu(hdr->len);
   13e8c:	688b      	ldr	r3, [r1, #8]
   13e8e:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
   13e90:	89c3      	ldrh	r3, [r0, #14]
   13e92:	b10b      	cbz	r3, 13e98 <bt_conn_recv+0x1a>
			bt_conn_reset_rx_state(conn);
   13e94:	f7ff ffb6 	bl	13e04 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
   13e98:	89a3      	ldrh	r3, [r4, #12]
   13e9a:	1af3      	subs	r3, r6, r3
   13e9c:	3304      	adds	r3, #4
   13e9e:	b29b      	uxth	r3, r3
   13ea0:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
   13ea2:	b33b      	cbz	r3, 13ef4 <bt_conn_recv+0x76>
			conn->rx = buf;
   13ea4:	612c      	str	r4, [r5, #16]
}
   13ea6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
   13ea8:	89c3      	ldrh	r3, [r0, #14]
   13eaa:	b93b      	cbnz	r3, 13ebc <bt_conn_recv+0x3e>
			bt_conn_reset_rx_state(conn);
   13eac:	4628      	mov	r0, r5
		bt_conn_reset_rx_state(conn);
   13eae:	f7ff ffa9 	bl	13e04 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   13eb2:	4620      	mov	r0, r4
}
   13eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   13eb8:	f7fc b856 	b.w	ff68 <net_buf_unref>
		if (buf->len > conn->rx_len) {
   13ebc:	898e      	ldrh	r6, [r1, #12]
   13ebe:	42b3      	cmp	r3, r6
   13ec0:	d3f4      	bcc.n	13eac <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   13ec2:	6900      	ldr	r0, [r0, #16]
   13ec4:	3008      	adds	r0, #8
   13ec6:	f002 fa90 	bl	163ea <net_buf_simple_tailroom>
   13eca:	4286      	cmp	r6, r0
   13ecc:	d8ee      	bhi.n	13eac <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   13ece:	6928      	ldr	r0, [r5, #16]
   13ed0:	89a2      	ldrh	r2, [r4, #12]
   13ed2:	68a1      	ldr	r1, [r4, #8]
   13ed4:	3008      	adds	r0, #8
   13ed6:	f002 fa53 	bl	16380 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
   13eda:	89eb      	ldrh	r3, [r5, #14]
   13edc:	89a2      	ldrh	r2, [r4, #12]
   13ede:	1a9b      	subs	r3, r3, r2
   13ee0:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
   13ee2:	4620      	mov	r0, r4
   13ee4:	f7fc f840 	bl	ff68 <net_buf_unref>
		if (conn->rx_len) {
   13ee8:	89eb      	ldrh	r3, [r5, #14]
   13eea:	2b00      	cmp	r3, #0
   13eec:	d1db      	bne.n	13ea6 <bt_conn_recv+0x28>
		buf = conn->rx;
   13eee:	692c      	ldr	r4, [r5, #16]
		conn->rx_len = 0U;
   13ef0:	81eb      	strh	r3, [r5, #14]
		conn->rx = NULL;
   13ef2:	612b      	str	r3, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   13ef4:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
   13ef6:	89a2      	ldrh	r2, [r4, #12]
   13ef8:	881b      	ldrh	r3, [r3, #0]
   13efa:	3304      	adds	r3, #4
   13efc:	4293      	cmp	r3, r2
   13efe:	d1d8      	bne.n	13eb2 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
   13f00:	4621      	mov	r1, r4
   13f02:	4628      	mov	r0, r5
}
   13f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   13f08:	f7f3 bc5a 	b.w	77c0 <bt_l2cap_recv>

00013f0c <bt_conn_send_cb>:
{
   13f0c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13f0e:	7b45      	ldrb	r5, [r0, #13]
   13f10:	2d04      	cmp	r5, #4
   13f12:	d005      	beq.n	13f20 <bt_conn_send_cb+0x14>
		net_buf_unref(buf);
   13f14:	4608      	mov	r0, r1
   13f16:	f7fc f827 	bl	ff68 <net_buf_unref>
		return -ENOTCONN;
   13f1a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   13f1e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&conn->tx_queue, buf);
   13f20:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->user_data = user_data;
   13f22:	e9c1 2305 	strd	r2, r3, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
   13f26:	f002 fa14 	bl	16352 <net_buf_put>
	return 0;
   13f2a:	2000      	movs	r0, #0
   13f2c:	e7f7      	b.n	13f1e <bt_conn_send_cb+0x12>

00013f2e <conn_cleanup>:
{
   13f2e:	b538      	push	{r3, r4, r5, lr}
   13f30:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13f32:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   13f36:	2100      	movs	r1, #0
   13f38:	4628      	mov	r0, r5
   13f3a:	f002 f9ed 	bl	16318 <net_buf_get>
   13f3e:	b958      	cbnz	r0, 13f58 <conn_cleanup+0x2a>
	bt_conn_notify_tx(conn);
   13f40:	4620      	mov	r0, r4
   13f42:	f7f2 ffb5 	bl	6eb0 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
   13f46:	4620      	mov	r0, r4
   13f48:	f7ff ff5c 	bl	13e04 <bt_conn_reset_rx_state>
	atomic_dec(&conn->ref);
   13f4c:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
   13f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
   13f54:	f7ff bf61 	b.w	13e1a <atomic_dec>
		net_buf_unref(buf);
   13f58:	f7fc f806 	bl	ff68 <net_buf_unref>
   13f5c:	e7eb      	b.n	13f36 <conn_cleanup+0x8>

00013f5e <bt_conn_addr_le_cmp>:
{
   13f5e:	b538      	push	{r3, r4, r5, lr}
   13f60:	460d      	mov	r5, r1
   13f62:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   13f64:	f100 0148 	add.w	r1, r0, #72	; 0x48
   13f68:	2207      	movs	r2, #7
   13f6a:	4628      	mov	r0, r5
   13f6c:	f7ff fa6a 	bl	13444 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   13f70:	b160      	cbz	r0, 13f8c <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   13f72:	78e3      	ldrb	r3, [r4, #3]
   13f74:	2207      	movs	r2, #7
   13f76:	b933      	cbnz	r3, 13f86 <bt_conn_addr_le_cmp+0x28>
   13f78:	f104 0156 	add.w	r1, r4, #86	; 0x56
   13f7c:	4628      	mov	r0, r5
}
   13f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13f82:	f7ff ba5f 	b.w	13444 <memcmp>
   13f86:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   13f8a:	e7f7      	b.n	13f7c <bt_conn_addr_le_cmp+0x1e>
   13f8c:	bd38      	pop	{r3, r4, r5, pc}

00013f8e <bt_conn_ref>:
{
   13f8e:	b510      	push	{r4, lr}
   13f90:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   13f92:	3044      	adds	r0, #68	; 0x44
   13f94:	f7ff ff4e 	bl	13e34 <atomic_inc>
}
   13f98:	4620      	mov	r0, r4
   13f9a:	bd10      	pop	{r4, pc}

00013f9c <bt_conn_unref>:
	atomic_dec(&conn->ref);
   13f9c:	3044      	adds	r0, #68	; 0x44
   13f9e:	f7ff bf3c 	b.w	13e1a <atomic_dec>

00013fa2 <bt_conn_get_dst>:
}
   13fa2:	3048      	adds	r0, #72	; 0x48
   13fa4:	4770      	bx	lr

00013fa6 <bt_conn_disconnect>:
	switch (conn->state) {
   13fa6:	7b43      	ldrb	r3, [r0, #13]
   13fa8:	3b01      	subs	r3, #1
{
   13faa:	b570      	push	{r4, r5, r6, lr}
   13fac:	4604      	mov	r4, r0
   13fae:	460e      	mov	r6, r1
	switch (conn->state) {
   13fb0:	2b04      	cmp	r3, #4
   13fb2:	d804      	bhi.n	13fbe <bt_conn_disconnect+0x18>
   13fb4:	e8df f003 	tbb	[pc, r3]
   13fb8:	150b0d07 	.word	0x150b0d07
   13fbc:	0b          	.byte	0x0b
   13fbd:	00          	.byte	0x00
		return -ENOTCONN;
   13fbe:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   13fc2:	4628      	mov	r0, r5
   13fc4:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
   13fc6:	7321      	strb	r1, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13fc8:	2100      	movs	r1, #0
   13fca:	f7f3 f905 	bl	71d8 <bt_conn_set_state>
		return 0;
   13fce:	2500      	movs	r5, #0
   13fd0:	e7f7      	b.n	13fc2 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   13fd2:	7321      	strb	r1, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13fd4:	2100      	movs	r1, #0
   13fd6:	f7f3 f8ff 	bl	71d8 <bt_conn_set_state>
}
   13fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
   13fde:	f7f2 bdb3 	b.w	6b48 <bt_le_adv_stop>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   13fe2:	2103      	movs	r1, #3
   13fe4:	f240 4006 	movw	r0, #1030	; 0x406
   13fe8:	f7f1 fee0 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   13fec:	4605      	mov	r5, r0
   13fee:	b198      	cbz	r0, 14018 <bt_conn_disconnect+0x72>
	disconn = net_buf_add(buf, sizeof(*disconn));
   13ff0:	2103      	movs	r1, #3
   13ff2:	3008      	adds	r0, #8
   13ff4:	f002 f9be 	bl	16374 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
   13ff8:	8823      	ldrh	r3, [r4, #0]
   13ffa:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
   13ffc:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   13ffe:	4629      	mov	r1, r5
   14000:	f240 4006 	movw	r0, #1030	; 0x406
   14004:	f7f1 fef2 	bl	5dec <bt_hci_cmd_send>
	if (err) {
   14008:	4605      	mov	r5, r0
   1400a:	2800      	cmp	r0, #0
   1400c:	d1d9      	bne.n	13fc2 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1400e:	2105      	movs	r1, #5
   14010:	4620      	mov	r0, r4
   14012:	f7f3 f8e1 	bl	71d8 <bt_conn_set_state>
   14016:	e7d4      	b.n	13fc2 <bt_conn_disconnect+0x1c>
		return -ENOBUFS;
   14018:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1401c:	e7d1      	b.n	13fc2 <bt_conn_disconnect+0x1c>

0001401e <bt_conn_le_conn_update>:
{
   1401e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14020:	4607      	mov	r7, r0
   14022:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   14024:	f242 0013 	movw	r0, #8211	; 0x2013
   14028:	210e      	movs	r1, #14
   1402a:	f7f1 febf 	bl	5dac <bt_hci_cmd_create>
	if (!buf) {
   1402e:	4606      	mov	r6, r0
   14030:	b1c8      	cbz	r0, 14066 <bt_conn_le_conn_update+0x48>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   14032:	210e      	movs	r1, #14
   14034:	3008      	adds	r0, #8
   14036:	f002 f99d 	bl	16374 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1403a:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1403c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1403e:	220e      	movs	r2, #14
   14040:	f7ff fa3d 	bl	134be <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   14044:	883b      	ldrh	r3, [r7, #0]
   14046:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   14048:	882b      	ldrh	r3, [r5, #0]
   1404a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1404c:	886b      	ldrh	r3, [r5, #2]
   1404e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   14050:	88ab      	ldrh	r3, [r5, #4]
   14052:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   14054:	88eb      	ldrh	r3, [r5, #6]
   14056:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   14058:	4631      	mov	r1, r6
   1405a:	f242 0013 	movw	r0, #8211	; 0x2013
}
   1405e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   14062:	f7f1 bec3 	b.w	5dec <bt_hci_cmd_send>
}
   14066:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001406c <l2cap_connected>:
}
   1406c:	4770      	bx	lr

0001406e <l2cap_rx_process>:
{
   1406e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14070:	4605      	mov	r5, r0
	struct bt_l2cap_chan *chan = CHAN_RX(work);
   14072:	f1a0 0734 	sub.w	r7, r0, #52	; 0x34
	while ((buf = net_buf_get(&chan->rx_queue, K_NO_WAIT))) {
   14076:	f100 060c 	add.w	r6, r0, #12
   1407a:	2100      	movs	r1, #0
   1407c:	4630      	mov	r0, r6
   1407e:	f002 f94b 	bl	16318 <net_buf_get>
   14082:	4604      	mov	r4, r0
   14084:	b900      	cbnz	r0, 14088 <l2cap_rx_process+0x1a>
}
   14086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chan->ops->recv(chan, buf);
   14088:	f855 3c30 	ldr.w	r3, [r5, #-48]
   1408c:	4621      	mov	r1, r4
   1408e:	691b      	ldr	r3, [r3, #16]
   14090:	4638      	mov	r0, r7
   14092:	4798      	blx	r3
		net_buf_unref(buf);
   14094:	4620      	mov	r0, r4
   14096:	f7fb ff67 	bl	ff68 <net_buf_unref>
   1409a:	e7ee      	b.n	1407a <l2cap_rx_process+0xc>

0001409c <l2cap_disconnected>:
   1409c:	4770      	bx	lr

0001409e <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1409e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   140a0:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   140a2:	b17b      	cbz	r3, 140c4 <bt_l2cap_chan_remove+0x26>
   140a4:	3b08      	subs	r3, #8
   140a6:	2400      	movs	r4, #0
   140a8:	b163      	cbz	r3, 140c4 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   140aa:	428b      	cmp	r3, r1
   140ac:	f103 0508 	add.w	r5, r3, #8
   140b0:	689a      	ldr	r2, [r3, #8]
   140b2:	d10e      	bne.n	140d2 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   140b4:	b93c      	cbnz	r4, 140c6 <bt_l2cap_chan_remove+0x28>
   140b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
	list->head = node;
   140b8:	63c2      	str	r2, [r0, #60]	; 0x3c
Z_GENLIST_REMOVE(slist, snode)
   140ba:	428d      	cmp	r5, r1
   140bc:	d100      	bne.n	140c0 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   140be:	6402      	str	r2, [r0, #64]	; 0x40
	parent->next = child;
   140c0:	2200      	movs	r2, #0
   140c2:	609a      	str	r2, [r3, #8]
}
   140c4:	bd30      	pop	{r4, r5, pc}
   140c6:	6022      	str	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   140c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   140ca:	4295      	cmp	r5, r2
	list->tail = node;
   140cc:	bf08      	it	eq
   140ce:	6404      	streq	r4, [r0, #64]	; 0x40
   140d0:	e7f6      	b.n	140c0 <bt_l2cap_chan_remove+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   140d2:	2a00      	cmp	r2, #0
   140d4:	d0f6      	beq.n	140c4 <bt_l2cap_chan_remove+0x26>
   140d6:	f1a2 0308 	sub.w	r3, r2, #8
   140da:	462c      	mov	r4, r5
   140dc:	e7e4      	b.n	140a8 <bt_l2cap_chan_remove+0xa>

000140de <bt_l2cap_chan_del>:
	if (!chan->conn) {
   140de:	6803      	ldr	r3, [r0, #0]
{
   140e0:	b570      	push	{r4, r5, r6, lr}
   140e2:	4604      	mov	r4, r0
	if (!chan->conn) {
   140e4:	b12b      	cbz	r3, 140f2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   140e6:	6843      	ldr	r3, [r0, #4]
   140e8:	685b      	ldr	r3, [r3, #4]
   140ea:	b103      	cbz	r3, 140ee <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   140ec:	4798      	blx	r3
	chan->conn = NULL;
   140ee:	2300      	movs	r3, #0
   140f0:	6023      	str	r3, [r4, #0]
	while ((buf = net_buf_get(&chan->rx_queue, K_NO_WAIT))) {
   140f2:	f104 0540 	add.w	r5, r4, #64	; 0x40
   140f6:	2100      	movs	r1, #0
   140f8:	4628      	mov	r0, r5
   140fa:	f002 f90d 	bl	16318 <net_buf_get>
   140fe:	b928      	cbnz	r0, 1410c <bt_l2cap_chan_del+0x2e>
	if (chan->destroy) {
   14100:	68e3      	ldr	r3, [r4, #12]
   14102:	b133      	cbz	r3, 14112 <bt_l2cap_chan_del+0x34>
		chan->destroy(chan);
   14104:	4620      	mov	r0, r4
}
   14106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->destroy(chan);
   1410a:	4718      	bx	r3
		net_buf_unref(buf);
   1410c:	f7fb ff2c 	bl	ff68 <net_buf_unref>
   14110:	e7f1      	b.n	140f6 <bt_l2cap_chan_del+0x18>
}
   14112:	bd70      	pop	{r4, r5, r6, pc}

00014114 <l2cap_rtx_timeout>:
{
   14114:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
   14116:	f1a0 0410 	sub.w	r4, r0, #16
   1411a:	4621      	mov	r1, r4
   1411c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   14120:	f7ff ffbd 	bl	1409e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   14124:	4620      	mov	r0, r4
}
   14126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   1412a:	f7ff bfd8 	b.w	140de <bt_l2cap_chan_del>

0001412e <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1412e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   14130:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   14132:	b193      	cbz	r3, 1415a <bt_l2cap_disconnected+0x2c>
   14134:	f1b3 0008 	subs.w	r0, r3, #8
   14138:	d00f      	beq.n	1415a <bt_l2cap_disconnected+0x2c>
	return node->next;
   1413a:	681c      	ldr	r4, [r3, #0]
   1413c:	b14c      	cbz	r4, 14152 <bt_l2cap_disconnected+0x24>
   1413e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   14140:	f7ff ffcd 	bl	140de <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   14144:	b14c      	cbz	r4, 1415a <bt_l2cap_disconnected+0x2c>
   14146:	68a3      	ldr	r3, [r4, #8]
   14148:	b103      	cbz	r3, 1414c <bt_l2cap_disconnected+0x1e>
   1414a:	3b08      	subs	r3, #8
{
   1414c:	4620      	mov	r0, r4
   1414e:	461c      	mov	r4, r3
   14150:	e7f6      	b.n	14140 <bt_l2cap_disconnected+0x12>
}
   14152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
   14156:	f7ff bfc2 	b.w	140de <bt_l2cap_chan_del>
}
   1415a:	bd10      	pop	{r4, pc}

0001415c <bt_l2cap_encrypt_change>:
{
   1415c:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1415e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
   14160:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14162:	b10c      	cbz	r4, 14168 <bt_l2cap_encrypt_change+0xc>
   14164:	3c08      	subs	r4, #8
   14166:	b904      	cbnz	r4, 1416a <bt_l2cap_encrypt_change+0xe>
}
   14168:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
   1416a:	6863      	ldr	r3, [r4, #4]
   1416c:	689b      	ldr	r3, [r3, #8]
   1416e:	b113      	cbz	r3, 14176 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   14170:	4629      	mov	r1, r5
   14172:	4620      	mov	r0, r4
   14174:	4798      	blx	r3
   14176:	68a4      	ldr	r4, [r4, #8]
   14178:	e7f3      	b.n	14162 <bt_l2cap_encrypt_change+0x6>

0001417a <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1417a:	3104      	adds	r1, #4
   1417c:	f7f3 b9ba 	b.w	74f4 <bt_conn_create_pdu>

00014180 <bt_l2cap_send_cb>:
{
   14180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14184:	4614      	mov	r4, r2
   14186:	4605      	mov	r5, r0
   14188:	4688      	mov	r8, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1418a:	f102 0008 	add.w	r0, r2, #8
   1418e:	2104      	movs	r1, #4
{
   14190:	461e      	mov	r6, r3
   14192:	9f06      	ldr	r7, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   14194:	f002 f905 	bl	163a2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14198:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1419a:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1419e:	3904      	subs	r1, #4
   141a0:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb, user_data);
   141a2:	463b      	mov	r3, r7
   141a4:	4632      	mov	r2, r6
   141a6:	4621      	mov	r1, r4
   141a8:	4628      	mov	r0, r5
}
   141aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_send_cb(conn, buf, cb, user_data);
   141ae:	f7ff bead 	b.w	13f0c <bt_conn_send_cb>

000141b2 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   141b2:	898b      	ldrh	r3, [r1, #12]
   141b4:	2b03      	cmp	r3, #3
{
   141b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   141b8:	4605      	mov	r5, r0
   141ba:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   141bc:	d92e      	bls.n	1421c <l2cap_recv+0x6a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   141be:	2104      	movs	r1, #4
   141c0:	f104 0008 	add.w	r0, r4, #8
   141c4:	f002 f8fd 	bl	163c2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   141c8:	89a3      	ldrh	r3, [r4, #12]
   141ca:	8842      	ldrh	r2, [r0, #2]
   141cc:	429a      	cmp	r2, r3
   141ce:	d125      	bne.n	1421c <l2cap_recv+0x6a>
	if (!hdr->ident) {
   141d0:	7844      	ldrb	r4, [r0, #1]
   141d2:	b31c      	cbz	r4, 1421c <l2cap_recv+0x6a>
	switch (hdr->code) {
   141d4:	7803      	ldrb	r3, [r0, #0]
   141d6:	2b01      	cmp	r3, #1
   141d8:	d020      	beq.n	1421c <l2cap_recv+0x6a>
   141da:	2b13      	cmp	r3, #19
   141dc:	d01e      	beq.n	1421c <l2cap_recv+0x6a>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   141de:	2104      	movs	r1, #4
   141e0:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
   141e2:	682f      	ldr	r7, [r5, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   141e4:	f7f3 f986 	bl	74f4 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   141e8:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   141ec:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   141ee:	2104      	movs	r1, #4
   141f0:	4630      	mov	r0, r6
   141f2:	f002 f8bf 	bl	16374 <net_buf_simple_add>
	hdr->code = code;
   141f6:	2301      	movs	r3, #1
	hdr->ident = ident;
   141f8:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   141fa:	2102      	movs	r1, #2
   141fc:	2400      	movs	r4, #0
	hdr->code = code;
   141fe:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
   14200:	7081      	strb	r1, [r0, #2]
   14202:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
   14204:	4630      	mov	r0, r6
   14206:	f002 f8b5 	bl	16374 <net_buf_simple_add>
   1420a:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   1420c:	7004      	strb	r4, [r0, #0]
   1420e:	7044      	strb	r4, [r0, #1]
   14210:	462a      	mov	r2, r5
   14212:	9400      	str	r4, [sp, #0]
   14214:	2105      	movs	r1, #5
   14216:	4638      	mov	r0, r7
   14218:	f7ff ffb2 	bl	14180 <bt_l2cap_send_cb>
}
   1421c:	2000      	movs	r0, #0
   1421e:	b003      	add	sp, #12
   14220:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014222 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14222:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   14224:	b108      	cbz	r0, 1422a <bt_l2cap_le_lookup_tx_cid+0x8>
   14226:	3808      	subs	r0, #8
   14228:	b900      	cbnz	r0, 1422c <bt_l2cap_le_lookup_tx_cid+0xa>
}
   1422a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1422c:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   14230:	428b      	cmp	r3, r1
   14232:	d0fa      	beq.n	1422a <bt_l2cap_le_lookup_tx_cid+0x8>
   14234:	6880      	ldr	r0, [r0, #8]
   14236:	e7f5      	b.n	14224 <bt_l2cap_le_lookup_tx_cid+0x2>

00014238 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14238:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1423a:	b108      	cbz	r0, 14240 <bt_l2cap_le_lookup_rx_cid+0x8>
   1423c:	3808      	subs	r0, #8
   1423e:	b900      	cbnz	r0, 14242 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   14240:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   14242:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   14246:	428b      	cmp	r3, r1
   14248:	d0fa      	beq.n	14240 <bt_l2cap_le_lookup_rx_cid+0x8>
   1424a:	6880      	ldr	r0, [r0, #8]
   1424c:	e7f5      	b.n	1423a <bt_l2cap_le_lookup_rx_cid+0x2>

0001424e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1424e:	4770      	bx	lr

00014250 <att_prepare_write_req>:
}
   14250:	2006      	movs	r0, #6
   14252:	4770      	bx	lr

00014254 <att_req_destroy>:
{
   14254:	b510      	push	{r4, lr}
   14256:	4604      	mov	r4, r0
	if (req->buf) {
   14258:	6900      	ldr	r0, [r0, #16]
   1425a:	b108      	cbz	r0, 14260 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1425c:	f7fb fe84 	bl	ff68 <net_buf_unref>
	if (req->destroy) {
   14260:	68a3      	ldr	r3, [r4, #8]
   14262:	b10b      	cbz	r3, 14268 <att_req_destroy+0x14>
		req->destroy(req);
   14264:	4620      	mov	r0, r4
   14266:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
   14268:	4620      	mov	r0, r4
   1426a:	2218      	movs	r2, #24
   1426c:	2100      	movs	r1, #0
}
   1426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
   14272:	f7ff b924 	b.w	134be <memset>

00014276 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   14276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   14278:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1427c:	2300      	movs	r3, #0
   1427e:	9300      	str	r3, [sp, #0]
   14280:	461a      	mov	r2, r3
   14282:	f7f4 f8c7 	bl	8414 <bt_gatt_foreach_attr_type>
				  user_data);
}
   14286:	b005      	add	sp, #20
   14288:	f85d fb04 	ldr.w	pc, [sp], #4

0001428c <read_group_cb>:
{
   1428c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   14290:	680c      	ldr	r4, [r1, #0]
{
   14292:	4606      	mov	r6, r0
   14294:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14296:	f04f 0800 	mov.w	r8, #0
   1429a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1429e:	a902      	add	r1, sp, #8
   142a0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   142a2:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   142a4:	f88d 8008 	strb.w	r8, [sp, #8]
   142a8:	f8ad 300a 	strh.w	r3, [sp, #10]
   142ac:	f7ff f9a6 	bl	135fc <bt_uuid_cmp>
   142b0:	b198      	cbz	r0, 142da <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   142b2:	f642 0301 	movw	r3, #10241	; 0x2801
   142b6:	a903      	add	r1, sp, #12
   142b8:	6830      	ldr	r0, [r6, #0]
   142ba:	f88d 800c 	strb.w	r8, [sp, #12]
   142be:	f8ad 300e 	strh.w	r3, [sp, #14]
   142c2:	f7ff f99b 	bl	135fc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   142c6:	b140      	cbz	r0, 142da <read_group_cb+0x4e>
		if (data->group &&
   142c8:	692b      	ldr	r3, [r5, #16]
   142ca:	b123      	cbz	r3, 142d6 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   142cc:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   142ce:	8859      	ldrh	r1, [r3, #2]
   142d0:	4291      	cmp	r1, r2
   142d2:	d200      	bcs.n	142d6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   142d4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   142d6:	2001      	movs	r0, #1
   142d8:	e012      	b.n	14300 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   142da:	6869      	ldr	r1, [r5, #4]
   142dc:	6830      	ldr	r0, [r6, #0]
   142de:	f7ff f98d 	bl	135fc <bt_uuid_cmp>
   142e2:	b110      	cbz	r0, 142ea <read_group_cb+0x5e>
		data->group = NULL;
   142e4:	2300      	movs	r3, #0
   142e6:	612b      	str	r3, [r5, #16]
   142e8:	e7f5      	b.n	142d6 <read_group_cb+0x4a>
	if (data->rsp->len &&
   142ea:	68eb      	ldr	r3, [r5, #12]
   142ec:	68a8      	ldr	r0, [r5, #8]
   142ee:	781a      	ldrb	r2, [r3, #0]
   142f0:	b14a      	cbz	r2, 14306 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   142f2:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   142f6:	8981      	ldrh	r1, [r0, #12]
   142f8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   142fa:	4293      	cmp	r3, r2
   142fc:	da03      	bge.n	14306 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   142fe:	2000      	movs	r0, #0
}
   14300:	b004      	add	sp, #16
   14302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14306:	2104      	movs	r1, #4
   14308:	3008      	adds	r0, #8
   1430a:	f002 f833 	bl	16374 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1430e:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14310:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14312:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14314:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14316:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   14318:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1431a:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   1431e:	6889      	ldr	r1, [r1, #8]
   14320:	2400      	movs	r4, #0
   14322:	1a9b      	subs	r3, r3, r2
   14324:	9400      	str	r4, [sp, #0]
   14326:	440a      	add	r2, r1
   14328:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1432c:	4631      	mov	r1, r6
   1432e:	b29b      	uxth	r3, r3
   14330:	4638      	mov	r0, r7
   14332:	47c0      	blx	r8
	if (read < 0) {
   14334:	1e01      	subs	r1, r0, #0
   14336:	dbe2      	blt.n	142fe <read_group_cb+0x72>
	if (!data->rsp->len) {
   14338:	68ee      	ldr	r6, [r5, #12]
   1433a:	68ab      	ldr	r3, [r5, #8]
   1433c:	7830      	ldrb	r0, [r6, #0]
   1433e:	1d0a      	adds	r2, r1, #4
   14340:	b928      	cbnz	r0, 1434e <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   14342:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   14344:	f103 0008 	add.w	r0, r3, #8
   14348:	f002 f814 	bl	16374 <net_buf_simple_add>
   1434c:	e7c3      	b.n	142d6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1434e:	4290      	cmp	r0, r2
   14350:	d0f8      	beq.n	14344 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   14352:	899a      	ldrh	r2, [r3, #12]
   14354:	3a04      	subs	r2, #4
   14356:	819a      	strh	r2, [r3, #12]
   14358:	e7d1      	b.n	142fe <read_group_cb+0x72>

0001435a <find_info_cb>:
	if (!data->rsp) {
   1435a:	688b      	ldr	r3, [r1, #8]
{
   1435c:	b570      	push	{r4, r5, r6, lr}
   1435e:	4605      	mov	r5, r0
   14360:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   14362:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   14364:	b963      	cbnz	r3, 14380 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14366:	6848      	ldr	r0, [r1, #4]
   14368:	2101      	movs	r1, #1
   1436a:	3008      	adds	r0, #8
   1436c:	f002 f802 	bl	16374 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   14370:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14372:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   14374:	781b      	ldrb	r3, [r3, #0]
   14376:	2b00      	cmp	r3, #0
   14378:	bf0c      	ite	eq
   1437a:	2301      	moveq	r3, #1
   1437c:	2302      	movne	r3, #2
   1437e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   14380:	68a3      	ldr	r3, [r4, #8]
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	2b01      	cmp	r3, #1
   14386:	d003      	beq.n	14390 <find_info_cb+0x36>
   14388:	2b02      	cmp	r3, #2
   1438a:	d01a      	beq.n	143c2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1438c:	2000      	movs	r0, #0
   1438e:	e017      	b.n	143c0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   14390:	682b      	ldr	r3, [r5, #0]
   14392:	781b      	ldrb	r3, [r3, #0]
   14394:	2b00      	cmp	r3, #0
   14396:	d1f9      	bne.n	1438c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   14398:	6860      	ldr	r0, [r4, #4]
   1439a:	2104      	movs	r1, #4
   1439c:	3008      	adds	r0, #8
   1439e:	f001 ffe9 	bl	16374 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   143a2:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   143a4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   143a6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   143a8:	682b      	ldr	r3, [r5, #0]
   143aa:	885b      	ldrh	r3, [r3, #2]
   143ac:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   143ae:	6863      	ldr	r3, [r4, #4]
   143b0:	f8b6 0072 	ldrh.w	r0, [r6, #114]	; 0x72
   143b4:	899b      	ldrh	r3, [r3, #12]
   143b6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   143b8:	2804      	cmp	r0, #4
   143ba:	bf94      	ite	ls
   143bc:	2000      	movls	r0, #0
   143be:	2001      	movhi	r0, #1
}
   143c0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   143c2:	682b      	ldr	r3, [r5, #0]
   143c4:	781b      	ldrb	r3, [r3, #0]
   143c6:	2b02      	cmp	r3, #2
   143c8:	d1e0      	bne.n	1438c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   143ca:	6860      	ldr	r0, [r4, #4]
   143cc:	2112      	movs	r1, #18
   143ce:	3008      	adds	r0, #8
   143d0:	f001 ffd0 	bl	16374 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   143d4:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   143d6:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   143d8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   143da:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   143dc:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   143e0:	3101      	adds	r1, #1
   143e2:	f7ff f83f 	bl	13464 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   143e6:	6863      	ldr	r3, [r4, #4]
   143e8:	f8b6 0072 	ldrh.w	r0, [r6, #114]	; 0x72
   143ec:	899b      	ldrh	r3, [r3, #12]
   143ee:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   143f0:	2812      	cmp	r0, #18
   143f2:	e7e2      	b.n	143ba <find_info_cb+0x60>

000143f4 <find_type_cb>:
{
   143f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   143f8:	680e      	ldr	r6, [r1, #0]
{
   143fa:	b088      	sub	sp, #32
   143fc:	4605      	mov	r5, r0
   143fe:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14400:	2700      	movs	r7, #0
   14402:	f642 0301 	movw	r3, #10241	; 0x2801
   14406:	a902      	add	r1, sp, #8
   14408:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1440a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1440e:	f88d 7008 	strb.w	r7, [sp, #8]
   14412:	f8ad 300a 	strh.w	r3, [sp, #10]
   14416:	f7ff f8f1 	bl	135fc <bt_uuid_cmp>
   1441a:	b928      	cbnz	r0, 14428 <find_type_cb+0x34>
		data->group = NULL;
   1441c:	2300      	movs	r3, #0
   1441e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   14420:	2001      	movs	r0, #1
}
   14422:	b008      	add	sp, #32
   14424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   14428:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1442c:	a903      	add	r1, sp, #12
   1442e:	6828      	ldr	r0, [r5, #0]
   14430:	f88d 700c 	strb.w	r7, [sp, #12]
   14434:	f8ad 300e 	strh.w	r3, [sp, #14]
   14438:	f7ff f8e0 	bl	135fc <bt_uuid_cmp>
   1443c:	b140      	cbz	r0, 14450 <find_type_cb+0x5c>
		if (data->group &&
   1443e:	68a3      	ldr	r3, [r4, #8]
   14440:	2b00      	cmp	r3, #0
   14442:	d0ed      	beq.n	14420 <find_type_cb+0x2c>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   14444:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   14446:	8859      	ldrh	r1, [r3, #2]
   14448:	4291      	cmp	r1, r2
   1444a:	d2e9      	bcs.n	14420 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1444c:	805a      	strh	r2, [r3, #2]
   1444e:	e7e7      	b.n	14420 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
   14450:	6862      	ldr	r2, [r4, #4]
   14452:	f8b6 3072 	ldrh.w	r3, [r6, #114]	; 0x72
   14456:	8992      	ldrh	r2, [r2, #12]
   14458:	1a9b      	subs	r3, r3, r2
   1445a:	2b03      	cmp	r3, #3
   1445c:	d9e1      	bls.n	14422 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1445e:	2310      	movs	r3, #16
   14460:	9000      	str	r0, [sp, #0]
   14462:	686e      	ldr	r6, [r5, #4]
   14464:	eb0d 0203 	add.w	r2, sp, r3
   14468:	4629      	mov	r1, r5
   1446a:	4640      	mov	r0, r8
   1446c:	47b0      	blx	r6
	if (read < 0) {
   1446e:	2800      	cmp	r0, #0
   14470:	dbd4      	blt.n	1441c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
   14472:	7c22      	ldrb	r2, [r4, #16]
   14474:	4282      	cmp	r2, r0
   14476:	d1d1      	bne.n	1441c <find_type_cb+0x28>
   14478:	a904      	add	r1, sp, #16
   1447a:	68e0      	ldr	r0, [r4, #12]
   1447c:	f7fe ffe2 	bl	13444 <memcmp>
   14480:	2800      	cmp	r0, #0
   14482:	d1cb      	bne.n	1441c <find_type_cb+0x28>
	data->err = 0x00;
   14484:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14486:	6860      	ldr	r0, [r4, #4]
   14488:	2104      	movs	r1, #4
   1448a:	3008      	adds	r0, #8
   1448c:	f001 ff72 	bl	16374 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14490:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14492:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14494:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   14496:	8043      	strh	r3, [r0, #2]
   14498:	e7c2      	b.n	14420 <find_type_cb+0x2c>

0001449a <check_perm>:
{
   1449a:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1449c:	07d4      	lsls	r4, r2, #31
   1449e:	7c8b      	ldrb	r3, [r1, #18]
   144a0:	d504      	bpl.n	144ac <check_perm+0x12>
   144a2:	f013 0f15 	tst.w	r3, #21
   144a6:	d018      	beq.n	144da <check_perm+0x40>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   144a8:	684c      	ldr	r4, [r1, #4]
   144aa:	b1b4      	cbz	r4, 144da <check_perm+0x40>
	if ((mask & BT_GATT_PERM_WRITE) &&
   144ac:	0794      	lsls	r4, r2, #30
   144ae:	d504      	bpl.n	144ba <check_perm+0x20>
   144b0:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   144b4:	d013      	beq.n	144de <check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   144b6:	6889      	ldr	r1, [r1, #8]
   144b8:	b189      	cbz	r1, 144de <check_perm+0x44>
	mask &= attr->perm;
   144ba:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   144bc:	f012 0f30 	tst.w	r2, #48	; 0x30
   144c0:	d002      	beq.n	144c8 <check_perm+0x2e>
		if (conn->sec_level < BT_SECURITY_HIGH) {
   144c2:	7a43      	ldrb	r3, [r0, #9]
   144c4:	2b02      	cmp	r3, #2
   144c6:	d90c      	bls.n	144e2 <check_perm+0x48>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   144c8:	f012 020c 	ands.w	r2, r2, #12
   144cc:	d00b      	beq.n	144e6 <check_perm+0x4c>
		if (!conn->encrypt) {
   144ce:	7ac3      	ldrb	r3, [r0, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   144d0:	2b00      	cmp	r3, #0
   144d2:	bf14      	ite	ne
   144d4:	2000      	movne	r0, #0
   144d6:	200f      	moveq	r0, #15
}
   144d8:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   144da:	2002      	movs	r0, #2
   144dc:	e7fc      	b.n	144d8 <check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   144de:	2003      	movs	r0, #3
   144e0:	e7fa      	b.n	144d8 <check_perm+0x3e>
			return BT_ATT_ERR_AUTHENTICATION;
   144e2:	2005      	movs	r0, #5
   144e4:	e7f8      	b.n	144d8 <check_perm+0x3e>
	return 0;
   144e6:	4610      	mov	r0, r2
   144e8:	e7f6      	b.n	144d8 <check_perm+0x3e>

000144ea <read_type_cb>:
{
   144ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   144ee:	680f      	ldr	r7, [r1, #0]
{
   144f0:	4605      	mov	r5, r0
   144f2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   144f4:	6800      	ldr	r0, [r0, #0]
   144f6:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   144f8:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   144fc:	f7ff f87e 	bl	135fc <bt_uuid_cmp>
   14500:	4680      	mov	r8, r0
   14502:	2800      	cmp	r0, #0
   14504:	d14c      	bne.n	145a0 <read_type_cb+0xb6>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14506:	2215      	movs	r2, #21
   14508:	4629      	mov	r1, r5
   1450a:	4648      	mov	r0, r9
   1450c:	f7ff ffc5 	bl	1449a <check_perm>
   14510:	4604      	mov	r4, r0
   14512:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   14514:	b148      	cbz	r0, 1452a <read_type_cb+0x40>
		if (data->rsp->len) {
   14516:	68f3      	ldr	r3, [r6, #12]
   14518:	781c      	ldrb	r4, [r3, #0]
   1451a:	b114      	cbz	r4, 14522 <read_type_cb+0x38>
			data->err = 0x00;
   1451c:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   14520:	4644      	mov	r4, r8
}
   14522:	4620      	mov	r0, r4
   14524:	b003      	add	sp, #12
   14526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1452a:	68b0      	ldr	r0, [r6, #8]
   1452c:	2102      	movs	r1, #2
   1452e:	3008      	adds	r0, #8
   14530:	f001 ff20 	bl	16374 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14534:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   14536:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14538:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1453a:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1453c:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1453e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
   14542:	6889      	ldr	r1, [r1, #8]
   14544:	9400      	str	r4, [sp, #0]
   14546:	1a9b      	subs	r3, r3, r2
   14548:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1454c:	440a      	add	r2, r1
   1454e:	b29b      	uxth	r3, r3
   14550:	4629      	mov	r1, r5
   14552:	4648      	mov	r0, r9
   14554:	47c0      	blx	r8
	if (read < 0) {
   14556:	1e01      	subs	r1, r0, #0
   14558:	da07      	bge.n	1456a <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
   1455a:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1455e:	bf26      	itte	cs
   14560:	4249      	negcs	r1, r1
   14562:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   14564:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   14566:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   14568:	e7db      	b.n	14522 <read_type_cb+0x38>
	if (!data->rsp->len) {
   1456a:	68f5      	ldr	r5, [r6, #12]
   1456c:	68b0      	ldr	r0, [r6, #8]
   1456e:	782a      	ldrb	r2, [r5, #0]
   14570:	1c8b      	adds	r3, r1, #2
   14572:	b97a      	cbnz	r2, 14594 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
   14574:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   14576:	3008      	adds	r0, #8
   14578:	f001 fefc 	bl	16374 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   1457c:	68b3      	ldr	r3, [r6, #8]
   1457e:	f8b7 4072 	ldrh.w	r4, [r7, #114]	; 0x72
   14582:	899b      	ldrh	r3, [r3, #12]
   14584:	1ae4      	subs	r4, r4, r3
   14586:	68f3      	ldr	r3, [r6, #12]
   14588:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1458a:	429c      	cmp	r4, r3
   1458c:	bfd4      	ite	le
   1458e:	2400      	movle	r4, #0
   14590:	2401      	movgt	r4, #1
   14592:	e7c6      	b.n	14522 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   14594:	429a      	cmp	r2, r3
   14596:	d0ee      	beq.n	14576 <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
   14598:	8983      	ldrh	r3, [r0, #12]
   1459a:	3b02      	subs	r3, #2
   1459c:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   1459e:	e7c0      	b.n	14522 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   145a0:	2401      	movs	r4, #1
   145a2:	e7be      	b.n	14522 <read_type_cb+0x38>

000145a4 <att_send>:
{
   145a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   145a6:	461f      	mov	r7, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   145a8:	688b      	ldr	r3, [r1, #8]
   145aa:	781b      	ldrb	r3, [r3, #0]
   145ac:	2bd2      	cmp	r3, #210	; 0xd2
{
   145ae:	4606      	mov	r6, r0
   145b0:	460c      	mov	r4, r1
   145b2:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   145b4:	d00d      	beq.n	145d2 <att_send+0x2e>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf),
   145b6:	b91d      	cbnz	r5, 145c0 <att_send+0x1c>
   145b8:	68a0      	ldr	r0, [r4, #8]
   145ba:	f7f3 f9c5 	bl	7948 <att_cb.isra.5>
   145be:	4605      	mov	r5, r0
   145c0:	4630      	mov	r0, r6
   145c2:	9700      	str	r7, [sp, #0]
   145c4:	462b      	mov	r3, r5
   145c6:	4622      	mov	r2, r4
   145c8:	2104      	movs	r1, #4
   145ca:	f7ff fdd9 	bl	14180 <bt_l2cap_send_cb>
	return 0;
   145ce:	2000      	movs	r0, #0
   145d0:	e003      	b.n	145da <att_send+0x36>
		err = bt_smp_sign(conn, buf);
   145d2:	f000 ff7b 	bl	154cc <bt_smp_sign>
		if (err) {
   145d6:	2800      	cmp	r0, #0
   145d8:	d0ed      	beq.n	145b6 <att_send+0x12>
}
   145da:	b003      	add	sp, #12
   145dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000145de <att_pdu_sent>:
{
   145de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   145e2:	2104      	movs	r1, #4
{
   145e4:	4680      	mov	r8, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   145e6:	f7ff fe1c 	bl	14222 <bt_l2cap_le_lookup_tx_cid>
   145ea:	4606      	mov	r6, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   145ec:	f100 07f4 	add.w	r7, r0, #244	; 0xf4
   145f0:	2100      	movs	r1, #0
   145f2:	4638      	mov	r0, r7
   145f4:	f001 fe90 	bl	16318 <net_buf_get>
   145f8:	4604      	mov	r4, r0
   145fa:	b928      	cbnz	r0, 14608 <att_pdu_sent+0x2a>
   145fc:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
}
   14600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14604:	f7fc be70 	b.w	112e8 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   14608:	f8d6 50b0 	ldr.w	r5, [r6, #176]	; 0xb0
   1460c:	b14d      	cbz	r5, 14622 <att_pdu_sent+0x44>
   1460e:	692b      	ldr	r3, [r5, #16]
   14610:	42a3      	cmp	r3, r4
   14612:	d106      	bne.n	14622 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   14614:	f104 0008 	add.w	r0, r4, #8
   14618:	f001 fee3 	bl	163e2 <net_buf_simple_headroom>
	state->len = buf->len;
   1461c:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1461e:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
   14620:	81eb      	strh	r3, [r5, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   14622:	2300      	movs	r3, #0
   14624:	461a      	mov	r2, r3
   14626:	4621      	mov	r1, r4
   14628:	4640      	mov	r0, r8
   1462a:	f7ff ffbb 	bl	145a4 <att_send>
   1462e:	b118      	cbz	r0, 14638 <att_pdu_sent+0x5a>
		net_buf_unref(buf);
   14630:	4620      	mov	r0, r4
   14632:	f7fb fc99 	bl	ff68 <net_buf_unref>
   14636:	e7db      	b.n	145f0 <att_pdu_sent+0x12>
}
   14638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001463c <uuid_create>:
	switch (buf->len) {
   1463c:	898a      	ldrh	r2, [r1, #12]
   1463e:	2a02      	cmp	r2, #2
{
   14640:	b510      	push	{r4, lr}
   14642:	4604      	mov	r4, r0
	switch (buf->len) {
   14644:	d003      	beq.n	1464e <uuid_create+0x12>
   14646:	2a10      	cmp	r2, #16
   14648:	d00a      	beq.n	14660 <uuid_create+0x24>
	return false;
   1464a:	2000      	movs	r0, #0
   1464c:	e007      	b.n	1465e <uuid_create+0x22>
		uuid->type = BT_UUID_TYPE_16;
   1464e:	2300      	movs	r3, #0
   14650:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
   14652:	f101 0008 	add.w	r0, r1, #8
   14656:	f001 febc 	bl	163d2 <net_buf_simple_pull_le16>
   1465a:	8060      	strh	r0, [r4, #2]
		return true;
   1465c:	2001      	movs	r0, #1
}
   1465e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
   14660:	2302      	movs	r3, #2
   14662:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
   14666:	6889      	ldr	r1, [r1, #8]
   14668:	f7fe fefc 	bl	13464 <memcpy>
   1466c:	e7f6      	b.n	1465c <uuid_create+0x20>

0001466e <att_exec_write_req>:
   1466e:	2006      	movs	r0, #6
   14670:	4770      	bx	lr

00014672 <att_send_req>:
{
   14672:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14674:	4605      	mov	r5, r0
   14676:	460c      	mov	r4, r1
	att->req = req;
   14678:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1467c:	30dc      	adds	r0, #220	; 0xdc
   1467e:	2100      	movs	r1, #0
   14680:	f7fc fe5e 	bl	11340 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   14684:	2800      	cmp	r0, #0
   14686:	da07      	bge.n	14698 <att_send_req+0x26>
		k_fifo_put(&att->tx_queue, req->buf);
   14688:	6921      	ldr	r1, [r4, #16]
   1468a:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
   1468e:	f002 fa60 	bl	16b52 <k_queue_append>
}
   14692:	2000      	movs	r0, #0
   14694:	b002      	add	sp, #8
   14696:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
   14698:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   1469a:	f106 0008 	add.w	r0, r6, #8
   1469e:	f001 fea0 	bl	163e2 <net_buf_simple_headroom>
	state->len = buf->len;
   146a2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   146a4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   146a6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
   146a8:	6920      	ldr	r0, [r4, #16]
   146aa:	682d      	ldr	r5, [r5, #0]
   146ac:	f001 fe5e 	bl	1636c <net_buf_ref>
   146b0:	6923      	ldr	r3, [r4, #16]
   146b2:	4606      	mov	r6, r0
   146b4:	6898      	ldr	r0, [r3, #8]
   146b6:	f7f3 f947 	bl	7948 <att_cb.isra.5>
   146ba:	2300      	movs	r3, #0
   146bc:	9300      	str	r3, [sp, #0]
   146be:	4632      	mov	r2, r6
   146c0:	4603      	mov	r3, r0
   146c2:	2104      	movs	r1, #4
   146c4:	4628      	mov	r0, r5
   146c6:	f7ff fd5b 	bl	14180 <bt_l2cap_send_cb>
   146ca:	e7e2      	b.n	14692 <att_send_req+0x20>

000146cc <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   146cc:	898a      	ldrh	r2, [r1, #12]
   146ce:	6889      	ldr	r1, [r1, #8]
   146d0:	2300      	movs	r3, #0
   146d2:	f7f3 b94b 	b.w	796c <att_handle_rsp>

000146d6 <bt_att_encrypt_change>:
{
   146d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146d8:	4604      	mov	r4, r0
	if (hci_status) {
   146da:	b139      	cbz	r1, 146ec <bt_att_encrypt_change+0x16>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
   146dc:	2200      	movs	r2, #0
   146de:	2305      	movs	r3, #5
   146e0:	4611      	mov	r1, r2
}
   146e2:	b003      	add	sp, #12
   146e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
   146e8:	f7f3 b940 	b.w	796c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   146ec:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
   146ee:	7a73      	ldrb	r3, [r6, #9]
   146f0:	2b01      	cmp	r3, #1
   146f2:	d02e      	beq.n	14752 <bt_att_encrypt_change+0x7c>
	if (!att->req || !att->req->retrying) {
   146f4:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   146f8:	b35b      	cbz	r3, 14752 <bt_att_encrypt_change+0x7c>
   146fa:	7d1b      	ldrb	r3, [r3, #20]
   146fc:	b34b      	cbz	r3, 14752 <bt_att_encrypt_change+0x7c>
	k_sem_take(&att->tx_sem, K_FOREVER);
   146fe:	f100 05dc 	add.w	r5, r0, #220	; 0xdc
   14702:	f04f 31ff 	mov.w	r1, #4294967295
   14706:	4628      	mov	r0, r5
   14708:	f7fc fe1a 	bl	11340 <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
   1470c:	6823      	ldr	r3, [r4, #0]
   1470e:	7b5b      	ldrb	r3, [r3, #13]
   14710:	2b04      	cmp	r3, #4
   14712:	d10d      	bne.n	14730 <bt_att_encrypt_change+0x5a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14714:	f3bf 8f5b 	dmb	ish
   14718:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1471c:	f3bf 8f5b 	dmb	ish
	if (!att_is_connected(att)) {
   14720:	075b      	lsls	r3, r3, #29
   14722:	d505      	bpl.n	14730 <bt_att_encrypt_change+0x5a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14724:	4628      	mov	r0, r5
}
   14726:	b003      	add	sp, #12
   14728:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1472c:	f7fc bddc 	b.w	112e8 <z_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
   14730:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   14734:	691f      	ldr	r7, [r3, #16]
   14736:	68b8      	ldr	r0, [r7, #8]
   14738:	f7f3 f906 	bl	7948 <att_cb.isra.5>
   1473c:	2500      	movs	r5, #0
   1473e:	4603      	mov	r3, r0
   14740:	9500      	str	r5, [sp, #0]
   14742:	463a      	mov	r2, r7
   14744:	2104      	movs	r1, #4
   14746:	4630      	mov	r0, r6
   14748:	f7ff fd1a 	bl	14180 <bt_l2cap_send_cb>
	att->req->buf = NULL;
   1474c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   14750:	611d      	str	r5, [r3, #16]
}
   14752:	b003      	add	sp, #12
   14754:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014756 <att_reset>:
{
   14756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14758:	f100 03ac 	add.w	r3, r0, #172	; 0xac
   1475c:	4604      	mov	r4, r0
   1475e:	f3bf 8f5b 	dmb	ish
   14762:	e853 2f00 	ldrex	r2, [r3]
   14766:	f042 0204 	orr.w	r2, r2, #4
   1476a:	e843 2100 	strex	r1, r2, [r3]
   1476e:	2900      	cmp	r1, #0
   14770:	d1f7      	bne.n	14762 <att_reset+0xc>
   14772:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   14776:	f104 05dc 	add.w	r5, r4, #220	; 0xdc
   1477a:	4628      	mov	r0, r5
   1477c:	f7fc fdb4 	bl	112e8 <z_impl_k_sem_give>
   14780:	4628      	mov	r0, r5
   14782:	f7fc fdb1 	bl	112e8 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   14786:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   1478a:	b17d      	cbz	r5, 147ac <att_reset+0x56>
   1478c:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   1478e:	686f      	ldr	r7, [r5, #4]
   14790:	b12f      	cbz	r7, 1479e <att_reset+0x48>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   14792:	2300      	movs	r3, #0
   14794:	9500      	str	r5, [sp, #0]
   14796:	461a      	mov	r2, r3
   14798:	210e      	movs	r1, #14
   1479a:	4618      	mov	r0, r3
   1479c:	47b8      	blx	r7
		att_req_destroy(req);
   1479e:	4628      	mov	r0, r5
   147a0:	f7ff fd58 	bl	14254 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   147a4:	b116      	cbz	r6, 147ac <att_reset+0x56>
   147a6:	4635      	mov	r5, r6
   147a8:	6836      	ldr	r6, [r6, #0]
   147aa:	e7f0      	b.n	1478e <att_reset+0x38>
	if (!att->req) {
   147ac:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
	list->head = NULL;
   147b0:	2200      	movs	r2, #0
	list->tail = NULL;
   147b2:	e9c4 222d 	strd	r2, r2, [r4, #180]	; 0xb4
   147b6:	b13b      	cbz	r3, 147c8 <att_reset+0x72>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   147b8:	230e      	movs	r3, #14
   147ba:	4611      	mov	r1, r2
   147bc:	4620      	mov	r0, r4
}
   147be:	b003      	add	sp, #12
   147c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   147c4:	f7f3 b8d2 	b.w	796c <att_handle_rsp>
}
   147c8:	b003      	add	sp, #12
   147ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000147cc <bt_att_disconnected>:
{
   147cc:	b510      	push	{r4, lr}
   147ce:	4604      	mov	r4, r0
	att_reset(att);
   147d0:	f7ff ffc1 	bl	14756 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   147d4:	6820      	ldr	r0, [r4, #0]
}
   147d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   147da:	f7f3 beeb 	b.w	85b4 <bt_gatt_disconnected>

000147de <att_timeout>:
{
   147de:	b510      	push	{r4, lr}
   147e0:	4604      	mov	r4, r0
	att_reset(att);
   147e2:	38bc      	subs	r0, #188	; 0xbc
   147e4:	f7ff ffb7 	bl	14756 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   147e8:	f854 0cbc 	ldr.w	r0, [r4, #-188]
   147ec:	f7f3 fee2 	bl	85b4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   147f0:	2300      	movs	r3, #0
   147f2:	f844 3cbc 	str.w	r3, [r4, #-188]
}
   147f6:	bd10      	pop	{r4, pc}

000147f8 <att_cfm_sent>:
{
   147f8:	b538      	push	{r3, r4, r5, lr}
   147fa:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   147fc:	2104      	movs	r1, #4
{
   147fe:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14800:	f7ff fd0f 	bl	14222 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14804:	f3bf 8f5b 	dmb	ish
   14808:	30ac      	adds	r0, #172	; 0xac
   1480a:	e850 3f00 	ldrex	r3, [r0]
   1480e:	f023 0302 	bic.w	r3, r3, #2
   14812:	e840 3200 	strex	r2, r3, [r0]
   14816:	2a00      	cmp	r2, #0
   14818:	d1f7      	bne.n	1480a <att_cfm_sent+0x12>
   1481a:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1481e:	4629      	mov	r1, r5
   14820:	4620      	mov	r0, r4
}
   14822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   14826:	f7ff beda 	b.w	145de <att_pdu_sent>

0001482a <att_rsp_sent>:
{
   1482a:	b538      	push	{r3, r4, r5, lr}
   1482c:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1482e:	2104      	movs	r1, #4
{
   14830:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14832:	f7ff fcf6 	bl	14222 <bt_l2cap_le_lookup_tx_cid>
   14836:	f3bf 8f5b 	dmb	ish
   1483a:	30ac      	adds	r0, #172	; 0xac
   1483c:	e850 3f00 	ldrex	r3, [r0]
   14840:	f023 0301 	bic.w	r3, r3, #1
   14844:	e840 3200 	strex	r2, r3, [r0]
   14848:	2a00      	cmp	r2, #0
   1484a:	d1f7      	bne.n	1483c <att_rsp_sent+0x12>
   1484c:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   14850:	4629      	mov	r1, r5
   14852:	4620      	mov	r0, r4
}
   14854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   14858:	f7ff bec1 	b.w	145de <att_pdu_sent>

0001485c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
   1485c:	7b41      	ldrb	r1, [r0, #13]
   1485e:	2904      	cmp	r1, #4
{
   14860:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   14862:	d001      	beq.n	14868 <att_chan_get+0xc>
		return NULL;
   14864:	2000      	movs	r0, #0
}
   14866:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   14868:	f7ff fce6 	bl	14238 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1486c:	2800      	cmp	r0, #0
   1486e:	d0f9      	beq.n	14864 <att_chan_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14870:	f3bf 8f5b 	dmb	ish
   14874:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   14878:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
   1487c:	075b      	lsls	r3, r3, #29
   1487e:	d4f1      	bmi.n	14864 <att_chan_get+0x8>
   14880:	e7f1      	b.n	14866 <att_chan_get+0xa>

00014882 <write_cb>:
{
   14882:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   14886:	680f      	ldr	r7, [r1, #0]
{
   14888:	460c      	mov	r4, r1
   1488a:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   1488c:	4601      	mov	r1, r0
   1488e:	222a      	movs	r2, #42	; 0x2a
   14890:	4638      	mov	r0, r7
   14892:	f7ff fe02 	bl	1449a <check_perm>
   14896:	4605      	mov	r5, r0
   14898:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1489a:	bb08      	cbnz	r0, 148e0 <write_cb+0x5e>
	if (!data->req) {
   1489c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1489e:	f8d6 8008 	ldr.w	r8, [r6, #8]
	if (!data->req) {
   148a2:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   148a4:	bf14      	ite	ne
   148a6:	2200      	movne	r2, #0
   148a8:	2202      	moveq	r2, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   148aa:	9201      	str	r2, [sp, #4]
   148ac:	8a62      	ldrh	r2, [r4, #18]
   148ae:	9200      	str	r2, [sp, #0]
   148b0:	7c23      	ldrb	r3, [r4, #16]
   148b2:	68e2      	ldr	r2, [r4, #12]
   148b4:	4631      	mov	r1, r6
   148b6:	4638      	mov	r0, r7
   148b8:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
   148ba:	2800      	cmp	r0, #0
   148bc:	db02      	blt.n	148c4 <write_cb+0x42>
   148be:	7c23      	ldrb	r3, [r4, #16]
   148c0:	4298      	cmp	r0, r3
   148c2:	d00a      	beq.n	148da <write_cb+0x58>
	if (err < 0 && err >= -0xff) {
   148c4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   148c8:	bf26      	itte	cs
   148ca:	4240      	negcs	r0, r0
   148cc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   148ce:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
   148d0:	7520      	strb	r0, [r4, #20]
}
   148d2:	4628      	mov	r0, r5
   148d4:	b002      	add	sp, #8
   148d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0U;
   148da:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   148dc:	2501      	movs	r5, #1
   148de:	e7f8      	b.n	148d2 <write_cb+0x50>
		return BT_GATT_ITER_STOP;
   148e0:	2500      	movs	r5, #0
   148e2:	e7f6      	b.n	148d2 <write_cb+0x50>

000148e4 <read_cb>:
{
   148e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   148e8:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   148ea:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   148ec:	f8d1 9000 	ldr.w	r9, [r1]
{
   148f0:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   148f2:	3008      	adds	r0, #8
   148f4:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   148f6:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   148fa:	f001 fd3b 	bl	16374 <net_buf_simple_add>
	data->err = 0x00;
   148fe:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14900:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   14902:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14904:	2215      	movs	r2, #21
   14906:	4631      	mov	r1, r6
   14908:	4640      	mov	r0, r8
   1490a:	f7ff fdc6 	bl	1449a <check_perm>
   1490e:	4605      	mov	r5, r0
   14910:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   14912:	bb00      	cbnz	r0, 14956 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14914:	68a1      	ldr	r1, [r4, #8]
   14916:	f8b9 3072 	ldrh.w	r3, [r9, #114]	; 0x72
   1491a:	898a      	ldrh	r2, [r1, #12]
   1491c:	6889      	ldr	r1, [r1, #8]
   1491e:	88a0      	ldrh	r0, [r4, #4]
   14920:	9000      	str	r0, [sp, #0]
   14922:	1a9b      	subs	r3, r3, r2
   14924:	6877      	ldr	r7, [r6, #4]
   14926:	440a      	add	r2, r1
   14928:	b29b      	uxth	r3, r3
   1492a:	4631      	mov	r1, r6
   1492c:	4640      	mov	r0, r8
   1492e:	47b8      	blx	r7
	if (read < 0) {
   14930:	1e01      	subs	r1, r0, #0
   14932:	da0a      	bge.n	1494a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   14934:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   14938:	bf26      	itte	cs
   1493a:	4249      	negcs	r1, r1
   1493c:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1493e:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   14940:	7421      	strb	r1, [r4, #16]
}
   14942:	4628      	mov	r0, r5
   14944:	b003      	add	sp, #12
   14946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   1494a:	68a0      	ldr	r0, [r4, #8]
   1494c:	3008      	adds	r0, #8
   1494e:	f001 fd11 	bl	16374 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   14952:	2501      	movs	r5, #1
   14954:	e7f5      	b.n	14942 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   14956:	463d      	mov	r5, r7
   14958:	e7f3      	b.n	14942 <read_cb+0x5e>

0001495a <bt_att_create_pdu>:
{
   1495a:	b538      	push	{r3, r4, r5, lr}
   1495c:	460d      	mov	r5, r1
   1495e:	4614      	mov	r4, r2
	att = att_chan_get(conn);
   14960:	f7ff ff7c 	bl	1485c <att_chan_get>
	if (!att) {
   14964:	b180      	cbz	r0, 14988 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
   14966:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
   1496a:	3401      	adds	r4, #1
   1496c:	429c      	cmp	r4, r3
   1496e:	d80b      	bhi.n	14988 <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
   14970:	2100      	movs	r1, #0
   14972:	4608      	mov	r0, r1
   14974:	f7ff fc01 	bl	1417a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   14978:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
   1497a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1497c:	3008      	adds	r0, #8
   1497e:	f001 fcf9 	bl	16374 <net_buf_simple_add>
	hdr->code = op;
   14982:	7005      	strb	r5, [r0, #0]
}
   14984:	4620      	mov	r0, r4
   14986:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   14988:	2400      	movs	r4, #0
   1498a:	e7fb      	b.n	14984 <bt_att_create_pdu+0x2a>

0001498c <att_read_blob_req>:
{
   1498c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1498e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   14990:	8813      	ldrh	r3, [r2, #0]
   14992:	8852      	ldrh	r2, [r2, #2]
   14994:	9200      	str	r2, [sp, #0]
   14996:	210c      	movs	r1, #12
   14998:	220d      	movs	r2, #13
   1499a:	f7f3 fa03 	bl	7da4 <att_read_rsp>
}
   1499e:	b003      	add	sp, #12
   149a0:	f85d fb04 	ldr.w	pc, [sp], #4

000149a4 <att_read_req>:
{
   149a4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   149a6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   149a8:	2200      	movs	r2, #0
   149aa:	881b      	ldrh	r3, [r3, #0]
   149ac:	9200      	str	r2, [sp, #0]
   149ae:	210a      	movs	r1, #10
   149b0:	220b      	movs	r2, #11
   149b2:	f7f3 f9f7 	bl	7da4 <att_read_rsp>
}
   149b6:	b003      	add	sp, #12
   149b8:	f85d fb04 	ldr.w	pc, [sp], #4

000149bc <bt_att_init>:

BT_L2CAP_CHANNEL_DEFINE(att_fixed_chan, BT_L2CAP_CID_ATT, bt_att_accept);

void bt_att_init(void)
{
	bt_gatt_init();
   149bc:	f7f3 bcea 	b.w	8394 <bt_gatt_init>

000149c0 <bt_att_send>:
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   149c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149c4:	460c      	mov	r4, r1
   149c6:	4615      	mov	r5, r2
   149c8:	4698      	mov	r8, r3
	struct bt_att *att;
	int err;

	if (!conn || !buf) {
   149ca:	4607      	mov	r7, r0
   149cc:	b320      	cbz	r0, 14a18 <bt_att_send+0x58>
   149ce:	b319      	cbz	r1, 14a18 <bt_att_send+0x58>
		return -EINVAL;
	}

	att = att_chan_get(conn);
   149d0:	f7ff ff44 	bl	1485c <att_chan_get>
	if (!att) {
   149d4:	4606      	mov	r6, r0
   149d6:	b310      	cbz	r0, 14a1e <bt_att_send+0x5e>
		return -ENOTCONN;
	}

	/* Don't use tx_sem if caller has set it own callback */
	if (!cb) {
   149d8:	b975      	cbnz	r5, 149f8 <bt_att_send+0x38>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   149da:	4629      	mov	r1, r5
   149dc:	30dc      	adds	r0, #220	; 0xdc
   149de:	f7fc fcaf 	bl	11340 <z_impl_k_sem_take>
		/* Queue buffer to be send later */
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   149e2:	2800      	cmp	r0, #0
   149e4:	da08      	bge.n	149f8 <bt_att_send+0x38>
			k_fifo_put(&att->tx_queue, buf);
   149e6:	4621      	mov	r1, r4
   149e8:	f106 00f4 	add.w	r0, r6, #244	; 0xf4
   149ec:	f002 f8b1 	bl	16b52 <k_queue_append>
			return 0;
   149f0:	462c      	mov	r4, r5
		}
		return err;
	}

	return 0;
}
   149f2:	4620      	mov	r0, r4
   149f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = att_send(conn, buf, cb, user_data);
   149f8:	4621      	mov	r1, r4
   149fa:	4643      	mov	r3, r8
   149fc:	462a      	mov	r2, r5
   149fe:	4638      	mov	r0, r7
   14a00:	f7ff fdd0 	bl	145a4 <att_send>
	if (err) {
   14a04:	4604      	mov	r4, r0
   14a06:	2800      	cmp	r0, #0
   14a08:	d0f3      	beq.n	149f2 <bt_att_send+0x32>
		if (!cb) {
   14a0a:	2d00      	cmp	r5, #0
   14a0c:	d1f1      	bne.n	149f2 <bt_att_send+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14a0e:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   14a12:	f7fc fc69 	bl	112e8 <z_impl_k_sem_give>
   14a16:	e7ec      	b.n	149f2 <bt_att_send+0x32>
		return -EINVAL;
   14a18:	f06f 0415 	mvn.w	r4, #21
   14a1c:	e7e9      	b.n	149f2 <bt_att_send+0x32>
		return -ENOTCONN;
   14a1e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   14a22:	e7e6      	b.n	149f2 <bt_att_send+0x32>

00014a24 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   14a24:	b510      	push	{r4, lr}
   14a26:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
   14a28:	b1c8      	cbz	r0, 14a5e <bt_att_req_send+0x3a>
   14a2a:	b1c1      	cbz	r1, 14a5e <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
   14a2c:	f7ff ff16 	bl	1485c <att_chan_get>
	if (!att) {
   14a30:	4603      	mov	r3, r0
   14a32:	b1b8      	cbz	r0, 14a64 <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
   14a34:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
   14a38:	b162      	cbz	r2, 14a54 <bt_att_req_send+0x30>
	parent->next = child;
   14a3a:	2000      	movs	r0, #0
   14a3c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   14a3e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   14a42:	b91a      	cbnz	r2, 14a4c <bt_att_req_send+0x28>
	list->head = node;
   14a44:	e9c3 442d 	strd	r4, r4, [r3, #180]	; 0xb4
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
   14a48:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
   14a4a:	bd10      	pop	{r4, pc}
	parent->next = child;
   14a4c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   14a4e:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
   14a52:	e7fa      	b.n	14a4a <bt_att_req_send+0x26>
	return att_send_req(att, req);
   14a54:	4621      	mov	r1, r4
}
   14a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
   14a5a:	f7ff be0a 	b.w	14672 <att_send_req>
		return -EINVAL;
   14a5e:	f06f 0015 	mvn.w	r0, #21
   14a62:	e7f2      	b.n	14a4a <bt_att_req_send+0x26>
		return -ENOTCONN;
   14a64:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14a68:	e7ef      	b.n	14a4a <bt_att_req_send+0x26>

00014a6a <gatt_ccc_changed>:
{
   14a6a:	b430      	push	{r4, r5}
	u16_t value = 0x0000;
   14a6c:	2300      	movs	r3, #0
   14a6e:	684d      	ldr	r5, [r1, #4]
	for (i = 0; i < ccc->cfg_len; i++) {
   14a70:	461a      	mov	r2, r3
   14a72:	42aa      	cmp	r2, r5
   14a74:	d108      	bne.n	14a88 <gatt_ccc_changed+0x1e>
	if (value != ccc->value) {
   14a76:	890a      	ldrh	r2, [r1, #8]
   14a78:	429a      	cmp	r2, r3
   14a7a:	d00e      	beq.n	14a9a <gatt_ccc_changed+0x30>
		if (ccc->cfg_changed) {
   14a7c:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
   14a7e:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
   14a80:	b15a      	cbz	r2, 14a9a <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   14a82:	4619      	mov	r1, r3
}
   14a84:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   14a86:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
   14a88:	680c      	ldr	r4, [r1, #0]
   14a8a:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
   14a8e:	3201      	adds	r2, #1
   14a90:	8924      	ldrh	r4, [r4, #8]
   14a92:	42a3      	cmp	r3, r4
   14a94:	bf38      	it	cc
   14a96:	4623      	movcc	r3, r4
   14a98:	e7eb      	b.n	14a72 <gatt_ccc_changed+0x8>
}
   14a9a:	bc30      	pop	{r4, r5}
   14a9c:	4770      	bx	lr

00014a9e <gatt_indicate_rsp>:
{
   14a9e:	b410      	push	{r4}
   14aa0:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   14aa2:	69dc      	ldr	r4, [r3, #28]
   14aa4:	460a      	mov	r2, r1
   14aa6:	6999      	ldr	r1, [r3, #24]
   14aa8:	4623      	mov	r3, r4
}
   14aaa:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   14aac:	4718      	bx	r3

00014aae <find_ccc_cfg>:
{
   14aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14ab0:	4605      	mov	r5, r0
   14ab2:	460f      	mov	r7, r1
	for (size_t i = 0; i < ccc->cfg_len; i++) {
   14ab4:	2600      	movs	r6, #0
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	42b3      	cmp	r3, r6
   14aba:	d801      	bhi.n	14ac0 <find_ccc_cfg+0x12>
	return NULL;
   14abc:	2000      	movs	r0, #0
   14abe:	e00e      	b.n	14ade <find_ccc_cfg+0x30>
   14ac0:	683b      	ldr	r3, [r7, #0]
   14ac2:	0134      	lsls	r4, r6, #4
   14ac4:	1918      	adds	r0, r3, r4
		if (conn) {
   14ac6:	b165      	cbz	r5, 14ae2 <find_ccc_cfg+0x34>
			if (conn->id == ccc->cfg[i].id &&
   14ac8:	7a2a      	ldrb	r2, [r5, #8]
   14aca:	5d1b      	ldrb	r3, [r3, r4]
   14acc:	429a      	cmp	r2, r3
   14ace:	d111      	bne.n	14af4 <find_ccc_cfg+0x46>
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   14ad0:	1c41      	adds	r1, r0, #1
   14ad2:	4628      	mov	r0, r5
   14ad4:	f7ff fa43 	bl	13f5e <bt_conn_addr_le_cmp>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   14ad8:	b960      	cbnz	r0, 14af4 <find_ccc_cfg+0x46>
			return &ccc->cfg[i];
   14ada:	6838      	ldr	r0, [r7, #0]
   14adc:	4420      	add	r0, r4
}
   14ade:	b003      	add	sp, #12
   14ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ae2:	2207      	movs	r2, #7
   14ae4:	4669      	mov	r1, sp
   14ae6:	3001      	adds	r0, #1
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   14ae8:	9500      	str	r5, [sp, #0]
   14aea:	f8cd 5003 	str.w	r5, [sp, #3]
   14aee:	f7fe fca9 	bl	13444 <memcmp>
   14af2:	e7f1      	b.n	14ad8 <find_ccc_cfg+0x2a>
	for (size_t i = 0; i < ccc->cfg_len; i++) {
   14af4:	3601      	adds	r6, #1
   14af6:	e7de      	b.n	14ab6 <find_ccc_cfg+0x8>

00014af8 <gatt_notify>:
{
   14af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14afc:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   14afe:	8992      	ldrh	r2, [r2, #12]
{
   14b00:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   14b02:	3202      	adds	r2, #2
   14b04:	211b      	movs	r1, #27
{
   14b06:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   14b08:	f7ff ff27 	bl	1495a <bt_att_create_pdu>
	if (!buf) {
   14b0c:	4605      	mov	r5, r0
   14b0e:	b1c8      	cbz	r0, 14b44 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   14b10:	f100 0708 	add.w	r7, r0, #8
   14b14:	2102      	movs	r1, #2
   14b16:	4638      	mov	r0, r7
   14b18:	f001 fc2c 	bl	16374 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   14b1c:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   14b1e:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   14b20:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
   14b24:	4638      	mov	r0, r7
   14b26:	f001 fc25 	bl	16374 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   14b2a:	89a2      	ldrh	r2, [r4, #12]
   14b2c:	68a1      	ldr	r1, [r4, #8]
   14b2e:	4630      	mov	r0, r6
   14b30:	f7fe fc98 	bl	13464 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   14b34:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14b38:	4629      	mov	r1, r5
   14b3a:	4640      	mov	r0, r8
}
   14b3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   14b40:	f7ff bf3e 	b.w	149c0 <bt_att_send>
}
   14b44:	f06f 000b 	mvn.w	r0, #11
   14b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00014b4c <match_uuid>:
   14b4c:	6008      	str	r0, [r1, #0]
   14b4e:	2000      	movs	r0, #0
   14b50:	4770      	bx	lr

00014b52 <clear_ccc_cfg>:
{
   14b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b54:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14b56:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   14b58:	4669      	mov	r1, sp
   14b5a:	2207      	movs	r2, #7
   14b5c:	3001      	adds	r0, #1
   14b5e:	9400      	str	r4, [sp, #0]
   14b60:	f8cd 4003 	str.w	r4, [sp, #3]
   14b64:	f7fe fc7e 	bl	13464 <memcpy>
	cfg->id = 0U;
   14b68:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   14b6a:	812c      	strh	r4, [r5, #8]
	memset(cfg->data, 0, sizeof(cfg->data));
   14b6c:	2204      	movs	r2, #4
   14b6e:	4621      	mov	r1, r4
   14b70:	f105 000c 	add.w	r0, r5, #12
   14b74:	f7fe fca3 	bl	134be <memset>
}
   14b78:	b003      	add	sp, #12
   14b7a:	bd30      	pop	{r4, r5, pc}

00014b7c <bt_gatt_attr_write_ccc>:
{
   14b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b80:	461c      	mov	r4, r3
   14b82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   14b86:	68cf      	ldr	r7, [r1, #12]
{
   14b88:	4680      	mov	r8, r0
   14b8a:	4689      	mov	r9, r1
	if (offset) {
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d13a      	bne.n	14c06 <bt_gatt_attr_write_ccc+0x8a>
	if (!len || len > sizeof(u16_t)) {
   14b90:	1e63      	subs	r3, r4, #1
   14b92:	2b01      	cmp	r3, #1
   14b94:	d83a      	bhi.n	14c0c <bt_gatt_attr_write_ccc+0x90>
	if (len < sizeof(u16_t)) {
   14b96:	2c01      	cmp	r4, #1
   14b98:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
   14b9a:	bf18      	it	ne
   14b9c:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   14b9e:	4639      	mov	r1, r7
		value = *(u8_t *)buf;
   14ba0:	bf0c      	ite	eq
   14ba2:	b2ad      	uxtheq	r5, r5
   14ba4:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   14ba8:	f7ff ff81 	bl	14aae <find_ccc_cfg>
	if (!cfg) {
   14bac:	4606      	mov	r6, r0
   14bae:	b988      	cbnz	r0, 14bd4 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   14bb0:	b915      	cbnz	r5, 14bb8 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   14bb2:	4620      	mov	r0, r4
}
   14bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   14bb8:	4639      	mov	r1, r7
   14bba:	f7ff ff78 	bl	14aae <find_ccc_cfg>
		if (!cfg) {
   14bbe:	4606      	mov	r6, r0
   14bc0:	b338      	cbz	r0, 14c12 <bt_gatt_attr_write_ccc+0x96>
   14bc2:	2207      	movs	r2, #7
   14bc4:	f108 0148 	add.w	r1, r8, #72	; 0x48
   14bc8:	3001      	adds	r0, #1
   14bca:	f7fe fc4b 	bl	13464 <memcpy>
		cfg->id = conn->id;
   14bce:	f898 3008 	ldrb.w	r3, [r8, #8]
   14bd2:	7033      	strb	r3, [r6, #0]
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
   14bd4:	693b      	ldr	r3, [r7, #16]
   14bd6:	b96b      	cbnz	r3, 14bf4 <bt_gatt_attr_write_ccc+0x78>
	if (cfg->value != ccc->value) {
   14bd8:	893b      	ldrh	r3, [r7, #8]
	cfg->value = value;
   14bda:	8135      	strh	r5, [r6, #8]
	if (cfg->value != ccc->value) {
   14bdc:	42ab      	cmp	r3, r5
   14bde:	d003      	beq.n	14be8 <bt_gatt_attr_write_ccc+0x6c>
		gatt_ccc_changed(attr, ccc);
   14be0:	4639      	mov	r1, r7
   14be2:	4648      	mov	r0, r9
   14be4:	f7ff ff41 	bl	14a6a <gatt_ccc_changed>
	if (!value) {
   14be8:	2d00      	cmp	r5, #0
   14bea:	d1e2      	bne.n	14bb2 <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   14bec:	4630      	mov	r0, r6
   14bee:	f7ff ffb0 	bl	14b52 <clear_ccc_cfg>
   14bf2:	e7de      	b.n	14bb2 <bt_gatt_attr_write_ccc+0x36>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
   14bf4:	462a      	mov	r2, r5
   14bf6:	4649      	mov	r1, r9
   14bf8:	4640      	mov	r0, r8
   14bfa:	4798      	blx	r3
   14bfc:	2800      	cmp	r0, #0
   14bfe:	d1eb      	bne.n	14bd8 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_NOT_PERMITTED);
   14c00:	f06f 0002 	mvn.w	r0, #2
   14c04:	e7d6      	b.n	14bb4 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c06:	f06f 0006 	mvn.w	r0, #6
   14c0a:	e7d3      	b.n	14bb4 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   14c0c:	f06f 000c 	mvn.w	r0, #12
   14c10:	e7d0      	b.n	14bb4 <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   14c12:	f06f 0010 	mvn.w	r0, #16
   14c16:	e7cd      	b.n	14bb4 <bt_gatt_attr_write_ccc+0x38>

00014c18 <read_appearance>:
{
   14c18:	b513      	push	{r0, r1, r4, lr}
   14c1a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   14c1e:	4610      	mov	r0, r2
	if (offset > value_len) {
   14c20:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   14c22:	f240 3241 	movw	r2, #833	; 0x341
   14c26:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   14c2a:	d80d      	bhi.n	14c48 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   14c2c:	f1c1 0402 	rsb	r4, r1, #2
   14c30:	429c      	cmp	r4, r3
   14c32:	bfa8      	it	ge
   14c34:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14c36:	f10d 0306 	add.w	r3, sp, #6
   14c3a:	4622      	mov	r2, r4
   14c3c:	4419      	add	r1, r3
   14c3e:	f7fe fc11 	bl	13464 <memcpy>
}
   14c42:	4620      	mov	r0, r4
   14c44:	b002      	add	sp, #8
   14c46:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   14c4c:	e7f9      	b.n	14c42 <read_appearance+0x2a>

00014c4e <read_name>:
{
   14c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c52:	4698      	mov	r8, r3
   14c54:	4616      	mov	r6, r2
   14c56:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   14c5a:	f7f1 fd4b 	bl	66f4 <bt_get_name>
   14c5e:	4607      	mov	r7, r0
				 strlen(name));
   14c60:	f7fe fbdb 	bl	1341a <strlen>
	if (offset > value_len) {
   14c64:	b283      	uxth	r3, r0
   14c66:	42ab      	cmp	r3, r5
   14c68:	d30d      	bcc.n	14c86 <read_name+0x38>
	len = MIN(buf_len, value_len - offset);
   14c6a:	1b5c      	subs	r4, r3, r5
   14c6c:	4544      	cmp	r4, r8
   14c6e:	4623      	mov	r3, r4
   14c70:	bfa8      	it	ge
   14c72:	4643      	movge	r3, r8
   14c74:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14c76:	4622      	mov	r2, r4
   14c78:	1979      	adds	r1, r7, r5
   14c7a:	4630      	mov	r0, r6
   14c7c:	f7fe fbf2 	bl	13464 <memcpy>
}
   14c80:	4620      	mov	r0, r4
   14c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   14c8a:	e7f9      	b.n	14c80 <read_name+0x32>

00014c8c <bt_gatt_attr_read_service>:
{
   14c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   14c8e:	68c9      	ldr	r1, [r1, #12]
{
   14c90:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   14c94:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   14c96:	780a      	ldrb	r2, [r1, #0]
   14c98:	b992      	cbnz	r2, 14cc0 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   14c9a:	884a      	ldrh	r2, [r1, #2]
   14c9c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   14ca0:	2d02      	cmp	r5, #2
   14ca2:	d819      	bhi.n	14cd8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   14ca4:	f1c5 0402 	rsb	r4, r5, #2
   14ca8:	429c      	cmp	r4, r3
   14caa:	bfa8      	it	ge
   14cac:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14cae:	f10d 0306 	add.w	r3, sp, #6
   14cb2:	4622      	mov	r2, r4
   14cb4:	1959      	adds	r1, r3, r5
   14cb6:	f7fe fbd5 	bl	13464 <memcpy>
}
   14cba:	4620      	mov	r0, r4
   14cbc:	b003      	add	sp, #12
   14cbe:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   14cc0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   14cc2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   14cc6:	d807      	bhi.n	14cd8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   14cc8:	f1c5 0410 	rsb	r4, r5, #16
   14ccc:	429c      	cmp	r4, r3
   14cce:	bfa8      	it	ge
   14cd0:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14cd2:	4622      	mov	r2, r4
   14cd4:	4429      	add	r1, r5
   14cd6:	e7ee      	b.n	14cb6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14cd8:	f06f 0406 	mvn.w	r4, #6
   14cdc:	e7ed      	b.n	14cba <bt_gatt_attr_read_service+0x2e>

00014cde <bt_gatt_attr_read_chrc>:
{
   14cde:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   14ce0:	68ce      	ldr	r6, [r1, #12]
{
   14ce2:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14ce4:	4608      	mov	r0, r1
{
   14ce6:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   14ce8:	79b3      	ldrb	r3, [r6, #6]
   14cea:	f88d 3004 	strb.w	r3, [sp, #4]
{
   14cee:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14cf0:	f7f3 fb78 	bl	83e4 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14cf4:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14cf6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14cfa:	780b      	ldrb	r3, [r1, #0]
{
   14cfc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14d00:	b99b      	cbnz	r3, 14d2a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   14d02:	884b      	ldrh	r3, [r1, #2]
   14d04:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   14d08:	2305      	movs	r3, #5
	if (offset > value_len) {
   14d0a:	42ab      	cmp	r3, r5
   14d0c:	d315      	bcc.n	14d3a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   14d0e:	1b5b      	subs	r3, r3, r5
   14d10:	42a3      	cmp	r3, r4
   14d12:	bfa8      	it	ge
   14d14:	4623      	movge	r3, r4
   14d16:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14d18:	ab01      	add	r3, sp, #4
   14d1a:	4622      	mov	r2, r4
   14d1c:	1959      	adds	r1, r3, r5
   14d1e:	4638      	mov	r0, r7
   14d20:	f7fe fba0 	bl	13464 <memcpy>
}
   14d24:	4620      	mov	r0, r4
   14d26:	b007      	add	sp, #28
   14d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   14d2a:	2210      	movs	r2, #16
   14d2c:	3101      	adds	r1, #1
   14d2e:	f10d 0007 	add.w	r0, sp, #7
   14d32:	f7fe fb97 	bl	13464 <memcpy>
		value_len += 16U;
   14d36:	2313      	movs	r3, #19
   14d38:	e7e7      	b.n	14d0a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14d3a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   14d3e:	e7f1      	b.n	14d24 <bt_gatt_attr_read_chrc+0x46>

00014d40 <bt_gatt_foreach_attr>:
{
   14d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   14d42:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14d46:	2300      	movs	r3, #0
   14d48:	9300      	str	r3, [sp, #0]
   14d4a:	461a      	mov	r2, r3
   14d4c:	f7f3 fb62 	bl	8414 <bt_gatt_foreach_attr_type>
}
   14d50:	b005      	add	sp, #20
   14d52:	f85d fb04 	ldr.w	pc, [sp], #4

00014d56 <bt_gatt_attr_read_ccc>:
{
   14d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   14d58:	68c9      	ldr	r1, [r1, #12]
{
   14d5a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   14d5e:	4616      	mov	r6, r2
   14d60:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   14d62:	f7ff fea4 	bl	14aae <find_ccc_cfg>
	if (cfg) {
   14d66:	b198      	cbz	r0, 14d90 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   14d68:	8903      	ldrh	r3, [r0, #8]
   14d6a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   14d6e:	2d02      	cmp	r5, #2
   14d70:	d811      	bhi.n	14d96 <bt_gatt_attr_read_ccc+0x40>
	len = MIN(buf_len, value_len - offset);
   14d72:	f1c5 0402 	rsb	r4, r5, #2
   14d76:	42bc      	cmp	r4, r7
   14d78:	bfa8      	it	ge
   14d7a:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   14d7c:	f10d 0306 	add.w	r3, sp, #6
   14d80:	4622      	mov	r2, r4
   14d82:	1959      	adds	r1, r3, r5
   14d84:	4630      	mov	r0, r6
   14d86:	f7fe fb6d 	bl	13464 <memcpy>
}
   14d8a:	4620      	mov	r0, r4
   14d8c:	b003      	add	sp, #12
   14d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   14d90:	f8ad 0006 	strh.w	r0, [sp, #6]
   14d94:	e7eb      	b.n	14d6e <bt_gatt_attr_read_ccc+0x18>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14d96:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   14d9a:	e7f6      	b.n	14d8a <bt_gatt_attr_read_ccc+0x34>

00014d9c <bt_gatt_change_aware>:
}
   14d9c:	2001      	movs	r0, #1
   14d9e:	4770      	bx	lr

00014da0 <sys_memcpy_swap>:
{
   14da0:	b510      	push	{r4, lr}
	psrc += length - 1;
   14da2:	1e53      	subs	r3, r2, #1
   14da4:	4419      	add	r1, r3
   14da6:	3801      	subs	r0, #1
   14da8:	460b      	mov	r3, r1
		*pdst++ = *psrc--;
   14daa:	f813 4901 	ldrb.w	r4, [r3], #-1
   14dae:	f800 4f01 	strb.w	r4, [r0, #1]!
	for (; length > 0; length--) {
   14db2:	189c      	adds	r4, r3, r2
   14db4:	42a1      	cmp	r1, r4
   14db6:	d1f8      	bne.n	14daa <sys_memcpy_swap+0xa>
}
   14db8:	bd10      	pop	{r4, pc}

00014dba <smp_pairing_rsp>:
}
   14dba:	2007      	movs	r0, #7
   14dbc:	4770      	bx	lr

00014dbe <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   14dbe:	2106      	movs	r1, #6
   14dc0:	f7ff ba3a 	b.w	14238 <bt_l2cap_le_lookup_rx_cid>

00014dc4 <atomic_test_bit>:
   14dc4:	f3bf 8f5b 	dmb	ish
   14dc8:	6800      	ldr	r0, [r0, #0]
   14dca:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14dce:	4108      	asrs	r0, r1
}
   14dd0:	f000 0001 	and.w	r0, r0, #1
   14dd4:	4770      	bx	lr

00014dd6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14dd6:	2301      	movs	r3, #1
   14dd8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ddc:	f3bf 8f5b 	dmb	ish
   14de0:	e850 3f00 	ldrex	r3, [r0]
   14de4:	430b      	orrs	r3, r1
   14de6:	e840 3200 	strex	r2, r3, [r0]
   14dea:	2a00      	cmp	r2, #0
   14dec:	d1f8      	bne.n	14de0 <atomic_set_bit+0xa>
   14dee:	f3bf 8f5b 	dmb	ish
}
   14df2:	4770      	bx	lr

00014df4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14df4:	2301      	movs	r3, #1
   14df6:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14dfa:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14dfc:	f3bf 8f5b 	dmb	ish
   14e00:	e850 3f00 	ldrex	r3, [r0]
   14e04:	400b      	ands	r3, r1
   14e06:	e840 3200 	strex	r2, r3, [r0]
   14e0a:	2a00      	cmp	r2, #0
   14e0c:	d1f8      	bne.n	14e00 <atomic_clear_bit+0xc>
   14e0e:	f3bf 8f5b 	dmb	ish
}
   14e12:	4770      	bx	lr

00014e14 <bt_smp_aes_cmac>:
{
   14e14:	b570      	push	{r4, r5, r6, lr}
   14e16:	b0c2      	sub	sp, #264	; 0x108
   14e18:	460d      	mov	r5, r1
   14e1a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14e1c:	4601      	mov	r1, r0
   14e1e:	aa16      	add	r2, sp, #88	; 0x58
   14e20:	4668      	mov	r0, sp
{
   14e22:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14e24:	f7fe f9c8 	bl	131b8 <tc_cmac_setup>
   14e28:	b918      	cbnz	r0, 14e32 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   14e2a:	f06f 0004 	mvn.w	r0, #4
}
   14e2e:	b042      	add	sp, #264	; 0x108
   14e30:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   14e32:	4632      	mov	r2, r6
   14e34:	4629      	mov	r1, r5
   14e36:	4668      	mov	r0, sp
   14e38:	f7fe f9e9 	bl	1320e <tc_cmac_update>
   14e3c:	2800      	cmp	r0, #0
   14e3e:	d0f4      	beq.n	14e2a <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   14e40:	4669      	mov	r1, sp
   14e42:	4620      	mov	r0, r4
   14e44:	f7fe fa47 	bl	132d6 <tc_cmac_final>
   14e48:	2800      	cmp	r0, #0
   14e4a:	d0ee      	beq.n	14e2a <bt_smp_aes_cmac+0x16>
	return 0;
   14e4c:	2000      	movs	r0, #0
   14e4e:	e7ee      	b.n	14e2e <bt_smp_aes_cmac+0x1a>

00014e50 <bt_smp_disconnected>:
{
   14e50:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   14e52:	6803      	ldr	r3, [r0, #0]
   14e54:	6f5c      	ldr	r4, [r3, #116]	; 0x74
{
   14e56:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
   14e58:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   14e5c:	f002 f8ba 	bl	16fd4 <k_delayed_work_cancel>
	if (keys) {
   14e60:	b13c      	cbz	r4, 14e72 <bt_smp_disconnected+0x22>
		if (!keys->keys || (keys->flags & BT_KEYS_DEBUG)) {
   14e62:	8963      	ldrh	r3, [r4, #10]
   14e64:	b113      	cbz	r3, 14e6c <bt_smp_disconnected+0x1c>
   14e66:	7a63      	ldrb	r3, [r4, #9]
   14e68:	079b      	lsls	r3, r3, #30
   14e6a:	d502      	bpl.n	14e72 <bt_smp_disconnected+0x22>
			bt_keys_clear(keys);
   14e6c:	4620      	mov	r0, r4
   14e6e:	f000 fc0d 	bl	1568c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   14e72:	4628      	mov	r0, r5
   14e74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   14e78:	2100      	movs	r1, #0
}
   14e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   14e7e:	f7fe bb1e 	b.w	134be <memset>

00014e82 <smp_ident_info>:
{
   14e82:	b538      	push	{r3, r4, r5, lr}
   14e84:	4604      	mov	r4, r0
   14e86:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14e88:	30b0      	adds	r0, #176	; 0xb0
   14e8a:	210c      	movs	r1, #12
   14e8c:	f7ff ff9a 	bl	14dc4 <atomic_test_bit>
   14e90:	b168      	cbz	r0, 14eae <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   14e92:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   14e94:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   14e96:	2002      	movs	r0, #2
   14e98:	f103 0248 	add.w	r2, r3, #72	; 0x48
   14e9c:	7a19      	ldrb	r1, [r3, #8]
   14e9e:	f000 fbe1 	bl	15664 <bt_keys_get_type>
		if (!keys) {
   14ea2:	b158      	cbz	r0, 14ebc <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   14ea4:	2210      	movs	r2, #16
   14ea6:	4629      	mov	r1, r5
   14ea8:	3026      	adds	r0, #38	; 0x26
   14eaa:	f7fe fadb 	bl	13464 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   14eae:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   14eb2:	2109      	movs	r1, #9
   14eb4:	f7ff ff8f 	bl	14dd6 <atomic_set_bit>
	return 0;
   14eb8:	2000      	movs	r0, #0
}
   14eba:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   14ebc:	2008      	movs	r0, #8
   14ebe:	e7fc      	b.n	14eba <smp_ident_info+0x38>

00014ec0 <smp_encrypt_info>:
{
   14ec0:	b538      	push	{r3, r4, r5, lr}
   14ec2:	4604      	mov	r4, r0
   14ec4:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14ec6:	30b0      	adds	r0, #176	; 0xb0
   14ec8:	210c      	movs	r1, #12
   14eca:	f7ff ff7b 	bl	14dc4 <atomic_test_bit>
   14ece:	b168      	cbz	r0, 14eec <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   14ed0:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   14ed2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   14ed4:	2004      	movs	r0, #4
   14ed6:	f103 0248 	add.w	r2, r3, #72	; 0x48
   14eda:	7a19      	ldrb	r1, [r3, #8]
   14edc:	f000 fbc2 	bl	15664 <bt_keys_get_type>
		if (!keys) {
   14ee0:	b158      	cbz	r0, 14efa <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   14ee2:	2210      	movs	r2, #16
   14ee4:	4629      	mov	r1, r5
   14ee6:	3016      	adds	r0, #22
   14ee8:	f7fe fabc 	bl	13464 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   14eec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   14ef0:	2107      	movs	r1, #7
   14ef2:	f7ff ff70 	bl	14dd6 <atomic_set_bit>
	return 0;
   14ef6:	2000      	movs	r0, #0
}
   14ef8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   14efa:	2008      	movs	r0, #8
   14efc:	e7fc      	b.n	14ef8 <smp_encrypt_info+0x38>

00014efe <smp_create_pdu.isra.3>:
	buf = bt_l2cap_create_pdu(NULL, 0);
   14efe:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
   14f00:	b538      	push	{r3, r4, r5, lr}
   14f02:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
   14f04:	4608      	mov	r0, r1
   14f06:	f7ff f938 	bl	1417a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   14f0a:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
   14f0c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   14f0e:	3008      	adds	r0, #8
   14f10:	f001 fa30 	bl	16374 <net_buf_simple_add>
	hdr->code = op;
   14f14:	7005      	strb	r5, [r0, #0]
}
   14f16:	4620      	mov	r0, r4
   14f18:	bd38      	pop	{r3, r4, r5, pc}

00014f1a <smp_security_request>:
   14f1a:	2007      	movs	r0, #7
   14f1c:	4770      	bx	lr

00014f1e <sys_mem_swap.constprop.14>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
   14f1e:	b510      	push	{r4, lr}
   14f20:	1e42      	subs	r2, r0, #1
   14f22:	f100 0310 	add.w	r3, r0, #16
   14f26:	3008      	adds	r0, #8
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   14f28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		u8_t tmp = ((u8_t *)buf)[i];
   14f2c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   14f30:	7014      	strb	r4, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   14f32:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
   14f34:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   14f36:	d1f7      	bne.n	14f28 <sys_mem_swap.constprop.14+0xa>
	}
}
   14f38:	bd10      	pop	{r4, pc}

00014f3a <smp_f6>:
{
   14f3a:	b570      	push	{r4, r5, r6, lr}
   14f3c:	b096      	sub	sp, #88	; 0x58
   14f3e:	4605      	mov	r5, r0
   14f40:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   14f42:	a805      	add	r0, sp, #20
   14f44:	2210      	movs	r2, #16
{
   14f46:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
   14f48:	f7ff ff2a 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   14f4c:	2210      	movs	r2, #16
   14f4e:	4631      	mov	r1, r6
   14f50:	a809      	add	r0, sp, #36	; 0x24
   14f52:	f7ff ff25 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   14f56:	4621      	mov	r1, r4
   14f58:	2210      	movs	r2, #16
   14f5a:	a80d      	add	r0, sp, #52	; 0x34
   14f5c:	f7ff ff20 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   14f60:	2203      	movs	r2, #3
   14f62:	991a      	ldr	r1, [sp, #104]	; 0x68
   14f64:	a811      	add	r0, sp, #68	; 0x44
   14f66:	f7ff ff1b 	bl	14da0 <sys_memcpy_swap>
	m[51] = a1->type;
   14f6a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   14f6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   14f70:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   14f74:	4621      	mov	r1, r4
   14f76:	2206      	movs	r2, #6
   14f78:	a812      	add	r0, sp, #72	; 0x48
   14f7a:	f7fe fa73 	bl	13464 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   14f7e:	4621      	mov	r1, r4
   14f80:	2206      	movs	r2, #6
   14f82:	a812      	add	r0, sp, #72	; 0x48
   14f84:	f7ff ff0c 	bl	14da0 <sys_memcpy_swap>
	m[58] = a2->type;
   14f88:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   14f8a:	f814 3b01 	ldrb.w	r3, [r4], #1
   14f8e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   14f92:	4621      	mov	r1, r4
   14f94:	2206      	movs	r2, #6
   14f96:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   14f9a:	f7fe fa63 	bl	13464 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   14f9e:	4621      	mov	r1, r4
   14fa0:	2206      	movs	r2, #6
   14fa2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   14fa6:	f7ff fefb 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   14faa:	2210      	movs	r2, #16
   14fac:	4629      	mov	r1, r5
   14fae:	a801      	add	r0, sp, #4
   14fb0:	f7ff fef6 	bl	14da0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   14fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14fb6:	2241      	movs	r2, #65	; 0x41
   14fb8:	a905      	add	r1, sp, #20
   14fba:	a801      	add	r0, sp, #4
   14fbc:	f7ff ff2a 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
   14fc0:	4604      	mov	r4, r0
   14fc2:	b910      	cbnz	r0, 14fca <smp_f6+0x90>
	sys_mem_swap(check, 16);
   14fc4:	981d      	ldr	r0, [sp, #116]	; 0x74
   14fc6:	f7ff ffaa 	bl	14f1e <sys_mem_swap.constprop.14>
}
   14fca:	4620      	mov	r0, r4
   14fcc:	b016      	add	sp, #88	; 0x58
   14fce:	bd70      	pop	{r4, r5, r6, pc}

00014fd0 <smp_f4>:
{
   14fd0:	b570      	push	{r4, r5, r6, lr}
   14fd2:	b096      	sub	sp, #88	; 0x58
   14fd4:	4614      	mov	r4, r2
   14fd6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   14fd8:	2220      	movs	r2, #32
   14fda:	4601      	mov	r1, r0
   14fdc:	a805      	add	r0, sp, #20
{
   14fde:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
   14fe0:	f7ff fede 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   14fe4:	2220      	movs	r2, #32
   14fe6:	4631      	mov	r1, r6
   14fe8:	a80d      	add	r0, sp, #52	; 0x34
   14fea:	f7ff fed9 	bl	14da0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   14fee:	4621      	mov	r1, r4
   14ff0:	2210      	movs	r2, #16
   14ff2:	a801      	add	r0, sp, #4
	m[64] = z;
   14ff4:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   14ff8:	f7ff fed2 	bl	14da0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   14ffc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14ffe:	2241      	movs	r2, #65	; 0x41
   15000:	a905      	add	r1, sp, #20
   15002:	a801      	add	r0, sp, #4
   15004:	f7ff ff06 	bl	14e14 <bt_smp_aes_cmac>
	if (err) {
   15008:	4604      	mov	r4, r0
   1500a:	b910      	cbnz	r0, 15012 <smp_f4+0x42>
	sys_mem_swap(res, 16);
   1500c:	981a      	ldr	r0, [sp, #104]	; 0x68
   1500e:	f7ff ff86 	bl	14f1e <sys_mem_swap.constprop.14>
}
   15012:	4620      	mov	r0, r4
   15014:	b016      	add	sp, #88	; 0x58
   15016:	bd70      	pop	{r4, r5, r6, pc}

00015018 <smp_dhkey_check>:
{
   15018:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1501a:	6803      	ldr	r3, [r0, #0]
   1501c:	78db      	ldrb	r3, [r3, #3]
   1501e:	2b01      	cmp	r3, #1
{
   15020:	4605      	mov	r5, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   15022:	d115      	bne.n	15050 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   15024:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   15026:	f100 04b0 	add.w	r4, r0, #176	; 0xb0
   1502a:	210f      	movs	r1, #15
   1502c:	4620      	mov	r0, r4
   1502e:	f7ff fee1 	bl	14df4 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   15032:	4631      	mov	r1, r6
   15034:	2210      	movs	r2, #16
   15036:	f205 1063 	addw	r0, r5, #355	; 0x163
   1503a:	f7fe fa13 	bl	13464 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1503e:	2107      	movs	r1, #7
   15040:	4620      	mov	r0, r4
   15042:	f7ff febf 	bl	14dc4 <atomic_test_bit>
   15046:	b128      	cbz	r0, 15054 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   15048:	2108      	movs	r1, #8
   1504a:	4620      	mov	r0, r4
   1504c:	f7ff fec3 	bl	14dd6 <atomic_set_bit>
}
   15050:	2000      	movs	r0, #0
   15052:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   15054:	2109      	movs	r1, #9
   15056:	4620      	mov	r0, r4
   15058:	f7ff feb4 	bl	14dc4 <atomic_test_bit>
   1505c:	2800      	cmp	r0, #0
   1505e:	d1f3      	bne.n	15048 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   15060:	4628      	mov	r0, r5
}
   15062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   15066:	f7f3 bb3f 	b.w	86e8 <compute_and_check_and_send_slave_dhcheck>

0001506a <smp_send_pairing_random>:
{
   1506a:	b538      	push	{r3, r4, r5, lr}
   1506c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1506e:	2004      	movs	r0, #4
   15070:	f7ff ff45 	bl	14efe <smp_create_pdu.isra.3>
	if (!rsp_buf) {
   15074:	4604      	mov	r4, r0
   15076:	b178      	cbz	r0, 15098 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   15078:	2110      	movs	r1, #16
   1507a:	3008      	adds	r0, #8
   1507c:	f001 f97a 	bl	16374 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   15080:	2210      	movs	r2, #16
   15082:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
   15086:	f7fe f9ed 	bl	13464 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1508a:	4628      	mov	r0, r5
   1508c:	2200      	movs	r2, #0
   1508e:	4621      	mov	r1, r4
   15090:	f7f3 fb14 	bl	86bc <smp_send.isra.6>
	return 0;
   15094:	2000      	movs	r0, #0
}
   15096:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15098:	2008      	movs	r0, #8
   1509a:	e7fc      	b.n	15096 <smp_send_pairing_random+0x2c>

0001509c <send_pairing_rsp>:
{
   1509c:	b538      	push	{r3, r4, r5, lr}
   1509e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   150a0:	2002      	movs	r0, #2
   150a2:	f7ff ff2c 	bl	14efe <smp_create_pdu.isra.3>
	if (!rsp_buf) {
   150a6:	4604      	mov	r4, r0
   150a8:	b178      	cbz	r0, 150ca <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   150aa:	2106      	movs	r1, #6
   150ac:	3008      	adds	r0, #8
   150ae:	f001 f961 	bl	16374 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   150b2:	2206      	movs	r2, #6
   150b4:	f105 01bd 	add.w	r1, r5, #189	; 0xbd
   150b8:	f7fe f9d4 	bl	13464 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   150bc:	4628      	mov	r0, r5
   150be:	2200      	movs	r2, #0
   150c0:	4621      	mov	r1, r4
   150c2:	f7f3 fafb 	bl	86bc <smp_send.isra.6>
	return 0;
   150c6:	2000      	movs	r0, #0
}
   150c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   150ca:	2008      	movs	r0, #8
   150cc:	e7fc      	b.n	150c8 <send_pairing_rsp+0x2c>

000150ce <smp_signing_info>:
   150ce:	2007      	movs	r0, #7
   150d0:	4770      	bx	lr

000150d2 <atomic_test_and_clear_bit>:
{
   150d2:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   150d4:	f001 021f 	and.w	r2, r1, #31
   150d8:	2301      	movs	r3, #1
   150da:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   150dc:	0949      	lsrs	r1, r1, #5
   150de:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   150e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   150e4:	f3bf 8f5b 	dmb	ish
   150e8:	e850 2f00 	ldrex	r2, [r0]
   150ec:	ea02 0104 	and.w	r1, r2, r4
   150f0:	e840 1c00 	strex	ip, r1, [r0]
   150f4:	f1bc 0f00 	cmp.w	ip, #0
   150f8:	d1f6      	bne.n	150e8 <atomic_test_and_clear_bit+0x16>
   150fa:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   150fe:	421a      	tst	r2, r3
}
   15100:	bf14      	ite	ne
   15102:	2001      	movne	r0, #1
   15104:	2000      	moveq	r0, #0
   15106:	bd10      	pop	{r4, pc}

00015108 <smp_reset>:
{
   15108:	b538      	push	{r3, r4, r5, lr}
   1510a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1510c:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1510e:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   15112:	f001 ff5f 	bl	16fd4 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   15116:	2300      	movs	r3, #0
   15118:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	atomic_set(&smp->allowed_cmds, 0);
   1511c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15120:	f3bf 8f5b 	dmb	ish
   15124:	e850 2f00 	ldrex	r2, [r0]
   15128:	e840 3100 	strex	r1, r3, [r0]
   1512c:	2900      	cmp	r1, #0
   1512e:	d1f9      	bne.n	15124 <smp_reset+0x1c>
   15130:	f3bf 8f5b 	dmb	ish
   15134:	f3bf 8f5b 	dmb	ish
   15138:	34b0      	adds	r4, #176	; 0xb0
   1513a:	e854 2f00 	ldrex	r2, [r4]
   1513e:	e844 3100 	strex	r1, r3, [r4]
   15142:	2900      	cmp	r1, #0
   15144:	d1f9      	bne.n	1513a <smp_reset+0x32>
   15146:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   1514a:	7a6b      	ldrb	r3, [r5, #9]
   1514c:	7aaa      	ldrb	r2, [r5, #10]
   1514e:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   15150:	bf18      	it	ne
   15152:	72ab      	strbne	r3, [r5, #10]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   15154:	2101      	movs	r1, #1
}
   15156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1515a:	f7ff be3c 	b.w	14dd6 <atomic_set_bit>

0001515e <smp_error>:
{
   1515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15160:	4606      	mov	r6, r0
   15162:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   15164:	f7f3 fe00 	bl	8d68 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
   15168:	2005      	movs	r0, #5
   1516a:	f7ff fec8 	bl	14efe <smp_create_pdu.isra.3>
	if (!buf) {
   1516e:	4605      	mov	r5, r0
   15170:	b178      	cbz	r0, 15192 <smp_error+0x34>
	rsp = net_buf_add(buf, sizeof(*rsp));
   15172:	2101      	movs	r1, #1
   15174:	3008      	adds	r0, #8
   15176:	f001 f8fd 	bl	16374 <net_buf_simple_add>
	rsp->reason = reason;
   1517a:	7004      	strb	r4, [r0, #0]
   1517c:	2400      	movs	r4, #0
   1517e:	6830      	ldr	r0, [r6, #0]
   15180:	9400      	str	r4, [sp, #0]
   15182:	4623      	mov	r3, r4
   15184:	462a      	mov	r2, r5
   15186:	2106      	movs	r1, #6
   15188:	f7fe fffa 	bl	14180 <bt_l2cap_send_cb>
	return 0;
   1518c:	4620      	mov	r0, r4
}
   1518e:	b002      	add	sp, #8
   15190:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15192:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15196:	e7fa      	b.n	1518e <smp_error+0x30>

00015198 <smp_timeout>:
{
   15198:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1519a:	f1a0 04e8 	sub.w	r4, r0, #232	; 0xe8
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   1519e:	f5a0 75cc 	sub.w	r5, r0, #408	; 0x198
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   151a2:	2102      	movs	r1, #2
   151a4:	4620      	mov	r0, r4
   151a6:	f7ff fe0d 	bl	14dc4 <atomic_test_bit>
   151aa:	b120      	cbz	r0, 151b6 <smp_timeout+0x1e>
	    smp->chan.chan.conn->le.keys) {
   151ac:	682b      	ldr	r3, [r5, #0]
   151ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   151b0:	b108      	cbz	r0, 151b6 <smp_timeout+0x1e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
   151b2:	f000 fa6b 	bl	1568c <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   151b6:	4628      	mov	r0, r5
   151b8:	2108      	movs	r1, #8
   151ba:	f7f3 fdd5 	bl	8d68 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   151be:	4620      	mov	r0, r4
   151c0:	2104      	movs	r1, #4
}
   151c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   151c6:	f7ff be06 	b.w	14dd6 <atomic_set_bit>

000151ca <smp_master_ident>:
{
   151ca:	b570      	push	{r4, r5, r6, lr}
   151cc:	460a      	mov	r2, r1
   151ce:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   151d0:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   151d2:	f850 3bb0 	ldr.w	r3, [r0], #176
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   151d6:	f7ff fdf5 	bl	14dc4 <atomic_test_bit>
   151da:	b1c8      	cbz	r0, 15210 <smp_master_ident+0x46>
		struct bt_smp_master_ident *req = (void *)buf->data;
   151dc:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   151de:	7a19      	ldrb	r1, [r3, #8]
   151e0:	f103 0248 	add.w	r2, r3, #72	; 0x48
   151e4:	2004      	movs	r0, #4
   151e6:	f000 fa3d 	bl	15664 <bt_keys_get_type>
		if (!keys) {
   151ea:	4605      	mov	r5, r0
   151ec:	b330      	cbz	r0, 1523c <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   151ee:	2202      	movs	r2, #2
   151f0:	4631      	mov	r1, r6
   151f2:	3014      	adds	r0, #20
   151f4:	f7fe f936 	bl	13464 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   151f8:	2208      	movs	r2, #8
   151fa:	1cb1      	adds	r1, r6, #2
   151fc:	f105 000c 	add.w	r0, r5, #12
   15200:	f7fe f930 	bl	13464 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   15204:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   15208:	f023 0301 	bic.w	r3, r3, #1
   1520c:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   15210:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   15214:	079a      	lsls	r2, r3, #30
   15216:	d50d      	bpl.n	15234 <smp_master_ident+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   15218:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1521a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1521e:	f7ff fdda 	bl	14dd6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   15222:	f8b4 5194 	ldrh.w	r5, [r4, #404]	; 0x194
   15226:	b91d      	cbnz	r5, 15230 <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   15228:	4629      	mov	r1, r5
   1522a:	4620      	mov	r0, r4
   1522c:	f7f3 fd9c 	bl	8d68 <smp_pairing_complete>
	return 0;
   15230:	2000      	movs	r0, #0
   15232:	e004      	b.n	1523e <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15234:	075b      	lsls	r3, r3, #29
   15236:	d5f4      	bpl.n	15222 <smp_master_ident+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15238:	210a      	movs	r1, #10
   1523a:	e7ee      	b.n	1521a <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   1523c:	2008      	movs	r0, #8
}
   1523e:	bd70      	pop	{r4, r5, r6, pc}

00015240 <ident_sent>:
{
   15240:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   15242:	7883      	ldrb	r3, [r0, #2]
   15244:	b97b      	cbnz	r3, 15266 <ident_sent+0x26>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   15246:	2106      	movs	r1, #6
   15248:	f7fe ffeb 	bl	14222 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1524c:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
   15250:	f022 0201 	bic.w	r2, r2, #1
   15254:	f880 2194 	strb.w	r2, [r0, #404]	; 0x194
		if (!smp->local_dist && !smp->remote_dist) {
   15258:	f8b0 1194 	ldrh.w	r1, [r0, #404]	; 0x194
   1525c:	b919      	cbnz	r1, 15266 <ident_sent+0x26>
}
   1525e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   15262:	f7f3 bd81 	b.w	8d68 <smp_pairing_complete>
}
   15266:	bd08      	pop	{r3, pc}

00015268 <smp_c1>:
{
   15268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1526c:	b089      	sub	sp, #36	; 0x24
   1526e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   15272:	461f      	mov	r7, r3
	p1[0] = ia->type;
   15274:	f898 3000 	ldrb.w	r3, [r8]
   15278:	f88d 3000 	strb.w	r3, [sp]
{
   1527c:	4606      	mov	r6, r0
	p1[1] = ra->type;
   1527e:	f899 3000 	ldrb.w	r3, [r9]
   15282:	f88d 3001 	strb.w	r3, [sp, #1]
{
   15286:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
   15288:	f10d 0002 	add.w	r0, sp, #2
{
   1528c:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
   1528e:	2207      	movs	r2, #7
{
   15290:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   15292:	f7fe f8e7 	bl	13464 <memcpy>
	memcpy(p1 + 9, pres, 7);
   15296:	2207      	movs	r2, #7
   15298:	4639      	mov	r1, r7
   1529a:	f10d 0009 	add.w	r0, sp, #9
   1529e:	f7fe f8e1 	bl	13464 <memcpy>
   152a2:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
   152a4:	5ce2      	ldrb	r2, [r4, r3]
   152a6:	f81d 1003 	ldrb.w	r1, [sp, r3]
   152aa:	404a      	eors	r2, r1
   152ac:	54ea      	strb	r2, [r5, r3]
   152ae:	3301      	adds	r3, #1
	while (len--) {
   152b0:	2b10      	cmp	r3, #16
   152b2:	d1f7      	bne.n	152a4 <smp_c1+0x3c>
	err = bt_encrypt_le(k, enc_data, enc_data);
   152b4:	462a      	mov	r2, r5
   152b6:	4629      	mov	r1, r5
   152b8:	4630      	mov	r0, r6
   152ba:	f000 fbd5 	bl	15a68 <bt_encrypt_le>
	if (err) {
   152be:	4604      	mov	r4, r0
   152c0:	bb10      	cbnz	r0, 15308 <smp_c1+0xa0>
	memcpy(p2, ra->a.val, 6);
   152c2:	af04      	add	r7, sp, #16
   152c4:	2206      	movs	r2, #6
   152c6:	f109 0101 	add.w	r1, r9, #1
   152ca:	4638      	mov	r0, r7
   152cc:	f7fe f8ca 	bl	13464 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   152d0:	2206      	movs	r2, #6
   152d2:	f108 0101 	add.w	r1, r8, #1
   152d6:	f10d 0016 	add.w	r0, sp, #22
   152da:	f7fe f8c3 	bl	13464 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   152de:	2204      	movs	r2, #4
   152e0:	4621      	mov	r1, r4
   152e2:	a807      	add	r0, sp, #28
   152e4:	f7fe f8eb 	bl	134be <memset>
   152e8:	462b      	mov	r3, r5
		*r++ = *p++ ^ *q++;
   152ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   152ee:	5d39      	ldrb	r1, [r7, r4]
   152f0:	3401      	adds	r4, #1
   152f2:	404a      	eors	r2, r1
	while (len--) {
   152f4:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
   152f6:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   152fa:	d1f6      	bne.n	152ea <smp_c1+0x82>
	return bt_encrypt_le(k, enc_data, enc_data);
   152fc:	462a      	mov	r2, r5
   152fe:	4629      	mov	r1, r5
   15300:	4630      	mov	r0, r6
   15302:	f000 fbb1 	bl	15a68 <bt_encrypt_le>
   15306:	4604      	mov	r4, r0
}
   15308:	4620      	mov	r0, r4
   1530a:	b009      	add	sp, #36	; 0x24
   1530c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015310 <legacy_pairing_confirm>:
{
   15310:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   15312:	f100 07b0 	add.w	r7, r0, #176	; 0xb0
{
   15316:	b085      	sub	sp, #20
   15318:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1531a:	2109      	movs	r1, #9
   1531c:	4638      	mov	r0, r7
   1531e:	f7ff fd51 	bl	14dc4 <atomic_test_bit>
   15322:	bb88      	cbnz	r0, 15388 <legacy_pairing_confirm+0x78>
			atomic_set_bit(&smp->allowed_cmds,
   15324:	2104      	movs	r1, #4
   15326:	f105 00ac 	add.w	r0, r5, #172	; 0xac
   1532a:	f7ff fd54 	bl	14dd6 <atomic_set_bit>
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1532e:	2003      	movs	r0, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   15330:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   15332:	f7ff fde4 	bl	14efe <smp_create_pdu.isra.3>
	if (!buf) {
   15336:	4606      	mov	r6, r0
   15338:	b1c0      	cbz	r0, 1536c <legacy_pairing_confirm+0x5c>
	req = net_buf_add(buf, sizeof(*req));
   1533a:	2110      	movs	r1, #16
   1533c:	3008      	adds	r0, #8
   1533e:	f001 f819 	bl	16374 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   15342:	f104 0356 	add.w	r3, r4, #86	; 0x56
   15346:	344f      	adds	r4, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   15348:	9002      	str	r0, [sp, #8]
   1534a:	9301      	str	r3, [sp, #4]
   1534c:	9400      	str	r4, [sp, #0]
   1534e:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   15352:	f105 02b5 	add.w	r2, r5, #181	; 0xb5
   15356:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
   1535a:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
   1535e:	f7ff ff83 	bl	15268 <smp_c1>
   15362:	4604      	mov	r4, r0
   15364:	b120      	cbz	r0, 15370 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   15366:	4630      	mov	r0, r6
   15368:	f7fa fdfe 	bl	ff68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1536c:	2008      	movs	r0, #8
   1536e:	e009      	b.n	15384 <legacy_pairing_confirm+0x74>
	smp_send(smp, buf, NULL, NULL);
   15370:	4602      	mov	r2, r0
   15372:	4631      	mov	r1, r6
   15374:	4628      	mov	r0, r5
   15376:	f7f3 f9a1 	bl	86bc <smp_send.isra.6>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1537a:	4621      	mov	r1, r4
   1537c:	4638      	mov	r0, r7
   1537e:	f7ff fd39 	bl	14df4 <atomic_clear_bit>
	return 0;
   15382:	2000      	movs	r0, #0
}
   15384:	b005      	add	sp, #20
   15386:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15388:	2100      	movs	r1, #0
   1538a:	4638      	mov	r0, r7
   1538c:	f7ff fd23 	bl	14dd6 <atomic_set_bit>
   15390:	e7f7      	b.n	15382 <legacy_pairing_confirm+0x72>

00015392 <smp_pairing_confirm>:
{
   15392:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   15394:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   15396:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
{
   1539a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1539c:	210a      	movs	r1, #10
   1539e:	4628      	mov	r0, r5
   153a0:	f7ff fd28 	bl	14df4 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   153a4:	4631      	mov	r1, r6
   153a6:	2210      	movs	r2, #16
   153a8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
   153ac:	f7fe f85a 	bl	13464 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   153b0:	2105      	movs	r1, #5
   153b2:	4628      	mov	r0, r5
   153b4:	f7ff fd06 	bl	14dc4 <atomic_test_bit>
   153b8:	b920      	cbnz	r0, 153c4 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   153ba:	4620      	mov	r0, r4
}
   153bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   153c0:	f7ff bfa6 	b.w	15310 <legacy_pairing_confirm>
	switch (smp->method) {
   153c4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   153c8:	2b01      	cmp	r3, #1
   153ca:	d00b      	beq.n	153e4 <smp_pairing_confirm+0x52>
   153cc:	2b02      	cmp	r3, #2
   153ce:	d115      	bne.n	153fc <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   153d0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   153d4:	2104      	movs	r1, #4
   153d6:	f7ff fcfe 	bl	14dd6 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   153da:	4620      	mov	r0, r4
}
   153dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   153e0:	f7f3 bbea 	b.w	8bb8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   153e4:	2109      	movs	r1, #9
   153e6:	4628      	mov	r0, r5
   153e8:	f7ff fcec 	bl	14dc4 <atomic_test_bit>
   153ec:	2800      	cmp	r0, #0
   153ee:	d0ef      	beq.n	153d0 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   153f0:	4628      	mov	r0, r5
   153f2:	2100      	movs	r1, #0
   153f4:	f7ff fcef 	bl	14dd6 <atomic_set_bit>
			return 0;
   153f8:	2000      	movs	r0, #0
}
   153fa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   153fc:	2008      	movs	r0, #8
   153fe:	e7fc      	b.n	153fa <smp_pairing_confirm+0x68>

00015400 <smp_ident_addr_info>:
{
   15400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   15404:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   15406:	783b      	ldrb	r3, [r7, #0]
{
   15408:	4605      	mov	r5, r0
   1540a:	b123      	cbz	r3, 15416 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1540c:	79bb      	ldrb	r3, [r7, #6]
   1540e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15412:	2bc0      	cmp	r3, #192	; 0xc0
   15414:	d155      	bne.n	154c2 <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   15416:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15418:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1541a:	f850 4bb0 	ldr.w	r4, [r0], #176
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1541e:	f7ff fcd1 	bl	14dc4 <atomic_test_bit>
   15422:	b3a8      	cbz	r0, 15490 <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   15424:	f104 0848 	add.w	r8, r4, #72	; 0x48
   15428:	4642      	mov	r2, r8
   1542a:	7a21      	ldrb	r1, [r4, #8]
   1542c:	2002      	movs	r0, #2
   1542e:	f000 f919 	bl	15664 <bt_keys_get_type>
		if (!keys) {
   15432:	4606      	mov	r6, r0
   15434:	2800      	cmp	r0, #0
   15436:	d047      	beq.n	154c8 <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   15438:	78e3      	ldrb	r3, [r4, #3]
   1543a:	2b00      	cmp	r3, #0
   1543c:	d13e      	bne.n	154bc <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   1543e:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
   15442:	780b      	ldrb	r3, [r1, #0]
   15444:	2b01      	cmp	r3, #1
   15446:	d120      	bne.n	1548a <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   15448:	798b      	ldrb	r3, [r1, #6]
   1544a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1544e:	2b40      	cmp	r3, #64	; 0x40
   15450:	d11b      	bne.n	1548a <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   15452:	2206      	movs	r2, #6
   15454:	3101      	adds	r1, #1
   15456:	f106 0036 	add.w	r0, r6, #54	; 0x36
   1545a:	f7fe f803 	bl	13464 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1545e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   15462:	b193      	cbz	r3, 1548a <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   15464:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   15468:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1546c:	2bc0      	cmp	r3, #192	; 0xc0
   1546e:	d00c      	beq.n	1548a <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   15470:	2207      	movs	r2, #7
   15472:	4639      	mov	r1, r7
   15474:	1c70      	adds	r0, r6, #1
   15476:	f7fd fff5 	bl	13464 <memcpy>
   1547a:	2207      	movs	r2, #7
   1547c:	4639      	mov	r1, r7
   1547e:	4640      	mov	r0, r8
   15480:	f7fd fff0 	bl	13464 <memcpy>
				bt_conn_identity_resolved(conn);
   15484:	4620      	mov	r0, r4
   15486:	f7f1 fce1 	bl	6e4c <bt_conn_identity_resolved>
		bt_id_add(keys);
   1548a:	4630      	mov	r0, r6
   1548c:	f7f0 ff7e 	bl	638c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   15490:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
   15494:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15498:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1549a:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1549e:	d504      	bpl.n	154aa <smp_ident_addr_info+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   154a0:	210a      	movs	r1, #10
   154a2:	f105 00ac 	add.w	r0, r5, #172	; 0xac
   154a6:	f7ff fc96 	bl	14dd6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   154aa:	f8b5 4194 	ldrh.w	r4, [r5, #404]	; 0x194
   154ae:	b91c      	cbnz	r4, 154b8 <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   154b0:	4621      	mov	r1, r4
   154b2:	4628      	mov	r0, r5
   154b4:	f7f3 fc58 	bl	8d68 <smp_pairing_complete>
	return 0;
   154b8:	2000      	movs	r0, #0
   154ba:	e003      	b.n	154c4 <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   154bc:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   154c0:	e7bf      	b.n	15442 <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   154c2:	200a      	movs	r0, #10
}
   154c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   154c8:	2008      	movs	r0, #8
   154ca:	e7fb      	b.n	154c4 <smp_ident_addr_info+0xc4>

000154cc <bt_smp_sign>:
   154cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   154d0:	4770      	bx	lr

000154d2 <bt_smp_auth_pairing_confirm>:
{
   154d2:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   154d4:	f7ff fc73 	bl	14dbe <smp_chan_get>
	if (!smp) {
   154d8:	4604      	mov	r4, r0
   154da:	b910      	cbnz	r0, 154e2 <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   154dc:	f06f 0015 	mvn.w	r0, #21
}
   154e0:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   154e2:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
   154e6:	2109      	movs	r1, #9
   154e8:	4628      	mov	r0, r5
   154ea:	f7ff fdf2 	bl	150d2 <atomic_test_and_clear_bit>
   154ee:	2800      	cmp	r0, #0
   154f0:	d0f4      	beq.n	154dc <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   154f2:	2105      	movs	r1, #5
   154f4:	4628      	mov	r0, r5
   154f6:	f7ff fc65 	bl	14dc4 <atomic_test_bit>
   154fa:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   154fe:	b938      	cbnz	r0, 15510 <bt_smp_auth_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds,
   15500:	4618      	mov	r0, r3
   15502:	2103      	movs	r1, #3
   15504:	f7ff fc67 	bl	14dd6 <atomic_set_bit>
		return send_pairing_rsp(smp);
   15508:	4620      	mov	r0, r4
   1550a:	f7ff fdc7 	bl	1509c <send_pairing_rsp>
   1550e:	e7e7      	b.n	154e0 <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   15510:	4618      	mov	r0, r3
   15512:	210c      	movs	r1, #12
   15514:	f7ff fc5f 	bl	14dd6 <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   15518:	4620      	mov	r0, r4
   1551a:	f7ff fdbf 	bl	1509c <send_pairing_rsp>
		return -EIO;
   1551e:	2800      	cmp	r0, #0
   15520:	bf0c      	ite	eq
   15522:	2000      	moveq	r0, #0
   15524:	f06f 0004 	mvnne.w	r0, #4
   15528:	e7da      	b.n	154e0 <bt_smp_auth_pairing_confirm+0xe>

0001552a <bt_smp_update_keys>:
{
   1552a:	b570      	push	{r4, r5, r6, lr}
   1552c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1552e:	f7ff fc46 	bl	14dbe <smp_chan_get>
	if (!smp) {
   15532:	4605      	mov	r5, r0
   15534:	2800      	cmp	r0, #0
   15536:	d066      	beq.n	15606 <bt_smp_update_keys+0xdc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15538:	f100 06b0 	add.w	r6, r0, #176	; 0xb0
   1553c:	2103      	movs	r1, #3
   1553e:	4630      	mov	r0, r6
   15540:	f7ff fc40 	bl	14dc4 <atomic_test_bit>
   15544:	2800      	cmp	r0, #0
   15546:	d05e      	beq.n	15606 <bt_smp_update_keys+0xdc>
	if (conn->le.keys) {
   15548:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1554a:	b108      	cbz	r0, 15550 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1554c:	f000 f89e 	bl	1568c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15550:	f104 0148 	add.w	r1, r4, #72	; 0x48
   15554:	7a20      	ldrb	r0, [r4, #8]
   15556:	f7f3 ff21 	bl	939c <bt_keys_get_addr>
   1555a:	6760      	str	r0, [r4, #116]	; 0x74
	if (!conn->le.keys) {
   1555c:	b928      	cbnz	r0, 1556a <bt_smp_update_keys+0x40>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1555e:	4628      	mov	r0, r5
   15560:	2108      	movs	r1, #8
}
   15562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   15566:	f7ff bdfa 	b.w	1515e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1556a:	210d      	movs	r1, #13
   1556c:	4630      	mov	r0, r6
   1556e:	f7ff fc29 	bl	14dc4 <atomic_test_bit>
   15572:	b120      	cbz	r0, 1557e <bt_smp_update_keys+0x54>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   15574:	6f62      	ldr	r2, [r4, #116]	; 0x74
   15576:	7a53      	ldrb	r3, [r2, #9]
   15578:	f043 0302 	orr.w	r3, r3, #2
   1557c:	7253      	strb	r3, [r2, #9]
	switch (smp->method) {
   1557e:	f895 00b4 	ldrb.w	r0, [r5, #180]	; 0xb4
   15582:	6f62      	ldr	r2, [r4, #116]	; 0x74
   15584:	2805      	cmp	r0, #5
   15586:	7a53      	ldrb	r3, [r2, #9]
   15588:	d837      	bhi.n	155fa <bt_smp_update_keys+0xd0>
   1558a:	2101      	movs	r1, #1
   1558c:	4081      	lsls	r1, r0
   1558e:	f011 0f2e 	tst.w	r1, #46	; 0x2e
   15592:	d032      	beq.n	155fa <bt_smp_update_keys+0xd0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   15594:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   15598:	7253      	strb	r3, [r2, #9]
	return MIN(req->max_key_size, rsp->max_key_size);
   1559a:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
   1559e:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   155a2:	428b      	cmp	r3, r1
   155a4:	bf28      	it	cs
   155a6:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   155a8:	7213      	strb	r3, [r2, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   155aa:	2105      	movs	r1, #5
   155ac:	4630      	mov	r0, r6
   155ae:	f7ff fc09 	bl	14dc4 <atomic_test_bit>
   155b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
		conn->le.keys->flags |= BT_KEYS_SC;
   155b4:	7a5a      	ldrb	r2, [r3, #9]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   155b6:	b318      	cbz	r0, 15600 <bt_smp_update_keys+0xd6>
		conn->le.keys->flags |= BT_KEYS_SC;
   155b8:	f042 0210 	orr.w	r2, r2, #16
   155bc:	725a      	strb	r2, [r3, #9]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   155be:	210c      	movs	r1, #12
   155c0:	4630      	mov	r0, r6
   155c2:	f7ff fbff 	bl	14dc4 <atomic_test_bit>
   155c6:	b1f0      	cbz	r0, 15606 <bt_smp_update_keys+0xdc>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   155c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   155ca:	2120      	movs	r1, #32
   155cc:	f000 f85a 	bl	15684 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   155d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   155d2:	f105 01f3 	add.w	r1, r5, #243	; 0xf3
   155d6:	2210      	movs	r2, #16
   155d8:	3016      	adds	r0, #22
   155da:	f7fd ff43 	bl	13464 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   155de:	6f60      	ldr	r0, [r4, #116]	; 0x74
   155e0:	2208      	movs	r2, #8
   155e2:	2100      	movs	r1, #0
   155e4:	300c      	adds	r0, #12
   155e6:	f7fd ff6a 	bl	134be <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   155ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
   155ec:	2202      	movs	r2, #2
   155ee:	2100      	movs	r1, #0
   155f0:	3014      	adds	r0, #20
}
   155f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   155f6:	f7fd bf62 	b.w	134be <memset>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   155fa:	f023 0301 	bic.w	r3, r3, #1
   155fe:	e7cb      	b.n	15598 <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   15600:	f022 0210 	bic.w	r2, r2, #16
   15604:	725a      	strb	r2, [r3, #9]
}
   15606:	bd70      	pop	{r4, r5, r6, pc}

00015608 <bt_smp_get_tk>:
{
   15608:	b570      	push	{r4, r5, r6, lr}
   1560a:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
   1560c:	f7ff fbd7 	bl	14dbe <smp_chan_get>
	if (!smp) {
   15610:	4603      	mov	r3, r0
   15612:	b910      	cbnz	r0, 1561a <bt_smp_get_tk+0x12>
		return false;
   15614:	2500      	movs	r5, #0
}
   15616:	4628      	mov	r0, r5
   15618:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1561a:	f100 02b0 	add.w	r2, r0, #176	; 0xb0
   1561e:	2103      	movs	r1, #3
   15620:	4610      	mov	r0, r2
   15622:	f7ff fbcf 	bl	14dc4 <atomic_test_bit>
   15626:	2800      	cmp	r0, #0
   15628:	d0f4      	beq.n	15614 <bt_smp_get_tk+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1562a:	2101      	movs	r1, #1
   1562c:	4610      	mov	r0, r2
   1562e:	f7ff fbc9 	bl	14dc4 <atomic_test_bit>
   15632:	4605      	mov	r5, r0
   15634:	2800      	cmp	r0, #0
   15636:	d0ed      	beq.n	15614 <bt_smp_get_tk+0xc>
	return MIN(req->max_key_size, rsp->max_key_size);
   15638:	f893 40c0 	ldrb.w	r4, [r3, #192]	; 0xc0
   1563c:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   15640:	4294      	cmp	r4, r2
   15642:	bf28      	it	cs
   15644:	4614      	movcs	r4, r2
	memcpy(tk, smp->tk, enc_size);
   15646:	4622      	mov	r2, r4
   15648:	f103 01f3 	add.w	r1, r3, #243	; 0xf3
   1564c:	4630      	mov	r0, r6
   1564e:	f7fd ff09 	bl	13464 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
   15652:	2c0f      	cmp	r4, #15
   15654:	d8df      	bhi.n	15616 <bt_smp_get_tk+0xe>
		(void)memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
   15656:	f1c4 0210 	rsb	r2, r4, #16
   1565a:	2100      	movs	r1, #0
   1565c:	1930      	adds	r0, r6, r4
   1565e:	f7fd ff2e 	bl	134be <memset>
   15662:	e7d8      	b.n	15616 <bt_smp_get_tk+0xe>

00015664 <bt_keys_get_type>:
{
   15664:	b570      	push	{r4, r5, r6, lr}
   15666:	4604      	mov	r4, r0
   15668:	460d      	mov	r5, r1
   1566a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1566c:	f7f3 fefa 	bl	9464 <bt_keys_find>
	if (keys) {
   15670:	b938      	cbnz	r0, 15682 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   15672:	4631      	mov	r1, r6
   15674:	4628      	mov	r0, r5
   15676:	f7f3 fe91 	bl	939c <bt_keys_get_addr>
	if (!keys) {
   1567a:	b110      	cbz	r0, 15682 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1567c:	8943      	ldrh	r3, [r0, #10]
   1567e:	431c      	orrs	r4, r3
   15680:	8144      	strh	r4, [r0, #10]
}
   15682:	bd70      	pop	{r4, r5, r6, pc}

00015684 <bt_keys_add_type>:
	keys->keys |= type;
   15684:	8943      	ldrh	r3, [r0, #10]
   15686:	4319      	orrs	r1, r3
   15688:	8141      	strh	r1, [r0, #10]
}
   1568a:	4770      	bx	lr

0001568c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->keys & BT_KEYS_IRK) {
   1568c:	8943      	ldrh	r3, [r0, #10]
   1568e:	079b      	lsls	r3, r3, #30
{
   15690:	b510      	push	{r4, lr}
   15692:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
   15694:	d501      	bpl.n	1569a <bt_keys_clear+0xe>
		bt_id_del(keys);
   15696:	f7f0 fefb 	bl	6490 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1569a:	4620      	mov	r0, r4
   1569c:	2256      	movs	r2, #86	; 0x56
   1569e:	2100      	movs	r1, #0
}
   156a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   156a4:	f7fd bf0b 	b.w	134be <memset>

000156a8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   156a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   156aa:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   156ac:	1dc3      	adds	r3, r0, #7
   156ae:	f023 0303 	bic.w	r3, r3, #3
{
   156b2:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   156b4:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   156b6:	3a01      	subs	r2, #1
   156b8:	b294      	uxth	r4, r2
{
   156ba:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   156bc:	2204      	movs	r2, #4
   156be:	2100      	movs	r1, #0
   156c0:	fb06 0004 	mla	r0, r6, r4, r0
   156c4:	f7fd fefb 	bl	134be <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   156c8:	f64f 77ff 	movw	r7, #65535	; 0xffff
   156cc:	3c01      	subs	r4, #1
   156ce:	b2a4      	uxth	r4, r4
   156d0:	42bc      	cmp	r4, r7
   156d2:	d101      	bne.n	156d8 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   156d4:	b003      	add	sp, #12
   156d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   156d8:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   156dc:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   156de:	2204      	movs	r2, #4
   156e0:	1b80      	subs	r0, r0, r6
   156e2:	eb0d 0102 	add.w	r1, sp, r2
   156e6:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   156e8:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   156ea:	f7fd febb 	bl	13464 <memcpy>
   156ee:	e7ed      	b.n	156cc <mem_init+0x24>

000156f0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   156f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   156f2:	6804      	ldr	r4, [r0, #0]
{
   156f4:	4606      	mov	r6, r0
	if (*mem_head) {
   156f6:	b18c      	cbz	r4, 1571c <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   156f8:	1de3      	adds	r3, r4, #7
   156fa:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   156fe:	2204      	movs	r2, #4
   15700:	4621      	mov	r1, r4
   15702:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   15706:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   15708:	f7fd feac 	bl	13464 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1570c:	9b01      	ldr	r3, [sp, #4]
   1570e:	b123      	cbz	r3, 1571a <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   15710:	1dda      	adds	r2, r3, #7
   15712:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   15716:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   15718:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1571a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   1571c:	4620      	mov	r0, r4
   1571e:	b002      	add	sp, #8
   15720:	bd70      	pop	{r4, r5, r6, pc}

00015722 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   15722:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   15724:	680c      	ldr	r4, [r1, #0]
{
   15726:	4606      	mov	r6, r0
   15728:	460d      	mov	r5, r1
	if (*mem_head) {
   1572a:	b11c      	cbz	r4, 15734 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1572c:	1de3      	adds	r3, r4, #7
   1572e:	f023 0303 	bic.w	r3, r3, #3
   15732:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   15734:	2204      	movs	r2, #4
   15736:	4629      	mov	r1, r5
   15738:	4630      	mov	r0, r6
   1573a:	f7fd fe93 	bl	13464 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1573e:	1df2      	adds	r2, r6, #7
   15740:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   15744:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   15746:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   15748:	602e      	str	r6, [r5, #0]
}
   1574a:	bd70      	pop	{r4, r5, r6, pc}

0001574c <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0U;

	/* Get the free count from the list */
	if (mem_head) {
   1574c:	b118      	cbz	r0, 15756 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
   1574e:	3007      	adds	r0, #7
   15750:	f020 0003 	bic.w	r0, r0, #3
   15754:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
   15756:	4770      	bx	lr

00015758 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   15758:	fb02 0001 	mla	r0, r2, r1, r0
   1575c:	4770      	bx	lr

0001575e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1575e:	1a40      	subs	r0, r0, r1
   15760:	b280      	uxth	r0, r0
}
   15762:	fbb0 f0f2 	udiv	r0, r0, r2
   15766:	4770      	bx	lr

00015768 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   15768:	b510      	push	{r4, lr}
	src += len;
   1576a:	4411      	add	r1, r2
   1576c:	3801      	subs	r0, #1
	while (len--) {
   1576e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15772:	3a01      	subs	r2, #1
   15774:	b292      	uxth	r2, r2
   15776:	429a      	cmp	r2, r3
   15778:	d100      	bne.n	1577c <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1577a:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1577c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   15780:	f800 4f01 	strb.w	r4, [r0, #1]!
   15784:	e7f5      	b.n	15772 <mem_rcopy+0xa>

00015786 <mem_nz>:
/**
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
   15786:	4401      	add	r1, r0
	while (len--) {
   15788:	4288      	cmp	r0, r1
   1578a:	d101      	bne.n	15790 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1578c:	2000      	movs	r0, #0
   1578e:	4770      	bx	lr
		if (*src++) {
   15790:	f810 3b01 	ldrb.w	r3, [r0], #1
   15794:	2b00      	cmp	r3, #0
   15796:	d0f7      	beq.n	15788 <mem_nz+0x2>
			return 1;
   15798:	2001      	movs	r0, #1
}
   1579a:	4770      	bx	lr

0001579c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1579c:	6010      	str	r0, [r2, #0]
   1579e:	6008      	str	r0, [r1, #0]

	return link;
}
   157a0:	4770      	bx	lr

000157a2 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   157a2:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   157a4:	6814      	ldr	r4, [r2, #0]
   157a6:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   157a8:	6814      	ldr	r4, [r2, #0]
   157aa:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   157ac:	6010      	str	r0, [r2, #0]

	return link;
}
   157ae:	bd10      	pop	{r4, pc}

000157b0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   157b0:	4288      	cmp	r0, r1
   157b2:	d003      	beq.n	157bc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   157b4:	b11a      	cbz	r2, 157be <memq_peek+0xe>
		*mem = head->mem;
   157b6:	6843      	ldr	r3, [r0, #4]
   157b8:	6013      	str	r3, [r2, #0]
   157ba:	4770      	bx	lr
		return NULL;
   157bc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   157be:	4770      	bx	lr

000157c0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   157c0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   157c2:	4283      	cmp	r3, r0
   157c4:	d007      	beq.n	157d6 <memq_dequeue+0x16>
	if (mem) {
   157c6:	b10a      	cbz	r2, 157cc <memq_dequeue+0xc>
		*mem = head->mem;
   157c8:	6858      	ldr	r0, [r3, #4]
   157ca:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
   157cc:	b10b      	cbz	r3, 157d2 <memq_dequeue+0x12>
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   157ce:	681a      	ldr	r2, [r3, #0]
   157d0:	600a      	str	r2, [r1, #0]

	return old_head;
}
   157d2:	4618      	mov	r0, r3
   157d4:	4770      	bx	lr
		return NULL; /* queue is empty */
   157d6:	2300      	movs	r3, #0
   157d8:	e7fb      	b.n	157d2 <memq_dequeue+0x12>

000157da <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   157da:	b510      	push	{r4, lr}
   157dc:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   157de:	2000      	movs	r0, #0

	while (octets_len--) {
   157e0:	3901      	subs	r1, #1
   157e2:	b2c9      	uxtb	r1, r1
   157e4:	29ff      	cmp	r1, #255	; 0xff
   157e6:	d100      	bne.n	157ea <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   157e8:	bd10      	pop	{r4, pc}
		bite = *octets;
   157ea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   157ee:	2b00      	cmp	r3, #0
   157f0:	d0f6      	beq.n	157e0 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   157f2:	1e5c      	subs	r4, r3, #1
			one_count++;
   157f4:	3001      	adds	r0, #1
			bite &= (bite - 1);
   157f6:	4023      	ands	r3, r4
			one_count++;
   157f8:	b2c0      	uxtb	r0, r0
   157fa:	e7f8      	b.n	157ee <util_ones_count_get+0x14>

000157fc <ticker_dequeue>:
{
   157fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   157fe:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   15800:	6804      	ldr	r4, [r0, #0]
{
   15802:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   15804:	4613      	mov	r3, r2
	total = 0U;
   15806:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   15808:	2aff      	cmp	r2, #255	; 0xff
   1580a:	d101      	bne.n	15810 <ticker_dequeue+0x14>
		return 0;
   1580c:	2000      	movs	r0, #0
}
   1580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   15810:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   15814:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   15818:	428a      	cmp	r2, r1
   1581a:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1581e:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   15822:	4460      	add	r0, ip
   15824:	d002      	beq.n	1582c <ticker_dequeue+0x30>
   15826:	4613      	mov	r3, r2
   15828:	462a      	mov	r2, r5
   1582a:	e7ed      	b.n	15808 <ticker_dequeue+0xc>
	if (previous == current) {
   1582c:	4293      	cmp	r3, r2
   1582e:	d100      	bne.n	15832 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   15830:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   15832:	b21b      	sxth	r3, r3
   15834:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15838:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   1583c:	783b      	ldrb	r3, [r7, #0]
   1583e:	2bff      	cmp	r3, #255	; 0xff
   15840:	d0e5      	beq.n	1580e <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   15842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15846:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1584a:	68a3      	ldr	r3, [r4, #8]
   1584c:	4463      	add	r3, ip
   1584e:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   15850:	e7dd      	b.n	1580e <ticker_dequeue+0x12>

00015852 <ticks_to_expire_prep>:
{
   15852:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   15854:	1a55      	subs	r5, r2, r1
   15856:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1585a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1585c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1585e:	d109      	bne.n	15874 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15860:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   15864:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   15866:	42a2      	cmp	r2, r4
   15868:	d90e      	bls.n	15888 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1586a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   1586c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1586e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   15870:	6144      	str	r4, [r0, #20]
}
   15872:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15874:	1a8a      	subs	r2, r1, r2
   15876:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1587a:	4293      	cmp	r3, r2
   1587c:	d901      	bls.n	15882 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1587e:	1a9a      	subs	r2, r3, r2
   15880:	e7f1      	b.n	15866 <ticks_to_expire_prep+0x14>
   15882:	4422      	add	r2, r4
			ticks_to_expire_minus +=
   15884:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   15886:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   15888:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   1588a:	2200      	movs	r2, #0
   1588c:	e7ef      	b.n	1586e <ticks_to_expire_prep+0x1c>

0001588e <ticker_job_op_cb>:
{
   1588e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15890:	2200      	movs	r2, #0
   15892:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   15894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   15896:	6259      	str	r1, [r3, #36]	; 0x24
{
   15898:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1589a:	b10a      	cbz	r2, 158a0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1589c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1589e:	4710      	bx	r2
}
   158a0:	4770      	bx	lr

000158a2 <ticker_worker>:
{
   158a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   158a6:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   158a8:	2301      	movs	r3, #1
{
   158aa:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
   158ac:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   158ae:	b91d      	cbnz	r5, 158b8 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   158b0:	7f43      	ldrb	r3, [r0, #29]
   158b2:	2bff      	cmp	r3, #255	; 0xff
   158b4:	d102      	bne.n	158bc <ticker_worker+0x1a>
		instance->worker_trigger = 0U;
   158b6:	77c5      	strb	r5, [r0, #31]
}
   158b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   158bc:	f7f9 fe32 	bl	f524 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   158c0:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   158c2:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->nodes[0];
   158c4:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   158c8:	1bc7      	subs	r7, r0, r7
   158ca:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   158ce:	2eff      	cmp	r6, #255	; 0xff
   158d0:	d006      	beq.n	158e0 <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   158d2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   158d6:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   158da:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   158dc:	429f      	cmp	r7, r3
   158de:	d218      	bcs.n	15912 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   158e0:	7aa2      	ldrb	r2, [r4, #10]
   158e2:	7ae3      	ldrb	r3, [r4, #11]
   158e4:	4293      	cmp	r3, r2
   158e6:	d105      	bne.n	158f4 <ticker_worker+0x52>
	u8_t idx = *ticks_elapsed_index + 1;
   158e8:	3301      	adds	r3, #1
   158ea:	b2db      	uxtb	r3, r3
		idx = 0U;
   158ec:	2b02      	cmp	r3, #2
   158ee:	bf08      	it	eq
   158f0:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   158f2:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   158f4:	7ae3      	ldrb	r3, [r4, #11]
   158f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   158fa:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   158fc:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   158fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
   15900:	2300      	movs	r3, #0
   15902:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   15904:	46ac      	mov	ip, r5
   15906:	4623      	mov	r3, r4
   15908:	2104      	movs	r1, #4
   1590a:	2003      	movs	r0, #3
}
   1590c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   15910:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   15912:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   15914:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   15916:	788a      	ldrb	r2, [r1, #2]
   15918:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   1591a:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1591e:	1a9b      	subs	r3, r3, r2
   15920:	b2db      	uxtb	r3, r3
   15922:	2b01      	cmp	r3, #1
   15924:	d1d3      	bne.n	158ce <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   15926:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   1592a:	3a01      	subs	r2, #1
   1592c:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   1592e:	f1b9 0f00 	cmp.w	r9, #0
   15932:	d0cc      	beq.n	158ce <ticker_worker+0x2c>
					   ticks_expired -
   15934:	6948      	ldr	r0, [r1, #20]
   15936:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   15938:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   1593a:	1a28      	subs	r0, r5, r0
   1593c:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   1593e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15942:	690b      	ldr	r3, [r1, #16]
   15944:	6a49      	ldr	r1, [r1, #36]	; 0x24
   15946:	47c8      	blx	r9
   15948:	e7c1      	b.n	158ce <ticker_worker+0x2c>

0001594a <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1594a:	f7f9 bdeb 	b.w	f524 <cntr_cnt_get>

0001594e <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1594e:	1a40      	subs	r0, r0, r1
}
   15950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15954:	4770      	bx	lr

00015956 <ll_tx_pwr_get>:
void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*min = RADIO_TXP_DEFAULT;
   15956:	2300      	movs	r3, #0
   15958:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1595a:	700b      	strb	r3, [r1, #0]
}
   1595c:	4770      	bx	lr

0001595e <sys_put_le32>:
	dst[1] = val >> 8;
   1595e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   15962:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   15964:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   15966:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   15968:	0a00      	lsrs	r0, r0, #8
   1596a:	704b      	strb	r3, [r1, #1]
   1596c:	70c8      	strb	r0, [r1, #3]
}
   1596e:	4770      	bx	lr

00015970 <sys_get_le64>:
{
   15970:	4603      	mov	r3, r0
}
   15972:	6800      	ldr	r0, [r0, #0]
   15974:	6859      	ldr	r1, [r3, #4]
   15976:	4770      	bx	lr

00015978 <hci_evt_create>:
{
   15978:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1597a:	3008      	adds	r0, #8
{
   1597c:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1597e:	2102      	movs	r1, #2
{
   15980:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   15982:	f000 fcf7 	bl	16374 <net_buf_simple_add>
	hdr->evt = evt;
   15986:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   15988:	7044      	strb	r4, [r0, #1]
}
   1598a:	bd38      	pop	{r3, r4, r5, pc}

0001598c <meta_evt>:
{
   1598c:	b570      	push	{r4, r5, r6, lr}
   1598e:	4604      	mov	r4, r0
   15990:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   15992:	3201      	adds	r2, #1
{
   15994:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   15996:	3408      	adds	r4, #8
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   15998:	b2d2      	uxtb	r2, r2
   1599a:	213e      	movs	r1, #62	; 0x3e
   1599c:	f7ff ffec 	bl	15978 <hci_evt_create>
	me = net_buf_add(buf, sizeof(*me));
   159a0:	2101      	movs	r1, #1
   159a2:	4620      	mov	r0, r4
   159a4:	f000 fce6 	bl	16374 <net_buf_simple_add>
	me->subevent = subevt;
   159a8:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   159aa:	4629      	mov	r1, r5
   159ac:	4620      	mov	r0, r4
}
   159ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   159b2:	f000 bcdf 	b.w	16374 <net_buf_simple_add>

000159b6 <hci_acl_encode>:
	switch (pdu_data->ll_id) {
   159b6:	7a03      	ldrb	r3, [r0, #8]
   159b8:	f003 0303 	and.w	r3, r3, #3
   159bc:	3b01      	subs	r3, #1
   159be:	2b01      	cmp	r3, #1
{
   159c0:	b570      	push	{r4, r5, r6, lr}
   159c2:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   159c4:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   159c6:	d81b      	bhi.n	15a00 <hci_acl_encode+0x4a>
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   159c8:	f101 0608 	add.w	r6, r1, #8
   159cc:	4630      	mov	r0, r6
   159ce:	2104      	movs	r1, #4
   159d0:	f000 fcd0 	bl	16374 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   159d4:	7a23      	ldrb	r3, [r4, #8]
   159d6:	f003 0303 	and.w	r3, r3, #3
   159da:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   159dc:	bf0c      	ite	eq
   159de:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   159e2:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   159e6:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   159e8:	7a61      	ldrb	r1, [r4, #9]
   159ea:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   159ec:	4630      	mov	r0, r6
   159ee:	f000 fcc1 	bl	16374 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   159f2:	7a62      	ldrb	r2, [r4, #9]
   159f4:	f104 010b 	add.w	r1, r4, #11
}
   159f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   159fc:	f7fd bd32 	b.w	13464 <memcpy>
		LL_ASSERT(0);
   15a00:	4040      	eors	r0, r0
   15a02:	f380 8811 	msr	BASEPRI, r0
   15a06:	f04f 0003 	mov.w	r0, #3
   15a0a:	df02      	svc	2

00015a0c <hci_num_cmplt_encode>:
{
   15a0c:	b570      	push	{r4, r5, r6, lr}
   15a0e:	4606      	mov	r6, r0
   15a10:	460d      	mov	r5, r1
   15a12:	4614      	mov	r4, r2
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   15a14:	2113      	movs	r1, #19
   15a16:	2205      	movs	r2, #5
   15a18:	f7ff ffae 	bl	15978 <hci_evt_create>
	ep = net_buf_add(buf, len);
   15a1c:	2105      	movs	r1, #5
   15a1e:	f106 0008 	add.w	r0, r6, #8
   15a22:	f000 fca7 	bl	16374 <net_buf_simple_add>
	ep->num_handles = num_handles;
   15a26:	2301      	movs	r3, #1
   15a28:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   15a2a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   15a2e:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   15a32:	bd70      	pop	{r4, r5, r6, pc}

00015a34 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   15a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15a36:	460c      	mov	r4, r1
   15a38:	1846      	adds	r6, r0, r1
   15a3a:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   15a3c:	b18c      	cbz	r4, 15a62 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   15a3e:	f7ee ffe5 	bl	4a0c <sys_rand32_get>

		if (len >= sizeof(v)) {
   15a42:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   15a44:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   15a46:	d907      	bls.n	15a58 <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   15a48:	2204      	movs	r2, #4
   15a4a:	eb0d 0102 	add.w	r1, sp, r2
   15a4e:	4628      	mov	r0, r5
   15a50:	f7fd fd08 	bl	13464 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   15a54:	3c04      	subs	r4, #4
   15a56:	e7f0      	b.n	15a3a <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   15a58:	4622      	mov	r2, r4
   15a5a:	a901      	add	r1, sp, #4
   15a5c:	4628      	mov	r0, r5
   15a5e:	f7fd fd01 	bl	13464 <memcpy>
			break;
		}
	}

	return 0;
}
   15a62:	2000      	movs	r0, #0
   15a64:	b002      	add	sp, #8
   15a66:	bd70      	pop	{r4, r5, r6, pc}

00015a68 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   15a68:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   15a6a:	2300      	movs	r3, #0
   15a6c:	f000 fbcb 	bl	16206 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   15a70:	2000      	movs	r0, #0
   15a72:	bd08      	pop	{r3, pc}

00015a74 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   15a74:	bf20      	wfe
	__SEV();
   15a76:	bf40      	sev
	__WFE();
   15a78:	bf20      	wfe
}
   15a7a:	4770      	bx	lr

00015a7c <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   15a7c:	6008      	str	r0, [r1, #0]
}
   15a7e:	4770      	bx	lr

00015a80 <prepare_reduced>:
	if (status == 0) {
   15a80:	b918      	cbnz	r0, 15a8a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= XON_BITMASK;
   15a82:	680b      	ldr	r3, [r1, #0]
   15a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15a88:	600b      	str	r3, [r1, #0]
}
   15a8a:	4770      	bx	lr

00015a8c <prepare_normal>:
	if (status == 0) {
   15a8c:	b918      	cbnz	r0, 15a96 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   15a8e:	680b      	ldr	r3, [r1, #0]
   15a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15a94:	600b      	str	r3, [r1, #0]
}
   15a96:	4770      	bx	lr

00015a98 <chan_sel_remap>:
{
   15a98:	b570      	push	{r4, r5, r6, lr}
   15a9a:	1d03      	adds	r3, r0, #4
   15a9c:	1e45      	subs	r5, r0, #1
	chan_next = 0U;
   15a9e:	2400      	movs	r4, #0
	while (byte_count--) {
   15aa0:	429d      	cmp	r5, r3
   15aa2:	d101      	bne.n	15aa8 <chan_sel_remap+0x10>
   15aa4:	4620      	mov	r0, r4
}
   15aa6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
   15aa8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
   15aac:	2200      	movs	r2, #0
   15aae:	18a0      	adds	r0, r4, r2
   15ab0:	2a08      	cmp	r2, #8
   15ab2:	b2c0      	uxtb	r0, r0
   15ab4:	d101      	bne.n	15aba <chan_sel_remap+0x22>
   15ab6:	4604      	mov	r4, r0
   15ab8:	e7f2      	b.n	15aa0 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   15aba:	f016 0f01 	tst.w	r6, #1
   15abe:	d003      	beq.n	15ac8 <chan_sel_remap+0x30>
				if (chan_index == 0) {
   15ac0:	2900      	cmp	r1, #0
   15ac2:	d0f0      	beq.n	15aa6 <chan_sel_remap+0xe>
				chan_index--;
   15ac4:	3901      	subs	r1, #1
   15ac6:	b2c9      	uxtb	r1, r1
			bite >>= 1;
   15ac8:	0876      	lsrs	r6, r6, #1
   15aca:	3201      	adds	r2, #1
   15acc:	e7ef      	b.n	15aae <chan_sel_remap+0x16>

00015ace <rx_packet_set>:
{
   15ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
   15ad0:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
   15ad4:	8e04      	ldrh	r4, [r0, #48]	; 0x30
{
   15ad6:	4607      	mov	r7, r0
	phy = conn->phy_rx;
   15ad8:	f005 0507 	and.w	r5, r5, #7
{
   15adc:	460e      	mov	r6, r1
	radio_phy_set(phy, 0);
   15ade:	4628      	mov	r0, r5
   15ae0:	2100      	movs	r1, #0
   15ae2:	f7f9 fe11 	bl	f708 <radio_phy_set>
	if (conn->enc_rx) {
   15ae6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
   15aea:	006a      	lsls	r2, r5, #1
   15aec:	06db      	lsls	r3, r3, #27
   15aee:	b2e1      	uxtb	r1, r4
   15af0:	f042 0201 	orr.w	r2, r2, #1
   15af4:	d50e      	bpl.n	15b14 <rx_packet_set+0x46>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   15af6:	3104      	adds	r1, #4
   15af8:	b2c9      	uxtb	r1, r1
   15afa:	2008      	movs	r0, #8
   15afc:	f7f9 fe4a 	bl	f794 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   15b00:	4632      	mov	r2, r6
   15b02:	4629      	mov	r1, r5
   15b04:	f507 7082 	add.w	r0, r7, #260	; 0x104
   15b08:	f7fa f85e 	bl	fbc8 <radio_ccm_rx_pkt_set>
}
   15b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
   15b10:	f7f9 be6e 	b.w	f7f0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   15b14:	2008      	movs	r0, #8
   15b16:	f7f9 fe3d 	bl	f794 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   15b1a:	4630      	mov	r0, r6
   15b1c:	e7f6      	b.n	15b0c <rx_packet_set+0x3e>

00015b1e <isr_adv_ci_adva_check>:
{
   15b1e:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   15b20:	7804      	ldrb	r4, [r0, #0]
   15b22:	780a      	ldrb	r2, [r1, #0]
   15b24:	f3c4 1380 	ubfx	r3, r4, #6, #1
   15b28:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   15b2c:	d119      	bne.n	15b62 <isr_adv_ci_adva_check+0x44>
   15b2e:	f004 040f 	and.w	r4, r4, #15
   15b32:	2c01      	cmp	r4, #1
   15b34:	f100 0502 	add.w	r5, r0, #2
   15b38:	f101 0608 	add.w	r6, r1, #8
   15b3c:	d008      	beq.n	15b50 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   15b3e:	2206      	movs	r2, #6
   15b40:	4631      	mov	r1, r6
   15b42:	4628      	mov	r0, r5
   15b44:	f7fd fc7e 	bl	13444 <memcmp>
			 BDADDR_SIZE)) ||
   15b48:	fab0 f080 	clz	r0, r0
   15b4c:	0940      	lsrs	r0, r0, #5
}
   15b4e:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   15b50:	2206      	movs	r2, #6
   15b52:	4631      	mov	r1, r6
   15b54:	4628      	mov	r0, r5
   15b56:	f7fd fc75 	bl	13444 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   15b5a:	2800      	cmp	r0, #0
   15b5c:	d1ef      	bne.n	15b3e <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   15b5e:	4620      	mov	r0, r4
   15b60:	e7f5      	b.n	15b4e <isr_adv_ci_adva_check+0x30>
   15b62:	2000      	movs	r0, #0
   15b64:	e7f3      	b.n	15b4e <isr_adv_ci_adva_check+0x30>

00015b66 <chan_set.part.28>:
	LL_ASSERT(!err || (err == -EINPROGRESS));
   15b66:	4040      	eors	r0, r0
   15b68:	f380 8811 	msr	BASEPRI, r0
   15b6c:	f04f 0003 	mov.w	r0, #3
   15b70:	df02      	svc	2

00015b72 <ticker_success_assert>:
{
   15b72:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15b74:	b108      	cbz	r0, 15b7a <ticker_success_assert+0x8>
   15b76:	f7ff fff6 	bl	15b66 <chan_set.part.28>
}
   15b7a:	bd08      	pop	{r3, pc}

00015b7c <ticker_op_latency_cancelled>:
{
   15b7c:	b508      	push	{r3, lr}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   15b7e:	b108      	cbz	r0, 15b84 <ticker_op_latency_cancelled+0x8>
   15b80:	f7ff fff1 	bl	15b66 <chan_set.part.28>
	conn->slave.latency_cancel = 0U;
   15b84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   15b88:	f360 0341 	bfi	r3, r0, #1, #1
   15b8c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
   15b90:	bd08      	pop	{r3, pc}

00015b92 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   15b92:	2000      	movs	r0, #0
   15b94:	f7f6 b996 	b.w	bec4 <mayfly_radio_active>

00015b98 <chan_set>:
	switch (chan) {
   15b98:	2826      	cmp	r0, #38	; 0x26
{
   15b9a:	b510      	push	{r4, lr}
   15b9c:	4604      	mov	r4, r0
	switch (chan) {
   15b9e:	d00b      	beq.n	15bb8 <chan_set+0x20>
   15ba0:	2827      	cmp	r0, #39	; 0x27
   15ba2:	d00b      	beq.n	15bbc <chan_set+0x24>
   15ba4:	2825      	cmp	r0, #37	; 0x25
   15ba6:	d10b      	bne.n	15bc0 <chan_set+0x28>
		radio_freq_chan_set(2);
   15ba8:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   15baa:	f7f9 fdc3 	bl	f734 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15bae:	4620      	mov	r0, r4
}
   15bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15bb4:	f7f9 bdc4 	b.w	f740 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   15bb8:	201a      	movs	r0, #26
   15bba:	e7f6      	b.n	15baa <chan_set+0x12>
		radio_freq_chan_set(80);
   15bbc:	2050      	movs	r0, #80	; 0x50
   15bbe:	e7f4      	b.n	15baa <chan_set+0x12>
		if (chan < 11) {
   15bc0:	280a      	cmp	r0, #10
   15bc2:	d802      	bhi.n	15bca <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   15bc4:	3002      	adds	r0, #2
   15bc6:	0040      	lsls	r0, r0, #1
   15bc8:	e7ef      	b.n	15baa <chan_set+0x12>
		} else if (chan < 40) {
   15bca:	2827      	cmp	r0, #39	; 0x27
   15bcc:	d801      	bhi.n	15bd2 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   15bce:	3003      	adds	r0, #3
   15bd0:	e7f9      	b.n	15bc6 <chan_set+0x2e>
   15bd2:	f7ff ffc8 	bl	15b66 <chan_set.part.28>

00015bd6 <mayfly_adv_stop>:
{
   15bd6:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   15bd8:	2001      	movs	r0, #1
   15bda:	f7f5 fd95 	bl	b708 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   15bde:	4604      	mov	r4, r0
   15be0:	b908      	cbnz	r0, 15be6 <mayfly_adv_stop+0x10>
   15be2:	f7ff ffc0 	bl	15b66 <chan_set.part.28>
	node_rx->hdr.handle = 0xffff;
   15be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15bea:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   15bec:	2308      	movs	r3, #8
   15bee:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   15bf0:	221e      	movs	r2, #30
   15bf2:	4418      	add	r0, r3
   15bf4:	2100      	movs	r1, #0
   15bf6:	f7fd fc62 	bl	134be <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   15bfa:	233c      	movs	r3, #60	; 0x3c
   15bfc:	7223      	strb	r3, [r4, #8]
}
   15bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   15c02:	f7f6 bb0b 	b.w	c21c <packet_rx_enqueue>

00015c06 <terminate_ind_rx_enqueue>:
{
   15c06:	b508      	push	{r3, lr}
   15c08:	4603      	mov	r3, r0
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   15c0a:	30a4      	adds	r0, #164	; 0xa4
	LL_ASSERT(node_rx->hdr.link);
   15c0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   15c10:	b90a      	cbnz	r2, 15c16 <terminate_ind_rx_enqueue+0x10>
   15c12:	f7ff ffa8 	bl	15b66 <chan_set.part.28>
	node_rx->hdr.handle = conn->handle;
   15c16:	8c1a      	ldrh	r2, [r3, #32]
   15c18:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15c1c:	2209      	movs	r2, #9
   15c1e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	*((u8_t *)node_rx->pdu_data) = reason;
   15c22:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
	packet_rx_enqueue_commit(node_rx);
   15c26:	f7f6 fae7 	bl	c1f8 <packet_rx_enqueue_commit>
}
   15c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_event_callback();
   15c2e:	f7f8 bb4d 	b.w	e2cc <radio_event_callback>

00015c32 <entropy_get_entropy_isr.constprop.43>:
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   15c32:	6843      	ldr	r3, [r0, #4]
static inline int entropy_get_entropy_isr(struct device *dev,
   15c34:	b410      	push	{r4}
	if (unlikely(!api->get_entropy_isr)) {
   15c36:	685c      	ldr	r4, [r3, #4]
   15c38:	b11c      	cbz	r4, 15c42 <entropy_get_entropy_isr.constprop.43+0x10>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   15c3a:	46a4      	mov	ip, r4
   15c3c:	2300      	movs	r3, #0
}
   15c3e:	bc10      	pop	{r4}
	return api->get_entropy_isr(dev, buffer, length, flags);
   15c40:	4760      	bx	ip
}
   15c42:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15c46:	bc10      	pop	{r4}
   15c48:	4770      	bx	lr

00015c4a <ctrl_tx_enqueue>:
{
   15c4a:	b510      	push	{r4, lr}
	    !conn->empty &&
   15c4c:	f890 415e 	ldrb.w	r4, [r0, #350]	; 0x15e
   15c50:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
	if (
   15c54:	f014 0f80 	tst.w	r4, #128	; 0x80
   15c58:	d118      	bne.n	15c8c <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   15c5a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	    !conn->empty &&
   15c5e:	b1ab      	cbz	r3, 15c8c <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   15c60:	0724      	lsls	r4, r4, #28
   15c62:	d413      	bmi.n	15c8c <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   15c64:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   15c68:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   15c6a:	bf04      	itt	eq
   15c6c:	681c      	ldreq	r4, [r3, #0]
   15c6e:	f8c0 4154 	streq.w	r4, [r0, #340]	; 0x154
		if (!conn->pkt_tx_ctrl) {
   15c72:	b992      	cbnz	r2, 15c9a <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   15c74:	681a      	ldr	r2, [r3, #0]
   15c76:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   15c78:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   15c7a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
	conn->pkt_tx_ctrl_last = node_tx;
   15c7e:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
	if (node_tx->next == 0) {
   15c82:	680b      	ldr	r3, [r1, #0]
   15c84:	b90b      	cbnz	r3, 15c8a <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   15c86:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
}
   15c8a:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   15c8c:	b92a      	cbnz	r2, 15c9a <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   15c8e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   15c92:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   15c94:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
   15c98:	e7ef      	b.n	15c7a <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   15c9a:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
   15c9e:	681a      	ldr	r2, [r3, #0]
   15ca0:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   15ca2:	6019      	str	r1, [r3, #0]
   15ca4:	e7eb      	b.n	15c7e <ctrl_tx_enqueue+0x34>

00015ca6 <ctrl_tx_sec_enqueue>:
{
   15ca6:	b410      	push	{r4}
	if (conn->pause_tx) {
   15ca8:	f890 415e 	ldrb.w	r4, [r0, #350]	; 0x15e
   15cac:	0724      	lsls	r4, r4, #28
{
   15cae:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   15cb0:	d50f      	bpl.n	15cd2 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   15cb2:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
   15cb6:	b931      	cbnz	r1, 15cc6 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   15cb8:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
   15cbc:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   15cbe:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
}
   15cc2:	bc10      	pop	{r4}
   15cc4:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   15cc6:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
   15cca:	6819      	ldr	r1, [r3, #0]
   15ccc:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   15cce:	601a      	str	r2, [r3, #0]
   15cd0:	e7f7      	b.n	15cc2 <ctrl_tx_sec_enqueue+0x1c>
}
   15cd2:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   15cd4:	f7ff bfb9 	b.w	15c4a <ctrl_tx_enqueue>

00015cd8 <start_enc_rsp_send>:
	conn->enc_tx = 1U;
   15cd8:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   15cdc:	f043 0320 	orr.w	r3, r3, #32
   15ce0:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15ce4:	780b      	ldrb	r3, [r1, #0]
   15ce6:	f043 0303 	orr.w	r3, r3, #3
   15cea:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15cec:	2301      	movs	r3, #1
   15cee:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   15cf0:	2306      	movs	r3, #6
   15cf2:	70cb      	strb	r3, [r1, #3]
}
   15cf4:	2000      	movs	r0, #0
   15cf6:	4770      	bx	lr

00015cf8 <ll_conn_update>:
{
   15cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15cfc:	460c      	mov	r4, r1
   15cfe:	4691      	mov	r9, r2
   15d00:	469a      	mov	sl, r3
   15d02:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   15d06:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   15d0a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = connection_get(handle);
   15d0e:	f7f5 fe15 	bl	b93c <connection_get>
	if (!conn) {
   15d12:	2800      	cmp	r0, #0
   15d14:	d067      	beq.n	15de6 <ll_conn_update+0xee>
	if (!cmd) {
   15d16:	bb94      	cbnz	r4, 15d7e <ll_conn_update+0x86>
		if (!conn->llcp_conn_param.disabled &&
   15d18:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
   15d1c:	06d9      	lsls	r1, r3, #27
   15d1e:	d407      	bmi.n	15d30 <ll_conn_update+0x38>
		    (!conn->common.fex_valid ||
   15d20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   15d24:	069a      	lsls	r2, r3, #26
   15d26:	d529      	bpl.n	15d7c <ll_conn_update+0x84>
		     (conn->llcp_features &
   15d28:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
		    (!conn->common.fex_valid ||
   15d2c:	079b      	lsls	r3, r3, #30
   15d2e:	d425      	bmi.n	15d7c <ll_conn_update+0x84>
		} else if (conn->role) {
   15d30:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15d34:	2b00      	cmp	r3, #0
   15d36:	db58      	blt.n	15dea <ll_conn_update+0xf2>
		if (conn->llcp_req != conn->llcp_ack) {
   15d38:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   15d3c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   15d40:	429a      	cmp	r2, r3
   15d42:	d154      	bne.n	15dee <ll_conn_update+0xf6>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15d44:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval_max;
   15d48:	f8a0 807a 	strh.w	r8, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1U;
   15d4c:	2101      	movs	r1, #1
		conn->llcp.conn_upd.win_offset_us = 0U;
   15d4e:	2500      	movs	r5, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15d50:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp.conn_upd.is_internal = 0U;
   15d54:	f365 0382 	bfi	r3, r5, #2, #1
		conn->llcp_req++;
   15d58:	440a      	add	r2, r1
		conn->llcp.conn_upd.win_size = 1U;
   15d5a:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0U;
   15d5e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   15d62:	f8a0 707c 	strh.w	r7, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   15d66:	f8a0 607e 	strh.w	r6, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0U;
   15d6a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15d6e:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
		conn->llcp_req++;
   15d72:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
}
   15d76:	4620      	mov	r0, r4
   15d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cmd++;
   15d7c:	2401      	movs	r4, #1
		cmd--;
   15d7e:	3c01      	subs	r4, #1
		if (cmd) {
   15d80:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15d84:	f890 50cc 	ldrb.w	r5, [r0, #204]	; 0xcc
   15d88:	f890 c0cd 	ldrb.w	ip, [r0, #205]	; 0xcd
   15d8c:	d012      	beq.n	15db4 <ll_conn_update+0xbc>
			if ((conn->llcp_conn_param.req ==
   15d8e:	4565      	cmp	r5, ip
   15d90:	d02d      	beq.n	15dee <ll_conn_update+0xf6>
			    (conn->llcp_conn_param.state !=
   15d92:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
			     conn->llcp_conn_param.ack) ||
   15d96:	f003 0207 	and.w	r2, r3, #7
   15d9a:	2a03      	cmp	r2, #3
   15d9c:	d127      	bne.n	15dee <ll_conn_update+0xf6>
			conn->llcp_conn_param.state = cmd;
   15d9e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   15da2:	b2db      	uxtb	r3, r3
   15da4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   15da8:	f880 90cf 	strb.w	r9, [r0, #207]	; 0xcf
			conn->llcp_conn_param.cmd = 1U;
   15dac:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
	return 0;
   15db0:	2400      	movs	r4, #0
   15db2:	e7e0      	b.n	15d76 <ll_conn_update+0x7e>
			if (conn->llcp_conn_param.req !=
   15db4:	4565      	cmp	r5, ip
   15db6:	d11a      	bne.n	15dee <ll_conn_update+0xf6>
			conn->llcp_conn_param.state = cmd;
   15db8:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
			conn->llcp_conn_param.status = 0U;
   15dbc:	f880 40cf 	strb.w	r4, [r0, #207]	; 0xcf
			conn->llcp_conn_param.state = cmd;
   15dc0:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   15dc4:	b2db      	uxtb	r3, r3
   15dc6:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   15dca:	3501      	adds	r5, #1
			conn->llcp_conn_param.interval_min = interval_min;
   15dcc:	f8a0 a0d0 	strh.w	sl, [r0, #208]	; 0xd0
			conn->llcp_conn_param.interval_max = interval_max;
   15dd0:	f8a0 80d2 	strh.w	r8, [r0, #210]	; 0xd2
			conn->llcp_conn_param.latency = latency;
   15dd4:	f8a0 70d4 	strh.w	r7, [r0, #212]	; 0xd4
			conn->llcp_conn_param.timeout = timeout;
   15dd8:	f8a0 60d6 	strh.w	r6, [r0, #214]	; 0xd6
			conn->llcp_conn_param.cmd = 1U;
   15ddc:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
			conn->llcp_conn_param.req++;
   15de0:	f880 50cc 	strb.w	r5, [r0, #204]	; 0xcc
   15de4:	e7c7      	b.n	15d76 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15de6:	2402      	movs	r4, #2
   15de8:	e7c5      	b.n	15d76 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15dea:	241a      	movs	r4, #26
   15dec:	e7c3      	b.n	15d76 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   15dee:	240c      	movs	r4, #12
   15df0:	e7c1      	b.n	15d76 <ll_conn_update+0x7e>

00015df2 <ll_chm_get>:
{
   15df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15df4:	460d      	mov	r5, r1
	conn = connection_get(handle);
   15df6:	f7f5 fda1 	bl	b93c <connection_get>
	if (!conn) {
   15dfa:	4604      	mov	r4, r0
   15dfc:	b160      	cbz	r0, 15e18 <ll_chm_get+0x26>
		conn->chm_update = 0U;
   15dfe:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15e00:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0U;
   15e04:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15e06:	2205      	movs	r2, #5
   15e08:	4631      	mov	r1, r6
   15e0a:	4628      	mov	r0, r5
   15e0c:	f7fd fb2a 	bl	13464 <memcpy>
	} while (conn->chm_update);
   15e10:	7f20      	ldrb	r0, [r4, #28]
   15e12:	2800      	cmp	r0, #0
   15e14:	d1f6      	bne.n	15e04 <ll_chm_get+0x12>
}
   15e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e18:	2002      	movs	r0, #2
   15e1a:	e7fc      	b.n	15e16 <ll_chm_get+0x24>

00015e1c <ll_start_enc_req_send>:
{
   15e1c:	b570      	push	{r4, r5, r6, lr}
   15e1e:	460d      	mov	r5, r1
   15e20:	4616      	mov	r6, r2
	conn = connection_get(handle);
   15e22:	f7f5 fd8b 	bl	b93c <connection_get>
	if (!conn) {
   15e26:	4604      	mov	r4, r0
   15e28:	b3d0      	cbz	r0, 15ea0 <ll_start_enc_req_send+0x84>
	if (error_code) {
   15e2a:	b31d      	cbz	r5, 15e74 <ll_start_enc_req_send+0x58>
		if (conn->refresh == 0) {
   15e2c:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   15e30:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   15e34:	d112      	bne.n	15e5c <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   15e36:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   15e3a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   15e3e:	428a      	cmp	r2, r1
   15e40:	d130      	bne.n	15ea4 <ll_start_enc_req_send+0x88>
			conn->llcp_type = LLCP_ENCRYPTION;
   15e42:	2103      	movs	r1, #3
			conn->llcp_req++;
   15e44:	3201      	adds	r2, #1
			conn->llcp.encryption.error_code = error_code;
   15e46:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
			conn->llcp.encryption.initiate = 0U;
   15e4a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   15e4e:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
			conn->llcp_req++;
   15e52:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   15e56:	2500      	movs	r5, #0
}
   15e58:	4628      	mov	r0, r5
   15e5a:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   15e5c:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   15e60:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   15e64:	4293      	cmp	r3, r2
   15e66:	d11d      	bne.n	15ea4 <ll_start_enc_req_send+0x88>
			conn->llcp_terminate.req++;
   15e68:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   15e6a:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
			conn->llcp_terminate.req++;
   15e6e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
   15e72:	e7f0      	b.n	15e56 <ll_start_enc_req_send+0x3a>
		if (conn->llcp_req != conn->llcp_ack) {
   15e74:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15e78:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15e7c:	429a      	cmp	r2, r3
   15e7e:	d111      	bne.n	15ea4 <ll_start_enc_req_send+0x88>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   15e80:	2210      	movs	r2, #16
   15e82:	4631      	mov	r1, r6
   15e84:	30bc      	adds	r0, #188	; 0xbc
   15e86:	f7fd faed 	bl	13464 <memcpy>
		conn->llcp_type = LLCP_ENCRYPTION;
   15e8a:	2303      	movs	r3, #3
   15e8c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   15e90:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
		conn->llcp.encryption.initiate = 0U;
   15e94:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_req++;
   15e98:	3301      	adds	r3, #1
   15e9a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   15e9e:	e7db      	b.n	15e58 <ll_start_enc_req_send+0x3c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ea0:	2502      	movs	r5, #2
   15ea2:	e7d9      	b.n	15e58 <ll_start_enc_req_send+0x3c>
				return BT_HCI_ERR_CMD_DISALLOWED;
   15ea4:	250c      	movs	r5, #12
   15ea6:	e7d7      	b.n	15e58 <ll_start_enc_req_send+0x3c>

00015ea8 <ll_feature_req_send>:
{
   15ea8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15eaa:	f7f5 fd47 	bl	b93c <connection_get>
	if (!conn) {
   15eae:	b168      	cbz	r0, 15ecc <ll_feature_req_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   15eb0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15eb4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15eb8:	4293      	cmp	r3, r2
   15eba:	d109      	bne.n	15ed0 <ll_feature_req_send+0x28>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15ebc:	2204      	movs	r2, #4
	conn->llcp_req++;
   15ebe:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15ec0:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   15ec4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   15ec8:	2000      	movs	r0, #0
}
   15eca:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ecc:	2002      	movs	r0, #2
   15ece:	e7fc      	b.n	15eca <ll_feature_req_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15ed0:	200c      	movs	r0, #12
   15ed2:	e7fa      	b.n	15eca <ll_feature_req_send+0x22>

00015ed4 <ll_version_ind_send>:
{
   15ed4:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15ed6:	f7f5 fd31 	bl	b93c <connection_get>
	if (!conn) {
   15eda:	b168      	cbz	r0, 15ef8 <ll_version_ind_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   15edc:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15ee0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15ee4:	4293      	cmp	r3, r2
   15ee6:	d109      	bne.n	15efc <ll_version_ind_send+0x28>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15ee8:	2205      	movs	r2, #5
	conn->llcp_req++;
   15eea:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15eec:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   15ef0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   15ef4:	2000      	movs	r0, #0
}
   15ef6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ef8:	2002      	movs	r0, #2
   15efa:	e7fc      	b.n	15ef6 <ll_version_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15efc:	200c      	movs	r0, #12
   15efe:	e7fa      	b.n	15ef6 <ll_version_ind_send+0x22>

00015f00 <ll_terminate_ind_send>:
{
   15f00:	b510      	push	{r4, lr}
   15f02:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15f04:	f7f5 fd1a 	bl	b93c <connection_get>
	if (!conn) {
   15f08:	b160      	cbz	r0, 15f24 <ll_terminate_ind_send+0x24>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15f0a:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   15f0e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   15f12:	4293      	cmp	r3, r2
   15f14:	d108      	bne.n	15f28 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   15f16:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   15f18:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
	conn->llcp_terminate.req++;
   15f1c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
	return 0;
   15f20:	2000      	movs	r0, #0
}
   15f22:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f24:	2002      	movs	r0, #2
   15f26:	e7fc      	b.n	15f22 <ll_terminate_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15f28:	200c      	movs	r0, #12
   15f2a:	e7fa      	b.n	15f22 <ll_terminate_ind_send+0x22>

00015f2c <ll_tx_pwr_lvl_get>:
{
   15f2c:	b510      	push	{r4, lr}
   15f2e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15f30:	f7f5 fd04 	bl	b93c <connection_get>
	if (!conn) {
   15f34:	b110      	cbz	r0, 15f3c <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   15f36:	2000      	movs	r0, #0
   15f38:	7020      	strb	r0, [r4, #0]
}
   15f3a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f3c:	2002      	movs	r0, #2
   15f3e:	e7fc      	b.n	15f3a <ll_tx_pwr_lvl_get+0xe>

00015f40 <ll_apto_get>:
{
   15f40:	b510      	push	{r4, lr}
   15f42:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15f44:	f7f5 fcfa 	bl	b93c <connection_get>
	if (!conn) {
   15f48:	b160      	cbz	r0, 15f64 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15f4a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   15f4c:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   15f50:	435a      	muls	r2, r3
   15f52:	237d      	movs	r3, #125	; 0x7d
   15f54:	4353      	muls	r3, r2
	return 0;
   15f56:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15f5c:	fb93 f3f2 	sdiv	r3, r3, r2
   15f60:	8023      	strh	r3, [r4, #0]
}
   15f62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f64:	2002      	movs	r0, #2
   15f66:	e7fc      	b.n	15f62 <ll_apto_get+0x22>

00015f68 <ll_apto_set>:
{
   15f68:	b510      	push	{r4, lr}
   15f6a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15f6c:	f7f5 fce6 	bl	b93c <connection_get>
	if (!conn) {
   15f70:	b170      	cbz	r0, 15f90 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   15f72:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   15f74:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15f78:	4353      	muls	r3, r2
   15f7a:	f242 7110 	movw	r1, #10000	; 0x2710
   15f7e:	fb01 3404 	mla	r4, r1, r4, r3
   15f82:	3c01      	subs	r4, #1
   15f84:	fb94 f4f3 	sdiv	r4, r4, r3
   15f88:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   15f8c:	2000      	movs	r0, #0
}
   15f8e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f90:	2002      	movs	r0, #2
   15f92:	e7fc      	b.n	15f8e <ll_apto_set+0x26>

00015f94 <ll_length_req_send>:
{
   15f94:	b570      	push	{r4, r5, r6, lr}
   15f96:	460e      	mov	r6, r1
   15f98:	4615      	mov	r5, r2
	conn = connection_get(handle);
   15f9a:	f7f5 fccf 	bl	b93c <connection_get>
	if (!conn) {
   15f9e:	b1d0      	cbz	r0, 15fd6 <ll_length_req_send+0x42>
	if ((conn->llcp_req != conn->llcp_ack) ||
   15fa0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15fa4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15fa8:	429a      	cmp	r2, r3
   15faa:	d116      	bne.n	15fda <ll_length_req_send+0x46>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   15fac:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
	if ((conn->llcp_req != conn->llcp_ack) ||
   15fb0:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   15fb4:	4293      	cmp	r3, r2
   15fb6:	d110      	bne.n	15fda <ll_length_req_send+0x46>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15fb8:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_length.tx_octets = tx_octets;
   15fbc:	f8a0 60fa 	strh.w	r6, [r0, #250]	; 0xfa
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15fc0:	f36f 0402 	bfc	r4, #0, #3
	conn->llcp_length.req++;
   15fc4:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15fc6:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_length.tx_time = tx_time;
   15fca:	f8a0 50fe 	strh.w	r5, [r0, #254]	; 0xfe
	conn->llcp_length.req++;
   15fce:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
	return 0;
   15fd2:	2000      	movs	r0, #0
}
   15fd4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15fd6:	2002      	movs	r0, #2
   15fd8:	e7fc      	b.n	15fd4 <ll_length_req_send+0x40>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15fda:	200c      	movs	r0, #12
   15fdc:	e7fa      	b.n	15fd4 <ll_length_req_send+0x40>

00015fde <ll_length_max_get>:
{
   15fde:	b510      	push	{r4, lr}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15fe0:	241b      	movs	r4, #27
   15fe2:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15fe4:	f44f 70a4 	mov.w	r0, #328	; 0x148
   15fe8:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15fea:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15fec:	8018      	strh	r0, [r3, #0]
}
   15fee:	bd10      	pop	{r4, pc}

00015ff0 <ll_phy_get>:
{
   15ff0:	b538      	push	{r3, r4, r5, lr}
   15ff2:	460d      	mov	r5, r1
   15ff4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15ff6:	f7f5 fca1 	bl	b93c <connection_get>
	if (!conn) {
   15ffa:	b158      	cbz	r0, 16014 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   15ffc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   16000:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16004:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   16006:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1600a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1600e:	7023      	strb	r3, [r4, #0]
	return 0;
   16010:	2000      	movs	r0, #0
}
   16012:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16014:	2002      	movs	r0, #2
   16016:	e7fc      	b.n	16012 <ll_phy_get+0x22>

00016018 <ll_phy_req_send>:
{
   16018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1601c:	4689      	mov	r9, r1
   1601e:	4690      	mov	r8, r2
   16020:	461f      	mov	r7, r3
	conn = connection_get(handle);
   16022:	f7f5 fc8b 	bl	b93c <connection_get>
	if (!conn) {
   16026:	b320      	cbz	r0, 16072 <ll_phy_req_send+0x5a>
	if ((conn->llcp_req != conn->llcp_ack) ||
   16028:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1602c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   16030:	429a      	cmp	r2, r3
   16032:	d120      	bne.n	16076 <ll_phy_req_send+0x5e>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   16034:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
	if ((conn->llcp_req != conn->llcp_ack) ||
   16038:	f890 5101 	ldrb.w	r5, [r0, #257]	; 0x101
   1603c:	429d      	cmp	r5, r3
   1603e:	d11a      	bne.n	16076 <ll_phy_req_send+0x5e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   16040:	f890 4102 	ldrb.w	r4, [r0, #258]	; 0x102
	conn->llcp_phy.cmd = 1U;
   16044:	f890 6103 	ldrb.w	r6, [r0, #259]	; 0x103
	conn->llcp_phy.tx = tx;
   16048:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1604c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   16050:	f046 0102 	orr.w	r1, r6, #2
	conn->llcp_phy.rx = rx;
   16054:	4622      	mov	r2, r4
	conn->llcp_phy.flags = flags;
   16056:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   1605a:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1605e:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   16060:	f880 1103 	strb.w	r1, [r0, #259]	; 0x103
	conn->llcp_phy.rx = rx;
   16064:	f880 2102 	strb.w	r2, [r0, #258]	; 0x102
	conn->llcp_phy.req++;
   16068:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
	return 0;
   1606c:	2000      	movs	r0, #0
}
   1606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16072:	2002      	movs	r0, #2
   16074:	e7fb      	b.n	1606e <ll_phy_req_send+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16076:	200c      	movs	r0, #12
   16078:	e7f9      	b.n	1606e <ll_phy_req_send+0x56>

0001607a <swi5_nrf5_isr>:
	mayfly_run(MAYFLY_CALL_ID_1);
   1607a:	2001      	movs	r0, #1
   1607c:	f7f3 bb3a 	b.w	96f4 <mayfly_run>

00016080 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16080:	4668      	mov	r0, sp
   16082:	f020 0107 	bic.w	r1, r0, #7
   16086:	468d      	mov	sp, r1
   16088:	b501      	push	{r0, lr}
   1608a:	f7fd f9a8 	bl	133de <z_arch_isr_direct_header>
	isr_radio();
   1608e:	f7f9 fafd 	bl	f68c <isr_radio>
	ISR_DIRECT_PM();
   16092:	f7ef f8d9 	bl	5248 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   16096:	f7ee ffe3 	bl	5060 <_IntExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1609a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1609e:	4685      	mov	sp, r0
   160a0:	4770      	bx	lr

000160a2 <radio_active_callback>:
}
   160a2:	4770      	bx	lr

000160a4 <ll_adv_data_set>:
{
   160a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160a8:	460e      	mov	r6, r1
   160aa:	4617      	mov	r7, r2
	radio_adv_data = radio_adv_data_get();
   160ac:	f7f7 fed4 	bl	de58 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   160b0:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   160b4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   160b8:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   160bc:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   160be:	f810 c002 	ldrb.w	ip, [r0, r2]
   160c2:	f00c 030f 	and.w	r3, ip, #15
   160c6:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   160c8:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   160cc:	d040      	beq.n	16150 <ll_adv_data_set+0xac>
   160ce:	2b07      	cmp	r3, #7
   160d0:	d03e      	beq.n	16150 <ll_adv_data_set+0xac>
	if (radio_adv_data->first == radio_adv_data->last) {
   160d2:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   160d6:	42ab      	cmp	r3, r5
   160d8:	d104      	bne.n	160e4 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
   160da:	3501      	adds	r5, #1
   160dc:	b2ed      	uxtb	r5, r5
			last = 0U;
   160de:	2d02      	cmp	r5, #2
   160e0:	bf08      	it	eq
   160e2:	2500      	moveq	r5, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   160e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   160e8:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   160ec:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   160f0:	5ce0      	ldrb	r0, [r4, r3]
   160f2:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0U;
   160f6:	f36f 1004 	bfc	r0, #4, #1
   160fa:	54e0      	strb	r0, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   160fc:	5ca0      	ldrb	r0, [r4, r2]
   160fe:	f814 c003 	ldrb.w	ip, [r4, r3]
   16102:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16106:	f360 1c45 	bfi	ip, r0, #5, #1
   1610a:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   1610e:	5ca0      	ldrb	r0, [r4, r2]
   16110:	fa5f fc8c 	uxtb.w	ip, ip
   16114:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16118:	f360 1c86 	bfi	ip, r0, #6, #1
   1611c:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   16120:	5ca2      	ldrb	r2, [r4, r2]
   16122:	fa5f f08c 	uxtb.w	r0, ip
   16126:	09d2      	lsrs	r2, r2, #7
   16128:	f362 10c7 	bfi	r0, r2, #7, #1
   1612c:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1612e:	2206      	movs	r2, #6
   16130:	3102      	adds	r1, #2
   16132:	f108 0002 	add.w	r0, r8, #2
   16136:	f7fd f995 	bl	13464 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1613a:	4632      	mov	r2, r6
   1613c:	4639      	mov	r1, r7
   1613e:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   16142:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   16144:	f7fd f98e 	bl	13464 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   16148:	f888 6001 	strb.w	r6, [r8, #1]
	radio_adv_data->last = last;
   1614c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   16150:	2000      	movs	r0, #0
   16152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016156 <ll_adv_scan_rsp_set>:
{
   16156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1615a:	4617      	mov	r7, r2
   1615c:	460e      	mov	r6, r1
	radio_scan_data = radio_scan_data_get();
   1615e:	f7f7 fe7f 	bl	de60 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   16162:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   16166:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1616a:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   1616c:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1616e:	d137      	bne.n	161e0 <ll_adv_scan_rsp_set+0x8a>
		last = radio_scan_data->last + 1;
   16170:	1c5d      	adds	r5, r3, #1
   16172:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   16174:	2d02      	cmp	r5, #2
			last = 0;
   16176:	bf08      	it	eq
   16178:	2500      	moveq	r5, #0
	prev = (struct pdu_adv *)
   1617a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1617e:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   16182:	b22b      	sxth	r3, r5
   16184:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   16188:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1618c:	f04f 0c04 	mov.w	ip, #4
   16190:	5ce0      	ldrb	r0, [r4, r3]
   16192:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->chan_sel = 0;
   16196:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1619a:	f36f 1045 	bfc	r0, #5, #1
   1619e:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   161a0:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   161a2:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
   161a4:	5ce2      	ldrb	r2, [r4, r3]
   161a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   161aa:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   161ae:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   161b2:	f36f 12c7 	bfc	r2, #7, #1
   161b6:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   161b8:	1db3      	adds	r3, r6, #6
   161ba:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   161be:	2206      	movs	r2, #6
   161c0:	3102      	adds	r1, #2
   161c2:	f108 0002 	add.w	r0, r8, #2
   161c6:	f7fd f94d 	bl	13464 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   161ca:	4632      	mov	r2, r6
   161cc:	4639      	mov	r1, r7
   161ce:	f108 0008 	add.w	r0, r8, #8
   161d2:	f7fd f947 	bl	13464 <memcpy>
	radio_scan_data->last = last;
   161d6:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   161da:	2000      	movs	r0, #0
   161dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161e0:	461d      	mov	r5, r3
   161e2:	e7ca      	b.n	1617a <ll_adv_scan_rsp_set+0x24>

000161e4 <rl_access_check.constprop.1>:
static int rl_access_check(bool check_ar)
   161e4:	b508      	push	{r3, lr}
	return (ll_adv_is_enabled(0) || ll_scan_is_enabled(0)) ? 0 : 1;
   161e6:	2000      	movs	r0, #0
   161e8:	f7f7 fe3e 	bl	de68 <ll_adv_is_enabled>
   161ec:	b928      	cbnz	r0, 161fa <rl_access_check.constprop.1+0x16>
   161ee:	f7f7 fe4f 	bl	de90 <ll_scan_is_enabled>
   161f2:	fab0 f080 	clz	r0, r0
   161f6:	0940      	lsrs	r0, r0, #5
}
   161f8:	bd08      	pop	{r3, pc}
	return (ll_adv_is_enabled(0) || ll_scan_is_enabled(0)) ? 0 : 1;
   161fa:	2000      	movs	r0, #0
   161fc:	e7fc      	b.n	161f8 <rl_access_check.constprop.1+0x14>

000161fe <ll_wl_size_get>:
}
   161fe:	2008      	movs	r0, #8
   16200:	4770      	bx	lr

00016202 <ll_rl_size_get>:
   16202:	2008      	movs	r0, #8
   16204:	4770      	bx	lr

00016206 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   16206:	b570      	push	{r4, r5, r6, lr}
   16208:	b08c      	sub	sp, #48	; 0x30
   1620a:	460e      	mov	r6, r1
   1620c:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1620e:	4601      	mov	r1, r0
   16210:	2210      	movs	r2, #16
   16212:	4668      	mov	r0, sp
{
   16214:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   16216:	f7ff faa7 	bl	15768 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1621a:	2210      	movs	r2, #16
   1621c:	eb0d 0002 	add.w	r0, sp, r2
   16220:	4631      	mov	r1, r6
   16222:	f7ff faa1 	bl	15768 <mem_rcopy>

	do_ecb(&ecb);
   16226:	4668      	mov	r0, sp
   16228:	f7f9 f98a 	bl	f540 <do_ecb>

	if (cipher_text_le) {
   1622c:	b125      	cbz	r5, 16238 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1622e:	2210      	movs	r2, #16
   16230:	a908      	add	r1, sp, #32
   16232:	4628      	mov	r0, r5
   16234:	f7ff fa98 	bl	15768 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   16238:	b124      	cbz	r4, 16244 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1623a:	2210      	movs	r2, #16
   1623c:	a908      	add	r1, sp, #32
   1623e:	4620      	mov	r0, r4
   16240:	f7fd f910 	bl	13464 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   16244:	b00c      	add	sp, #48	; 0x30
   16246:	bd70      	pop	{r4, r5, r6, pc}

00016248 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   16248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1624c:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   16250:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   16252:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   16256:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1625a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1625e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   16262:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   16266:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1626a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1626e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   16272:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   16276:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1627a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1627e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   16282:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   16286:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1628a:	4770      	bx	lr

0001628c <radio_tx_ready_delay_get>:
	switch (phy) {
   1628c:	2802      	cmp	r0, #2
}
   1628e:	bf0c      	ite	eq
   16290:	2028      	moveq	r0, #40	; 0x28
   16292:	2029      	movne	r0, #41	; 0x29
   16294:	4770      	bx	lr

00016296 <radio_tx_chain_delay_get>:
}
   16296:	2001      	movs	r0, #1
   16298:	4770      	bx	lr

0001629a <radio_rx_ready_delay_get>:
}
   1629a:	2029      	movs	r0, #41	; 0x29
   1629c:	4770      	bx	lr

0001629e <radio_rx_chain_delay_get>:
	switch (phy) {
   1629e:	2802      	cmp	r0, #2
}
   162a0:	bf0c      	ite	eq
   162a2:	2006      	moveq	r0, #6
   162a4:	200a      	movne	r0, #10
   162a6:	4770      	bx	lr

000162a8 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   162a8:	2901      	cmp	r1, #1
   162aa:	d005      	beq.n	162b8 <mayfly_enable_cb+0x10>
   162ac:	4040      	eors	r0, r0
   162ae:	f380 8811 	msr	BASEPRI, r0
   162b2:	f04f 0003 	mov.w	r0, #3
   162b6:	df02      	svc	2
		irq_enable(SWI5_IRQn);
   162b8:	2019      	movs	r0, #25
	if (enable) {
   162ba:	b10a      	cbz	r2, 162c0 <mayfly_enable_cb+0x18>
		irq_enable(SWI5_IRQn);
   162bc:	f7ee bf7a 	b.w	51b4 <z_arch_irq_enable>
		irq_disable(SWI5_IRQn);
   162c0:	f7ee bf88 	b.w	51d4 <z_arch_irq_disable>

000162c4 <mayfly_is_enabled>:
	switch (callee_id) {
   162c4:	b139      	cbz	r1, 162d6 <mayfly_is_enabled+0x12>
   162c6:	2901      	cmp	r1, #1
   162c8:	d008      	beq.n	162dc <mayfly_is_enabled+0x18>
		LL_ASSERT(0);
   162ca:	4040      	eors	r0, r0
   162cc:	f380 8811 	msr	BASEPRI, r0
   162d0:	f04f 0003 	mov.w	r0, #3
   162d4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   162d6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI5_IRQn);
   162d8:	f7ee bf90 	b.w	51fc <z_arch_irq_is_enabled>
   162dc:	2019      	movs	r0, #25
   162de:	e7fb      	b.n	162d8 <mayfly_is_enabled+0x14>

000162e0 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   162e0:	4288      	cmp	r0, r1
   162e2:	d00a      	beq.n	162fa <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   162e4:	b918      	cbnz	r0, 162ee <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   162e6:	1e4b      	subs	r3, r1, #1
   162e8:	4258      	negs	r0, r3
   162ea:	4158      	adcs	r0, r3
   162ec:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   162ee:	2801      	cmp	r0, #1
   162f0:	d105      	bne.n	162fe <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   162f2:	fab1 f081 	clz	r0, r1
   162f6:	0940      	lsrs	r0, r0, #5
   162f8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   162fa:	2001      	movs	r0, #1
   162fc:	4770      	bx	lr
   162fe:	2000      	movs	r0, #0
}
   16300:	4770      	bx	lr

00016302 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   16302:	4601      	mov	r1, r0
   16304:	2000      	movs	r0, #0
   16306:	f7f9 b913 	b.w	f530 <cntr_cmp_set>

0001630a <fixed_data_unref>:
}
   1630a:	4770      	bx	lr

0001630c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1630c:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1630e:	685b      	ldr	r3, [r3, #4]
   16310:	460a      	mov	r2, r1
   16312:	6819      	ldr	r1, [r3, #0]
   16314:	f7f9 bdb6 	b.w	fe84 <net_buf_alloc_len>

00016318 <net_buf_get>:
{
   16318:	b570      	push	{r4, r5, r6, lr}
   1631a:	4606      	mov	r6, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1631c:	f000 fc42 	bl	16ba4 <z_impl_k_queue_get>
	if (!buf) {
   16320:	4605      	mov	r5, r0
   16322:	b128      	cbz	r0, 16330 <net_buf_get+0x18>
   16324:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16326:	7963      	ldrb	r3, [r4, #5]
   16328:	f013 0301 	ands.w	r3, r3, #1
   1632c:	d102      	bne.n	16334 <net_buf_get+0x1c>
	frag->frags = NULL;
   1632e:	6023      	str	r3, [r4, #0]
}
   16330:	4628      	mov	r0, r5
   16332:	bd70      	pop	{r4, r5, r6, pc}
   16334:	2100      	movs	r1, #0
   16336:	4630      	mov	r0, r6
   16338:	f000 fc34 	bl	16ba4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1633c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1633e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   16340:	f023 0301 	bic.w	r3, r3, #1
   16344:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16346:	4604      	mov	r4, r0
   16348:	e7ed      	b.n	16326 <net_buf_get+0xe>

0001634a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1634a:	6883      	ldr	r3, [r0, #8]
   1634c:	4419      	add	r1, r3
   1634e:	6001      	str	r1, [r0, #0]
}
   16350:	4770      	bx	lr

00016352 <net_buf_put>:
{
   16352:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   16354:	460a      	mov	r2, r1
   16356:	6814      	ldr	r4, [r2, #0]
   16358:	b914      	cbnz	r4, 16360 <net_buf_put+0xe>
}
   1635a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1635c:	f000 bc03 	b.w	16b66 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   16360:	7953      	ldrb	r3, [r2, #5]
   16362:	f043 0301 	orr.w	r3, r3, #1
   16366:	7153      	strb	r3, [r2, #5]
   16368:	4622      	mov	r2, r4
   1636a:	e7f4      	b.n	16356 <net_buf_put+0x4>

0001636c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1636c:	7903      	ldrb	r3, [r0, #4]
   1636e:	3301      	adds	r3, #1
   16370:	7103      	strb	r3, [r0, #4]
	return buf;
}
   16372:	4770      	bx	lr

00016374 <net_buf_simple_add>:
	return buf->data + buf->len;
   16374:	8883      	ldrh	r3, [r0, #4]
   16376:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   16378:	4419      	add	r1, r3
   1637a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1637c:	18d0      	adds	r0, r2, r3
   1637e:	4770      	bx	lr

00016380 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   16380:	b430      	push	{r4, r5}
   16382:	8883      	ldrh	r3, [r0, #4]
   16384:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   16386:	189d      	adds	r5, r3, r2
   16388:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1638a:	18e0      	adds	r0, r4, r3
}
   1638c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1638e:	f7fd b869 	b.w	13464 <memcpy>

00016392 <net_buf_simple_add_u8>:
   16392:	8883      	ldrh	r3, [r0, #4]
   16394:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   16396:	b510      	push	{r4, lr}
	buf->len += len;
   16398:	1c5c      	adds	r4, r3, #1
   1639a:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1639c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1639e:	18d0      	adds	r0, r2, r3
   163a0:	bd10      	pop	{r4, pc}

000163a2 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   163a2:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   163a4:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   163a6:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   163a8:	4411      	add	r1, r2
	buf->data -= len;
   163aa:	6003      	str	r3, [r0, #0]
	buf->len += len;
   163ac:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   163ae:	4618      	mov	r0, r3
   163b0:	4770      	bx	lr

000163b2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   163b2:	8883      	ldrh	r3, [r0, #4]
   163b4:	1a5b      	subs	r3, r3, r1
   163b6:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   163b8:	6803      	ldr	r3, [r0, #0]
   163ba:	4419      	add	r1, r3
   163bc:	6001      	str	r1, [r0, #0]
}
   163be:	4608      	mov	r0, r1
   163c0:	4770      	bx	lr

000163c2 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   163c2:	4603      	mov	r3, r0
	void *data = buf->data;
   163c4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   163c6:	889a      	ldrh	r2, [r3, #4]
   163c8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   163ca:	4401      	add	r1, r0
	buf->len -= len;
   163cc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   163ce:	6019      	str	r1, [r3, #0]

	return data;
}
   163d0:	4770      	bx	lr

000163d2 <net_buf_simple_pull_le16>:

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   163d2:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   163d4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   163d6:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   163d8:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   163da:	f7ff ffea 	bl	163b2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   163de:	4610      	mov	r0, r2
   163e0:	bd08      	pop	{r3, pc}

000163e2 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   163e2:	6802      	ldr	r2, [r0, #0]
   163e4:	6880      	ldr	r0, [r0, #8]
}
   163e6:	1a10      	subs	r0, r2, r0
   163e8:	4770      	bx	lr

000163ea <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   163ea:	6802      	ldr	r2, [r0, #0]
   163ec:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   163ee:	88c3      	ldrh	r3, [r0, #6]
   163f0:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   163f2:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   163f4:	1a9b      	subs	r3, r3, r2
}
   163f6:	1a18      	subs	r0, r3, r0
   163f8:	4770      	bx	lr

000163fa <nrf_gpio_cfg_sense_set>:
{
   163fa:	0080      	lsls	r0, r0, #2
   163fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   16400:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   16404:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   16408:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1640c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   16410:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   16414:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   16418:	4770      	bx	lr

0001641a <gpio_nrfx_write>:
{
   1641a:	b510      	push	{r4, lr}
	return port->config->config_info;
   1641c:	6804      	ldr	r4, [r0, #0]
   1641e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16420:	68a4      	ldr	r4, [r4, #8]
   16422:	69c0      	ldr	r0, [r0, #28]
   16424:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   16426:	2901      	cmp	r1, #1
   16428:	d104      	bne.n	16434 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1642a:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1642c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   16430:	2000      	movs	r0, #0
   16432:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   16434:	3300      	adds	r3, #0
   16436:	fa20 f002 	lsr.w	r0, r0, r2
   1643a:	f04f 0101 	mov.w	r1, #1
   1643e:	bf18      	it	ne
   16440:	2301      	movne	r3, #1
   16442:	f000 0001 	and.w	r0, r0, #1
   16446:	4091      	lsls	r1, r2
   16448:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1644a:	bf14      	ite	ne
   1644c:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   16450:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   16454:	e7ec      	b.n	16430 <gpio_nrfx_write+0x16>

00016456 <gpio_nrfx_read>:
{
   16456:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   16458:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1645a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1645c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1645e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16460:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   16462:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   16466:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   1646a:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1646e:	4060      	eors	r0, r4
   16470:	406c      	eors	r4, r5
   16472:	4034      	ands	r4, r6
   16474:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   16476:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   16478:	bf1c      	itt	ne
   1647a:	40d0      	lsrne	r0, r2
   1647c:	f000 0001 	andne.w	r0, r0, #1
   16480:	6018      	str	r0, [r3, #0]
}
   16482:	2000      	movs	r0, #0
   16484:	bd70      	pop	{r4, r5, r6, pc}

00016486 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   16486:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   16488:	6818      	ldr	r0, [r3, #0]
{
   1648a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1648c:	b158      	cbz	r0, 164a6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1648e:	2400      	movs	r4, #0
   16490:	4281      	cmp	r1, r0
   16492:	d113      	bne.n	164bc <gpio_nrfx_manage_callback+0x36>
   16494:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   16496:	b95c      	cbnz	r4, 164b0 <gpio_nrfx_manage_callback+0x2a>
   16498:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1649a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1649c:	42a1      	cmp	r1, r4
   1649e:	d100      	bne.n	164a2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   164a0:	6058      	str	r0, [r3, #4]
	parent->next = child;
   164a2:	2000      	movs	r0, #0
   164a4:	6008      	str	r0, [r1, #0]
	if (set) {
   164a6:	b972      	cbnz	r2, 164c6 <gpio_nrfx_manage_callback+0x40>
	return 0;
   164a8:	2000      	movs	r0, #0
}
   164aa:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   164ac:	4628      	mov	r0, r5
   164ae:	e7ef      	b.n	16490 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   164b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   164b2:	6858      	ldr	r0, [r3, #4]
   164b4:	4281      	cmp	r1, r0
	list->tail = node;
   164b6:	bf08      	it	eq
   164b8:	605c      	streq	r4, [r3, #4]
   164ba:	e7f2      	b.n	164a2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   164bc:	6805      	ldr	r5, [r0, #0]
   164be:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   164c0:	2d00      	cmp	r5, #0
   164c2:	d1f3      	bne.n	164ac <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   164c4:	b13a      	cbz	r2, 164d6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   164c6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   164c8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   164ca:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   164cc:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   164ce:	2800      	cmp	r0, #0
   164d0:	d1ea      	bne.n	164a8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   164d2:	6059      	str	r1, [r3, #4]
   164d4:	e7e9      	b.n	164aa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   164d6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   164da:	e7e6      	b.n	164aa <gpio_nrfx_manage_callback+0x24>

000164dc <gpio_nrfx_config>:
{
   164dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e0:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   164e2:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   164e4:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   164e8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   164ec:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   164ee:	d04a      	beq.n	16586 <gpio_nrfx_config+0xaa>
   164f0:	dc2d      	bgt.n	1654e <gpio_nrfx_config+0x72>
   164f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   164f6:	d03e      	beq.n	16576 <gpio_nrfx_config+0x9a>
   164f8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   164fc:	d03f      	beq.n	1657e <gpio_nrfx_config+0xa2>
   164fe:	bb68      	cbnz	r0, 1655c <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   16500:	f406 7740 	and.w	r7, r6, #768	; 0x300
   16504:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   16508:	d03f      	beq.n	1658a <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
   1650a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   1650e:	4263      	negs	r3, r4
   16510:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   16512:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   16516:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1651a:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1651c:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   16520:	bf18      	it	ne
   16522:	b2d4      	uxtbne	r4, r2
   16524:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   16528:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   1652c:	bf12      	itee	ne
   1652e:	46a1      	movne	r9, r4
		to_pin   = 31U;
   16530:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   16534:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16536:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   1653a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1653e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   16542:	45a1      	cmp	r9, r4
   16544:	d223      	bcs.n	1658e <gpio_nrfx_config+0xb2>
	return 0;
   16546:	2000      	movs	r0, #0
}
   16548:	b003      	add	sp, #12
   1654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1654e:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   16552:	d016      	beq.n	16582 <gpio_nrfx_config+0xa6>
   16554:	dc05      	bgt.n	16562 <gpio_nrfx_config+0x86>
   16556:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1655a:	d00e      	beq.n	1657a <gpio_nrfx_config+0x9e>
		return -EINVAL;
   1655c:	f06f 0015 	mvn.w	r0, #21
   16560:	e7f2      	b.n	16548 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   16562:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   16566:	d004      	beq.n	16572 <gpio_nrfx_config+0x96>
   16568:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1656c:	d1f6      	bne.n	1655c <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
   1656e:	2007      	movs	r0, #7
		break;
   16570:	e7c6      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   16572:	2006      	movs	r0, #6
		break;
   16574:	e7c4      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   16576:	2001      	movs	r0, #1
		break;
   16578:	e7c2      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   1657a:	2003      	movs	r0, #3
		break;
   1657c:	e7c0      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   1657e:	2004      	movs	r0, #4
		break;
   16580:	e7be      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   16582:	2005      	movs	r0, #5
		break;
   16584:	e7bc      	b.n	16500 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   16586:	2002      	movs	r0, #2
   16588:	e7ba      	b.n	16500 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   1658a:	2303      	movs	r3, #3
   1658c:	e7c1      	b.n	16512 <gpio_nrfx_config+0x36>
	return port->config->config_info;
   1658e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   16592:	6892      	ldr	r2, [r2, #8]
   16594:	7911      	ldrb	r1, [r2, #4]
   16596:	f004 021f 	and.w	r2, r4, #31
   1659a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   1659e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   165a2:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   165a6:	fa0b f204 	lsl.w	r2, fp, r4
   165aa:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   165ac:	2b00      	cmp	r3, #0
   165ae:	d025      	beq.n	165fc <gpio_nrfx_config+0x120>
   165b0:	4311      	orrs	r1, r2
   165b2:	60a9      	str	r1, [r5, #8]
   165b4:	6969      	ldr	r1, [r5, #20]
   165b6:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   165b8:	06b0      	lsls	r0, r6, #26
   165ba:	bf4c      	ite	mi
   165bc:	4311      	orrmi	r1, r2
   165be:	4391      	bicpl	r1, r2
   165c0:	6169      	str	r1, [r5, #20]
   165c2:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   165c4:	0670      	lsls	r0, r6, #25
   165c6:	bf4c      	ite	mi
   165c8:	4311      	orrmi	r1, r2
   165ca:	4391      	bicpl	r1, r2
   165cc:	61a9      	str	r1, [r5, #24]
   165ce:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   165d0:	0770      	lsls	r0, r6, #29
   165d2:	bf4c      	ite	mi
   165d4:	4311      	orrmi	r1, r2
   165d6:	4391      	bicpl	r1, r2
   165d8:	6129      	str	r1, [r5, #16]
   165da:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   165dc:	0630      	lsls	r0, r6, #24
   165de:	bf4c      	ite	mi
   165e0:	430a      	orrmi	r2, r1
   165e2:	ea21 0202 	bicpl.w	r2, r1, r2
   165e6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   165e8:	4621      	mov	r1, r4
   165ea:	4640      	mov	r0, r8
   165ec:	f7f9 fda0 	bl	10130 <gpiote_pin_int_cfg>
		if (res != 0) {
   165f0:	2800      	cmp	r0, #0
   165f2:	d1a9      	bne.n	16548 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   165f4:	3401      	adds	r4, #1
   165f6:	b2e4      	uxtb	r4, r4
   165f8:	9b01      	ldr	r3, [sp, #4]
   165fa:	e7a2      	b.n	16542 <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   165fc:	ea21 0102 	bic.w	r1, r1, r2
   16600:	e7d7      	b.n	165b2 <gpio_nrfx_config+0xd6>

00016602 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   16602:	2901      	cmp	r1, #1
{
   16604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   16608:	bf18      	it	ne
   1660a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1660c:	6887      	ldr	r7, [r0, #8]
{
   1660e:	4606      	mov	r6, r0
		to_pin   = pin;
   16610:	bf12      	itee	ne
   16612:	4625      	movne	r5, r4
		to_pin   = 31U;
   16614:	251f      	moveq	r5, #31
		from_pin = 0U;
   16616:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   16618:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1661c:	42ac      	cmp	r4, r5
   1661e:	d902      	bls.n	16626 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   16620:	2000      	movs	r0, #0
}
   16622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   16626:	68fb      	ldr	r3, [r7, #12]
   16628:	fa08 f204 	lsl.w	r2, r8, r4
   1662c:	ea23 0302 	bic.w	r3, r3, r2
   16630:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   16632:	4621      	mov	r1, r4
   16634:	4630      	mov	r0, r6
   16636:	f7f9 fd7b 	bl	10130 <gpiote_pin_int_cfg>
		if (res != 0) {
   1663a:	2800      	cmp	r0, #0
   1663c:	d1f1      	bne.n	16622 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1663e:	3401      	adds	r4, #1
   16640:	b2e4      	uxtb	r4, r4
   16642:	e7eb      	b.n	1661c <gpio_nrfx_pin_disable_callback+0x1a>

00016644 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   16644:	2901      	cmp	r1, #1
{
   16646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1664a:	bf18      	it	ne
   1664c:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1664e:	6887      	ldr	r7, [r0, #8]
{
   16650:	4606      	mov	r6, r0
		to_pin   = pin;
   16652:	bf12      	itee	ne
   16654:	4625      	movne	r5, r4
		to_pin   = 31U;
   16656:	251f      	moveq	r5, #31
		from_pin = 0U;
   16658:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1665a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1665e:	42ac      	cmp	r4, r5
   16660:	d902      	bls.n	16668 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   16662:	2000      	movs	r0, #0
}
   16664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   16668:	68fb      	ldr	r3, [r7, #12]
   1666a:	fa08 f204 	lsl.w	r2, r8, r4
   1666e:	4313      	orrs	r3, r2
   16670:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   16672:	4621      	mov	r1, r4
   16674:	4630      	mov	r0, r6
   16676:	f7f9 fd5b 	bl	10130 <gpiote_pin_int_cfg>
		if (res != 0) {
   1667a:	2800      	cmp	r0, #0
   1667c:	d1f2      	bne.n	16664 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1667e:	3401      	adds	r4, #1
   16680:	b2e4      	uxtb	r4, r4
   16682:	e7ec      	b.n	1665e <gpio_nrfx_pin_enable_callback+0x1a>

00016684 <pwm_nrfx_pin_set>:
{
   16684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16688:	461f      	mov	r7, r3
	const struct pwm_nrfx_config *config = dev->config->config_info;
   1668a:	6803      	ldr	r3, [r0, #0]
	struct pwm_nrfx_data *data = dev->driver_data;
   1668c:	6884      	ldr	r4, [r0, #8]
	const struct pwm_nrfx_config *config = dev->config->config_info;
   1668e:	689e      	ldr	r6, [r3, #8]
{
   16690:	4689      	mov	r9, r1
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
   16692:	f106 0108 	add.w	r1, r6, #8
{
   16696:	4615      	mov	r5, r2
   16698:	f106 000c 	add.w	r0, r6, #12
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
   1669c:	460b      	mov	r3, r1
   1669e:	eba3 0801 	sub.w	r8, r3, r1
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   166a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   166a6:	2aff      	cmp	r2, #255	; 0xff
   166a8:	fa5f f888 	uxtb.w	r8, r8
   166ac:	d003      	beq.n	166b6 <pwm_nrfx_pin_set+0x32>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   166ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   166b2:	4591      	cmp	r9, r2
   166b4:	d024      	beq.n	16700 <pwm_nrfx_pin_set+0x7c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   166b6:	4298      	cmp	r0, r3
   166b8:	d1f1      	bne.n	1669e <pwm_nrfx_pin_set+0x1a>
		return -EINVAL;
   166ba:	f06f 0015 	mvn.w	r0, #21
}
   166be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (period_cycles > PWM_COUNTERTOP_COUNTERTOP_Msk) {
   166c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   166c6:	d317      	bcc.n	166f8 <pwm_nrfx_pin_set+0x74>
   166c8:	2301      	movs	r3, #1
			u32_t new_countertop = period_cycles >> prescaler;
   166ca:	fa25 f203 	lsr.w	r2, r5, r3
			if (new_countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   166ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   166d2:	b2d9      	uxtb	r1, r3
   166d4:	d20c      	bcs.n	166f0 <pwm_nrfx_pin_set+0x6c>
				data->prescaler = prescaler;
   166d6:	73a1      	strb	r1, [r4, #14]
				data->countertop = new_countertop;
   166d8:	81a2      	strh	r2, [r4, #12]
	nrf_pwm_configure(pwm_instance,
   166da:	7bb2      	ldrb	r2, [r6, #14]
   166dc:	89a3      	ldrh	r3, [r4, #12]
    p_reg->PRESCALER  = base_clock;
   166de:	7ba1      	ldrb	r1, [r4, #14]
		data->period_cycles = period_cycles;
   166e0:	6025      	str	r5, [r4, #0]
   166e2:	f8ca 150c 	str.w	r1, [sl, #1292]	; 0x50c
    p_reg->MODE       = mode;
   166e6:	f8ca 2504 	str.w	r2, [sl, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   166ea:	f8ca 3508 	str.w	r3, [sl, #1288]	; 0x508
   166ee:	e011      	b.n	16714 <pwm_nrfx_pin_set+0x90>
   166f0:	3301      	adds	r3, #1
		for (u8_t prescaler = 1;
   166f2:	2b08      	cmp	r3, #8
   166f4:	d1e9      	bne.n	166ca <pwm_nrfx_pin_set+0x46>
   166f6:	e7e0      	b.n	166ba <pwm_nrfx_pin_set+0x36>
		data->prescaler = 0U;
   166f8:	2300      	movs	r3, #0
   166fa:	73a3      	strb	r3, [r4, #14]
		data->countertop = period_cycles;
   166fc:	81a5      	strh	r5, [r4, #12]
   166fe:	e7ec      	b.n	166da <pwm_nrfx_pin_set+0x56>
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
   16700:	4630      	mov	r0, r6
	NRF_PWM_Type *pwm_instance = config->pwm.p_registers;
   16702:	f8d6 a000 	ldr.w	sl, [r6]
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
   16706:	f7ee f96d 	bl	49e4 <nrfx_pwm_is_stopped>
   1670a:	2800      	cmp	r0, #0
   1670c:	d1d9      	bne.n	166c2 <pwm_nrfx_pin_set+0x3e>
		if (period_cycles == data->period_cycles) {
   1670e:	6823      	ldr	r3, [r4, #0]
   16710:	429d      	cmp	r5, r3
   16712:	d1d2      	bne.n	166ba <pwm_nrfx_pin_set+0x36>
	if (pulse_cycles > period_cycles) {
   16714:	42bd      	cmp	r5, r7
   16716:	d3d0      	bcc.n	166ba <pwm_nrfx_pin_set+0x36>
   16718:	eb04 0148 	add.w	r1, r4, r8, lsl #1
		| (pulse_cycles >> data->prescaler));
   1671c:	7ba2      	ldrb	r2, [r4, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1671e:	888b      	ldrh	r3, [r1, #4]
		| (pulse_cycles >> data->prescaler));
   16720:	fa27 f202 	lsr.w	r2, r7, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   16724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   16728:	4313      	orrs	r3, r2
	data->current[channel] = (
   1672a:	808b      	strh	r3, [r1, #4]
	if (pulse_cycles == 0U || pulse_cycles == period_cycles) {
   1672c:	b10f      	cbz	r7, 16732 <pwm_nrfx_pin_set+0xae>
   1672e:	42bd      	cmp	r5, r7
   16730:	d10b      	bne.n	1674a <pwm_nrfx_pin_set+0xc6>
			config->initial_config.output_pins[channel]
   16732:	44b0      	add	r8, r6
   16734:	f998 3008 	ldrsb.w	r3, [r8, #8]
			&& !channel_inverted_state;
   16738:	bb67      	cbnz	r7, 16794 <pwm_nrfx_pin_set+0x110>
			&& channel_inverted_state;
   1673a:	bb0d      	cbnz	r5, 16780 <pwm_nrfx_pin_set+0xfc>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1673c:	2101      	movs	r1, #1
    p_reg->OUTCLR = clr_mask;
   1673e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16742:	fa01 f109 	lsl.w	r1, r1, r9
    p_reg->OUTCLR = clr_mask;
   16746:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1674a:	1d22      	adds	r2, r4, #4
   1674c:	f104 010c 	add.w	r1, r4, #12
			data->current[channel]
   16750:	f832 3b02 	ldrh.w	r3, [r2], #2
		u16_t channel_pulse_cycle =
   16754:	f3c3 030e 	ubfx	r3, r3, #0, #15
		if (channel_pulse_cycle > 0
   16758:	b113      	cbz	r3, 16760 <pwm_nrfx_pin_set+0xdc>
		    && channel_pulse_cycle < data->countertop) {
   1675a:	89a0      	ldrh	r0, [r4, #12]
   1675c:	4298      	cmp	r0, r3
   1675e:	d806      	bhi.n	1676e <pwm_nrfx_pin_set+0xea>
	for (channel = 0U; channel < NRF_PWM_CHANNEL_COUNT; channel++) {
   16760:	428a      	cmp	r2, r1
   16762:	d1f5      	bne.n	16750 <pwm_nrfx_pin_set+0xcc>
		nrfx_pwm_stop(&config->pwm, false);
   16764:	2100      	movs	r1, #0
   16766:	4630      	mov	r0, r6
   16768:	f7fc fe17 	bl	1339a <nrfx_pwm_stop>
   1676c:	e006      	b.n	1677c <pwm_nrfx_pin_set+0xf8>
		nrfx_pwm_simple_playback(&config->pwm,
   1676e:	2302      	movs	r3, #2
   16770:	2201      	movs	r2, #1
   16772:	f106 0114 	add.w	r1, r6, #20
   16776:	4630      	mov	r0, r6
   16778:	f7ee f8fa 	bl	4970 <nrfx_pwm_simple_playback>
	return 0;
   1677c:	2000      	movs	r0, #0
   1677e:	e79e      	b.n	166be <pwm_nrfx_pin_set+0x3a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   16780:	2b00      	cmp	r3, #0
   16782:	dadb      	bge.n	1673c <pwm_nrfx_pin_set+0xb8>
   16784:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   16786:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1678a:	fa01 f109 	lsl.w	r1, r1, r9
   1678e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   16792:	e7da      	b.n	1674a <pwm_nrfx_pin_set+0xc6>
			&& channel_inverted_state;
   16794:	42bd      	cmp	r5, r7
   16796:	d1f5      	bne.n	16784 <pwm_nrfx_pin_set+0x100>
   16798:	2b00      	cmp	r3, #0
   1679a:	dbcf      	blt.n	1673c <pwm_nrfx_pin_set+0xb8>
   1679c:	e7f2      	b.n	16784 <pwm_nrfx_pin_set+0x100>

0001679e <nrf_uarte_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1679e:	2300      	movs	r3, #0
   167a0:	5043      	str	r3, [r0, r1]
{
   167a2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   167a4:	5843      	ldr	r3, [r0, r1]
   167a6:	9301      	str	r3, [sp, #4]
    (void)dummy;
   167a8:	9b01      	ldr	r3, [sp, #4]
}
   167aa:	b002      	add	sp, #8
   167ac:	4770      	bx	lr

000167ae <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   167ae:	6883      	ldr	r3, [r0, #8]
   167b0:	689b      	ldr	r3, [r3, #8]
   167b2:	7b9a      	ldrb	r2, [r3, #14]
   167b4:	b172      	cbz	r2, 167d4 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   167b6:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   167b8:	6892      	ldr	r2, [r2, #8]
   167ba:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   167bc:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   167c0:	b141      	cbz	r1, 167d4 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   167c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   167c6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167ca:	2101      	movs	r1, #1
   167cc:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   167ce:	2200      	movs	r2, #0
   167d0:	739a      	strb	r2, [r3, #14]
		return;
   167d2:	4770      	bx	lr
	if (data->int_driven->cb) {
   167d4:	681a      	ldr	r2, [r3, #0]
   167d6:	b10a      	cbz	r2, 167dc <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   167d8:	6858      	ldr	r0, [r3, #4]
   167da:	4710      	bx	r2
}
   167dc:	4770      	bx	lr

000167de <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
	*cfg = get_dev_data(dev)->uart_config;
   167de:	6882      	ldr	r2, [r0, #8]
{
   167e0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   167e2:	e892 0003 	ldmia.w	r2, {r0, r1}
   167e6:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
   167ea:	2000      	movs	r0, #0
   167ec:	4770      	bx	lr

000167ee <uarte_nrfx_err_check>:
	return dev->config->config_info;
   167ee:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   167f0:	689b      	ldr	r3, [r3, #8]
   167f2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   167f4:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
static int uarte_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   167f8:	b118      	cbz	r0, 16802 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   167fa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   167fe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uarte_errorsrc_get_and_clear(uarte);
	}

	return error;
}
   16802:	4770      	bx	lr

00016804 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   16804:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   16806:	6892      	ldr	r2, [r2, #8]
   16808:	6812      	ldr	r2, [r2, #0]
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer is empty.
 */
static int uarte_nrfx_poll_in(struct device *dev, unsigned char *c)
{
   1680a:	b508      	push	{r3, lr}

	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1680c:	6883      	ldr	r3, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1680e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   16812:	b150      	cbz	r0, 1682a <uarte_nrfx_poll_in+0x26>
		return -1;
	}

	*c = data->rx_data;
   16814:	7b1b      	ldrb	r3, [r3, #12]
   16816:	700b      	strb	r3, [r1, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   16818:	4610      	mov	r0, r2
   1681a:	f44f 7188 	mov.w	r1, #272	; 0x110
   1681e:	f7ff ffbe 	bl	1679e <nrf_uarte_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16822:	2301      	movs	r3, #1
   16824:	6013      	str	r3, [r2, #0]
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   16826:	2000      	movs	r0, #0
}
   16828:	bd08      	pop	{r3, pc}
		return -1;
   1682a:	f04f 30ff 	mov.w	r0, #4294967295
   1682e:	e7fb      	b.n	16828 <uarte_nrfx_poll_in+0x24>

00016830 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(struct device *dev, unsigned char c)
{
   16830:	b513      	push	{r0, r1, r4, lr}
	return dev->config->config_info;
   16832:	6803      	ldr	r3, [r0, #0]
{
   16834:	ac02      	add	r4, sp, #8
	return config->uarte_regs;
   16836:	689b      	ldr	r3, [r3, #8]
{
   16838:	f804 1d01 	strb.w	r1, [r4, #-1]!
	return config->uarte_regs;
   1683c:	681a      	ldr	r2, [r3, #0]
	 * before writing. This is a trade-off between losing a byte once in a
	 * blue moon against hanging up the whole thread permanently
	 */

	/* reset transmitter ready state */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   1683e:	f44f 7190 	mov.w	r1, #288	; 0x120
   16842:	4610      	mov	r0, r2
   16844:	f7ff ffab 	bl	1679e <nrf_uarte_event_clear>
__STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t  const * p_buffer,
                                             size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   16848:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1684a:	f8c2 4544 	str.w	r4, [r2, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1684e:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16852:	6093      	str	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16854:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	/* send a character */
	nrf_uarte_tx_buffer_set(uarte, &c, 1);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	/* Wait for transmitter to be ready */
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   16858:	2900      	cmp	r1, #0
   1685a:	d0fb      	beq.n	16854 <uarte_nrfx_poll_out+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1685c:	60d3      	str	r3, [r2, #12]
				     NRF_UARTE_INT_ENDTX_MASK |
				     NRF_UARTE_INT_TXSTOPPED_MASK);

	}
#endif
}
   1685e:	b002      	add	sp, #8
   16860:	bd10      	pop	{r4, pc}

00016862 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   16862:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16864:	689b      	ldr	r3, [r3, #8]
#ifdef UARTE_INTERRUPT_DRIVEN
/** Interrupt driven FIFO fill function */
static int uarte_nrfx_fifo_fill(struct device *dev,
				const u8_t *tx_data,
				int len)
{
   16866:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   16868:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1686a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
{
   1686e:	460e      	mov	r6, r1
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   16870:	b1db      	cbz	r3, 168aa <uarte_nrfx_fifo_fill+0x48>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   16872:	6885      	ldr	r5, [r0, #8]
		return 0;
	}

	if (len > data->int_driven->tx_buff_size) {
   16874:	68ab      	ldr	r3, [r5, #8]
   16876:	899b      	ldrh	r3, [r3, #12]
		len = data->int_driven->tx_buff_size;
	}

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   16878:	f44f 7190 	mov.w	r1, #288	; 0x120
   1687c:	429a      	cmp	r2, r3
   1687e:	4620      	mov	r0, r4
   16880:	bfa8      	it	ge
   16882:	461a      	movge	r2, r3
   16884:	f7ff ff8b 	bl	1679e <nrf_uarte_event_clear>

	/* Copy data to RAM buffer for EasyDMA transfer */
	for (int i = 0; i < len; i++) {
   16888:	2300      	movs	r3, #0
   1688a:	68a9      	ldr	r1, [r5, #8]
   1688c:	4293      	cmp	r3, r2
   1688e:	6889      	ldr	r1, [r1, #8]
   16890:	db07      	blt.n	168a2 <uarte_nrfx_fifo_fill+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16892:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16894:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16898:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1689c:	60a3      	str	r3, [r4, #8]
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	return len;
}
   1689e:	4610      	mov	r0, r2
   168a0:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   168a2:	5cf0      	ldrb	r0, [r6, r3]
   168a4:	54c8      	strb	r0, [r1, r3]
	for (int i = 0; i < len; i++) {
   168a6:	3301      	adds	r3, #1
   168a8:	e7ef      	b.n	1688a <uarte_nrfx_fifo_fill+0x28>
		return 0;
   168aa:	461a      	mov	r2, r3
   168ac:	e7f7      	b.n	1689e <uarte_nrfx_fifo_fill+0x3c>

000168ae <uarte_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uarte_nrfx_fifo_read(struct device *dev,
				u8_t *rx_data,
				const int size)
{
   168ae:	b538      	push	{r3, r4, r5, lr}
	return dev->config->config_info;
   168b0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   168b2:	689b      	ldr	r3, [r3, #8]
   168b4:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   168b6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
{
   168ba:	460c      	mov	r4, r1
	int num_rx = 0;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	const struct uarte_nrfx_data *data = get_dev_data(dev);

	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   168bc:	b153      	cbz	r3, 168d4 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   168be:	6885      	ldr	r5, [r0, #8]
		/* Clear the interrupt */
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   168c0:	f44f 7188 	mov.w	r1, #272	; 0x110
   168c4:	4610      	mov	r0, r2
   168c6:	f7ff ff6a 	bl	1679e <nrf_uarte_event_clear>

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)data->rx_data;
   168ca:	7b2b      	ldrb	r3, [r5, #12]
   168cc:	7023      	strb	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168ce:	2001      	movs	r0, #1
   168d0:	6010      	str	r0, [r2, #0]

		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

	return num_rx;
}
   168d2:	bd38      	pop	{r3, r4, r5, pc}
	int num_rx = 0;
   168d4:	4618      	mov	r0, r3
	return num_rx;
   168d6:	e7fc      	b.n	168d2 <uarte_nrfx_fifo_read+0x24>

000168d8 <uarte_nrfx_irq_tx_enable>:
	return dev->config->config_info;
   168d8:	6803      	ldr	r3, [r0, #0]
static void uarte_nrfx_irq_tx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->disable_tx_irq = false;
   168da:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   168dc:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   168de:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   168e0:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   168e2:	2100      	movs	r1, #0
   168e4:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   168e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   168ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   168ee:	4770      	bx	lr

000168f0 <uarte_nrfx_irq_tx_disable>:
/** Interrupt driven transfer disabling function */
static void uarte_nrfx_irq_tx_disable(struct device *dev)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);
	/* TX IRQ will be disabled after current transmission is finished */
	data->int_driven->disable_tx_irq = true;
   168f0:	6883      	ldr	r3, [r0, #8]
   168f2:	689b      	ldr	r3, [r3, #8]
   168f4:	2201      	movs	r2, #1
   168f6:	739a      	strb	r2, [r3, #14]
}
   168f8:	4770      	bx	lr

000168fa <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   168fa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   168fc:	689b      	ldr	r3, [r3, #8]
   168fe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16900:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	/* ENDTX flag is always on so that ISR is called when we enable TX IRQ.
	 * Because of that we have to explicitly check if ENDTX interrupt is
	 * enabled, otherwise this function would always return true no matter
	 * what would be the source of interrupt.
	 */
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   16904:	b118      	cbz	r0, 1690e <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   16906:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1690a:	f3c0 2000 	ubfx	r0, r0, #8, #1
	       nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   1690e:	4770      	bx	lr

00016910 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   16910:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16912:	689b      	ldr	r3, [r3, #8]
   16914:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16916:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
static int uarte_nrfx_irq_rx_ready(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX);
}
   1691a:	3000      	adds	r0, #0
   1691c:	bf18      	it	ne
   1691e:	2001      	movne	r0, #1
   16920:	4770      	bx	lr

00016922 <uarte_nrfx_irq_rx_enable>:
	return dev->config->config_info;
   16922:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16924:	689b      	ldr	r3, [r3, #8]
   16926:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16928:	2210      	movs	r2, #16
   1692a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_rx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   1692e:	4770      	bx	lr

00016930 <uarte_nrfx_irq_rx_disable>:
	return dev->config->config_info;
   16930:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16932:	689b      	ldr	r3, [r3, #8]
   16934:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   16936:	2210      	movs	r2, #16
   16938:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_rx_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   1693c:	4770      	bx	lr

0001693e <uarte_nrfx_irq_err_enable>:
	return dev->config->config_info;
   1693e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16940:	689b      	ldr	r3, [r3, #8]
   16942:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16944:	f44f 7200 	mov.w	r2, #512	; 0x200
   16948:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_err_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   1694c:	4770      	bx	lr

0001694e <uarte_nrfx_irq_err_disable>:
	return dev->config->config_info;
   1694e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16950:	689b      	ldr	r3, [r3, #8]
   16952:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   16954:	f44f 7200 	mov.w	r2, #512	; 0x200
   16958:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_err_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   1695c:	4770      	bx	lr

0001695e <uarte_nrfx_irq_update>:

/** Interrupt driven interrupt update function */
static int uarte_nrfx_irq_update(struct device *dev)
{
	return 1;
}
   1695e:	2001      	movs	r0, #1
   16960:	4770      	bx	lr

00016962 <uarte_nrfx_irq_callback_set>:
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->cb = cb;
   16962:	6883      	ldr	r3, [r0, #8]
   16964:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   16966:	e9c3 1200 	strd	r1, r2, [r3]
}
   1696a:	4770      	bx	lr

0001696c <uarte_nrfx_irq_is_pending>:
{
   1696c:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1696e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   16970:	689b      	ldr	r3, [r3, #8]
   16972:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   16974:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   16978:	05db      	lsls	r3, r3, #23
{
   1697a:	4602      	mov	r2, r0
		||
   1697c:	d405      	bmi.n	1698a <uarte_nrfx_irq_is_pending+0x1e>
   1697e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   16982:	f010 0010 	ands.w	r0, r0, #16
   16986:	d106      	bne.n	16996 <uarte_nrfx_irq_is_pending+0x2a>
}
   16988:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1698a:	f7ff ffb6 	bl	168fa <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1698e:	2800      	cmp	r0, #0
   16990:	d0f5      	beq.n	1697e <uarte_nrfx_irq_is_pending+0x12>
		||
   16992:	2001      	movs	r0, #1
   16994:	e7f8      	b.n	16988 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   16996:	4610      	mov	r0, r2
   16998:	f7ff ffba 	bl	16910 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1699c:	3000      	adds	r0, #0
   1699e:	bf18      	it	ne
   169a0:	2001      	movne	r0, #1
   169a2:	e7f1      	b.n	16988 <uarte_nrfx_irq_is_pending+0x1c>

000169a4 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   169a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169a6:	2200      	movs	r2, #0
   169a8:	4606      	mov	r6, r0
   169aa:	2101      	movs	r1, #1
   169ac:	2002      	movs	r0, #2
   169ae:	f7ee fc33 	bl	5218 <z_irq_priority_set>
   169b2:	2002      	movs	r0, #2
   169b4:	f7ee fbfe 	bl	51b4 <z_arch_irq_enable>
	return dev->config->config_info;
   169b8:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   169ba:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   169bc:	689b      	ldr	r3, [r3, #8]
   169be:	681c      	ldr	r4, [r3, #0]
   169c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   169c4:	2240      	movs	r2, #64	; 0x40
   169c6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   169ca:	2103      	movs	r1, #3
   169cc:	2200      	movs	r2, #0
    p_reg->PSEL.TXD = pseltxd;
   169ce:	2006      	movs	r0, #6
   169d0:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    p_reg->PSEL.RXD = pselrxd;
   169d4:	2708      	movs	r7, #8
   169d6:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSEL.TXD = pseltxd;
   169da:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   169de:	2020      	movs	r0, #32
    p_reg->PSEL.RXD = pselrxd;
   169e0:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514
   169e4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   169e8:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   169ec:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   169f0:	2305      	movs	r3, #5
   169f2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   169f6:	2307      	movs	r3, #7
   169f8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   169fc:	4629      	mov	r1, r5
   169fe:	4630      	mov	r0, r6
   16a00:	f7f9 fc52 	bl	102a8 <uarte_nrfx_configure>
	if (err) {
   16a04:	4602      	mov	r2, r0
   16a06:	b9b0      	cbnz	r0, 16a36 <uarte_0_init+0x92>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   16a08:	f44f 7188 	mov.w	r1, #272	; 0x110
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16a0c:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   16a10:	4620      	mov	r0, r4
   16a12:	f7ff fec4 	bl	1679e <nrf_uarte_event_clear>
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   16a16:	68a9      	ldr	r1, [r5, #8]
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   16a18:	f105 030c 	add.w	r3, r5, #12

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16a1c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16a20:	6889      	ldr	r1, [r1, #8]
    p_reg->RXD.MAXCNT = length;
   16a22:	2301      	movs	r3, #1
   16a24:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a28:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16a2a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16a2e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a32:	60a3      	str	r3, [r4, #8]
   16a34:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   16a36:	4610      	mov	r0, r2
   16a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016a3a <z_arch_system_halt>:
{
   16a3a:	b508      	push	{r3, lr}
	__asm__ volatile(
   16a3c:	f04f 0220 	mov.w	r2, #32
   16a40:	f3ef 8311 	mrs	r3, BASEPRI
   16a44:	f382 8811 	msr	BASEPRI, r2
   16a48:	f3bf 8f6f 	isb	sy
		k_cpu_idle();
   16a4c:	f7ee fb5a 	bl	5104 <k_cpu_idle>
   16a50:	e7fc      	b.n	16a4c <z_arch_system_halt+0x12>

00016a52 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   16a52:	f7fc bcc1 	b.w	133d8 <z_clock_idle_exit>

00016a56 <k_mem_pool_malloc>:
{
   16a56:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16a58:	2404      	movs	r4, #4
   16a5a:	190a      	adds	r2, r1, r4
   16a5c:	d204      	bcs.n	16a68 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   16a5e:	2300      	movs	r3, #0
   16a60:	4669      	mov	r1, sp
   16a62:	f7fa f919 	bl	10c98 <k_mem_pool_alloc>
   16a66:	b110      	cbz	r0, 16a6e <k_mem_pool_malloc+0x18>
		return NULL;
   16a68:	2000      	movs	r0, #0
}
   16a6a:	b002      	add	sp, #8
   16a6c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   16a6e:	4622      	mov	r2, r4
   16a70:	a901      	add	r1, sp, #4
   16a72:	9800      	ldr	r0, [sp, #0]
   16a74:	f7fc fcf6 	bl	13464 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   16a78:	9800      	ldr	r0, [sp, #0]
   16a7a:	3004      	adds	r0, #4
   16a7c:	e7f5      	b.n	16a6a <k_mem_pool_malloc+0x14>

00016a7e <k_free>:
	if (ptr != NULL) {
   16a7e:	b110      	cbz	r0, 16a86 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   16a80:	3804      	subs	r0, #4
   16a82:	f7fa b963 	b.w	10d4c <k_mem_pool_free_id>
}
   16a86:	4770      	bx	lr

00016a88 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   16a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a8c:	4604      	mov	r4, r0
   16a8e:	460f      	mov	r7, r1
   16a90:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16a92:	f100 0508 	add.w	r5, r0, #8
   16a96:	f04f 0220 	mov.w	r2, #32
   16a9a:	f3ef 8611 	mrs	r6, BASEPRI
   16a9e:	f382 8811 	msr	BASEPRI, r2
   16aa2:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   16aa6:	b1db      	cbz	r3, 16ae0 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   16aa8:	2008      	movs	r0, #8
   16aaa:	f7fa f981 	bl	10db0 <z_thread_malloc>
		if (anode == NULL) {
   16aae:	b938      	cbnz	r0, 16ac0 <queue_insert+0x38>
	__asm__ volatile(
   16ab0:	f386 8811 	msr	BASEPRI, r6
   16ab4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   16ab8:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   16abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   16ac0:	2301      	movs	r3, #1
		anode->data = data;
   16ac2:	f8c0 8004 	str.w	r8, [r0, #4]
   16ac6:	6003      	str	r3, [r0, #0]
   16ac8:	6803      	ldr	r3, [r0, #0]
   16aca:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   16ace:	b95f      	cbnz	r7, 16ae8 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   16ad0:	6823      	ldr	r3, [r4, #0]
   16ad2:	4313      	orrs	r3, r2
   16ad4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   16ad6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   16ad8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   16ada:	b973      	cbnz	r3, 16afa <queue_insert+0x72>
	list->tail = node;
   16adc:	6060      	str	r0, [r4, #4]
   16ade:	e00c      	b.n	16afa <queue_insert+0x72>
	node->next_and_flags = flags;
   16ae0:	f8c8 3000 	str.w	r3, [r8]
   16ae4:	4640      	mov	r0, r8
   16ae6:	e7ef      	b.n	16ac8 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16ae8:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   16aea:	f033 0303 	bics.w	r3, r3, #3
   16aee:	d114      	bne.n	16b1a <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   16af0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   16af2:	6862      	ldr	r2, [r4, #4]
   16af4:	b95a      	cbnz	r2, 16b0e <queue_insert+0x86>
	list->head = node;
   16af6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   16afa:	2104      	movs	r1, #4
   16afc:	4628      	mov	r0, r5
   16afe:	f000 fb77 	bl	171f0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   16b02:	4628      	mov	r0, r5
   16b04:	4631      	mov	r1, r6
   16b06:	f000 f8e0 	bl	16cca <z_reschedule>
	return 0;
   16b0a:	2000      	movs	r0, #0
   16b0c:	e7d6      	b.n	16abc <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16b0e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16b10:	f003 0303 	and.w	r3, r3, #3
   16b14:	4303      	orrs	r3, r0
   16b16:	6013      	str	r3, [r2, #0]
   16b18:	e7e0      	b.n	16adc <queue_insert+0x54>
   16b1a:	4313      	orrs	r3, r2
   16b1c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16b1e:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16b20:	f003 0303 	and.w	r3, r3, #3
   16b24:	4318      	orrs	r0, r3
   16b26:	6038      	str	r0, [r7, #0]
   16b28:	e7e7      	b.n	16afa <queue_insert+0x72>

00016b2a <z_queue_node_peek>:
{
   16b2a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   16b2c:	4604      	mov	r4, r0
   16b2e:	b130      	cbz	r0, 16b3e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16b30:	6802      	ldr	r2, [r0, #0]
   16b32:	0793      	lsls	r3, r2, #30
   16b34:	d003      	beq.n	16b3e <z_queue_node_peek+0x14>
		ret = anode->data;
   16b36:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   16b38:	b109      	cbz	r1, 16b3e <z_queue_node_peek+0x14>
			k_free(anode);
   16b3a:	f7ff ffa0 	bl	16a7e <k_free>
}
   16b3e:	4620      	mov	r0, r4
   16b40:	bd10      	pop	{r4, pc}

00016b42 <z_impl_k_queue_init>:
	list->head = NULL;
   16b42:	2300      	movs	r3, #0
	list->tail = NULL;
   16b44:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   16b48:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   16b4c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   16b50:	4770      	bx	lr

00016b52 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   16b52:	460a      	mov	r2, r1
   16b54:	2300      	movs	r3, #0
   16b56:	6841      	ldr	r1, [r0, #4]
   16b58:	f7ff bf96 	b.w	16a88 <queue_insert>

00016b5c <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   16b5c:	2300      	movs	r3, #0
   16b5e:	460a      	mov	r2, r1
   16b60:	4619      	mov	r1, r3
   16b62:	f7ff bf91 	b.w	16a88 <queue_insert>

00016b66 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   16b66:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16b68:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   16b6c:	f04f 0320 	mov.w	r3, #32
   16b70:	f3ef 8611 	mrs	r6, BASEPRI
   16b74:	f383 8811 	msr	BASEPRI, r3
   16b78:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   16b7c:	6843      	ldr	r3, [r0, #4]
   16b7e:	b95b      	cbnz	r3, 16b98 <k_queue_append_list+0x32>
	list->head = node;
   16b80:	6001      	str	r1, [r0, #0]
	list->tail = node;
   16b82:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   16b84:	2104      	movs	r1, #4
   16b86:	4628      	mov	r0, r5
   16b88:	f000 fb32 	bl	171f0 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   16b8c:	4631      	mov	r1, r6
   16b8e:	4628      	mov	r0, r5
}
   16b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   16b94:	f000 b899 	b.w	16cca <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16b98:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16b9a:	f004 0403 	and.w	r4, r4, #3
   16b9e:	4321      	orrs	r1, r4
   16ba0:	6019      	str	r1, [r3, #0]
   16ba2:	e7ee      	b.n	16b82 <k_queue_append_list+0x1c>

00016ba4 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   16ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ba8:	4604      	mov	r4, r0
   16baa:	b086      	sub	sp, #24
   16bac:	460d      	mov	r5, r1
   16bae:	f04f 0320 	mov.w	r3, #32
   16bb2:	f3ef 8711 	mrs	r7, BASEPRI
   16bb6:	f383 8811 	msr	BASEPRI, r3
   16bba:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   16bbe:	6802      	ldr	r2, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16bc0:	b192      	cbz	r2, 16be8 <z_impl_k_queue_get+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16bc2:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16bc4:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16bc6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16bca:	428a      	cmp	r2, r1
	list->head = node;
   16bcc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   16bce:	bf08      	it	eq
   16bd0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16bd2:	2101      	movs	r1, #1
   16bd4:	4610      	mov	r0, r2
   16bd6:	f7ff ffa8 	bl	16b2a <z_queue_node_peek>
	__asm__ volatile(
   16bda:	f387 8811 	msr	BASEPRI, r7
   16bde:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   16be2:	b006      	add	sp, #24
   16be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   16be8:	b929      	cbnz	r1, 16bf6 <z_impl_k_queue_get+0x52>
   16bea:	f387 8811 	msr	BASEPRI, r7
   16bee:	f3bf 8f6f 	isb	sy
			return NULL;
   16bf2:	2000      	movs	r0, #0
   16bf4:	e7f5      	b.n	16be2 <z_impl_k_queue_get+0x3e>
   16bf6:	f387 8811 	msr	BASEPRI, r7
   16bfa:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   16bfe:	2104      	movs	r1, #4
   16c00:	4603      	mov	r3, r0
   16c02:	eb0d 0001 	add.w	r0, sp, r1
   16c06:	f000 fadd 	bl	171c4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   16c0a:	1c6a      	adds	r2, r5, #1
   16c0c:	d002      	beq.n	16c14 <z_impl_k_queue_get+0x70>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   16c0e:	f000 fa3a 	bl	17086 <z_impl_k_uptime_get_32>
   16c12:	4606      	mov	r6, r0
{
   16c14:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   16c16:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   16c18:	1bea      	subs	r2, r5, r7
   16c1a:	f36f 3310 	bfc	r3, #12, #5
   16c1e:	2101      	movs	r1, #1
   16c20:	a801      	add	r0, sp, #4
   16c22:	9304      	str	r3, [sp, #16]
   16c24:	f7fa fdec 	bl	11800 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   16c28:	b108      	cbz	r0, 16c2e <z_impl_k_queue_get+0x8a>
   16c2a:	300b      	adds	r0, #11
   16c2c:	d1e1      	bne.n	16bf2 <z_impl_k_queue_get+0x4e>
	__asm__ volatile(
   16c2e:	f04f 0320 	mov.w	r3, #32
   16c32:	f3ef 8811 	mrs	r8, BASEPRI
   16c36:	f383 8811 	msr	BASEPRI, r3
   16c3a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   16c3e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   16c40:	b138      	cbz	r0, 16c52 <z_impl_k_queue_get+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16c42:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16c44:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16c46:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16c4a:	4290      	cmp	r0, r2
	list->head = node;
   16c4c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   16c4e:	bf08      	it	eq
   16c50:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   16c52:	2101      	movs	r1, #1
   16c54:	f7ff ff69 	bl	16b2a <z_queue_node_peek>
	__asm__ volatile(
   16c58:	f388 8811 	msr	BASEPRI, r8
   16c5c:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   16c60:	2800      	cmp	r0, #0
   16c62:	d1be      	bne.n	16be2 <z_impl_k_queue_get+0x3e>
   16c64:	1c6b      	adds	r3, r5, #1
   16c66:	d0d6      	beq.n	16c16 <z_impl_k_queue_get+0x72>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   16c68:	f000 fa0d 	bl	17086 <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   16c6c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   16c6e:	42bd      	cmp	r5, r7
   16c70:	dad1      	bge.n	16c16 <z_impl_k_queue_get+0x72>
   16c72:	e7be      	b.n	16bf2 <z_impl_k_queue_get+0x4e>

00016c74 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16c74:	7b43      	ldrb	r3, [r0, #13]
   16c76:	06db      	lsls	r3, r3, #27
   16c78:	bf03      	ittte	eq
   16c7a:	6980      	ldreq	r0, [r0, #24]
   16c7c:	fab0 f080 	clzeq	r0, r0
   16c80:	0940      	lsreq	r0, r0, #5
   16c82:	2000      	movne	r0, #0
}
   16c84:	4770      	bx	lr

00016c86 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   16c86:	f990 000e 	ldrsb.w	r0, [r0, #14]
   16c8a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   16c8e:	4298      	cmp	r0, r3
   16c90:	bfac      	ite	ge
   16c92:	2000      	movge	r0, #0
   16c94:	2001      	movlt	r0, #1
   16c96:	4770      	bx	lr

00016c98 <z_unpend_thread_no_timeout>:
{
   16c98:	b538      	push	{r3, r4, r5, lr}
   16c9a:	4604      	mov	r4, r0
	__asm__ volatile(
   16c9c:	f04f 0320 	mov.w	r3, #32
   16ca0:	f3ef 8511 	mrs	r5, BASEPRI
   16ca4:	f383 8811 	msr	BASEPRI, r3
   16ca8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   16cac:	4601      	mov	r1, r0
   16cae:	6880      	ldr	r0, [r0, #8]
   16cb0:	f7fa f8f0 	bl	10e94 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16cb4:	7b63      	ldrb	r3, [r4, #13]
   16cb6:	f023 0302 	bic.w	r3, r3, #2
   16cba:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   16cbc:	f385 8811 	msr	BASEPRI, r5
   16cc0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   16cc4:	2300      	movs	r3, #0
   16cc6:	60a3      	str	r3, [r4, #8]
}
   16cc8:	bd38      	pop	{r3, r4, r5, pc}

00016cca <z_reschedule>:
{
   16cca:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
   16ccc:	b939      	cbnz	r1, 16cde <z_reschedule+0x14>
   16cce:	f7fa f879 	bl	10dc4 <resched.part.15>
	if (resched(key.key)) {
   16cd2:	b120      	cbz	r0, 16cde <z_reschedule+0x14>
   16cd4:	4608      	mov	r0, r1
}
   16cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16cda:	f7ee ba51 	b.w	5180 <__swap>
   16cde:	f381 8811 	msr	BASEPRI, r1
   16ce2:	f3bf 8f6f 	isb	sy
   16ce6:	bd08      	pop	{r3, pc}

00016ce8 <z_reschedule_irqlock>:
{
   16ce8:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
   16cea:	4602      	mov	r2, r0
   16cec:	b938      	cbnz	r0, 16cfe <z_reschedule_irqlock+0x16>
   16cee:	f7fa f869 	bl	10dc4 <resched.part.15>
	if (resched(key)) {
   16cf2:	b120      	cbz	r0, 16cfe <z_reschedule_irqlock+0x16>
   16cf4:	4610      	mov	r0, r2
}
   16cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16cfa:	f7ee ba41 	b.w	5180 <__swap>
   16cfe:	f382 8811 	msr	BASEPRI, r2
   16d02:	f3bf 8f6f 	isb	sy
   16d06:	bd08      	pop	{r3, pc}

00016d08 <z_reschedule_unlocked>:
	__asm__ volatile(
   16d08:	f04f 0320 	mov.w	r3, #32
   16d0c:	f3ef 8011 	mrs	r0, BASEPRI
   16d10:	f383 8811 	msr	BASEPRI, r3
   16d14:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   16d18:	f7ff bfe6 	b.w	16ce8 <z_reschedule_irqlock>

00016d1c <z_unpend_thread>:
{
   16d1c:	b538      	push	{r3, r4, r5, lr}
   16d1e:	4604      	mov	r4, r0
   16d20:	f04f 0320 	mov.w	r3, #32
   16d24:	f3ef 8511 	mrs	r5, BASEPRI
   16d28:	f383 8811 	msr	BASEPRI, r3
   16d2c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   16d30:	4601      	mov	r1, r0
   16d32:	6880      	ldr	r0, [r0, #8]
   16d34:	f7fa f8ae 	bl	10e94 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16d38:	7b63      	ldrb	r3, [r4, #13]
   16d3a:	f023 0302 	bic.w	r3, r3, #2
   16d3e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   16d40:	f385 8811 	msr	BASEPRI, r5
   16d44:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   16d48:	2300      	movs	r3, #0
   16d4a:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16d4c:	f104 0018 	add.w	r0, r4, #24
}
   16d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16d54:	f000 b953 	b.w	16ffe <z_abort_timeout>

00016d58 <z_priq_dumb_best>:
	return list->head == list;
   16d58:	6803      	ldr	r3, [r0, #0]
}
   16d5a:	4298      	cmp	r0, r3
   16d5c:	bf14      	ite	ne
   16d5e:	4618      	movne	r0, r3
   16d60:	2000      	moveq	r0, #0
   16d62:	4770      	bx	lr

00016d64 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   16d64:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   16d68:	b570      	push	{r4, r5, r6, lr}
   16d6a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   16d6c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   16d70:	b1cb      	cbz	r3, 16da6 <z_thread_timeout+0x42>
	__asm__ volatile(
   16d72:	f04f 0320 	mov.w	r3, #32
   16d76:	f3ef 8611 	mrs	r6, BASEPRI
   16d7a:	f383 8811 	msr	BASEPRI, r3
   16d7e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   16d82:	4629      	mov	r1, r5
   16d84:	f850 0c10 	ldr.w	r0, [r0, #-16]
   16d88:	f7fa f884 	bl	10e94 <z_priq_dumb_remove>
   16d8c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   16d90:	f023 0302 	bic.w	r3, r3, #2
   16d94:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   16d98:	f386 8811 	msr	BASEPRI, r6
   16d9c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   16da0:	2300      	movs	r3, #0
   16da2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   16da6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   16daa:	f023 0314 	bic.w	r3, r3, #20
   16dae:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   16db2:	4628      	mov	r0, r5
   16db4:	f7ff ff5e 	bl	16c74 <z_is_thread_ready>
   16db8:	b120      	cbz	r0, 16dc4 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   16dba:	4628      	mov	r0, r5
}
   16dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16dc0:	f7fa b8b8 	b.w	10f34 <z_add_thread_to_ready_q>
   16dc4:	bd70      	pop	{r4, r5, r6, pc}

00016dc6 <z_unpend_first_thread>:
{
   16dc6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16dc8:	f04f 0320 	mov.w	r3, #32
   16dcc:	f3ef 8211 	mrs	r2, BASEPRI
   16dd0:	f383 8811 	msr	BASEPRI, r3
   16dd4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   16dd8:	f7ff ffbe 	bl	16d58 <z_priq_dumb_best>
   16ddc:	4604      	mov	r4, r0
	__asm__ volatile(
   16dde:	f382 8811 	msr	BASEPRI, r2
   16de2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   16de6:	b1c8      	cbz	r0, 16e1c <z_unpend_first_thread+0x56>
	__asm__ volatile(
   16de8:	f04f 0320 	mov.w	r3, #32
   16dec:	f3ef 8511 	mrs	r5, BASEPRI
   16df0:	f383 8811 	msr	BASEPRI, r3
   16df4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   16df8:	4601      	mov	r1, r0
   16dfa:	6880      	ldr	r0, [r0, #8]
   16dfc:	f7fa f84a 	bl	10e94 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16e00:	7b63      	ldrb	r3, [r4, #13]
   16e02:	f023 0302 	bic.w	r3, r3, #2
   16e06:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   16e08:	f385 8811 	msr	BASEPRI, r5
   16e0c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   16e10:	2300      	movs	r3, #0
   16e12:	60a3      	str	r3, [r4, #8]
   16e14:	f104 0018 	add.w	r0, r4, #24
   16e18:	f000 f8f1 	bl	16ffe <z_abort_timeout>
}
   16e1c:	4620      	mov	r0, r4
   16e1e:	bd38      	pop	{r3, r4, r5, pc}

00016e20 <z_unpend_all>:
{
   16e20:	b570      	push	{r4, r5, r6, lr}
   16e22:	4606      	mov	r6, r0
	int need_sched = 0;
   16e24:	2500      	movs	r5, #0
   16e26:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e28:	42a6      	cmp	r6, r4
   16e2a:	d000      	beq.n	16e2e <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   16e2c:	b90c      	cbnz	r4, 16e32 <z_unpend_all+0x12>
}
   16e2e:	4628      	mov	r0, r5
   16e30:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   16e32:	4620      	mov	r0, r4
   16e34:	f7ff ff72 	bl	16d1c <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   16e38:	4620      	mov	r0, r4
   16e3a:	f7ff ff1b 	bl	16c74 <z_is_thread_ready>
		need_sched = 1;
   16e3e:	2501      	movs	r5, #1
   16e40:	2800      	cmp	r0, #0
   16e42:	d0f0      	beq.n	16e26 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   16e44:	4620      	mov	r0, r4
   16e46:	f7fa f875 	bl	10f34 <z_add_thread_to_ready_q>
   16e4a:	e7ec      	b.n	16e26 <z_unpend_all+0x6>

00016e4c <z_impl_k_sleep>:
{
   16e4c:	b538      	push	{r3, r4, r5, lr}
   16e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16e52:	f240 34e7 	movw	r4, #999	; 0x3e7
   16e56:	2500      	movs	r5, #0
   16e58:	fbc1 4500 	smlal	r4, r5, r1, r0
   16e5c:	4620      	mov	r0, r4
   16e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e62:	2300      	movs	r3, #0
   16e64:	4629      	mov	r1, r5
   16e66:	f7e9 fbcb 	bl	600 <__aeabi_ldivmod>
	if (ticks == 0) {
   16e6a:	4604      	mov	r4, r0
   16e6c:	b948      	cbnz	r0, 16e82 <z_impl_k_sleep+0x36>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   16e6e:	f7fa f9eb 	bl	11248 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   16e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e76:	fb84 2302 	smull	r2, r3, r4, r2
   16e7a:	0bd0      	lsrs	r0, r2, #15
}
   16e7c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   16e80:	bd38      	pop	{r3, r4, r5, pc}
   16e82:	f7fa f9a7 	bl	111d4 <z_tick_sleep.part.18>
   16e86:	4604      	mov	r4, r0
   16e88:	e7f3      	b.n	16e72 <z_impl_k_sleep+0x26>

00016e8a <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   16e8a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   16e8e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   16e92:	e9c0 0000 	strd	r0, r0, [r0]
   16e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   16e9a:	4770      	bx	lr

00016e9c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16e9c:	7b43      	ldrb	r3, [r0, #13]
   16e9e:	06db      	lsls	r3, r3, #27
   16ea0:	bf03      	ittte	eq
   16ea2:	6980      	ldreq	r0, [r0, #24]
   16ea4:	fab0 f080 	clzeq	r0, r0
   16ea8:	0940      	lsreq	r0, r0, #5
   16eaa:	2000      	movne	r0, #0
}
   16eac:	4770      	bx	lr

00016eae <z_impl_k_thread_name_set>:
}
   16eae:	f06f 0046 	mvn.w	r0, #70	; 0x46
   16eb2:	4770      	bx	lr

00016eb4 <k_thread_name_get>:
}
   16eb4:	2000      	movs	r0, #0
   16eb6:	4770      	bx	lr

00016eb8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   16eb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   16eba:	b510      	push	{r4, lr}
   16ebc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   16ebe:	b103      	cbz	r3, 16ec2 <z_thread_single_abort+0xa>
		thread->fn_abort();
   16ec0:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   16ec2:	4620      	mov	r0, r4
   16ec4:	f7ff ffea 	bl	16e9c <z_is_thread_ready>
   16ec8:	b138      	cbz	r0, 16eda <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   16eca:	4620      	mov	r0, r4
   16ecc:	f7fa f8e2 	bl	11094 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   16ed0:	7b63      	ldrb	r3, [r4, #13]
   16ed2:	f043 0308 	orr.w	r3, r3, #8
   16ed6:	7363      	strb	r3, [r4, #13]
}
   16ed8:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   16eda:	7b63      	ldrb	r3, [r4, #13]
   16edc:	079b      	lsls	r3, r3, #30
   16ede:	d502      	bpl.n	16ee6 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   16ee0:	4620      	mov	r0, r4
   16ee2:	f7ff fed9 	bl	16c98 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   16ee6:	69a3      	ldr	r3, [r4, #24]
   16ee8:	2b00      	cmp	r3, #0
   16eea:	d0f1      	beq.n	16ed0 <z_thread_single_abort+0x18>
   16eec:	f104 0018 	add.w	r0, r4, #24
   16ef0:	f000 f885 	bl	16ffe <z_abort_timeout>
   16ef4:	e7ec      	b.n	16ed0 <z_thread_single_abort+0x18>

00016ef6 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   16ef6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   16ef8:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   16efa:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   16efc:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   16efe:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   16f00:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   16f04:	4770      	bx	lr

00016f06 <k_work_submit_to_queue>:
{
   16f06:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16f08:	f101 0308 	add.w	r3, r1, #8
   16f0c:	f3bf 8f5b 	dmb	ish
   16f10:	e853 2f00 	ldrex	r2, [r3]
   16f14:	f042 0c01 	orr.w	ip, r2, #1
   16f18:	e843 ce00 	strex	lr, ip, [r3]
   16f1c:	f1be 0f00 	cmp.w	lr, #0
   16f20:	d1f6      	bne.n	16f10 <k_work_submit_to_queue+0xa>
   16f22:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16f26:	07d3      	lsls	r3, r2, #31
   16f28:	d403      	bmi.n	16f32 <k_work_submit_to_queue+0x2c>
}
   16f2a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   16f2e:	f7ff be10 	b.w	16b52 <k_queue_append>
}
   16f32:	f85d fb04 	ldr.w	pc, [sp], #4

00016f36 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   16f36:	f1a0 010c 	sub.w	r1, r0, #12
   16f3a:	6900      	ldr	r0, [r0, #16]
   16f3c:	f7ff bfe3 	b.w	16f06 <k_work_submit_to_queue>

00016f40 <work_cancel>:
{
   16f40:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f42:	f3bf 8f5b 	dmb	ish
   16f46:	6883      	ldr	r3, [r0, #8]
   16f48:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   16f4c:	07db      	lsls	r3, r3, #31
{
   16f4e:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   16f50:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   16f54:	d532      	bpl.n	16fbc <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   16f56:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   16f58:	6813      	ldr	r3, [r2, #0]
   16f5a:	2100      	movs	r1, #0
   16f5c:	b913      	cbnz	r3, 16f64 <work_cancel+0x24>
			return -EINVAL;
   16f5e:	f06f 0015 	mvn.w	r0, #21
}
   16f62:	bd70      	pop	{r4, r5, r6, pc}
   16f64:	429c      	cmp	r4, r3
   16f66:	d124      	bne.n	16fb2 <work_cancel+0x72>
   16f68:	6823      	ldr	r3, [r4, #0]
   16f6a:	6856      	ldr	r6, [r2, #4]
   16f6c:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   16f70:	b9b1      	cbnz	r1, 16fa0 <work_cancel+0x60>
   16f72:	42b4      	cmp	r4, r6
	list->head = node;
   16f74:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   16f76:	d100      	bne.n	16f7a <work_cancel+0x3a>
	list->tail = node;
   16f78:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16f7a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16f7c:	f003 0303 	and.w	r3, r3, #3
   16f80:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   16f82:	2000      	movs	r0, #0
   16f84:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f86:	f3bf 8f5b 	dmb	ish
   16f8a:	e855 3f00 	ldrex	r3, [r5]
   16f8e:	f023 0301 	bic.w	r3, r3, #1
   16f92:	e845 3200 	strex	r2, r3, [r5]
   16f96:	2a00      	cmp	r2, #0
   16f98:	d1f7      	bne.n	16f8a <work_cancel+0x4a>
   16f9a:	f3bf 8f5b 	dmb	ish
   16f9e:	e7e0      	b.n	16f62 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16fa0:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16fa2:	f003 0303 	and.w	r3, r3, #3
   16fa6:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   16fa8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   16faa:	600b      	str	r3, [r1, #0]
	list->tail = node;
   16fac:	bf08      	it	eq
   16fae:	6051      	streq	r1, [r2, #4]
   16fb0:	e7e3      	b.n	16f7a <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16fb2:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   16fb4:	4619      	mov	r1, r3
   16fb6:	f020 0303 	bic.w	r3, r0, #3
   16fba:	e7cf      	b.n	16f5c <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   16fbc:	300c      	adds	r0, #12
   16fbe:	f000 f81e 	bl	16ffe <z_abort_timeout>
   16fc2:	e7de      	b.n	16f82 <work_cancel+0x42>

00016fc4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16fc4:	2300      	movs	r3, #0
   16fc6:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   16fca:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   16fce:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   16fd0:	61c3      	str	r3, [r0, #28]
}
   16fd2:	4770      	bx	lr

00016fd4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   16fd4:	69c3      	ldr	r3, [r0, #28]
{
   16fd6:	b510      	push	{r4, lr}
	if (!work->work_q) {
   16fd8:	b173      	cbz	r3, 16ff8 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   16fda:	f04f 0320 	mov.w	r3, #32
   16fde:	f3ef 8411 	mrs	r4, BASEPRI
   16fe2:	f383 8811 	msr	BASEPRI, r3
   16fe6:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   16fea:	f7ff ffa9 	bl	16f40 <work_cancel>
	__asm__ volatile(
   16fee:	f384 8811 	msr	BASEPRI, r4
   16ff2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   16ff6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   16ff8:	f06f 0015 	mvn.w	r0, #21
   16ffc:	e7fb      	b.n	16ff6 <k_delayed_work_cancel+0x22>

00016ffe <z_abort_timeout>:
{
   16ffe:	b510      	push	{r4, lr}
	__asm__ volatile(
   17000:	f04f 0220 	mov.w	r2, #32
   17004:	f3ef 8411 	mrs	r4, BASEPRI
   17008:	f382 8811 	msr	BASEPRI, r2
   1700c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   17010:	6803      	ldr	r3, [r0, #0]
   17012:	b13b      	cbz	r3, 17024 <z_abort_timeout+0x26>
			remove_timeout(to);
   17014:	f7fa fb0a 	bl	1162c <remove_timeout>
			ret = 0;
   17018:	2000      	movs	r0, #0
	__asm__ volatile(
   1701a:	f384 8811 	msr	BASEPRI, r4
   1701e:	f3bf 8f6f 	isb	sy
}
   17022:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   17024:	f06f 0015 	mvn.w	r0, #21
   17028:	e7f7      	b.n	1701a <z_abort_timeout+0x1c>

0001702a <z_get_next_timeout_expiry>:
{
   1702a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1702c:	f04f 0320 	mov.w	r3, #32
   17030:	f3ef 8411 	mrs	r4, BASEPRI
   17034:	f383 8811 	msr	BASEPRI, r3
   17038:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1703c:	f7fa fb0c 	bl	11658 <next_timeout>
	__asm__ volatile(
   17040:	f384 8811 	msr	BASEPRI, r4
   17044:	f3bf 8f6f 	isb	sy
}
   17048:	bd10      	pop	{r4, pc}

0001704a <z_set_timeout_expiry>:
{
   1704a:	b570      	push	{r4, r5, r6, lr}
   1704c:	4604      	mov	r4, r0
   1704e:	460e      	mov	r6, r1
	__asm__ volatile(
   17050:	f04f 0320 	mov.w	r3, #32
   17054:	f3ef 8511 	mrs	r5, BASEPRI
   17058:	f383 8811 	msr	BASEPRI, r3
   1705c:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   17060:	f7fa fafa 	bl	11658 <next_timeout>
		if (sooner && !imminent) {
   17064:	42a0      	cmp	r0, r4
   17066:	dd05      	ble.n	17074 <z_set_timeout_expiry+0x2a>
   17068:	2801      	cmp	r0, #1
   1706a:	dd03      	ble.n	17074 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1706c:	4631      	mov	r1, r6
   1706e:	4620      	mov	r0, r4
   17070:	f7ed fedc 	bl	4e2c <z_clock_set_timeout>
	__asm__ volatile(
   17074:	f385 8811 	msr	BASEPRI, r5
   17078:	f3bf 8f6f 	isb	sy
}
   1707c:	bd70      	pop	{r4, r5, r6, pc}

0001707e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1707e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   17080:	f7fa fba0 	bl	117c4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   17084:	bd08      	pop	{r3, pc}

00017086 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   17086:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   17088:	f7ff fff9 	bl	1707e <z_tick_get_32>
   1708c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17090:	fba0 2302 	umull	r2, r3, r0, r2
   17094:	0bd0      	lsrs	r0, r2, #15
}
   17096:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1709a:	bd08      	pop	{r3, pc}

0001709c <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   1709c:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   1709e:	f7fa fb91 	bl	117c4 <z_tick_get>
   170a2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   170a6:	fba0 2304 	umull	r2, r3, r0, r4
   170aa:	fb04 3301 	mla	r3, r4, r1, r3
   170ae:	0bd0      	lsrs	r0, r2, #15
}
   170b0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   170b4:	0bd9      	lsrs	r1, r3, #15
   170b6:	bd10      	pop	{r4, pc}

000170b8 <clear_event_registrations>:
{
   170b8:	2314      	movs	r3, #20
   170ba:	b570      	push	{r4, r5, r6, lr}
   170bc:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   170c0:	2400      	movs	r4, #0
   170c2:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   170c4:	2900      	cmp	r1, #0
   170c6:	da00      	bge.n	170ca <clear_event_registrations+0x12>
}
   170c8:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   170ca:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   170cc:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   170ce:	f003 030f 	and.w	r3, r3, #15
   170d2:	2b04      	cmp	r3, #4
   170d4:	d80c      	bhi.n	170f0 <clear_event_registrations+0x38>
   170d6:	fa06 f303 	lsl.w	r3, r6, r3
   170da:	f013 0f16 	tst.w	r3, #22
   170de:	d007      	beq.n	170f0 <clear_event_registrations+0x38>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   170e0:	6805      	ldr	r5, [r0, #0]
   170e2:	b12d      	cbz	r5, 170f0 <clear_event_registrations+0x38>
	node->prev->next = node->next;
   170e4:	6843      	ldr	r3, [r0, #4]
   170e6:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   170e8:	6805      	ldr	r5, [r0, #0]
   170ea:	606b      	str	r3, [r5, #4]
	node->prev = NULL;
   170ec:	e9c0 4400 	strd	r4, r4, [r0]
   170f0:	f382 8811 	msr	BASEPRI, r2
   170f4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   170f8:	f04f 0320 	mov.w	r3, #32
   170fc:	f3ef 8211 	mrs	r2, BASEPRI
   17100:	f383 8811 	msr	BASEPRI, r3
   17104:	f3bf 8f6f 	isb	sy
	for (; last_registered >= 0; last_registered--) {
   17108:	3901      	subs	r1, #1
   1710a:	3814      	subs	r0, #20
   1710c:	e7da      	b.n	170c4 <clear_event_registrations+0xc>

0001710e <signal_poll_event>:
	if (!event->poller) {
   1710e:	6883      	ldr	r3, [r0, #8]
{
   17110:	b570      	push	{r4, r5, r6, lr}
   17112:	4605      	mov	r5, r0
   17114:	460e      	mov	r6, r1
	if (!event->poller) {
   17116:	b1cb      	cbz	r3, 1714c <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   17118:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   1711a:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   1711c:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1711e:	7b63      	ldrb	r3, [r4, #13]
   17120:	079a      	lsls	r2, r3, #30
   17122:	d513      	bpl.n	1714c <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   17124:	6a23      	ldr	r3, [r4, #32]
   17126:	3302      	adds	r3, #2
   17128:	d01a      	beq.n	17160 <signal_poll_event+0x52>
	z_unpend_thread(thread);
   1712a:	4620      	mov	r0, r4
   1712c:	f7ff fdf6 	bl	16d1c <z_unpend_thread>
	z_set_thread_return_value(thread,
   17130:	2e08      	cmp	r6, #8
   17132:	bf0c      	ite	eq
   17134:	f06f 0303 	mvneq.w	r3, #3
   17138:	2300      	movne	r3, #0
   1713a:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1713c:	7b63      	ldrb	r3, [r4, #13]
   1713e:	06db      	lsls	r3, r3, #27
   17140:	d104      	bne.n	1714c <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   17142:	69a3      	ldr	r3, [r4, #24]
   17144:	b913      	cbnz	r3, 1714c <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   17146:	4620      	mov	r0, r4
   17148:	f7f9 fef4 	bl	10f34 <z_add_thread_to_ready_q>
	event->state |= state;
   1714c:	68eb      	ldr	r3, [r5, #12]
   1714e:	f3c3 3204 	ubfx	r2, r3, #12, #5
   17152:	4316      	orrs	r6, r2
	event->poller = NULL;
   17154:	2000      	movs	r0, #0
	event->state |= state;
   17156:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1715a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1715c:	60eb      	str	r3, [r5, #12]
}
   1715e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   17160:	f06f 000a 	mvn.w	r0, #10
   17164:	e7fb      	b.n	1715e <signal_poll_event+0x50>

00017166 <add_event>:
{
   17166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17168:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1716a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1716e:	4290      	cmp	r0, r2
   17170:	4604      	mov	r4, r0
   17172:	460d      	mov	r5, r1
   17174:	d106      	bne.n	17184 <add_event+0x1e>
	node->prev = list->tail;
   17176:	6863      	ldr	r3, [r4, #4]
   17178:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1717a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1717c:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1717e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17180:	6065      	str	r5, [r4, #4]
   17182:	e019      	b.n	171b8 <add_event+0x52>
	if ((pending == NULL) ||
   17184:	2b00      	cmp	r3, #0
   17186:	d0f6      	beq.n	17176 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   17188:	689b      	ldr	r3, [r3, #8]
   1718a:	6839      	ldr	r1, [r7, #0]
   1718c:	6818      	ldr	r0, [r3, #0]
   1718e:	f7ff fd7a 	bl	16c86 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   17192:	2800      	cmp	r0, #0
   17194:	d1ef      	bne.n	17176 <add_event+0x10>
	return list->head == list;
   17196:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17198:	42b4      	cmp	r4, r6
   1719a:	d0ec      	beq.n	17176 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1719c:	2e00      	cmp	r6, #0
   1719e:	d0ea      	beq.n	17176 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   171a0:	68b3      	ldr	r3, [r6, #8]
   171a2:	6838      	ldr	r0, [r7, #0]
   171a4:	6819      	ldr	r1, [r3, #0]
   171a6:	f7ff fd6e 	bl	16c86 <z_is_t1_higher_prio_than_t2>
   171aa:	b130      	cbz	r0, 171ba <add_event+0x54>
	node->prev = successor->prev;
   171ac:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   171ae:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   171b2:	6873      	ldr	r3, [r6, #4]
   171b4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   171b6:	6075      	str	r5, [r6, #4]
}
   171b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   171ba:	6863      	ldr	r3, [r4, #4]
   171bc:	429e      	cmp	r6, r3
   171be:	d0da      	beq.n	17176 <add_event+0x10>
   171c0:	6836      	ldr	r6, [r6, #0]
   171c2:	e7eb      	b.n	1719c <add_event+0x36>

000171c4 <k_poll_event_init>:
{
   171c4:	b530      	push	{r4, r5, lr}
	event->type = type;
   171c6:	7b45      	ldrb	r5, [r0, #13]
	event->obj = obj;
   171c8:	6103      	str	r3, [r0, #16]
	event->type = type;
   171ca:	f361 0503 	bfi	r5, r1, #0, #4
   171ce:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   171d0:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   171d2:	2400      	movs	r4, #0
	event->state = K_POLL_STATE_NOT_READY;
   171d4:	f364 3110 	bfi	r1, r4, #12, #5
   171d8:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   171da:	f3c1 4107 	ubfx	r1, r1, #16, #8
   171de:	f362 0141 	bfi	r1, r2, #1, #1
   171e2:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   171e4:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   171e6:	6084      	str	r4, [r0, #8]
	event->unused = 0U;
   171e8:	f364 028f 	bfi	r2, r4, #2, #14
   171ec:	81c2      	strh	r2, [r0, #14]
}
   171ee:	bd30      	pop	{r4, r5, pc}

000171f0 <z_handle_obj_poll_events>:
	return list->head == list;
   171f0:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   171f2:	4298      	cmp	r0, r3
   171f4:	d00a      	beq.n	1720c <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   171f6:	e9d3 0200 	ldrd	r0, r2, [r3]
   171fa:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   171fc:	6818      	ldr	r0, [r3, #0]
   171fe:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   17200:	2200      	movs	r2, #0
	node->prev = NULL;
   17202:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   17206:	4618      	mov	r0, r3
   17208:	f7ff bf81 	b.w	1710e <signal_poll_event>
}
   1720c:	4770      	bx	lr

0001720e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1720e:	4770      	bx	lr
